const storeData = {"navState":{"isDirty":false,"dataLoaded":true,"contentData":{},"searchTerm":"","crumbs":[],"menu":[{"path":"/","urlLabel":"","visible":true,"label":"Docs Home","menuType":"page-noedit","linkLabel":"Docs Home","type":"folder","id":"root","children":["52db442320b34fc1","7eebd4b20adcaecc","2b3bb68a78e65fe7","32bc2e8f667c28b7","8510bec84f8f5ab3","5190c7bdac5c1b1c","fb2d7be451025509","54a27bdcea66a8b2"]},{"path":"/TweenLite","urlLabel":"TweenLite","visible":true,"label":"TweenLite","inherits":"11f92408d2609969","menuType":"dtClass","linkLabel":"TweenLite","type":"folder","id":"52db442320b34fc1","displaytype":"dtClass","children":["bb945f1b5836a3fa","ca5b23dca997e6d1","20fbd8766d4c9807"],"quantities":{"dtMethods":1,"dtProperties":1,"total":45,"dtProperty":9,"dtConstructors":1,"dtConstructor":1,"page":42,"dtMethod":32,"group":3},"quantity":45,"menuChildren":[{"urlLabel":"Constructor","visible":true,"label":"Constructor","menuType":"dtConstructors","linkLabel":"Constructor","type":"group","id":"bb945f1b5836a3fa","displaytype":"dtConstructors","children":["7142cfd298705364"]},{"urlLabel":"Properties","visible":true,"label":"Properties","menuType":"dtProperties","linkLabel":"Properties","type":"group","id":"ca5b23dca997e6d1","displaytype":"dtProperties","children":["fd0b8307fd5118c6-inherited-52db442320b34fc1","4dd34ae7cc4df452","e7f6ebafb382a8cc","b030a6a5f8623c77","00b17703b89cfb4b","d502fa3af383145d","823bbb81bdf15585","4e8b086407f4fb2c-inherited-52db442320b34fc1","1d9a881066fb186e-inherited-52db442320b34fc1"]},{"urlLabel":"Methods","visible":true,"label":"Methods","menuType":"dtMethods","linkLabel":"Methods","type":"group","id":"20fbd8766d4c9807","displaytype":"dtMethods","children":["f35957809b52dfd2-inherited-52db442320b34fc1","6cbc76eab73a1780","560295553a39dad1-inherited-52db442320b34fc1","ac42870b8c3fb694-inherited-52db442320b34fc1","7e0c6f182a9fa2db-inherited-52db442320b34fc1","0f1a0aaf90af74b1","ed553a5b6c412a65","2732aa6fd1292931","0c45afba50900d5a","cdfc78d10c0d9317-inherited-52db442320b34fc1","9b20c27ddbcaa297-inherited-52db442320b34fc1","64346e163a42da5f","e4776d5c407778cf","01cb3301c2555b06","96fc1d850d4a51e6-inherited-52db442320b34fc1","15ad1f9068bff51f-inherited-52db442320b34fc1","a8b5fe1cfbc57740-inherited-52db442320b34fc1","7bb4870bba9c525d-inherited-52db442320b34fc1","a03b81c2162c5416","db54f293b92ce54b-inherited-52db442320b34fc1","d185bba975b21413-inherited-52db442320b34fc1","652fc9fd0bc84808-inherited-52db442320b34fc1","d708d783bf75b7f9-inherited-52db442320b34fc1","b6d7efcbb07722e0-inherited-52db442320b34fc1","f9978ca8a660abe5","e646e51de97ab747-inherited-52db442320b34fc1","9c2d24c127d9ebc7-inherited-52db442320b34fc1","7334cca40467aa44-inherited-52db442320b34fc1","6c797b009a65972a","8ecf8286d1667a67-inherited-52db442320b34fc1","43a03109965e7d4e-inherited-52db442320b34fc1","37d58fccb2afe6a1-inherited-52db442320b34fc1"]}]},{"path":"/TweenMax","urlLabel":"TweenMax","visible":true,"label":"TweenMax","inherits":"52db442320b34fc1","menuType":"dtClass","linkLabel":"TweenMax","type":"folder","id":"7eebd4b20adcaecc","displaytype":"dtClass","children":["0259e6a57bbc19a8","686dcaac6fb0f74d","0aeeb28b67105bbf"],"quantities":{"dtMethods":1,"dtProperties":1,"total":59,"dtProperty":9,"dtConstructors":1,"dtConstructor":1,"page":56,"dtMethod":46,"group":3},"quantity":59,"menuChildren":[{"urlLabel":"Constructor","visible":true,"label":"Constructor","menuType":"dtConstructors","linkLabel":"Constructor","type":"group","id":"0259e6a57bbc19a8","displaytype":"dtConstructors","children":["0443695353538039"]},{"urlLabel":"Properties","visible":true,"inhChHidden":["4dd34ae7cc4df452","e7f6ebafb382a8cc","b030a6a5f8623c77"],"label":"Properties","menuType":"dtProperties","linkLabel":"Properties","type":"group","id":"686dcaac6fb0f74d","displaytype":"dtProperties","children":["fd0b8307fd5118c6-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","4dd34ae7cc4df452-inherited-7eebd4b20adcaecc","e7f6ebafb382a8cc-inherited-7eebd4b20adcaecc","b030a6a5f8623c77-inherited-7eebd4b20adcaecc","00b17703b89cfb4b-inherited-7eebd4b20adcaecc","d502fa3af383145d-inherited-7eebd4b20adcaecc","0840452593dd9b59","4e8b086407f4fb2c-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","1d9a881066fb186e-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"]},{"urlLabel":"Methods","visible":true,"inhChHidden":["a03b81c2162c5416"],"label":"Methods","menuType":"dtMethods","linkLabel":"Methods","type":"group","id":"0aeeb28b67105bbf","displaytype":"dtMethods","children":["f35957809b52dfd2-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","6f77f2839c53472f","560295553a39dad1-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","ac42870b8c3fb694-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","7e0c6f182a9fa2db-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","0d0b160bf173886b","8ecc7c0172b03069","c799d800af33aa6a","c100119126b4d17b","9e2dfbcd4b851bdb","14102df5f069df3e","cdfc78d10c0d9317-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","748acc1d9c528534","9b20c27ddbcaa297-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","e191a597bfccb4b6","109ea284ffe68190","0b7f1e0ec646b3a7","5520cb7c254b2de6","01cb3301c2555b06-inherited-7eebd4b20adcaecc","96fc1d850d4a51e6-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","3d2718e5d3fe06be","15ad1f9068bff51f-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","a8b5fe1cfbc57740-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","9555ceafd00d82bd","a03b81c2162c5416-inherited-7eebd4b20adcaecc","1b0dafbb2fcc15bd","86085ac31cb14a44","db54f293b92ce54b-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","d185bba975b21413-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","1989613671fc0074","652fc9fd0bc84808-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","d708d783bf75b7f9-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","b6d7efcbb07722e0-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","04a1993cebf0c4d6","7e006fa58303b1cc","edb1ee784263b5b1","65d8dcc6c6cabcbd","e646e51de97ab747-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","22d710f5e23c3b66","7334cca40467aa44-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","a52aa2ad91d4ef68","8b14bde95693efa6","3783d0a065069766","37d58fccb2afe6a1-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","149cf67b4ca81773","2810d7a52bbf48a8"]}]},{"path":"/TimelineLite","urlLabel":"TimelineLite","visible":true,"label":"TimelineLite","inherits":"211a71fb195b2819","menuType":"dtClass","linkLabel":"TimelineLite","type":"folder","id":"2b3bb68a78e65fe7","displaytype":"dtClass","children":["74c21fb76dec0658","3853b8e39e36e027","da337dfc2601e110"],"quantities":{"dtMethods":1,"dtProperties":1,"total":53,"dtProperty":5,"dtConstructors":1,"dtConstructor":1,"page":50,"dtMethod":44,"group":3},"quantity":53,"menuChildren":[{"urlLabel":"Constructor","visible":true,"label":"Constructor","menuType":"dtConstructors","linkLabel":"Constructor","type":"group","id":"74c21fb76dec0658","displaytype":"dtConstructors","children":["cc4d1686bf20a1c4"]},{"urlLabel":"Properties","visible":true,"inhChHidden":["1d9a881066fb186e-inherited-211a71fb195b2819"],"label":"Properties","menuType":"dtProperties","linkLabel":"Properties","type":"group","id":"3853b8e39e36e027","displaytype":"dtProperties","children":["a8583ff10d4f8c14-inherited-2b3bb68a78e65fe7","fd0b8307fd5118c6-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","180106cf49a52891-inherited-2b3bb68a78e65fe7","4e8b086407f4fb2c-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","1d9a881066fb186e-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"]},{"urlLabel":"Methods","inhChShown":["ac42870b8c3fb694-inherited-211a71fb195b2819"],"visible":true,"label":"Methods","menuType":"dtMethods","linkLabel":"Methods","type":"group","id":"da337dfc2601e110","displaytype":"dtMethods","children":["fb3630bc7fd65dd2","a3d5652d51086bea","b15c1fc9e7c9418c","d19482f5b1cfd929","55a9f099bdcda14c","f35957809b52dfd2-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","e949a7537e48535a","ac42870b8c3fb694-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","7e0c6f182a9fa2db-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","3ba39b4db90dc9ba","078881c6d928c5cf","ab22a377935cb849","5103496262822a61","6428cc1a8c9024c6","708b2590f2979899","dd5fed4d3955bfea","cdfc78d10c0d9317-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","9b20c27ddbcaa297-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","96fc1d850d4a51e6-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","15ad1f9068bff51f-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","a8b5fe1cfbc57740-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","7bb4870bba9c525d-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","d4204b8f13ae9009","d49e46f2e8270a08","e124272392141d4f","0891734c6084b33c-inherited-2b3bb68a78e65fe7","db54f293b92ce54b-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","d185bba975b21413-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","652fc9fd0bc84808-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","d708d783bf75b7f9-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","0fc1a8aeb91b3bc5","fd9dbda283638161","021452ff672b0275","c67479a40fbed683","f125e9affad597cc","85fd7bd3a68921cd","e646e51de97ab747-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","9c2d24c127d9ebc7-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","7334cca40467aa44-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","dd5daf294b523c5b","e6e77ed616cdbcd0","43a03109965e7d4e-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","37d58fccb2afe6a1-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","d3b7ad527e13b7fa"]}]},{"path":"/TimelineMax","urlLabel":"TimelineMax","visible":true,"label":"TimelineMax","inherits":"2b3bb68a78e65fe7","menuType":"dtClass","linkLabel":"TimelineMax","type":"folder","id":"32bc2e8f667c28b7","displaytype":"dtClass","children":["68f0517fc3271c23","66b2dd5137a72397","f0dcc0b2d2c8c8e7"],"quantities":{"dtMethods":1,"dtProperties":1,"total":66,"dtProperty":5,"dtConstructors":1,"dtConstructor":1,"page":63,"dtMethod":57,"group":3},"quantity":66,"menuChildren":[{"urlLabel":"Constructor","visible":true,"label":"Constructor","menuType":"dtConstructors","linkLabel":"Constructor","type":"group","id":"68f0517fc3271c23","displaytype":"dtConstructors","children":["7d83cb2ee0afc5e8"]},{"urlLabel":"Properties","visible":true,"label":"Properties","menuType":"dtProperties","linkLabel":"Properties","type":"group","id":"66b2dd5137a72397","displaytype":"dtProperties","children":["a8583ff10d4f8c14-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","fd0b8307fd5118c6-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","180106cf49a52891-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","4e8b086407f4fb2c-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","1d9a881066fb186e-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"]},{"urlLabel":"Methods","visible":true,"inhChHidden":["0891734c6084b33c-inherited-2b3bb68a78e65fe7"],"label":"Methods","menuType":"dtMethods","linkLabel":"Methods","type":"group","id":"f0dcc0b2d2c8c8e7","displaytype":"dtMethods","children":["fb3630bc7fd65dd2-inherited-32bc2e8f667c28b7","bec60f6cd60ff057","a3d5652d51086bea-inherited-32bc2e8f667c28b7","b15c1fc9e7c9418c-inherited-32bc2e8f667c28b7","d19482f5b1cfd929-inherited-32bc2e8f667c28b7","55a9f099bdcda14c-inherited-32bc2e8f667c28b7","6265da364503c653","f35957809b52dfd2-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","e949a7537e48535a-inherited-32bc2e8f667c28b7","ac42870b8c3fb694-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","7e0c6f182a9fa2db-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","3ba39b4db90dc9ba-inherited-32bc2e8f667c28b7","078881c6d928c5cf-inherited-32bc2e8f667c28b7","ab22a377935cb849-inherited-32bc2e8f667c28b7","10d088592b8a6983","5103496262822a61-inherited-32bc2e8f667c28b7","05f5280e21743f35","38ba67959f173bc5","22c0e0776a5fa894","6428cc1a8c9024c6-inherited-32bc2e8f667c28b7","708b2590f2979899-inherited-32bc2e8f667c28b7","7ae217fd46c941b8","cdfc78d10c0d9317-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","9b20c27ddbcaa297-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","96fc1d850d4a51e6-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","15ad1f9068bff51f-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","a8b5fe1cfbc57740-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","e87195ea10d96698","d4204b8f13ae9009-inherited-32bc2e8f667c28b7","d49e46f2e8270a08-inherited-32bc2e8f667c28b7","ba03755004151a9a","e124272392141d4f-inherited-32bc2e8f667c28b7","58e2f543b70f3422","0891734c6084b33c-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","01b34bc2697e9225","99a791cc5bc34c40","db54f293b92ce54b-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","d185bba975b21413-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","652fc9fd0bc84808-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","d708d783bf75b7f9-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","0fc1a8aeb91b3bc5-inherited-32bc2e8f667c28b7","fd9dbda283638161-inherited-32bc2e8f667c28b7","021452ff672b0275-inherited-32bc2e8f667c28b7","c67479a40fbed683-inherited-32bc2e8f667c28b7","f125e9affad597cc-inherited-32bc2e8f667c28b7","85fd7bd3a68921cd-inherited-32bc2e8f667c28b7","e646e51de97ab747-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","7b988d27511ca604","7334cca40467aa44-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","dd5daf294b523c5b-inherited-32bc2e8f667c28b7","60dac61dd3210643","5f4508325a2e0985","37d58fccb2afe6a1-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","a5a0e939a1e15082","7be1802b524c8f27","d3b7ad527e13b7fa-inherited-32bc2e8f667c28b7","d2c60e4c72147852"]}]},{"path":"/Core","urlLabel":"Core","visible":true,"label":"Core","menuType":"folder","linkLabel":"Core","type":"folder","id":"8510bec84f8f5ab3","children":["11f92408d2609969","211a71fb195b2819"],"quantities":{"dtMethods":2,"dtProperties":2,"total":64,"dtProperty":8,"dtClass":2,"dtConstructors":2,"dtConstructor":2,"folder":2,"page":56,"dtMethod":46,"group":6},"quantity":64,"menuChildren":[{"path":"/Core/Animation","urlLabel":"Animation","visible":true,"label":"Animation","menuType":"dtClass","linkLabel":"Animation","type":"folder","id":"11f92408d2609969","displaytype":"dtClass","children":["b6e1b50e6cda70f9","97f627b1ea0da433","ce029f1efc85be43"]},{"path":"/Core/SimpleTimeline","urlLabel":"SimpleTimeline","visible":true,"label":"SimpleTimeline","inherits":"11f92408d2609969","menuType":"dtClass","linkLabel":"SimpleTimeline","type":"folder","id":"211a71fb195b2819","displaytype":"dtClass","children":["15e4767347b7b513","e8ba7a11a42bb184","e41b42f226a99048"]}]},{"path":"/Easing","urlLabel":"Easing","visible":true,"label":"Easing","menuType":"folder","linkLabel":"Easing","type":"folder","id":"5190c7bdac5c1b1c","children":["ea91e06b445f4ac7","aa9969ee39687902","723964a4fd3ac4af","cb31e7d72b0e7b00","19160c04837df0bb","1315d24279922963","681f9501cd7f99b3","ced2d2c7aaaa4d5f","09af4edb7491fd9e","f7f7759fe81fd22f","fe7727d7fa29b16b","0c466d8095583e88","d3b047e7bd016acd","22c860af2d1dbbcb","059d5eab36bbdd55","f8a990bb64a897ea","c5344f5dcfcf49a3","91943bd05ded63bb","3eab3f172dae806f","424d2c8144aca82b","07392828b060a423","c2327a2ee1c89b0c","57d33bbbf0c4c2c2","830525841e3dd3cb","0879a53eb4051ccf"],"quantities":{"dtMethods":25,"dtProperties":25,"total":181,"dtProperty":55,"dtClass":25,"dtConstructors":25,"dtConstructor":5,"folder":25,"page":81,"dtMethod":21,"group":75},"quantity":181,"menuChildren":[{"path":"/Easing/Back","urlLabel":"Back","visible":true,"label":"Back","menuType":"dtClass","linkLabel":"Back","type":"folder","id":"ea91e06b445f4ac7","displaytype":"dtClass","children":["dcf4605fe174e7e9","b0b5d2a90d50df62","8fed06c936bee4ce"]},{"path":"/Easing/Bounce","urlLabel":"Bounce","visible":true,"label":"Bounce","menuType":"dtClass","linkLabel":"Bounce","type":"folder","id":"aa9969ee39687902","displaytype":"dtClass","children":["b2b27e1c27b569e3","6c86cb85353bf463","24d394c42b9a9197"]},{"path":"/Easing/Circ","urlLabel":"Circ","visible":true,"label":"Circ","menuType":"dtClass","linkLabel":"Circ","type":"folder","id":"723964a4fd3ac4af","displaytype":"dtClass","children":["bc85ce2321f8a2ba","0428fae2e18a9613","d2d91cf2ebadcfaf"]},{"path":"/Easing/Cubic","urlLabel":"Cubic","visible":true,"label":"Cubic","menuType":"dtClass","linkLabel":"Cubic","type":"folder","id":"cb31e7d72b0e7b00","displaytype":"dtClass","children":["79bc608eee70487f","b460b4edfd115a43","7a0d343c67932ddb"]},{"path":"/Easing/CustomBounce","urlLabel":"CustomBounce","visible":true,"label":"CustomBounce","inherits":"1315d24279922963","menuType":"dtClass","linkLabel":"CustomBounce","type":"folder","id":"19160c04837df0bb","displaytype":"dtClass","children":["7e6f9f4cc2e01616","51c3b5a2632ca427","c3d534d675a3afa8"]},{"path":"/Easing/CustomEase","urlLabel":"CustomEase","visible":true,"label":"CustomEase","inherits":"ced2d2c7aaaa4d5f","menuType":"dtClass","linkLabel":"CustomEase","type":"folder","id":"1315d24279922963","displaytype":"dtClass","children":["52e84092d1d9c501","18c206e3bcd758c3","1582ea86afd872d2"]},{"path":"/Easing/CustomWiggle","urlLabel":"CustomWiggle","visible":true,"label":"CustomWiggle","inherits":"1315d24279922963","menuType":"dtClass","linkLabel":"CustomWiggle","type":"folder","id":"681f9501cd7f99b3","displaytype":"dtClass","children":["20b7b61b00d9fd0d","4c4e0dc6ec82e9d2","e2915059f396caf2"]},{"path":"/Easing/Ease","urlLabel":"Ease","visible":true,"label":"Ease","menuType":"dtClass","linkLabel":"Ease","type":"folder","id":"ced2d2c7aaaa4d5f","displaytype":"dtClass","children":["1ab5d820e53d55e7","263a751df9953a1b","1041a5c1cc29d27e"]},{"path":"/Easing/EaseLookup","urlLabel":"EaseLookup","visible":true,"label":"EaseLookup","menuType":"dtClass","linkLabel":"EaseLookup","type":"folder","id":"09af4edb7491fd9e","displaytype":"dtClass","children":["14c14e56fe4cfb7f","fba2505e727039ff","3ee5521bddabf8b1"]},{"path":"/Easing/Elastic","urlLabel":"Elastic","visible":true,"label":"Elastic","menuType":"dtClass","linkLabel":"Elastic","type":"folder","id":"f7f7759fe81fd22f","displaytype":"dtClass","children":["594254e8876faff3","7a55f0c80975d390","e6d83093f7f5a207"]},{"path":"/Easing/Expo","urlLabel":"Expo","visible":true,"label":"Expo","menuType":"dtClass","linkLabel":"Expo","type":"folder","id":"fe7727d7fa29b16b","displaytype":"dtClass","children":["7bc9a119e72d6fdc","4211b5df656e89c0","51ce7cb6dea97bce"]},{"path":"/Easing/Linear","urlLabel":"Linear","visible":true,"label":"Linear","inherits":"ced2d2c7aaaa4d5f","menuType":"dtClass","linkLabel":"Linear","type":"folder","id":"0c466d8095583e88","displaytype":"dtClass","children":["3b5b7725303db7cc","7d48300a1a10e0e5","d5106dc51b7f5d34"]},{"path":"/Easing/Power0","urlLabel":"Power0","visible":true,"label":"Power0","menuType":"dtClass","linkLabel":"Power0","type":"folder","id":"d3b047e7bd016acd","displaytype":"dtClass","children":["adaa77111c49dea7","aa580d04616c5c64","47fb9392ebc1d108"]},{"path":"/Easing/Power1","urlLabel":"Power1","visible":true,"label":"Power1","menuType":"dtClass","linkLabel":"Power1","type":"folder","id":"22c860af2d1dbbcb","displaytype":"dtClass","children":["50d2c59c532a8f8b","75a392dd00c75d1c","fd83a6199b3fccbe"]},{"path":"/Easing/Power2","urlLabel":"Power2","visible":true,"label":"Power2","menuType":"dtClass","linkLabel":"Power2","type":"folder","id":"059d5eab36bbdd55","displaytype":"dtClass","children":["26a8027fc1db0737","f51d07c5ce1f37bf","b1a85937ab300f11"]},{"path":"/Easing/Power3","urlLabel":"Power3","visible":true,"label":"Power3","menuType":"dtClass","linkLabel":"Power3","type":"folder","id":"f8a990bb64a897ea","displaytype":"dtClass","children":["a6a411741b3de888","bb348eccd434b5a8","0f4d525c21fd9234"]},{"path":"/Easing/Power4","urlLabel":"Power4","visible":true,"label":"Power4","menuType":"dtClass","linkLabel":"Power4","type":"folder","id":"c5344f5dcfcf49a3","displaytype":"dtClass","children":["f24fb3a2d57f8f6b","ed51b120abaec5c2","586fe532b56c055a"]},{"path":"/Easing/Quad","urlLabel":"Quad","visible":true,"label":"Quad","menuType":"dtClass","linkLabel":"Quad","type":"folder","id":"91943bd05ded63bb","displaytype":"dtClass","children":["30e0bb194a03450a","b348e04893b18cee","e51dec40a03460d5"]},{"path":"/Easing/Quart","urlLabel":"Quart","visible":true,"label":"Quart","menuType":"dtClass","linkLabel":"Quart","type":"folder","id":"3eab3f172dae806f","displaytype":"dtClass","children":["4254772d898fcd15","68bdad17bf6c2eb6","80b4c322700505f4"]},{"path":"/Easing/Quint","urlLabel":"Quint","visible":true,"label":"Quint","menuType":"dtClass","linkLabel":"Quint","type":"folder","id":"424d2c8144aca82b","displaytype":"dtClass","children":["2516648f9d1556d8","b4b8b312f51dcf31","5a50595a7582d2ba"]},{"path":"/Easing/Sine","urlLabel":"Sine","visible":true,"label":"Sine","menuType":"dtClass","linkLabel":"Sine","type":"folder","id":"07392828b060a423","displaytype":"dtClass","children":["33fd718342e0def4","25b25b3798687d9c","4155593f16330ad4"]},{"path":"/Easing/Strong","urlLabel":"Strong","visible":true,"label":"Strong","menuType":"dtClass","linkLabel":"Strong","type":"folder","id":"c2327a2ee1c89b0c","displaytype":"dtClass","children":["cba66c4d71fcd0b1","0371668ad22745b9","8d8ae20b37b00594"]},{"path":"/Easing/RoughEase","urlLabel":"RoughEase","visible":true,"label":"RoughEase","menuType":"dtClass","linkLabel":"RoughEase","type":"folder","id":"57d33bbbf0c4c2c2","displaytype":"dtClass","children":["d7db3bffccebb26f","6eb509a7be806cdd","33128efe61f40353"]},{"path":"/Easing/SlowMo","urlLabel":"SlowMo","visible":true,"label":"SlowMo","inherits":"ced2d2c7aaaa4d5f","menuType":"dtClass","linkLabel":"SlowMo","type":"folder","id":"830525841e3dd3cb","displaytype":"dtClass","children":["8bdf6a2f45035aaf","fd4abe80e309c14a","b8b47a21012c2526"]},{"path":"/Easing/SteppedEase","urlLabel":"SteppedEase","visible":true,"label":"SteppedEase","inherits":"ced2d2c7aaaa4d5f","menuType":"dtClass","linkLabel":"SteppedEase","type":"folder","id":"0879a53eb4051ccf","displaytype":"dtClass","children":["a5c3189dc5d058a7","adf9c7ee62774ba4","0f60577286c8917a"]}]},{"path":"/Plugins","urlLabel":"Plugins","visible":true,"label":"Plugins","menuType":"folder","linkLabel":"Plugins","type":"folder","id":"fb2d7be451025509","children":["27db5e20e8bbb9ae","43077a47946db3db","23b845c3016f0559","be137a434f5b4e08","3d0f25beac1906b4","0a6e62faf0a53059","2433928b0e0f6cc4","4c5618b6dde74bd2","82b95bb606c34e2f","28124149c0519430","7913694fbfa93c13","447e2b0a637eb56f","b40bb6a3fc06daa2","5b09c1a25bf1df7e","bac828fc726d4d82","357645cd3e630097","13df7c5ab97ce05d","7bc5a8cd3cf25890","091b70448f18262e","16d64b5b1b82fde8"],"quantities":{"dtMethods":20,"dtProperties":20,"total":96,"dtProperty":1,"dtClass":20,"dtConstructors":20,"folder":20,"page":16,"dtMethod":15,"group":60},"quantity":96,"menuChildren":[{"path":"/Plugins/AttrPlugin","urlLabel":"AttrPlugin","visible":true,"label":"AttrPlugin","inherits":"16d64b5b1b82fde8","menuType":"dtClass","linkLabel":"AttrPlugin","type":"folder","id":"27db5e20e8bbb9ae","displaytype":"dtClass","children":["161275f38fc78046","a2c0edbda1b8dd97","25619ea4c3be2ee1"]},{"path":"/Plugins/BezierPlugin","urlLabel":"BezierPlugin","visible":true,"label":"BezierPlugin","inherits":"16d64b5b1b82fde8","menuType":"dtClass","linkLabel":"BezierPlugin","type":"folder","id":"43077a47946db3db","displaytype":"dtClass","children":["66b43a250da3ed1b","29a90c573ec07617","a7027e3576dae414"]},{"path":"/Plugins/ColorPropsPlugin","urlLabel":"ColorPropsPlugin","visible":true,"label":"ColorPropsPlugin","inherits":"16d64b5b1b82fde8","menuType":"dtClass","linkLabel":"ColorPropsPlugin","type":"folder","id":"23b845c3016f0559","displaytype":"dtClass","children":["9702ac0b5f53d28f","872ed3947dd34d34","899649118b227ef3"]},{"path":"/Plugins/CSSPlugin","urlLabel":"CSSPlugin","visible":true,"label":"CSSPlugin","menuType":"dtClass","linkLabel":"CSSPlugin","type":"folder","id":"be137a434f5b4e08","displaytype":"dtClass","children":["2cb0c6a759fe7e3e","6e944f104921175a","118d25e0ad422287"]},{"path":"/Plugins/CSSRulePlugin","urlLabel":"CSSRulePlugin","visible":true,"label":"CSSRulePlugin","inherits":"16d64b5b1b82fde8","menuType":"dtClass","linkLabel":"CSSRulePlugin","type":"folder","id":"3d0f25beac1906b4","displaytype":"dtClass","children":["e4742fc3d1dac595","e41dc2d824809967","128681295a195066"]},{"path":"/Plugins/DirectionalRotationPlugin","urlLabel":"DirectionalRotationPlugin","visible":true,"label":"DirectionalRotationPlugin","inherits":"16d64b5b1b82fde8","menuType":"dtClass","linkLabel":"DirectionalRotationPlugin","type":"folder","id":"0a6e62faf0a53059","displaytype":"dtClass","children":["3ef1899c737d2830","e0fb174b345d95b8","8b4360fa3f850f9e"]},{"path":"/Plugins/DrawSVGPlugin","urlLabel":"DrawSVGPlugin","visible":true,"label":"DrawSVGPlugin","menuType":"dtClass","linkLabel":"DrawSVGPlugin","type":"folder","id":"2433928b0e0f6cc4","displaytype":"dtClass","children":["02183f29ba37301e","cfc64cf4860b7a28","9c1a9435be3f8187"]},{"path":"/Plugins/EaselPlugin","urlLabel":"EaselPlugin","visible":true,"label":"EaselPlugin","inherits":"16d64b5b1b82fde8","menuType":"dtClass","linkLabel":"EaselPlugin","type":"folder","id":"4c5618b6dde74bd2","displaytype":"dtClass","children":["6e66ce0380bb7732","324696f621bf52ea","1c237c1f074047f3"]},{"path":"/Plugins/ModifiersPlugin","urlLabel":"ModifiersPlugin","visible":true,"label":"ModifiersPlugin","inherits":"16d64b5b1b82fde8","menuType":"dtClass","linkLabel":"ModifiersPlugin","type":"folder","id":"82b95bb606c34e2f","displaytype":"dtClass","children":["9f56088fbb368385","6039d897ea7bbf79","4b4e849bd128f6ec"]},{"path":"/Plugins/MorphSVGPlugin","urlLabel":"MorphSVGPlugin","visible":true,"label":"MorphSVGPlugin","inherits":"16d64b5b1b82fde8","menuType":"dtClass","linkLabel":"MorphSVGPlugin","type":"folder","id":"28124149c0519430","displaytype":"dtClass","children":["827c234a7bf0673d","5163184326bb1c60","2f7f4ddca04c7b79"]},{"path":"/Plugins/Physics2DPlugin","urlLabel":"Physics2DPlugin","visible":true,"label":"Physics2DPlugin","inherits":"16d64b5b1b82fde8","menuType":"dtClass","linkLabel":"Physics2DPlugin","type":"folder","id":"7913694fbfa93c13","displaytype":"dtClass","children":["83384ea8feb32555","2a29c5c28bf45f1a","09dc4be9038e030c"]},{"path":"/Plugins/PhysicsPropsPlugin","urlLabel":"PhysicsPropsPlugin","visible":true,"label":"PhysicsPropsPlugin","inherits":"16d64b5b1b82fde8","menuType":"dtClass","linkLabel":"PhysicsPropsPlugin","type":"folder","id":"447e2b0a637eb56f","displaytype":"dtClass","children":["48e094163435511b","ae986dce4fec960c","76addd3d1a1f8351"]},{"path":"/Plugins/PixiPlugin","urlLabel":"PixiPlugin","visible":true,"label":"PixiPlugin","inherits":"16d64b5b1b82fde8","menuType":"dtClass","linkLabel":"PixiPlugin","type":"folder","id":"b40bb6a3fc06daa2","displaytype":"dtClass","children":["fcb9333bd0cb5135","f53a4f032862ef4b","5194a1bcd5fa85b4"]},{"path":"/Plugins/RaphaelPlugin","urlLabel":"RaphaelPlugin","visible":true,"label":"RaphaelPlugin","menuType":"dtClass","linkLabel":"RaphaelPlugin","type":"folder","id":"5b09c1a25bf1df7e","displaytype":"dtClass","children":["00f2f9811f5354cf","948f84858c0c9111","ec6531f0b02f4cf8"]},{"path":"/Plugins/RoundPropsPlugin","urlLabel":"RoundPropsPlugin","visible":true,"label":"RoundPropsPlugin","inherits":"16d64b5b1b82fde8","menuType":"dtClass","linkLabel":"RoundPropsPlugin","type":"folder","id":"bac828fc726d4d82","displaytype":"dtClass","children":["3a36e8df86d24075","267ce64e2fbb3f7d","c0be05c0eb067258"]},{"path":"/Plugins/ScrambleTextPlugin","urlLabel":"ScrambleTextPlugin","visible":true,"label":"ScrambleTextPlugin","inherits":"16d64b5b1b82fde8","menuType":"dtClass","linkLabel":"ScrambleTextPlugin","type":"folder","id":"357645cd3e630097","displaytype":"dtClass","children":["ceff32533e6974e3","70aea9848fad7d9f","f91ee2882b2e81c3"]},{"path":"/Plugins/ScrollToPlugin","urlLabel":"ScrollToPlugin","visible":true,"label":"ScrollToPlugin","inherits":"16d64b5b1b82fde8","menuType":"dtClass","linkLabel":"ScrollToPlugin","type":"folder","id":"13df7c5ab97ce05d","displaytype":"dtClass","children":["98ebb12d9759df87","478e667b4c764f52","ed15e87bd352c698"]},{"path":"/Plugins/TextPlugin","urlLabel":"TextPlugin","visible":true,"label":"TextPlugin","inherits":"16d64b5b1b82fde8","menuType":"dtClass","linkLabel":"TextPlugin","type":"folder","id":"7bc5a8cd3cf25890","displaytype":"dtClass","children":["eeb28a089980ab64","28c70b19779b65a6","1933814606d8f731"]},{"path":"/Plugins/ThrowPropsPlugin","urlLabel":"ThrowPropsPlugin","visible":true,"label":"ThrowPropsPlugin","menuType":"dtClass","linkLabel":"ThrowPropsPlugin","type":"folder","id":"091b70448f18262e","displaytype":"dtClass","children":["940d9a4a8e009e19","3c9048f80b2538bc","c30ce9b52ee02ffc"]},{"path":"/Plugins/TweenPlugin","urlLabel":"TweenPlugin","visible":true,"label":"TweenPlugin","menuType":"dtClass","linkLabel":"TweenPlugin","type":"folder","id":"16d64b5b1b82fde8","displaytype":"dtClass","children":["24608d0d543250f4","ef78fd00a67f41a2","9e68556934a64568"]}]},{"path":"/Utilities","urlLabel":"Utilities","visible":true,"label":"Utilities","menuType":"folder","linkLabel":"Utilities","type":"folder","id":"54a27bdcea66a8b2","children":["27ffcb75af705686","9927ce1237a8b0b1","eb1821730d324359"],"quantities":{"dtMethods":3,"dtProperties":3,"total":68,"dtProperty":29,"dtClass":3,"dtConstructors":3,"dtConstructor":2,"folder":3,"page":56,"dtMethod":25,"group":9},"quantity":68,"menuChildren":[{"path":"/Utilities/Draggable","urlLabel":"Draggable","visible":true,"label":"Draggable","menuType":"dtClass","linkLabel":"Draggable","type":"folder","id":"27ffcb75af705686","displaytype":"dtClass","children":["46a65b241e844cdf","648945e0ecf65093","ed29f159c1c48094"]},{"path":"/Utilities/SplitText","urlLabel":"SplitText","visible":true,"label":"SplitText","menuType":"dtClass","linkLabel":"SplitText","type":"folder","id":"9927ce1237a8b0b1","displaytype":"dtClass","children":["8e823ba73d922378","e3d18ff014ff6095","2969a81cb4dc7123"]},{"path":"/Utilities/VelocityTracker","urlLabel":"VelocityTracker","visible":true,"label":"VelocityTracker","menuType":"dtClass","linkLabel":"VelocityTracker","type":"folder","id":"eb1821730d324359","displaytype":"dtClass","children":["ff278834bf12f050","a8cedff6562f74c9","cdfe8fba430bec28"]}]}],"menuSearch":[],"type":"folder","navHeightMain":1000,"navHeightSearch":1000,"docsBuild":0,"data":{"config":{"settings":{"dataPath":"/json/","apiEditServer":"//greensock.com:2999/api/"},"content":{"breadcrumbLabel":"GreenSock Docs","navHeader":"GreenSock Docs (HTML5/JS)"}},"navigation":{"a03b81c2162c5416":{"type":"page","label":"render","displaytype":"dtMethod","isStatic":true},"98ebb12d9759df87":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"d5106dc51b7f5d34":{"type":"group","label":"Methods","children":["0bce3fc5ec3e76b0"],"displaytype":"dtMethods"},"8ecf8286d1667a67":{"type":"page","label":"totalDuration","displaytype":"dtMethod"},"c3d534d675a3afa8":{"type":"group","label":"Methods","children":["08efb16bbc092c14"],"displaytype":"dtMethods","inhChHidden":["24e00423129f1300"]},"b6d7efcbb07722e0":{"type":"page","label":"seek","displaytype":"dtMethod"},"8bdf6a2f45035aaf":{"type":"group","label":"Constructor","children":["ed459aa1a80c9521"],"displaytype":"dtConstructors"},"9927ce1237a8b0b1":{"type":"folder","label":"SplitText","children":["8e823ba73d922378","e3d18ff014ff6095","2969a81cb4dc7123"],"displaytype":"dtClass"},"8fed06c936bee4ce":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"43a03109965e7d4e":{"type":"page","label":"totalProgress","displaytype":"dtMethod"},"4e307cf9f4bf2f9f":{"type":"page","label":"config","displaytype":"dtMethod"},"05f5280e21743f35":{"type":"page","label":"getLabelAfter","displaytype":"dtMethod"},"fcb1bb985e1f73e9":{"type":"page","label":"lockedAxis","displaytype":"dtProperty"},"3a1185cd458dbf47":{"type":"page","label":"ease","displaytype":"dtProperty","isStatic":true},"f91ee2882b2e81c3":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"cbfeda9e3ee6bc0e":{"type":"page","label":"Ease","displaytype":"dtConstructor"},"5103496262822a61":{"type":"page","label":"getChildren","displaytype":"dtMethod"},"e41dc2d824809967":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"a3d5652d51086bea":{"type":"page","label":"addLabel","displaytype":"dtMethod"},"e191a597bfccb4b6":{"type":"page","label":"killAll","displaytype":"dtMethod","isStatic":true},"884555468e3861f7":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"424d2c8144aca82b":{"type":"folder","label":"Quint","children":["2516648f9d1556d8","b4b8b312f51dcf31","5a50595a7582d2ba"],"displaytype":"dtClass"},"f35957809b52dfd2":{"type":"page","label":"delay","displaytype":"dtMethod"},"ce029f1efc85be43":{"type":"group","label":"Methods","children":["f35957809b52dfd2","560295553a39dad1","ac42870b8c3fb694","7e0c6f182a9fa2db","b634b21b470a9e55","cdfc78d10c0d9317","9b20c27ddbcaa297","96fc1d850d4a51e6","15ad1f9068bff51f","a8b5fe1cfbc57740","7bb4870bba9c525d","db54f293b92ce54b","d185bba975b21413","652fc9fd0bc84808","d708d783bf75b7f9","b6d7efcbb07722e0","e646e51de97ab747","9c2d24c127d9ebc7","7334cca40467aa44","8ecf8286d1667a67","43a03109965e7d4e","37d58fccb2afe6a1"],"displaytype":"dtMethods"},"1041a5c1cc29d27e":{"type":"group","label":"Methods","children":["56b233da235302db"],"displaytype":"dtMethods"},"d3b047e7bd016acd":{"type":"folder","label":"Power0","children":["adaa77111c49dea7","aa580d04616c5c64","47fb9392ebc1d108"],"displaytype":"dtClass"},"e41b42f226a99048":{"type":"group","label":"Methods","children":["f3d0f009919eaed3","0891734c6084b33c"],"displaytype":"dtMethods","inhChHidden":["ac42870b8c3fb694"]},"d2c60e4c72147852":{"type":"page","label":"yoyo","displaytype":"dtMethod"},"4c4e0dc6ec82e9d2":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"490bfb425778129e":{"type":"page","label":"selector","displaytype":"dtProperty","isStatic":true},"c9a8ad76c3364ab5":{"type":"page","label":"minY","displaytype":"dtProperty"},"23b845c3016f0559":{"type":"folder","label":"ColorPropsPlugin","children":["9702ac0b5f53d28f","872ed3947dd34d34","899649118b227ef3"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"7fa11166b5591c60":{"type":"page","label":"getRatio","displaytype":"dtMethod"},"08efb16bbc092c14":{"type":"page","label":"create","displaytype":"dtMethod","isStatic":true},"root":{"type":"folder","label":"Docs Home","children":["52db442320b34fc1","7eebd4b20adcaecc","2b3bb68a78e65fe7","32bc2e8f667c28b7","8510bec84f8f5ab3","5190c7bdac5c1b1c","fb2d7be451025509","54a27bdcea66a8b2"]},"bbc69448cde56863":{"type":"page","label":"addProp","displaytype":"dtMethod"},"0891734c6084b33c":{"type":"page","label":"render","displaytype":"dtMethod","visible":false},"a52aa2ad91d4ef68":{"type":"page","label":"to","displaytype":"dtMethod","isStatic":true},"b1a85937ab300f11":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"7b988d27511ca604":{"type":"page","label":"time","displaytype":"dtMethod"},"0f60577286c8917a":{"type":"group","label":"Methods","children":["c9842efb11f4c87a","1299db89651318f1"],"displaytype":"dtMethods"},"37fa5f2f65e863e4":{"type":"page","label":"isThrowing","displaytype":"dtProperty"},"b387c2e659d8f05e":{"type":"page","label":"getSVGData","displaytype":"dtMethod","isStatic":true},"24e00423129f1300":{"type":"page","label":"get","displaytype":"dtMethod","isStatic":true},"dc81ae0b3f16fa34":{"type":"page","label":"track","displaytype":"dtMethod","isStatic":true},"bc85ce2321f8a2ba":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"cdfe8fba430bec28":{"type":"group","label":"Methods","children":["bbc69448cde56863","b179b41393276f8a","6c68e64d09faf182","c573b4d50cc3ef87","eee6bf3e1eda7652","daa700409ba890e6","dc81ae0b3f16fa34","08358b2af1bc5b64"],"displaytype":"dtMethods"},"3b5b7725303db7cc":{"type":"group","label":"Constructor","children":["f8a5c0f959c5c320"],"displaytype":"dtConstructors"},"a159d08fd0e75293":{"type":"page","label":"to","displaytype":"dtMethod","isStatic":true},"4e8b086407f4fb2c":{"type":"page","label":"timeline","displaytype":"dtProperty"},"f53a4f032862ef4b":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"c0be05c0eb067258":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"b5e39c1c0244c4f9":{"type":"page","label":"convertToPath","displaytype":"dtMethod","isStatic":true},"6c86cb85353bf463":{"type":"group","label":"Properties","children":["507a069e7c771a21","012753da17253cb9","dec74fd87bb63197"],"displaytype":"dtProperties"},"078881c6d928c5cf":{"type":"page","label":"from","displaytype":"dtMethod"},"5194a1bcd5fa85b4":{"type":"group","label":"Methods","children":["43cdb51b9b63b1b9"],"displaytype":"dtMethods"},"4254772d898fcd15":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"26a8027fc1db0737":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"4f8bff36fbe23240":{"type":"page","label":"pointerX","displaytype":"dtProperty"},"7e0c6f182a9fa2db":{"type":"page","label":"eventCallback","displaytype":"dtMethod"},"01cb3301c2555b06":{"type":"page","label":"lagSmoothing","displaytype":"dtMethod","isStatic":true},"7bb4870bba9c525d":{"type":"page","label":"progress","displaytype":"dtMethod"},"cba66c4d71fcd0b1":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"f3d0f009919eaed3":{"type":"page","label":"add","displaytype":"dtMethod"},"8ecc7c0172b03069":{"type":"page","label":"fromTo","displaytype":"dtMethod","isStatic":true},"24608d0d543250f4":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"dd5daf294b523c5b":{"type":"page","label":"to","displaytype":"dtMethod"},"a2c0edbda1b8dd97":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"1b0dafbb2fcc15bd":{"type":"page","label":"repeat","displaytype":"dtMethod"},"3d2718e5d3fe06be":{"type":"page","label":"pauseAll","displaytype":"dtMethod","isStatic":true},"655846b8e15c420b":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"0f1a0aaf90af74b1":{"type":"page","label":"from","displaytype":"dtMethod","isStatic":true},"78fa71d7884ceae5":{"type":"page","label":"target","displaytype":"dtProperty"},"10948e3702698b9c":{"type":"page","label":"RoughEase","displaytype":"dtConstructor"},"059d5eab36bbdd55":{"type":"folder","label":"Power2","children":["26a8027fc1db0737","f51d07c5ce1f37bf","b1a85937ab300f11"],"displaytype":"dtClass"},"d3b7ad527e13b7fa":{"type":"page","label":"useFrames","displaytype":"dtMethod"},"8226759a93db7a20":{"type":"page","label":"bezierThrough","displaytype":"dtMethod","isStatic":true},"14102df5f069df3e":{"type":"page","label":"invalidate","displaytype":"dtMethod"},"55a9f099bdcda14c":{"type":"page","label":"clear","displaytype":"dtMethod"},"51ce7cb6dea97bce":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"f8dba22fcae52796":{"type":"page","label":"kill","displaytype":"dtMethod"},"515e2689add7a2d1":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"68bdad17bf6c2eb6":{"type":"group","label":"Properties","children":["705ae1ddfe7bf523","eeeab17448587b02","4f68c600370ab277"],"displaytype":"dtProperties"},"4b4e849bd128f6ec":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"9c1a9435be3f8187":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"940d9a4a8e009e19":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"97f627b1ea0da433":{"type":"group","label":"Properties","children":["fd0b8307fd5118c6","4e8b086407f4fb2c","1d9a881066fb186e"],"displaytype":"dtProperties"},"a8b5fe1cfbc57740":{"type":"page","label":"play","displaytype":"dtMethod"},"0569061e32ebf041":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"23bff1d0d1d4314b":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"08c9c08b99f1928d":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"66b2dd5137a72397":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"708b2590f2979899":{"type":"page","label":"getTweensOf","displaytype":"dtMethod"},"8d8ae20b37b00594":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"e7f6ebafb382a8cc":{"type":"page","label":"defaultOverwrite","displaytype":"dtProperty","isStatic":true},"0b7f1e0ec646b3a7":{"type":"page","label":"killDelayedCallsTo","displaytype":"dtMethod","isStatic":true},"7ae217fd46c941b8":{"type":"page","label":"invalidate","displaytype":"dtMethod"},"3853b8e39e36e027":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties","inhChHidden":["1d9a881066fb186e-inherited-211a71fb195b2819"]},"a34d8ad8d2f59e97":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"267ce64e2fbb3f7d":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"10d088592b8a6983":{"type":"page","label":"getActive","displaytype":"dtMethod"},"55855c7922de0e47":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"be137a434f5b4e08":{"type":"folder","label":"CSSPlugin","children":["2cb0c6a759fe7e3e","6e944f104921175a","118d25e0ad422287"],"displaytype":"dtClass"},"b460b4edfd115a43":{"type":"group","label":"Properties","children":["3abce597eeda187e","a34d8ad8d2f59e97","f6d4c1c141e1b351"],"displaytype":"dtProperties"},"22c0e0776a5fa894":{"type":"page","label":"getLabelsArray","displaytype":"dtMethod"},"dd5fed4d3955bfea":{"type":"page","label":"invalidate","displaytype":"dtMethod"},"0428fae2e18a9613":{"type":"group","label":"Properties","children":["f4af2f5c548d7079","fc5f2508dcf8e967","81c4e914fdcf1d68"],"displaytype":"dtProperties"},"83fa31bf259e7bc7":{"type":"page","label":"pointerEvent","displaytype":"dtProperty"},"fd0b8307fd5118c6":{"type":"page","label":"data","displaytype":"dtProperty"},"7913694fbfa93c13":{"type":"folder","label":"Physics2DPlugin","children":["83384ea8feb32555","2a29c5c28bf45f1a","09dc4be9038e030c"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"1c237c1f074047f3":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"02cf505adaa3c1db":{"type":"page","label":"getRatio","displaytype":"dtMethod"},"da3bf77d4e5fdbda":{"type":"page","label":"quadraticToCubic","displaytype":"dtMethod","isStatic":true},"eab7ad5c38079651":{"type":"page","label":"y","displaytype":"dtProperty"},"ed29f159c1c48094":{"type":"group","label":"Methods","children":["e25e10e45b7afcd0","ac73f647a485bd9f","c541ba25c5706fee","8f3a18936cc397fe","5857a6c52c8e3115","688b6ac671dbe69d","b0b2e6f3a9e49b0a","ca2e5cc16169165a","dfba312d84ede771","ffe7905a70b61f73","ffc1eae92622a822","f8dba22fcae52796","5184540aa5ce91bc","6254d7797a9f3826","2c9525d38d4cdb74"],"displaytype":"dtMethods"},"dcf4605fe174e7e9":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"46a65b241e844cdf":{"type":"group","label":"Constructor","children":["c75d3c448b8ad479"],"displaytype":"dtConstructors"},"6151d8080d89dd43":{"type":"page","label":"endY","displaytype":"dtProperty"},"54ae9c54fa1f129c":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"adf9c7ee62774ba4":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"c2327a2ee1c89b0c":{"type":"folder","label":"Strong","children":["cba66c4d71fcd0b1","0371668ad22745b9","8d8ae20b37b00594"],"displaytype":"dtClass"},"c6ed6b795d19d3bd":{"type":"page","label":"lockAxis","displaytype":"dtProperty"},"211a71fb195b2819":{"type":"folder","label":"SimpleTimeline","children":["15e4767347b7b513","e8ba7a11a42bb184","e41b42f226a99048"],"displaytype":"dtClass","inherits":"11f92408d2609969"},"ec6531f0b02f4cf8":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"899649118b227ef3":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"11f92408d2609969":{"type":"folder","label":"Animation","children":["b6e1b50e6cda70f9","97f627b1ea0da433","ce029f1efc85be43"],"displaytype":"dtClass"},"0f4d525c21fd9234":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"0fc1a8aeb91b3bc5":{"type":"page","label":"seek","displaytype":"dtMethod"},"fd9dbda283638161":{"type":"page","label":"set","displaytype":"dtMethod"},"e4742fc3d1dac595":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"83a96a07388dba2e":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"180106cf49a52891":{"type":"page","label":"smoothChildTiming","displaytype":"dtProperty"},"1ab5d820e53d55e7":{"type":"group","label":"Constructor","children":["cbfeda9e3ee6bc0e"],"displaytype":"dtConstructors"},"4919ddfb10ad7aa4":{"type":"page","label":"easeNone","displaytype":"dtProperty","isStatic":true},"32bc2e8f667c28b7":{"type":"folder","label":"TimelineMax","children":["68f0517fc3271c23","66b2dd5137a72397","f0dcc0b2d2c8c8e7"],"displaytype":"dtClass","inherits":"2b3bb68a78e65fe7"},"e949a7537e48535a":{"type":"page","label":"duration","displaytype":"dtMethod"},"b2b27e1c27b569e3":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"bb348eccd434b5a8":{"type":"group","label":"Properties","children":["dd5665cbddb9aa0d","5aff71c5f05c1b9e","ae081698f5101041"],"displaytype":"dtProperties"},"6eb509a7be806cdd":{"type":"group","label":"Properties","children":["cca5b92a93c91acc"],"displaytype":"dtProperties"},"d2d91cf2ebadcfaf":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"db54f293b92ce54b":{"type":"page","label":"restart","displaytype":"dtMethod"},"7d48300a1a10e0e5":{"type":"group","label":"Properties","children":["3a1185cd458dbf47","c1554e19d34a341f","515e2689add7a2d1","4919ddfb10ad7aa4","e96a5eb3d0ae1709"],"displaytype":"dtProperties"},"872ed3947dd34d34":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"324696f621bf52ea":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"d5a05b37afbe9b9a":{"type":"page","label":"endX","displaytype":"dtProperty"},"9e68556934a64568":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"e8ba7a11a42bb184":{"type":"group","label":"Properties","children":["a8583ff10d4f8c14","180106cf49a52891"],"displaytype":"dtProperties"},"bac828fc726d4d82":{"type":"folder","label":"RoundPropsPlugin","children":["3a36e8df86d24075","267ce64e2fbb3f7d","c0be05c0eb067258"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"f8a5c0f959c5c320":{"type":"page","label":"Linear","displaytype":"dtConstructor"},"28124149c0519430":{"type":"folder","label":"MorphSVGPlugin","children":["827c234a7bf0673d","5163184326bb1c60","2f7f4ddca04c7b79"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"dd5665cbddb9aa0d":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"cb1da3c33a8e7bb2":{"type":"page","label":"create","displaytype":"dtMethod","isStatic":true},"0c45afba50900d5a":{"type":"page","label":"invalidate","displaytype":"dtMethod"},"6cbc76eab73a1780":{"type":"page","label":"delayedCall","displaytype":"dtMethod","isStatic":true},"b8b47a21012c2526":{"type":"group","label":"Methods","children":["4e307cf9f4bf2f9f","7fa11166b5591c60"],"displaytype":"dtMethods"},"50d2c59c532a8f8b":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"58e2f543b70f3422":{"type":"page","label":"removePause","displaytype":"dtMethod"},"3eab3f172dae806f":{"type":"folder","label":"Quart","children":["4254772d898fcd15","68bdad17bf6c2eb6","80b4c322700505f4"],"displaytype":"dtClass"},"b1848b9fa107b520":{"type":"page","label":"maxRotation","displaytype":"dtProperty"},"85fd7bd3a68921cd":{"type":"page","label":"staggerTo","displaytype":"dtMethod"},"33fd718342e0def4":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"52db442320b34fc1":{"type":"folder","label":"TweenLite","children":["bb945f1b5836a3fa","ca5b23dca997e6d1","20fbd8766d4c9807"],"displaytype":"dtClass","inherits":"11f92408d2609969"},"43077a47946db3db":{"type":"folder","label":"BezierPlugin","children":["66b43a250da3ed1b","29a90c573ec07617","a7027e3576dae414"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"2cb0c6a759fe7e3e":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"80b4c322700505f4":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"7bc5a8cd3cf25890":{"type":"folder","label":"TextPlugin","children":["eeb28a089980ab64","28c70b19779b65a6","1933814606d8f731"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"6c323162f3657de1":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"e25e10e45b7afcd0":{"type":"page","label":"addEventListener","displaytype":"dtMethod"},"74c21fb76dec0658":{"type":"group","label":"Constructor","children":["cc4d1686bf20a1c4"],"displaytype":"dtConstructors"},"e4776d5c407778cf":{"type":"page","label":"killTweensOf","displaytype":"dtMethod","isStatic":true},"6428cc1a8c9024c6":{"type":"page","label":"getLabelTime","displaytype":"dtMethod"},"6e66ce0380bb7732":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"c67479a40fbed683":{"type":"page","label":"staggerFrom","displaytype":"dtMethod"},"24d394c42b9a9197":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"dadae713b9b4342e":{"type":"page","label":"lines","displaytype":"dtProperty"},"705ae1ddfe7bf523":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"9f6a01699fc50e73":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"5857a6c52c8e3115":{"type":"page","label":"enable","displaytype":"dtMethod"},"efaa84c28aa97dc5":{"type":"page","label":"minRotation","displaytype":"dtProperty"},"7bc9a119e72d6fdc":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"e3d18ff014ff6095":{"type":"group","label":"Properties","children":["0ea9e67b512c6662","dadae713b9b4342e","490bfb425778129e","1a7ff1a6dbe597e1"],"displaytype":"dtProperties"},"c541ba25c5706fee":{"type":"page","label":"create","displaytype":"dtMethod","isStatic":true},"0c466d8095583e88":{"type":"folder","label":"Linear","children":["3b5b7725303db7cc","7d48300a1a10e0e5","d5106dc51b7f5d34"],"displaytype":"dtClass","inherits":"ced2d2c7aaaa4d5f"},"1933814606d8f731":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"6206e87e65b57251":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"4f68c600370ab277":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"a8583ff10d4f8c14":{"type":"page","label":"autoRemoveChildren","displaytype":"dtProperty"},"edb1ee784263b5b1":{"type":"page","label":"staggerFromTo","displaytype":"dtMethod","isStatic":true},"0d7cccc5009c65f7":{"type":"page","label":"maxY","displaytype":"dtProperty"},"e646e51de97ab747":{"type":"page","label":"startTime","displaytype":"dtMethod"},"823bbb81bdf15585":{"type":"page","label":"ticker","displaytype":"dtProperty","isStatic":true},"3a36e8df86d24075":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"1d9a881066fb186e":{"type":"page","label":"vars","displaytype":"dtProperty"},"fcb9333bd0cb5135":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"64346e163a42da5f":{"type":"page","label":"killDelayedCallsTo","displaytype":"dtMethod","isStatic":true},"82b95bb606c34e2f":{"type":"folder","label":"ModifiersPlugin","children":["9f56088fbb368385","6039d897ea7bbf79","4b4e849bd128f6ec"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"2732aa6fd1292931":{"type":"page","label":"getTweensOf","displaytype":"dtMethod","isStatic":true},"00f2f9811f5354cf":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"7e3df7d80af0b0bb":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"5aff71c5f05c1b9e":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"161275f38fc78046":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"a5c3189dc5d058a7":{"type":"group","label":"Constructor","children":["5022798f02602b73"],"displaytype":"dtConstructors"},"22d710f5e23c3b66":{"type":"page","label":"time","displaytype":"dtMethod"},"56b233da235302db":{"type":"page","label":"getRatio","displaytype":"dtMethod"},"bec60f6cd60ff057":{"type":"page","label":"addCallback","displaytype":"dtMethod"},"648945e0ecf65093":{"type":"group","label":"Properties","children":["b64a6a3ccee6d6f8","5402bf6985777c02","d5a05b37afbe9b9a","6151d8080d89dd43","37fa5f2f65e863e4","c6ed6b795d19d3bd","fcb1bb985e1f73e9","b1848b9fa107b520","8efb834a28d647b3","0d7cccc5009c65f7","efaa84c28aa97dc5","066a1985d52b529c","c9a8ad76c3364ab5","83fa31bf259e7bc7","4f8bff36fbe23240","16158325892ff508","b8156aef40ce441e","0f6ea912f8ed3cf7","78fa71d7884ceae5","2000fd9279daa4a5","f9e5f083d2f0f14a","ec3421d82ab1ddd0","eab7ad5c38079651","7ed7b01bbcfcd77c"],"displaytype":"dtProperties"},"54ddb48cbc201e21":{"type":"page","label":"create","displaytype":"dtMethod","isStatic":true},"ed51b120abaec5c2":{"type":"group","label":"Properties","children":["db8d74151be49b20","83a96a07388dba2e","c059f076d35f6211"],"displaytype":"dtProperties"},"6c797b009a65972a":{"type":"page","label":"to","displaytype":"dtMethod","isStatic":true},"9b20c27ddbcaa297":{"type":"page","label":"kill","displaytype":"dtMethod"},"16d64b5b1b82fde8":{"type":"folder","label":"TweenPlugin","children":["24608d0d543250f4","ef78fd00a67f41a2","9e68556934a64568"],"displaytype":"dtClass"},"04a1993cebf0c4d6":{"type":"page","label":"set","displaytype":"dtMethod","isStatic":true},"a5a0e939a1e15082":{"type":"page","label":"tweenFromTo","displaytype":"dtMethod"},"2433928b0e0f6cc4":{"type":"folder","label":"DrawSVGPlugin","children":["02183f29ba37301e","cfc64cf4860b7a28","9c1a9435be3f8187"],"displaytype":"dtClass"},"c9842efb11f4c87a":{"type":"page","label":"config","displaytype":"dtMethod","isStatic":true},"128681295a195066":{"type":"group","label":"Methods","children":["53a700a8824a8cfc"],"displaytype":"dtMethods"},"3abce597eeda187e":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"0840452593dd9b59":{"type":"page","label":"ticker","displaytype":"dtProperty","isStatic":true},"4211b5df656e89c0":{"type":"group","label":"Properties","children":["114305ffa6e0ca96","55855c7922de0e47","884555468e3861f7"],"displaytype":"dtProperties"},"686dcaac6fb0f74d":{"type":"group","label":"Properties","children":["0840452593dd9b59"],"displaytype":"dtProperties","inhChHidden":["4dd34ae7cc4df452","e7f6ebafb382a8cc","b030a6a5f8623c77"]},"fb2d7be451025509":{"type":"folder","label":"Plugins","children":["27db5e20e8bbb9ae","43077a47946db3db","23b845c3016f0559","be137a434f5b4e08","3d0f25beac1906b4","0a6e62faf0a53059","2433928b0e0f6cc4","4c5618b6dde74bd2","82b95bb606c34e2f","28124149c0519430","7913694fbfa93c13","447e2b0a637eb56f","b40bb6a3fc06daa2","5b09c1a25bf1df7e","bac828fc726d4d82","357645cd3e630097","13df7c5ab97ce05d","7bc5a8cd3cf25890","091b70448f18262e","16d64b5b1b82fde8"]},"25619ea4c3be2ee1":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"5163184326bb1c60":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"7d83cb2ee0afc5e8":{"type":"page","label":"TimelineMax","displaytype":"dtConstructor"},"aa580d04616c5c64":{"type":"group","label":"Properties","children":["1d489de3c6de961d","23bff1d0d1d4314b","18fc5255c4712aae"],"displaytype":"dtProperties"},"18e2a901c1ec4b19":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"aa9969ee39687902":{"type":"folder","label":"Bounce","children":["b2b27e1c27b569e3","6c86cb85353bf463","24d394c42b9a9197"],"displaytype":"dtClass"},"3d0f25beac1906b4":{"type":"folder","label":"CSSRulePlugin","children":["e4742fc3d1dac595","e41dc2d824809967","128681295a195066"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"76addd3d1a1f8351":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"37e6c3b703353a69":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"f8a990bb64a897ea":{"type":"folder","label":"Power3","children":["a6a411741b3de888","bb348eccd434b5a8","0f4d525c21fd9234"],"displaytype":"dtClass"},"20fbd8766d4c9807":{"type":"group","label":"Methods","children":["6cbc76eab73a1780","0f1a0aaf90af74b1","ed553a5b6c412a65","2732aa6fd1292931","0c45afba50900d5a","64346e163a42da5f","e4776d5c407778cf","01cb3301c2555b06","a03b81c2162c5416","f9978ca8a660abe5","6c797b009a65972a"],"displaytype":"dtMethods"},"60dac61dd3210643":{"type":"page","label":"totalDuration","displaytype":"dtMethod"},"2a29c5c28bf45f1a":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"149cf67b4ca81773":{"type":"page","label":"updateTo","displaytype":"dtMethod"},"0d0b160bf173886b":{"type":"page","label":"from","displaytype":"dtMethod","isStatic":true},"09dc4be9038e030c":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"43cdb51b9b63b1b9":{"type":"page","label":"parseColor","displaytype":"dtMethod","isStatic":true},"6265da364503c653":{"type":"page","label":"currentLabel","displaytype":"dtMethod"},"d4204b8f13ae9009":{"type":"page","label":"recent","displaytype":"dtMethod"},"b2858d09588f2384":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"357645cd3e630097":{"type":"folder","label":"ScrambleTextPlugin","children":["ceff32533e6974e3","70aea9848fad7d9f","f91ee2882b2e81c3"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"8b4360fa3f850f9e":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"4c00a0ea1a2df967":{"type":"page","label":"getRatio","displaytype":"dtMethod"},"0f6ea912f8ed3cf7":{"type":"page","label":"scrollProxy","displaytype":"dtProperty"},"ac73f647a485bd9f":{"type":"page","label":"applyBounds","displaytype":"dtMethod"},"6254d7797a9f3826":{"type":"page","label":"timeSinceDrag","displaytype":"dtMethod","isStatic":true},"bb945f1b5836a3fa":{"type":"group","label":"Constructor","children":["7142cfd298705364"],"displaytype":"dtConstructors"},"ff278834bf12f050":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"86085ac31cb14a44":{"type":"page","label":"repeatDelay","displaytype":"dtMethod"},"f0dcc0b2d2c8c8e7":{"type":"group","label":"Methods","children":["bec60f6cd60ff057","6265da364503c653","10d088592b8a6983","05f5280e21743f35","38ba67959f173bc5","22c0e0776a5fa894","7ae217fd46c941b8","e87195ea10d96698","ba03755004151a9a","58e2f543b70f3422","01b34bc2697e9225","99a791cc5bc34c40","7b988d27511ca604","60dac61dd3210643","5f4508325a2e0985","a5a0e939a1e15082","7be1802b524c8f27","d2c60e4c72147852"],"displaytype":"dtMethods","inhChHidden":["0891734c6084b33c-inherited-2b3bb68a78e65fe7"]},"28c70b19779b65a6":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"012753da17253cb9":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"2b3bb68a78e65fe7":{"type":"folder","label":"TimelineLite","children":["74c21fb76dec0658","3853b8e39e36e027","da337dfc2601e110"],"displaytype":"dtClass","inherits":"211a71fb195b2819"},"8510bec84f8f5ab3":{"type":"folder","label":"Core","children":["11f92408d2609969","211a71fb195b2819"]},"18c206e3bcd758c3":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"adaa77111c49dea7":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"ac38f7748fba8a28":{"type":"page","label":"find","displaytype":"dtMethod","isStatic":true},"1315d24279922963":{"type":"folder","label":"CustomEase","children":["52e84092d1d9c501","18c206e3bcd758c3","1582ea86afd872d2"],"displaytype":"dtClass","inherits":"ced2d2c7aaaa4d5f"},"0371668ad22745b9":{"type":"group","label":"Properties","children":["7e1eddf0750f462e","72e083392b443236","9f6a01699fc50e73"],"displaytype":"dtProperties"},"f125e9affad597cc":{"type":"page","label":"staggerFromTo","displaytype":"dtMethod"},"263a751df9953a1b":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"ba16ab89ebee23c0":{"type":"page","label":"ease","displaytype":"dtProperty","isStatic":true},"6e944f104921175a":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"c5344f5dcfcf49a3":{"type":"folder","label":"Power4","children":["f24fb3a2d57f8f6b","ed51b120abaec5c2","586fe532b56c055a"],"displaytype":"dtClass"},"ef78fd00a67f41a2":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"fba2505e727039ff":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"ccf8d9233484488a":{"type":"page","label":"revert","displaytype":"dtMethod"},"b030a6a5f8623c77":{"type":"page","label":"onOverwrite","displaytype":"dtProperty","isStatic":true},"0ea9e67b512c6662":{"type":"page","label":"chars","displaytype":"dtProperty"},"830525841e3dd3cb":{"type":"folder","label":"SlowMo","children":["8bdf6a2f45035aaf","fd4abe80e309c14a","b8b47a21012c2526"],"displaytype":"dtClass","inherits":"ced2d2c7aaaa4d5f"},"ed553a5b6c412a65":{"type":"page","label":"fromTo","displaytype":"dtMethod","isStatic":true},"507a069e7c771a21":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"cb31e7d72b0e7b00":{"type":"folder","label":"Cubic","children":["79bc608eee70487f","b460b4edfd115a43","7a0d343c67932ddb"],"displaytype":"dtClass"},"f6d4c1c141e1b351":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"d0e776e5281dcb6c":{"type":"page","label":"defaultResistance","displaytype":"dtProperty","isStatic":true},"3ee5521bddabf8b1":{"type":"group","label":"Methods","children":["ac38f7748fba8a28"],"displaytype":"dtMethods"},"db8d74151be49b20":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"30e0bb194a03450a":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"47fb9392ebc1d108":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"021452ff672b0275":{"type":"page","label":"shiftChildren","displaytype":"dtMethod"},"5402bf6985777c02":{"type":"page","label":"endRotation","displaytype":"dtProperty"},"c9e6d8a4b4e56614":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"ced2d2c7aaaa4d5f":{"type":"folder","label":"Ease","children":["1ab5d820e53d55e7","263a751df9953a1b","1041a5c1cc29d27e"],"displaytype":"dtClass"},"ffe7905a70b61f73":{"type":"page","label":"hitTest","displaytype":"dtMethod"},"6ef668a9f15ebadd":{"type":"page","label":"Animation","displaytype":"dtConstructor"},"cfc64cf4860b7a28":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"a8cedff6562f74c9":{"type":"group","label":"Properties","children":["57b9279b6277c124"],"displaytype":"dtProperties"},"586fe532b56c055a":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"1299db89651318f1":{"type":"page","label":"getRatio","displaytype":"dtMethod"},"f9978ca8a660abe5":{"type":"page","label":"set","displaytype":"dtMethod","isStatic":true},"d708d783bf75b7f9":{"type":"page","label":"reversed","displaytype":"dtMethod"},"ae986dce4fec960c":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"57b9279b6277c124":{"type":"page","label":"target","displaytype":"dtProperty"},"5022798f02602b73":{"type":"page","label":"SteppedEase","displaytype":"dtConstructor"},"b64a6a3ccee6d6f8":{"type":"page","label":"autoScroll","displaytype":"dtProperty"},"16158325892ff508":{"type":"page","label":"pointerY","displaytype":"dtProperty"},"cdfc78d10c0d9317":{"type":"page","label":"isActive","displaytype":"dtMethod"},"b0b5d2a90d50df62":{"type":"group","label":"Properties","children":["18e2a901c1ec4b19","655846b8e15c420b","633ffc00de2e0c33"],"displaytype":"dtProperties"},"723964a4fd3ac4af":{"type":"folder","label":"Circ","children":["bc85ce2321f8a2ba","0428fae2e18a9613","d2d91cf2ebadcfaf"],"displaytype":"dtClass"},"633ffc00de2e0c33":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"fe7727d7fa29b16b":{"type":"folder","label":"Expo","children":["7bc9a119e72d6fdc","4211b5df656e89c0","51ce7cb6dea97bce"],"displaytype":"dtClass"},"c100119126b4d17b":{"type":"page","label":"getTweensOf","displaytype":"dtMethod","isStatic":true},"1d489de3c6de961d":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"8b14bde95693efa6":{"type":"page","label":"totalDuration","displaytype":"dtMethod"},"c573b4d50cc3ef87":{"type":"page","label":"isTracking","displaytype":"dtMethod","isStatic":true},"eee6bf3e1eda7652":{"type":"page","label":"isTrackingProp","displaytype":"dtMethod"},"e6d83093f7f5a207":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"0cad0bf3209f5092":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"3ef1899c737d2830":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"594254e8876faff3":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"fd83a6199b3fccbe":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"e124272392141d4f":{"type":"page","label":"removeLabel","displaytype":"dtMethod"},"d185bba975b21413":{"type":"page","label":"resume","displaytype":"dtMethod"},"681f9501cd7f99b3":{"type":"folder","label":"CustomWiggle","children":["20b7b61b00d9fd0d","4c4e0dc6ec82e9d2","e2915059f396caf2"],"displaytype":"dtClass","inherits":"1315d24279922963"},"7e1eddf0750f462e":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"9e2dfbcd4b851bdb":{"type":"page","label":"globalTimeScale","displaytype":"dtMethod","isStatic":true},"2c9525d38d4cdb74":{"type":"page","label":"update","displaytype":"dtMethod"},"07392828b060a423":{"type":"folder","label":"Sine","children":["33fd718342e0def4","25b25b3798687d9c","4155593f16330ad4"],"displaytype":"dtClass"},"677955a5f3bdfcb4":{"type":"page","label":"config","displaytype":"dtMethod"},"eb1821730d324359":{"type":"folder","label":"VelocityTracker","children":["ff278834bf12f050","a8cedff6562f74c9","cdfe8fba430bec28"],"displaytype":"dtClass"},"38ba67959f173bc5":{"type":"page","label":"getLabelBefore","displaytype":"dtMethod"},"7334cca40467aa44":{"type":"page","label":"timeScale","displaytype":"dtMethod"},"b634b21b470a9e55":{"type":"page","label":"invalidate","displaytype":"dtMethod"},"dec74fd87bb63197":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"cc4d1686bf20a1c4":{"type":"page","label":"TimelineLite","displaytype":"dtConstructor"},"19160c04837df0bb":{"type":"folder","label":"CustomBounce","children":["7e6f9f4cc2e01616","51c3b5a2632ca427","c3d534d675a3afa8"],"displaytype":"dtClass","inherits":"1315d24279922963"},"0259e6a57bbc19a8":{"type":"group","label":"Constructor","children":["0443695353538039"],"displaytype":"dtConstructors"},"ce25d7004a81e18d":{"type":"page","label":"pathDataToBezier","displaytype":"dtMethod","isStatic":true},"d938e1f03eee893f":{"type":"page","label":"untrack","displaytype":"dtMethod","isStatic":true},"ab22a377935cb849":{"type":"page","label":"fromTo","displaytype":"dtMethod"},"51c3b5a2632ca427":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"d502fa3af383145d":{"type":"page","label":"target","displaytype":"dtProperty"},"84e7a26232a0339f":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"79bc608eee70487f":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"99a791cc5bc34c40":{"type":"page","label":"repeatDelay","displaytype":"dtMethod"},"7a55f0c80975d390":{"type":"group","label":"Properties","children":["37e6c3b703353a69","f5fe26060be2a85b","7e3df7d80af0b0bb"],"displaytype":"dtProperties"},"e6e77ed616cdbcd0":{"type":"page","label":"totalDuration","displaytype":"dtMethod"},"a7027e3576dae414":{"type":"group","label":"Methods","children":["8226759a93db7a20","6928377908c249d2","da3bf77d4e5fdbda"],"displaytype":"dtMethods"},"edeb564de2d4abf1":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"6f77f2839c53472f":{"type":"page","label":"delayedCall","displaytype":"dtMethod","isStatic":true},"0a6e62faf0a53059":{"type":"folder","label":"DirectionalRotationPlugin","children":["3ef1899c737d2830","e0fb174b345d95b8","8b4360fa3f850f9e"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"c059f076d35f6211":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"0bce3fc5ec3e76b0":{"type":"page","label":"getRatio","displaytype":"dtMethod"},"8f3a18936cc397fe":{"type":"page","label":"disable","displaytype":"dtMethod"},"bdf13585fd570814":{"type":"page","label":"track","displaytype":"dtMethod","isStatic":true},"9c2d24c127d9ebc7":{"type":"page","label":"time","displaytype":"dtMethod"},"5184540aa5ce91bc":{"type":"page","label":"startDrag","displaytype":"dtMethod"},"81c4e914fdcf1d68":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"f7f7759fe81fd22f":{"type":"folder","label":"Elastic","children":["594254e8876faff3","7a55f0c80975d390","e6d83093f7f5a207"],"displaytype":"dtClass"},"da337dfc2601e110":{"type":"group","label":"Methods","children":["fb3630bc7fd65dd2","a3d5652d51086bea","b15c1fc9e7c9418c","d19482f5b1cfd929","55a9f099bdcda14c","e949a7537e48535a","3ba39b4db90dc9ba","078881c6d928c5cf","ab22a377935cb849","5103496262822a61","6428cc1a8c9024c6","708b2590f2979899","dd5fed4d3955bfea","d4204b8f13ae9009","d49e46f2e8270a08","e124272392141d4f","0fc1a8aeb91b3bc5","fd9dbda283638161","021452ff672b0275","c67479a40fbed683","f125e9affad597cc","85fd7bd3a68921cd","dd5daf294b523c5b","e6e77ed616cdbcd0","d3b7ad527e13b7fa"],"displaytype":"dtMethods","inhChShown":["ac42870b8c3fb694-inherited-211a71fb195b2819"]},"02183f29ba37301e":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"1a7ff1a6dbe597e1":{"type":"page","label":"words","displaytype":"dtProperty"},"33128efe61f40353":{"type":"group","label":"Methods","children":["677955a5f3bdfcb4","4c00a0ea1a2df967"],"displaytype":"dtMethods"},"daa700409ba890e6":{"type":"page","label":"removeProp","displaytype":"dtMethod"},"c75d3c448b8ad479":{"type":"page","label":"Draggable","displaytype":"dtConstructor"},"b8156aef40ce441e":{"type":"page","label":"rotation","displaytype":"dtProperty"},"b15c1fc9e7c9418c":{"type":"page","label":"addPause","displaytype":"dtMethod"},"29a90c573ec07617":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"e2915059f396caf2":{"type":"group","label":"Methods","children":["54ddb48cbc201e21"],"displaytype":"dtMethods","inhChHidden":["24e00423129f1300"]},"b348e04893b18cee":{"type":"group","label":"Properties","children":["6c323162f3657de1","f878aae254cc6211","c9e6d8a4b4e56614"],"displaytype":"dtProperties"},"f9e5f083d2f0f14a":{"type":"page","label":"vars","displaytype":"dtProperty"},"96fc1d850d4a51e6":{"type":"page","label":"pause","displaytype":"dtMethod"},"fd4abe80e309c14a":{"type":"group","label":"Properties","children":["ba16ab89ebee23c0"],"displaytype":"dtProperties"},"dfba312d84ede771":{"type":"page","label":"getDirection","displaytype":"dtMethod"},"3c9048f80b2538bc":{"type":"group","label":"Properties","children":["d0e776e5281dcb6c"],"displaytype":"dtProperties"},"e87195ea10d96698":{"type":"page","label":"progress","displaytype":"dtMethod"},"22c860af2d1dbbcb":{"type":"folder","label":"Power1","children":["50d2c59c532a8f8b","75a392dd00c75d1c","fd83a6199b3fccbe"],"displaytype":"dtClass"},"948f84858c0c9111":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"e51dec40a03460d5":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"478e667b4c764f52":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"eeb28a089980ab64":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"c799d800af33aa6a":{"type":"page","label":"getAllTweens","displaytype":"dtMethod","isStatic":true},"8e823ba73d922378":{"type":"group","label":"Constructor","children":["17115da28b40d682"],"displaytype":"dtConstructors"},"17115da28b40d682":{"type":"page","label":"SplitText","displaytype":"dtConstructor"},"2516648f9d1556d8":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"4dd34ae7cc4df452":{"type":"page","label":"defaultEase","displaytype":"dtProperty","isStatic":true},"91943bd05ded63bb":{"type":"folder","label":"Quad","children":["30e0bb194a03450a","b348e04893b18cee","e51dec40a03460d5"],"displaytype":"dtClass"},"c87b724c588c3884":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"6c68e64d09faf182":{"type":"page","label":"getVelocity","displaytype":"dtMethod"},"65d8dcc6c6cabcbd":{"type":"page","label":"staggerTo","displaytype":"dtMethod","isStatic":true},"66b43a250da3ed1b":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"b218bb5d19f9b9ab":{"type":"page","label":"getVelocity","displaytype":"dtMethod","isStatic":true},"37d58fccb2afe6a1":{"type":"page","label":"totalTime","displaytype":"dtMethod"},"57d33bbbf0c4c2c2":{"type":"folder","label":"RoughEase","children":["d7db3bffccebb26f","6eb509a7be806cdd","33128efe61f40353"],"displaytype":"dtClass"},"4c5618b6dde74bd2":{"type":"folder","label":"EaselPlugin","children":["6e66ce0380bb7732","324696f621bf52ea","1c237c1f074047f3"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"72e083392b443236":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"ef46b9dc2d56104b":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"13df7c5ab97ce05d":{"type":"folder","label":"ScrollToPlugin","children":["98ebb12d9759df87","478e667b4c764f52","ed15e87bd352c698"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"109ea284ffe68190":{"type":"page","label":"killChildTweensOf","displaytype":"dtMethod","isStatic":true},"6928377908c249d2":{"type":"page","label":"cubicToQuadratic","displaytype":"dtMethod","isStatic":true},"c1554e19d34a341f":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"c30ce9b52ee02ffc":{"type":"group","label":"Methods","children":["4c659aa2524b1945","c272ebc90f1e65c8","c33fc0b177a91675","b218bb5d19f9b9ab","56a562fa808f415e","a159d08fd0e75293","bdf13585fd570814","d938e1f03eee893f"],"displaytype":"dtMethods"},"ffc1eae92622a822":{"type":"page","label":"hitTest","displaytype":"dtMethod","isStatic":true},"cca5b92a93c91acc":{"type":"page","label":"ease","displaytype":"dtProperty","isStatic":true},"1582ea86afd872d2":{"type":"group","label":"Methods","children":["cb1da3c33a8e7bb2","24e00423129f1300","02cf505adaa3c1db","b387c2e659d8f05e"],"displaytype":"dtMethods"},"53a700a8824a8cfc":{"type":"page","label":"getRule","displaytype":"dtMethod","isStatic":true},"a6a411741b3de888":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"52466ef8d6a25e07":{"type":"page","label":"SimpleTimeline","displaytype":"dtConstructor"},"c33fc0b177a91675":{"type":"page","label":"calculateTweenDuration","displaytype":"dtMethod","isStatic":true},"118d25e0ad422287":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"3ba39b4db90dc9ba":{"type":"page","label":"exportRoot","displaytype":"dtMethod","isStatic":true},"652fc9fd0bc84808":{"type":"page","label":"reverse","displaytype":"dtMethod"},"4155593f16330ad4":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"f24fb3a2d57f8f6b":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"52e84092d1d9c501":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"08358b2af1bc5b64":{"type":"page","label":"untrack","displaytype":"dtMethod","isStatic":true},"ae081698f5101041":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"f51d07c5ce1f37bf":{"type":"group","label":"Properties","children":["0cad0bf3209f5092","79c15370e7fe03de","b2858d09588f2384"],"displaytype":"dtProperties"},"7a0d343c67932ddb":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"d49e46f2e8270a08":{"type":"page","label":"remove","displaytype":"dtMethod"},"4c659aa2524b1945":{"type":"page","label":"calculateChange","displaytype":"dtMethod","isStatic":true},"c272ebc90f1e65c8":{"type":"page","label":"calculateDuration","displaytype":"dtMethod","isStatic":true},"1989613671fc0074":{"type":"page","label":"resumeAll","displaytype":"dtMethod","isStatic":true},"827c234a7bf0673d":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"ba03755004151a9a":{"type":"page","label":"removeCallBack","displaytype":"dtMethod"},"f5fe26060be2a85b":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"fb3630bc7fd65dd2":{"type":"page","label":"add","displaytype":"dtMethod"},"2810d7a52bbf48a8":{"type":"page","label":"yoyo","displaytype":"dtMethod"},"83384ea8feb32555":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"f4af2f5c548d7079":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"15e4767347b7b513":{"type":"group","label":"Constructor","children":["52466ef8d6a25e07"],"displaytype":"dtConstructors"},"f878aae254cc6211":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"2000fd9279daa4a5":{"type":"page","label":"tween","displaytype":"dtProperty"},"b40bb6a3fc06daa2":{"type":"folder","label":"PixiPlugin","children":["fcb9333bd0cb5135","f53a4f032862ef4b","5194a1bcd5fa85b4"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"14c14e56fe4cfb7f":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"70aea9848fad7d9f":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"7824c0e53c911bbe":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"ca2e5cc16169165a":{"type":"page","label":"get","displaytype":"dtMethod","isStatic":true},"01b34bc2697e9225":{"type":"page","label":"repeat","displaytype":"dtMethod"},"ec3421d82ab1ddd0":{"type":"page","label":"x","displaytype":"dtProperty"},"eeeab17448587b02":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"5190c7bdac5c1b1c":{"type":"folder","label":"Easing","children":["ea91e06b445f4ac7","aa9969ee39687902","723964a4fd3ac4af","cb31e7d72b0e7b00","19160c04837df0bb","1315d24279922963","681f9501cd7f99b3","ced2d2c7aaaa4d5f","09af4edb7491fd9e","f7f7759fe81fd22f","fe7727d7fa29b16b","0c466d8095583e88","d3b047e7bd016acd","22c860af2d1dbbcb","059d5eab36bbdd55","f8a990bb64a897ea","c5344f5dcfcf49a3","91943bd05ded63bb","3eab3f172dae806f","424d2c8144aca82b","07392828b060a423","c2327a2ee1c89b0c","57d33bbbf0c4c2c2","830525841e3dd3cb","0879a53eb4051ccf"]},"0aeeb28b67105bbf":{"type":"group","label":"Methods","children":["6f77f2839c53472f","0d0b160bf173886b","8ecc7c0172b03069","c799d800af33aa6a","c100119126b4d17b","9e2dfbcd4b851bdb","14102df5f069df3e","748acc1d9c528534","e191a597bfccb4b6","109ea284ffe68190","0b7f1e0ec646b3a7","5520cb7c254b2de6","3d2718e5d3fe06be","9555ceafd00d82bd","1b0dafbb2fcc15bd","86085ac31cb14a44","1989613671fc0074","04a1993cebf0c4d6","7e006fa58303b1cc","edb1ee784263b5b1","65d8dcc6c6cabcbd","22d710f5e23c3b66","a52aa2ad91d4ef68","8b14bde95693efa6","3783d0a065069766","149cf67b4ca81773","2810d7a52bbf48a8"],"displaytype":"dtMethods","inhChHidden":["a03b81c2162c5416"]},"25b25b3798687d9c":{"type":"group","label":"Properties","children":["c87b724c588c3884","0569061e32ebf041","84e7a26232a0339f"],"displaytype":"dtProperties"},"79c15370e7fe03de":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"09af4edb7491fd9e":{"type":"folder","label":"EaseLookup","children":["14c14e56fe4cfb7f","fba2505e727039ff","3ee5521bddabf8b1"],"displaytype":"dtClass"},"0879a53eb4051ccf":{"type":"folder","label":"SteppedEase","children":["a5c3189dc5d058a7","adf9c7ee62774ba4","0f60577286c8917a"],"displaytype":"dtClass","inherits":"ced2d2c7aaaa4d5f"},"5a50595a7582d2ba":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"00b17703b89cfb4b":{"type":"page","label":"selector","displaytype":"dtProperty","isStatic":true},"e0fb174b345d95b8":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"b0b2e6f3a9e49b0a":{"type":"page","label":"endDrag","displaytype":"dtMethod"},"d7db3bffccebb26f":{"type":"group","label":"Constructor","children":["10948e3702698b9c"],"displaytype":"dtConstructors"},"ea91e06b445f4ac7":{"type":"folder","label":"Back","children":["dcf4605fe174e7e9","b0b5d2a90d50df62","8fed06c936bee4ce"],"displaytype":"dtClass"},"b179b41393276f8a":{"type":"page","label":"getByTarget","displaytype":"dtMethod","isStatic":true},"3783d0a065069766":{"type":"page","label":"totalProgress","displaytype":"dtMethod"},"8efb834a28d647b3":{"type":"page","label":"maxX","displaytype":"dtProperty"},"5b09c1a25bf1df7e":{"type":"folder","label":"RaphaelPlugin","children":["00f2f9811f5354cf","948f84858c0c9111","ec6531f0b02f4cf8"],"displaytype":"dtClass"},"15ad1f9068bff51f":{"type":"page","label":"paused","displaytype":"dtMethod"},"7142cfd298705364":{"type":"page","label":"TweenLite","displaytype":"dtConstructor"},"54a27bdcea66a8b2":{"type":"folder","label":"Utilities","children":["27ffcb75af705686","9927ce1237a8b0b1","eb1821730d324359"]},"ed459aa1a80c9521":{"type":"page","label":"SlowMo","displaytype":"dtConstructor"},"5520cb7c254b2de6":{"type":"page","label":"killTweensOf","displaytype":"dtMethod","isStatic":true},"7ed7b01bbcfcd77c":{"type":"page","label":"zIndex","displaytype":"dtProperty"},"2f7f4ddca04c7b79":{"type":"group","label":"Methods","children":["b5e39c1c0244c4f9","ce25d7004a81e18d"],"displaytype":"dtMethods"},"447e2b0a637eb56f":{"type":"folder","label":"PhysicsPropsPlugin","children":["48e094163435511b","ae986dce4fec960c","76addd3d1a1f8351"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"560295553a39dad1":{"type":"page","label":"duration","displaytype":"dtMethod"},"b4b8b312f51dcf31":{"type":"group","label":"Properties","children":["54ae9c54fa1f129c","edeb564de2d4abf1","7824c0e53c911bbe"],"displaytype":"dtProperties"},"066a1985d52b529c":{"type":"page","label":"minX","displaytype":"dtProperty"},"ac42870b8c3fb694":{"type":"page","label":"endTime","displaytype":"dtMethod"},"75a392dd00c75d1c":{"type":"group","label":"Properties","children":["08c9c08b99f1928d","6206e87e65b57251","ef46b9dc2d56104b"],"displaytype":"dtProperties"},"b6e1b50e6cda70f9":{"type":"group","label":"Constructor","children":["6ef668a9f15ebadd"],"displaytype":"dtConstructors"},"0443695353538039":{"type":"page","label":"TweenMax","displaytype":"dtConstructor"},"688b6ac671dbe69d":{"type":"page","label":"enabled","displaytype":"dtMethod"},"a4be9362b50f3a83":{"type":"page","label":"split","displaytype":"dtMethod","isStatic":true},"5f4508325a2e0985":{"type":"page","label":"totalProgress","displaytype":"dtMethod"},"7e6f9f4cc2e01616":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"748acc1d9c528534":{"type":"page","label":"isTweening","displaytype":"dtMethod","isStatic":true},"7be1802b524c8f27":{"type":"page","label":"tweenTo","displaytype":"dtMethod"},"ca5b23dca997e6d1":{"type":"group","label":"Properties","children":["4dd34ae7cc4df452","e7f6ebafb382a8cc","b030a6a5f8623c77","00b17703b89cfb4b","d502fa3af383145d","823bbb81bdf15585"],"displaytype":"dtProperties"},"ceff32533e6974e3":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"18fc5255c4712aae":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"091b70448f18262e":{"type":"folder","label":"ThrowPropsPlugin","children":["940d9a4a8e009e19","3c9048f80b2538bc","c30ce9b52ee02ffc"],"displaytype":"dtClass"},"68f0517fc3271c23":{"type":"group","label":"Constructor","children":["7d83cb2ee0afc5e8"],"displaytype":"dtConstructors"},"27ffcb75af705686":{"type":"folder","label":"Draggable","children":["46a65b241e844cdf","648945e0ecf65093","ed29f159c1c48094"],"displaytype":"dtClass"},"27db5e20e8bbb9ae":{"type":"folder","label":"AttrPlugin","children":["161275f38fc78046","a2c0edbda1b8dd97","25619ea4c3be2ee1"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"9702ac0b5f53d28f":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"d19482f5b1cfd929":{"type":"page","label":"call","displaytype":"dtMethod"},"114305ffa6e0ca96":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"e96a5eb3d0ae1709":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"7eebd4b20adcaecc":{"type":"folder","label":"TweenMax","children":["0259e6a57bbc19a8","686dcaac6fb0f74d","0aeeb28b67105bbf"],"displaytype":"dtClass","inherits":"52db442320b34fc1"},"20b7b61b00d9fd0d":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"9555ceafd00d82bd":{"type":"page","label":"progress","displaytype":"dtMethod"},"2969a81cb4dc7123":{"type":"group","label":"Methods","children":["ccf8d9233484488a","a4be9362b50f3a83"],"displaytype":"dtMethods"},"6039d897ea7bbf79":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"48e094163435511b":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"fc5f2508dcf8e967":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"ed15e87bd352c698":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"9f56088fbb368385":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"7e006fa58303b1cc":{"type":"page","label":"staggerFrom","displaytype":"dtMethod","isStatic":true},"56a562fa808f415e":{"type":"page","label":"isTracking","displaytype":"dtMethod","isStatic":true}},"configobjects":{"f30ae6a0d4cb24a2":{"type":"coElement","label":"onDragEndParams"},"66cba4d5da870b3b":{"type":"coElement","label":"edgeResistance"},"484a9cd6847057ea":{"type":"coElement","label":"charsClass"},"f10a4a463f486d1a":{"type":"coElement","label":"onLockAxis"},"146a504063bb6ab7":{"type":"coElement","label":"offsetY"},"2a344abc5d73a637":{"type":"coContainer","label":"CustomBounce","children":["68bbfcd7d4727cb7","179fe104eb1574d0","307e72098e372787","a5cf84fac5674d10"]},"addd2d84013b1134":{"type":"coElement","label":"type"},"71b5e21519642473":{"type":"coElement","label":"onDragEndScope"},"001be8077e6e9763":{"type":"coElement","label":"onRepeatParams"},"1e30866acfaa806d":{"type":"coElement","label":"offsetX"},"1c306a319826c160":{"type":"coElement","label":"lockAxis"},"22750cc8867b561e":{"type":"coElement","label":"smoothChildTiming"},"d0461dff035b44f9":{"type":"coElement","label":"points"},"307e72098e372787":{"type":"coElement","label":"strength"},"c0ab38e528d80db5":{"type":"coElement","label":"delay"},"0e014e8442979a30":{"type":"coElement","label":"onPress"},"98f8c0d24cc27123":{"type":"coElement","label":"onDragStartScope"},"2df6109eebc75958":{"type":"coElement","label":"stagger"},"c0912704078628d1":{"type":"coElement","label":"repeat"},"73ed096fbb4733b1":{"type":"coElement","label":"wiggles"},"c273be21a6d5d359":{"type":"coContainer","label":"TweenLite","children":["c0ab38e528d80db5","5362451ab9c301de","4c4c055e0d1b3ef4","c0b2819eb45d22fa","12bc54ae2abf7f69","6fb092df021a71b8","3858c3c0e131d9f9","1bc824ce6dc34487","710eec28580f52cc","cb1dfa66a7a72a20","31d511c03f29c247","b415f9c3aaa120c7","5831c58b3d824f56","67683f3825ed6254","1d0471f0541e51f6","08db63c99851dad9","0671715f6c9c297a","4502dc942c2f6ad3","b11dc6cdb0b25ad4","23dd15a5cb01a73a","a7dacb5385dc0208","47f712d4a2ca9bd6"]},"08db63c99851dad9":{"type":"coElement","label":"onUpdateParams"},"cb1dfa66a7a72a20":{"type":"coElement","label":"onReverseCompleteParams"},"f5404cc3146549c8":{"type":"coElement","label":"onStartParams"},"d3baed1556229a6c":{"type":"coElement","label":"template"},"45862563ed327e51":{"type":"coElement","label":"y"},"1bc824ce6dc34487":{"type":"coElement","label":"onCompleteScope"},"0e3c0b29fc38903c":{"type":"coElement","label":"matrix"},"36b18ca91ec3b297":{"type":"coElement","label":"onClick"},"138bfd0f79da1923":{"type":"coElement","label":"autoScroll"},"31d511c03f29c247":{"type":"coElement","label":"onReverseCompleteScope"},"8f60177180297349":{"type":"coElement","label":"width"},"3e643e36562500cb":{"type":"coElement","label":"dragResistance"},"e62bf18e77fe7fef":{"type":"coElement","label":"type"},"cf97049a05eea106":{"type":"coElement","label":"onReleaseScope"},"b1f70b1c29bb1592":{"type":"coElement","label":"onDragEnd"},"1b58719563b939ae":{"type":"coElement","label":"timingEase"},"a8f8b61a98efe26d":{"type":"coElement","label":"height"},"53ab3440dc93284a":{"type":"coContainer","label":"SplitText","children":["b047280f767c4b7b","484a9cd6847057ea","99dd4e1976eda5e5","435f9b9c59d62464","601ce401aa4b786e","f1164c1177ade869"]},"0e1883e99856fe87":{"type":"coElement","label":"yoyo"},"5b6654db000793db":{"type":"coElement","label":"throwProps"},"710eec28580f52cc":{"type":"coElement","label":"onReverseComplete"},"14f7b2ab2306d25d":{"type":"coElement","label":"onRepeatScope"},"5f649fd49e95f606":{"type":"coElement","label":"onThrowComplete"},"c584f051bacbf69a":{"type":"coElement","label":"onClickParams"},"98e0cdd165137d37":{"type":"coElement","label":"onStartParams"},"b32d8d5efb278d20":{"type":"coElement","label":"onReverseCompleteParams"},"12bc54ae2abf7f69":{"type":"coElement","label":"overwrite"},"34877b494cd68df3":{"type":"coElement","label":"onStartParams"},"0dc94f7962bb1809":{"type":"coContainer","label":"Draggable","children":["addd2d84013b1134","d2bd9f16ab20530b","1c306a319826c160","aca7362aad5f9793","66cba4d5da870b3b","3e643e36562500cb","df43bae4a56cfe24","316858f5f13de012","138bfd0f79da1923","a6944cbf3f89e97e","ae5d53b7dad3637a","5b6654db000793db","e6ec9a76a8a3b2ae","2ba22762a5b9b4a0","0e014e8442979a30","11eab4868f87b7c3","9bea7a673f2a5f91","b1f70b1c29bb1592","8ba85d1dc9b4a8e9","36b18ca91ec3b297","1458512f4f6da6b0","0310445a4a5ffbf5","81c56c4009633eaf","f30ae6a0d4cb24a2","5937ab91418da4cc","c584f051bacbf69a","16500e6ab1ae062d","98f8c0d24cc27123","8d4780fbb348c43d","71b5e21519642473","cf97049a05eea106","4ce57534a0d91a84","f10a4a463f486d1a","bcc4d262959c2e60","d29495128260fefc","05478e8ef895c98c","ffa4332009ed59c7","5f649fd49e95f606"]},"6c7082f81905820b":{"type":"coElement","label":"amplitudeEase"},"16500e6ab1ae062d":{"type":"coElement","label":"onPressScope"},"6c2a5ea7a2235260":{"type":"coElement","label":"onUpdateParams"},"179fe104eb1574d0":{"type":"coElement","label":"squashID"},"e4bce09225a62234":{"type":"coElement","label":"onUpdateParams"},"2ba22762a5b9b4a0":{"type":"coElement","label":"clickableTest"},"4056e396f43ce90d":{"type":"coElement","label":"clamp"},"91440e0dbaa1e01d":{"type":"coElement","label":"align"},"4ce57534a0d91a84":{"type":"coElement","label":"onClickScope"},"0516dafc90c83002":{"type":"coElement","label":"cycle"},"4b93e7c32eaa5f45":{"type":"coElement","label":"onUpdateParams"},"bf3441936fcd04fd":{"type":"coContainer","label":"TweenMax","children":["c0ab38e528d80db5","5362451ab9c301de","c0912704078628d1","ce8ef82d428fb818","0e1883e99856fe87","c928fdd09fd62a63","4c4c055e0d1b3ef4","12bc54ae2abf7f69","6fb092df021a71b8","c0b2819eb45d22fa","3858c3c0e131d9f9","1bc824ce6dc34487","634ca2f9b61c71ba","001be8077e6e9763","14f7b2ab2306d25d","710eec28580f52cc","b32d8d5efb278d20","31d511c03f29c247","b415f9c3aaa120c7","f5404cc3146549c8","67683f3825ed6254","1d0471f0541e51f6","e4bce09225a62234","0671715f6c9c297a","7f77859ab3515047","4502dc942c2f6ad3","b11dc6cdb0b25ad4","23dd15a5cb01a73a","a7dacb5385dc0208","47f712d4a2ca9bd6"]},"47f712d4a2ca9bd6":{"type":"coElement","label":"callbackScope"},"634ca2f9b61c71ba":{"type":"coElement","label":"onRepeat"},"bcc4d262959c2e60":{"type":"coElement","label":"callbackScope"},"980585c43a98afd0":{"type":"coContainer","label":"Stagger","children":["0516dafc90c83002","c0ab38e528d80db5","5362451ab9c301de","c0912704078628d1","ce8ef82d428fb818","0e1883e99856fe87","4c4c055e0d1b3ef4","12bc54ae2abf7f69","6fb092df021a71b8","c0b2819eb45d22fa","3858c3c0e131d9f9","1bc824ce6dc34487","634ca2f9b61c71ba","001be8077e6e9763","14f7b2ab2306d25d","710eec28580f52cc","cb1dfa66a7a72a20","31d511c03f29c247","b415f9c3aaa120c7","5831c58b3d824f56","67683f3825ed6254","1d0471f0541e51f6","08db63c99851dad9","0671715f6c9c297a","7f77859ab3515047","4502dc942c2f6ad3","b11dc6cdb0b25ad4","23dd15a5cb01a73a","a7dacb5385dc0208","47f712d4a2ca9bd6"]},"a5cf84fac5674d10":{"type":"coElement","label":"endAtStart"},"b11dc6cdb0b25ad4":{"type":"coElement","label":"lazy"},"ea05af7191454490":{"type":"coContainer","label":"RoughEase","children":["4056e396f43ce90d","d0461dff035b44f9","6c1ff8e4bba97b5b","a2e04ec469211693","b47d6ea25d670878","d3baed1556229a6c"]},"b6285db341c79d60":{"type":"coContainer","label":"MorphSVGPlugin.pathDataToBezier","children":["6590258193b0bcbc","1e30866acfaa806d","146a504063bb6ab7","0e3c0b29fc38903c"]},"df43bae4a56cfe24":{"type":"coElement","label":"zIndexBoost"},"c928fdd09fd62a63":{"type":"coElement","label":"yoyoEase"},"ffa4332009ed59c7":{"type":"coElement","label":"onThrowUpdate"},"d2bd9f16ab20530b":{"type":"coElement","label":"bounds"},"05478e8ef895c98c":{"type":"coElement","label":"force3D"},"81c56c4009633eaf":{"type":"coElement","label":"onDragParams"},"b047280f767c4b7b":{"type":"coElement","label":"type"},"35d0319919c01f84":{"type":"coElement","label":"autoRemoveChildren"},"e6ec9a76a8a3b2ae":{"type":"coElement","label":"minimumMovement"},"6c1ff8e4bba97b5b":{"type":"coElement","label":"randomize"},"cd30416934de29e1":{"type":"coContainer","label":"TimelineLite","children":["c0ab38e528d80db5","4c4c055e0d1b3ef4","6fb092df021a71b8","1bc824ce6dc34487","4502dc942c2f6ad3","197338cafda956a7","91440e0dbaa1e01d","2df6109eebc75958","b415f9c3aaa120c7","67683f3825ed6254","710eec28580f52cc","31d511c03f29c247","1d0471f0541e51f6","0671715f6c9c297a","35d0319919c01f84","22750cc8867b561e","9b26fbd793cd0dd0","98e0cdd165137d37","4b93e7c32eaa5f45","16a4b49f868715de","47f712d4a2ca9bd6"]},"0671715f6c9c297a":{"type":"coElement","label":"onUpdateScope"},"197338cafda956a7":{"type":"coElement","label":"tweens"},"7463e08533f9efec":{"type":"coElement","label":"onReverseCompleteParams"},"5362451ab9c301de":{"type":"coElement","label":"ease"},"c06d77ded54b7881":{"type":"coContainer","label":"CustomWiggle","children":["73ed096fbb4733b1","e62bf18e77fe7fef","6c7082f81905820b","1b58719563b939ae"]},"aca7362aad5f9793":{"type":"coElement","label":"trigger"},"a7dacb5385dc0208":{"type":"coElement","label":"autoCSS"},"d29495128260fefc":{"type":"coElement","label":"allowNativeTouchScrolling"},"8ba85d1dc9b4a8e9":{"type":"coElement","label":"onRelease"},"3858c3c0e131d9f9":{"type":"coElement","label":"onCompleteParams"},"0310445a4a5ffbf5":{"type":"coElement","label":"onDragStartParams"},"9b26fbd793cd0dd0":{"type":"coElement","label":"onCompleteParams"},"67683f3825ed6254":{"type":"coElement","label":"onStartScope"},"f1164c1177ade869":{"type":"coElement","label":"wordsClass"},"4c4c055e0d1b3ef4":{"type":"coElement","label":"paused"},"b47d6ea25d670878":{"type":"coElement","label":"taper"},"1458512f4f6da6b0":{"type":"coElement","label":"onPressParams"},"435f9b9c59d62464":{"type":"coElement","label":"position"},"16a4b49f868715de":{"type":"coElement","label":"onReverseCompleteParams"},"a6944cbf3f89e97e":{"type":"coElement","label":"liveSnap"},"ae5d53b7dad3637a":{"type":"coElement","label":"dragClickables"},"8d4780fbb348c43d":{"type":"coElement","label":"onDragScope"},"316858f5f13de012":{"type":"coElement","label":"cursor"},"601ce401aa4b786e":{"type":"coElement","label":"wordDelimiter"},"1d0471f0541e51f6":{"type":"coElement","label":"onUpdate"},"7bd7f88198b01fd3":{"type":"coContainer","label":"TimelineMax","children":["c0ab38e528d80db5","4c4c055e0d1b3ef4","6fb092df021a71b8","1bc824ce6dc34487","4502dc942c2f6ad3","197338cafda956a7","2df6109eebc75958","91440e0dbaa1e01d","b415f9c3aaa120c7","67683f3825ed6254","1d0471f0541e51f6","0671715f6c9c297a","634ca2f9b61c71ba","14f7b2ab2306d25d","710eec28580f52cc","31d511c03f29c247","35d0319919c01f84","22750cc8867b561e","c0912704078628d1","ce8ef82d428fb818","0e1883e99856fe87","515611f1e4226fa9","7463e08533f9efec","71e998538c325aca","34877b494cd68df3","6c2a5ea7a2235260","47f712d4a2ca9bd6"]},"bf3cb25451cdb408":{"type":"coElement","label":"path"},"b415f9c3aaa120c7":{"type":"coElement","label":"onStart"},"5831c58b3d824f56":{"type":"coElement","label":"onStartParams"},"99dd4e1976eda5e5":{"type":"coElement","label":"linesClass"},"9bea7a673f2a5f91":{"type":"coElement","label":"onDrag"},"6fb092df021a71b8":{"type":"coElement","label":"onComplete"},"4502dc942c2f6ad3":{"type":"coElement","label":"useFrames"},"6590258193b0bcbc":{"type":"coElement","label":"align"},"ce8ef82d428fb818":{"type":"coElement","label":"repeatDelay"},"23dd15a5cb01a73a":{"type":"coElement","label":"onOverwrite"},"5937ab91418da4cc":{"type":"coElement","label":"onReleaseParams"},"c0b2819eb45d22fa":{"type":"coElement","label":"immediateRender"},"11eab4868f87b7c3":{"type":"coElement","label":"onDragStart"},"68bbfcd7d4727cb7":{"type":"coElement","label":"squash"},"778cf2b0b9ce7ce9":{"type":"coElement","label":"x"},"515611f1e4226fa9":{"type":"coElement","label":"onCompleteParams"},"a2e04ec469211693":{"type":"coElement","label":"strength"},"71e998538c325aca":{"type":"coElement","label":"onRepeatParams"},"780cd7d653daf782":{"type":"coContainer","label":"CustomEase.getSVGData","children":["8f60177180297349","a8f8b61a98efe26d","778cf2b0b9ce7ce9","45862563ed327e51","bf3cb25451cdb408"]},"7f77859ab3515047":{"type":"coElement","label":"startAt"}}},"_dataOriginal":{"config":{"settings":{"dataPath":"/json/","apiEditServer":"//greensock.com:2999/api/"},"content":{"breadcrumbLabel":"GreenSock Docs","navHeader":"GreenSock Docs (HTML5/JS)"}},"navigation":{"a03b81c2162c5416":{"type":"page","label":"render","displaytype":"dtMethod","isStatic":true},"98ebb12d9759df87":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"d5106dc51b7f5d34":{"type":"group","label":"Methods","children":["0bce3fc5ec3e76b0"],"displaytype":"dtMethods"},"8ecf8286d1667a67":{"type":"page","label":"totalDuration","displaytype":"dtMethod"},"c3d534d675a3afa8":{"type":"group","label":"Methods","children":["08efb16bbc092c14"],"displaytype":"dtMethods","inhChHidden":["24e00423129f1300"]},"b6d7efcbb07722e0":{"type":"page","label":"seek","displaytype":"dtMethod"},"8bdf6a2f45035aaf":{"type":"group","label":"Constructor","children":["ed459aa1a80c9521"],"displaytype":"dtConstructors"},"9927ce1237a8b0b1":{"type":"folder","label":"SplitText","children":["8e823ba73d922378","e3d18ff014ff6095","2969a81cb4dc7123"],"displaytype":"dtClass"},"8fed06c936bee4ce":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"43a03109965e7d4e":{"type":"page","label":"totalProgress","displaytype":"dtMethod"},"4e307cf9f4bf2f9f":{"type":"page","label":"config","displaytype":"dtMethod"},"05f5280e21743f35":{"type":"page","label":"getLabelAfter","displaytype":"dtMethod"},"fcb1bb985e1f73e9":{"type":"page","label":"lockedAxis","displaytype":"dtProperty"},"3a1185cd458dbf47":{"type":"page","label":"ease","displaytype":"dtProperty","isStatic":true},"f91ee2882b2e81c3":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"cbfeda9e3ee6bc0e":{"type":"page","label":"Ease","displaytype":"dtConstructor"},"5103496262822a61":{"type":"page","label":"getChildren","displaytype":"dtMethod"},"e41dc2d824809967":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"a3d5652d51086bea":{"type":"page","label":"addLabel","displaytype":"dtMethod"},"e191a597bfccb4b6":{"type":"page","label":"killAll","displaytype":"dtMethod","isStatic":true},"884555468e3861f7":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"424d2c8144aca82b":{"type":"folder","label":"Quint","children":["2516648f9d1556d8","b4b8b312f51dcf31","5a50595a7582d2ba"],"displaytype":"dtClass"},"f35957809b52dfd2":{"type":"page","label":"delay","displaytype":"dtMethod"},"ce029f1efc85be43":{"type":"group","label":"Methods","children":["f35957809b52dfd2","560295553a39dad1","ac42870b8c3fb694","7e0c6f182a9fa2db","b634b21b470a9e55","cdfc78d10c0d9317","9b20c27ddbcaa297","96fc1d850d4a51e6","15ad1f9068bff51f","a8b5fe1cfbc57740","7bb4870bba9c525d","db54f293b92ce54b","d185bba975b21413","652fc9fd0bc84808","d708d783bf75b7f9","b6d7efcbb07722e0","e646e51de97ab747","9c2d24c127d9ebc7","7334cca40467aa44","8ecf8286d1667a67","43a03109965e7d4e","37d58fccb2afe6a1"],"displaytype":"dtMethods"},"1041a5c1cc29d27e":{"type":"group","label":"Methods","children":["56b233da235302db"],"displaytype":"dtMethods"},"d3b047e7bd016acd":{"type":"folder","label":"Power0","children":["adaa77111c49dea7","aa580d04616c5c64","47fb9392ebc1d108"],"displaytype":"dtClass"},"e41b42f226a99048":{"type":"group","label":"Methods","children":["f3d0f009919eaed3","0891734c6084b33c"],"displaytype":"dtMethods","inhChHidden":["ac42870b8c3fb694"]},"d2c60e4c72147852":{"type":"page","label":"yoyo","displaytype":"dtMethod"},"4c4e0dc6ec82e9d2":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"490bfb425778129e":{"type":"page","label":"selector","displaytype":"dtProperty","isStatic":true},"c9a8ad76c3364ab5":{"type":"page","label":"minY","displaytype":"dtProperty"},"23b845c3016f0559":{"type":"folder","label":"ColorPropsPlugin","children":["9702ac0b5f53d28f","872ed3947dd34d34","899649118b227ef3"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"7fa11166b5591c60":{"type":"page","label":"getRatio","displaytype":"dtMethod"},"08efb16bbc092c14":{"type":"page","label":"create","displaytype":"dtMethod","isStatic":true},"root":{"type":"folder","label":"Docs Home","children":["52db442320b34fc1","7eebd4b20adcaecc","2b3bb68a78e65fe7","32bc2e8f667c28b7","8510bec84f8f5ab3","5190c7bdac5c1b1c","fb2d7be451025509","54a27bdcea66a8b2"]},"bbc69448cde56863":{"type":"page","label":"addProp","displaytype":"dtMethod"},"0891734c6084b33c":{"type":"page","label":"render","displaytype":"dtMethod","visible":false},"a52aa2ad91d4ef68":{"type":"page","label":"to","displaytype":"dtMethod","isStatic":true},"b1a85937ab300f11":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"7b988d27511ca604":{"type":"page","label":"time","displaytype":"dtMethod"},"0f60577286c8917a":{"type":"group","label":"Methods","children":["c9842efb11f4c87a","1299db89651318f1"],"displaytype":"dtMethods"},"37fa5f2f65e863e4":{"type":"page","label":"isThrowing","displaytype":"dtProperty"},"b387c2e659d8f05e":{"type":"page","label":"getSVGData","displaytype":"dtMethod","isStatic":true},"24e00423129f1300":{"type":"page","label":"get","displaytype":"dtMethod","isStatic":true},"dc81ae0b3f16fa34":{"type":"page","label":"track","displaytype":"dtMethod","isStatic":true},"bc85ce2321f8a2ba":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"cdfe8fba430bec28":{"type":"group","label":"Methods","children":["bbc69448cde56863","b179b41393276f8a","6c68e64d09faf182","c573b4d50cc3ef87","eee6bf3e1eda7652","daa700409ba890e6","dc81ae0b3f16fa34","08358b2af1bc5b64"],"displaytype":"dtMethods"},"3b5b7725303db7cc":{"type":"group","label":"Constructor","children":["f8a5c0f959c5c320"],"displaytype":"dtConstructors"},"a159d08fd0e75293":{"type":"page","label":"to","displaytype":"dtMethod","isStatic":true},"4e8b086407f4fb2c":{"type":"page","label":"timeline","displaytype":"dtProperty"},"f53a4f032862ef4b":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"c0be05c0eb067258":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"b5e39c1c0244c4f9":{"type":"page","label":"convertToPath","displaytype":"dtMethod","isStatic":true},"6c86cb85353bf463":{"type":"group","label":"Properties","children":["507a069e7c771a21","012753da17253cb9","dec74fd87bb63197"],"displaytype":"dtProperties"},"078881c6d928c5cf":{"type":"page","label":"from","displaytype":"dtMethod"},"5194a1bcd5fa85b4":{"type":"group","label":"Methods","children":["43cdb51b9b63b1b9"],"displaytype":"dtMethods"},"4254772d898fcd15":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"26a8027fc1db0737":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"4f8bff36fbe23240":{"type":"page","label":"pointerX","displaytype":"dtProperty"},"7e0c6f182a9fa2db":{"type":"page","label":"eventCallback","displaytype":"dtMethod"},"01cb3301c2555b06":{"type":"page","label":"lagSmoothing","displaytype":"dtMethod","isStatic":true},"7bb4870bba9c525d":{"type":"page","label":"progress","displaytype":"dtMethod"},"cba66c4d71fcd0b1":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"f3d0f009919eaed3":{"type":"page","label":"add","displaytype":"dtMethod"},"8ecc7c0172b03069":{"type":"page","label":"fromTo","displaytype":"dtMethod","isStatic":true},"24608d0d543250f4":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"dd5daf294b523c5b":{"type":"page","label":"to","displaytype":"dtMethod"},"a2c0edbda1b8dd97":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"1b0dafbb2fcc15bd":{"type":"page","label":"repeat","displaytype":"dtMethod"},"3d2718e5d3fe06be":{"type":"page","label":"pauseAll","displaytype":"dtMethod","isStatic":true},"655846b8e15c420b":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"0f1a0aaf90af74b1":{"type":"page","label":"from","displaytype":"dtMethod","isStatic":true},"78fa71d7884ceae5":{"type":"page","label":"target","displaytype":"dtProperty"},"10948e3702698b9c":{"type":"page","label":"RoughEase","displaytype":"dtConstructor"},"059d5eab36bbdd55":{"type":"folder","label":"Power2","children":["26a8027fc1db0737","f51d07c5ce1f37bf","b1a85937ab300f11"],"displaytype":"dtClass"},"d3b7ad527e13b7fa":{"type":"page","label":"useFrames","displaytype":"dtMethod"},"8226759a93db7a20":{"type":"page","label":"bezierThrough","displaytype":"dtMethod","isStatic":true},"14102df5f069df3e":{"type":"page","label":"invalidate","displaytype":"dtMethod"},"55a9f099bdcda14c":{"type":"page","label":"clear","displaytype":"dtMethod"},"51ce7cb6dea97bce":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"f8dba22fcae52796":{"type":"page","label":"kill","displaytype":"dtMethod"},"515e2689add7a2d1":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"68bdad17bf6c2eb6":{"type":"group","label":"Properties","children":["705ae1ddfe7bf523","eeeab17448587b02","4f68c600370ab277"],"displaytype":"dtProperties"},"4b4e849bd128f6ec":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"9c1a9435be3f8187":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"940d9a4a8e009e19":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"97f627b1ea0da433":{"type":"group","label":"Properties","children":["fd0b8307fd5118c6","4e8b086407f4fb2c","1d9a881066fb186e"],"displaytype":"dtProperties"},"a8b5fe1cfbc57740":{"type":"page","label":"play","displaytype":"dtMethod"},"0569061e32ebf041":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"23bff1d0d1d4314b":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"08c9c08b99f1928d":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"66b2dd5137a72397":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"708b2590f2979899":{"type":"page","label":"getTweensOf","displaytype":"dtMethod"},"8d8ae20b37b00594":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"e7f6ebafb382a8cc":{"type":"page","label":"defaultOverwrite","displaytype":"dtProperty","isStatic":true},"0b7f1e0ec646b3a7":{"type":"page","label":"killDelayedCallsTo","displaytype":"dtMethod","isStatic":true},"7ae217fd46c941b8":{"type":"page","label":"invalidate","displaytype":"dtMethod"},"3853b8e39e36e027":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties","inhChHidden":["1d9a881066fb186e-inherited-211a71fb195b2819"]},"a34d8ad8d2f59e97":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"267ce64e2fbb3f7d":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"10d088592b8a6983":{"type":"page","label":"getActive","displaytype":"dtMethod"},"55855c7922de0e47":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"be137a434f5b4e08":{"type":"folder","label":"CSSPlugin","children":["2cb0c6a759fe7e3e","6e944f104921175a","118d25e0ad422287"],"displaytype":"dtClass"},"b460b4edfd115a43":{"type":"group","label":"Properties","children":["3abce597eeda187e","a34d8ad8d2f59e97","f6d4c1c141e1b351"],"displaytype":"dtProperties"},"22c0e0776a5fa894":{"type":"page","label":"getLabelsArray","displaytype":"dtMethod"},"dd5fed4d3955bfea":{"type":"page","label":"invalidate","displaytype":"dtMethod"},"0428fae2e18a9613":{"type":"group","label":"Properties","children":["f4af2f5c548d7079","fc5f2508dcf8e967","81c4e914fdcf1d68"],"displaytype":"dtProperties"},"83fa31bf259e7bc7":{"type":"page","label":"pointerEvent","displaytype":"dtProperty"},"fd0b8307fd5118c6":{"type":"page","label":"data","displaytype":"dtProperty"},"7913694fbfa93c13":{"type":"folder","label":"Physics2DPlugin","children":["83384ea8feb32555","2a29c5c28bf45f1a","09dc4be9038e030c"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"1c237c1f074047f3":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"02cf505adaa3c1db":{"type":"page","label":"getRatio","displaytype":"dtMethod"},"da3bf77d4e5fdbda":{"type":"page","label":"quadraticToCubic","displaytype":"dtMethod","isStatic":true},"eab7ad5c38079651":{"type":"page","label":"y","displaytype":"dtProperty"},"ed29f159c1c48094":{"type":"group","label":"Methods","children":["e25e10e45b7afcd0","ac73f647a485bd9f","c541ba25c5706fee","8f3a18936cc397fe","5857a6c52c8e3115","688b6ac671dbe69d","b0b2e6f3a9e49b0a","ca2e5cc16169165a","dfba312d84ede771","ffe7905a70b61f73","ffc1eae92622a822","f8dba22fcae52796","5184540aa5ce91bc","6254d7797a9f3826","2c9525d38d4cdb74"],"displaytype":"dtMethods"},"dcf4605fe174e7e9":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"46a65b241e844cdf":{"type":"group","label":"Constructor","children":["c75d3c448b8ad479"],"displaytype":"dtConstructors"},"6151d8080d89dd43":{"type":"page","label":"endY","displaytype":"dtProperty"},"54ae9c54fa1f129c":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"adf9c7ee62774ba4":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"c2327a2ee1c89b0c":{"type":"folder","label":"Strong","children":["cba66c4d71fcd0b1","0371668ad22745b9","8d8ae20b37b00594"],"displaytype":"dtClass"},"c6ed6b795d19d3bd":{"type":"page","label":"lockAxis","displaytype":"dtProperty"},"211a71fb195b2819":{"type":"folder","label":"SimpleTimeline","children":["15e4767347b7b513","e8ba7a11a42bb184","e41b42f226a99048"],"displaytype":"dtClass","inherits":"11f92408d2609969"},"ec6531f0b02f4cf8":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"899649118b227ef3":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"11f92408d2609969":{"type":"folder","label":"Animation","children":["b6e1b50e6cda70f9","97f627b1ea0da433","ce029f1efc85be43"],"displaytype":"dtClass"},"0f4d525c21fd9234":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"0fc1a8aeb91b3bc5":{"type":"page","label":"seek","displaytype":"dtMethod"},"fd9dbda283638161":{"type":"page","label":"set","displaytype":"dtMethod"},"e4742fc3d1dac595":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"83a96a07388dba2e":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"180106cf49a52891":{"type":"page","label":"smoothChildTiming","displaytype":"dtProperty"},"1ab5d820e53d55e7":{"type":"group","label":"Constructor","children":["cbfeda9e3ee6bc0e"],"displaytype":"dtConstructors"},"4919ddfb10ad7aa4":{"type":"page","label":"easeNone","displaytype":"dtProperty","isStatic":true},"32bc2e8f667c28b7":{"type":"folder","label":"TimelineMax","children":["68f0517fc3271c23","66b2dd5137a72397","f0dcc0b2d2c8c8e7"],"displaytype":"dtClass","inherits":"2b3bb68a78e65fe7"},"e949a7537e48535a":{"type":"page","label":"duration","displaytype":"dtMethod"},"b2b27e1c27b569e3":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"bb348eccd434b5a8":{"type":"group","label":"Properties","children":["dd5665cbddb9aa0d","5aff71c5f05c1b9e","ae081698f5101041"],"displaytype":"dtProperties"},"6eb509a7be806cdd":{"type":"group","label":"Properties","children":["cca5b92a93c91acc"],"displaytype":"dtProperties"},"d2d91cf2ebadcfaf":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"db54f293b92ce54b":{"type":"page","label":"restart","displaytype":"dtMethod"},"7d48300a1a10e0e5":{"type":"group","label":"Properties","children":["3a1185cd458dbf47","c1554e19d34a341f","515e2689add7a2d1","4919ddfb10ad7aa4","e96a5eb3d0ae1709"],"displaytype":"dtProperties"},"872ed3947dd34d34":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"324696f621bf52ea":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"d5a05b37afbe9b9a":{"type":"page","label":"endX","displaytype":"dtProperty"},"9e68556934a64568":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"e8ba7a11a42bb184":{"type":"group","label":"Properties","children":["a8583ff10d4f8c14","180106cf49a52891"],"displaytype":"dtProperties"},"bac828fc726d4d82":{"type":"folder","label":"RoundPropsPlugin","children":["3a36e8df86d24075","267ce64e2fbb3f7d","c0be05c0eb067258"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"f8a5c0f959c5c320":{"type":"page","label":"Linear","displaytype":"dtConstructor"},"28124149c0519430":{"type":"folder","label":"MorphSVGPlugin","children":["827c234a7bf0673d","5163184326bb1c60","2f7f4ddca04c7b79"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"dd5665cbddb9aa0d":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"cb1da3c33a8e7bb2":{"type":"page","label":"create","displaytype":"dtMethod","isStatic":true},"0c45afba50900d5a":{"type":"page","label":"invalidate","displaytype":"dtMethod"},"6cbc76eab73a1780":{"type":"page","label":"delayedCall","displaytype":"dtMethod","isStatic":true},"b8b47a21012c2526":{"type":"group","label":"Methods","children":["4e307cf9f4bf2f9f","7fa11166b5591c60"],"displaytype":"dtMethods"},"50d2c59c532a8f8b":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"58e2f543b70f3422":{"type":"page","label":"removePause","displaytype":"dtMethod"},"3eab3f172dae806f":{"type":"folder","label":"Quart","children":["4254772d898fcd15","68bdad17bf6c2eb6","80b4c322700505f4"],"displaytype":"dtClass"},"b1848b9fa107b520":{"type":"page","label":"maxRotation","displaytype":"dtProperty"},"85fd7bd3a68921cd":{"type":"page","label":"staggerTo","displaytype":"dtMethod"},"33fd718342e0def4":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"52db442320b34fc1":{"type":"folder","label":"TweenLite","children":["bb945f1b5836a3fa","ca5b23dca997e6d1","20fbd8766d4c9807"],"displaytype":"dtClass","inherits":"11f92408d2609969"},"43077a47946db3db":{"type":"folder","label":"BezierPlugin","children":["66b43a250da3ed1b","29a90c573ec07617","a7027e3576dae414"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"2cb0c6a759fe7e3e":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"80b4c322700505f4":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"7bc5a8cd3cf25890":{"type":"folder","label":"TextPlugin","children":["eeb28a089980ab64","28c70b19779b65a6","1933814606d8f731"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"6c323162f3657de1":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"e25e10e45b7afcd0":{"type":"page","label":"addEventListener","displaytype":"dtMethod"},"74c21fb76dec0658":{"type":"group","label":"Constructor","children":["cc4d1686bf20a1c4"],"displaytype":"dtConstructors"},"e4776d5c407778cf":{"type":"page","label":"killTweensOf","displaytype":"dtMethod","isStatic":true},"6428cc1a8c9024c6":{"type":"page","label":"getLabelTime","displaytype":"dtMethod"},"6e66ce0380bb7732":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"c67479a40fbed683":{"type":"page","label":"staggerFrom","displaytype":"dtMethod"},"24d394c42b9a9197":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"dadae713b9b4342e":{"type":"page","label":"lines","displaytype":"dtProperty"},"705ae1ddfe7bf523":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"9f6a01699fc50e73":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"5857a6c52c8e3115":{"type":"page","label":"enable","displaytype":"dtMethod"},"efaa84c28aa97dc5":{"type":"page","label":"minRotation","displaytype":"dtProperty"},"7bc9a119e72d6fdc":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"e3d18ff014ff6095":{"type":"group","label":"Properties","children":["0ea9e67b512c6662","dadae713b9b4342e","490bfb425778129e","1a7ff1a6dbe597e1"],"displaytype":"dtProperties"},"c541ba25c5706fee":{"type":"page","label":"create","displaytype":"dtMethod","isStatic":true},"0c466d8095583e88":{"type":"folder","label":"Linear","children":["3b5b7725303db7cc","7d48300a1a10e0e5","d5106dc51b7f5d34"],"displaytype":"dtClass","inherits":"ced2d2c7aaaa4d5f"},"1933814606d8f731":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"6206e87e65b57251":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"4f68c600370ab277":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"a8583ff10d4f8c14":{"type":"page","label":"autoRemoveChildren","displaytype":"dtProperty"},"edb1ee784263b5b1":{"type":"page","label":"staggerFromTo","displaytype":"dtMethod","isStatic":true},"0d7cccc5009c65f7":{"type":"page","label":"maxY","displaytype":"dtProperty"},"e646e51de97ab747":{"type":"page","label":"startTime","displaytype":"dtMethod"},"823bbb81bdf15585":{"type":"page","label":"ticker","displaytype":"dtProperty","isStatic":true},"3a36e8df86d24075":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"1d9a881066fb186e":{"type":"page","label":"vars","displaytype":"dtProperty"},"fcb9333bd0cb5135":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"64346e163a42da5f":{"type":"page","label":"killDelayedCallsTo","displaytype":"dtMethod","isStatic":true},"82b95bb606c34e2f":{"type":"folder","label":"ModifiersPlugin","children":["9f56088fbb368385","6039d897ea7bbf79","4b4e849bd128f6ec"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"2732aa6fd1292931":{"type":"page","label":"getTweensOf","displaytype":"dtMethod","isStatic":true},"00f2f9811f5354cf":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"7e3df7d80af0b0bb":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"5aff71c5f05c1b9e":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"161275f38fc78046":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"a5c3189dc5d058a7":{"type":"group","label":"Constructor","children":["5022798f02602b73"],"displaytype":"dtConstructors"},"22d710f5e23c3b66":{"type":"page","label":"time","displaytype":"dtMethod"},"56b233da235302db":{"type":"page","label":"getRatio","displaytype":"dtMethod"},"bec60f6cd60ff057":{"type":"page","label":"addCallback","displaytype":"dtMethod"},"648945e0ecf65093":{"type":"group","label":"Properties","children":["b64a6a3ccee6d6f8","5402bf6985777c02","d5a05b37afbe9b9a","6151d8080d89dd43","37fa5f2f65e863e4","c6ed6b795d19d3bd","fcb1bb985e1f73e9","b1848b9fa107b520","8efb834a28d647b3","0d7cccc5009c65f7","efaa84c28aa97dc5","066a1985d52b529c","c9a8ad76c3364ab5","83fa31bf259e7bc7","4f8bff36fbe23240","16158325892ff508","b8156aef40ce441e","0f6ea912f8ed3cf7","78fa71d7884ceae5","2000fd9279daa4a5","f9e5f083d2f0f14a","ec3421d82ab1ddd0","eab7ad5c38079651","7ed7b01bbcfcd77c"],"displaytype":"dtProperties"},"54ddb48cbc201e21":{"type":"page","label":"create","displaytype":"dtMethod","isStatic":true},"ed51b120abaec5c2":{"type":"group","label":"Properties","children":["db8d74151be49b20","83a96a07388dba2e","c059f076d35f6211"],"displaytype":"dtProperties"},"6c797b009a65972a":{"type":"page","label":"to","displaytype":"dtMethod","isStatic":true},"9b20c27ddbcaa297":{"type":"page","label":"kill","displaytype":"dtMethod"},"16d64b5b1b82fde8":{"type":"folder","label":"TweenPlugin","children":["24608d0d543250f4","ef78fd00a67f41a2","9e68556934a64568"],"displaytype":"dtClass"},"04a1993cebf0c4d6":{"type":"page","label":"set","displaytype":"dtMethod","isStatic":true},"a5a0e939a1e15082":{"type":"page","label":"tweenFromTo","displaytype":"dtMethod"},"2433928b0e0f6cc4":{"type":"folder","label":"DrawSVGPlugin","children":["02183f29ba37301e","cfc64cf4860b7a28","9c1a9435be3f8187"],"displaytype":"dtClass"},"c9842efb11f4c87a":{"type":"page","label":"config","displaytype":"dtMethod","isStatic":true},"128681295a195066":{"type":"group","label":"Methods","children":["53a700a8824a8cfc"],"displaytype":"dtMethods"},"3abce597eeda187e":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"0840452593dd9b59":{"type":"page","label":"ticker","displaytype":"dtProperty","isStatic":true},"4211b5df656e89c0":{"type":"group","label":"Properties","children":["114305ffa6e0ca96","55855c7922de0e47","884555468e3861f7"],"displaytype":"dtProperties"},"686dcaac6fb0f74d":{"type":"group","label":"Properties","children":["0840452593dd9b59"],"displaytype":"dtProperties","inhChHidden":["4dd34ae7cc4df452","e7f6ebafb382a8cc","b030a6a5f8623c77"]},"fb2d7be451025509":{"type":"folder","label":"Plugins","children":["27db5e20e8bbb9ae","43077a47946db3db","23b845c3016f0559","be137a434f5b4e08","3d0f25beac1906b4","0a6e62faf0a53059","2433928b0e0f6cc4","4c5618b6dde74bd2","82b95bb606c34e2f","28124149c0519430","7913694fbfa93c13","447e2b0a637eb56f","b40bb6a3fc06daa2","5b09c1a25bf1df7e","bac828fc726d4d82","357645cd3e630097","13df7c5ab97ce05d","7bc5a8cd3cf25890","091b70448f18262e","16d64b5b1b82fde8"]},"25619ea4c3be2ee1":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"5163184326bb1c60":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"7d83cb2ee0afc5e8":{"type":"page","label":"TimelineMax","displaytype":"dtConstructor"},"aa580d04616c5c64":{"type":"group","label":"Properties","children":["1d489de3c6de961d","23bff1d0d1d4314b","18fc5255c4712aae"],"displaytype":"dtProperties"},"18e2a901c1ec4b19":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"aa9969ee39687902":{"type":"folder","label":"Bounce","children":["b2b27e1c27b569e3","6c86cb85353bf463","24d394c42b9a9197"],"displaytype":"dtClass"},"3d0f25beac1906b4":{"type":"folder","label":"CSSRulePlugin","children":["e4742fc3d1dac595","e41dc2d824809967","128681295a195066"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"76addd3d1a1f8351":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"37e6c3b703353a69":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"f8a990bb64a897ea":{"type":"folder","label":"Power3","children":["a6a411741b3de888","bb348eccd434b5a8","0f4d525c21fd9234"],"displaytype":"dtClass"},"20fbd8766d4c9807":{"type":"group","label":"Methods","children":["6cbc76eab73a1780","0f1a0aaf90af74b1","ed553a5b6c412a65","2732aa6fd1292931","0c45afba50900d5a","64346e163a42da5f","e4776d5c407778cf","01cb3301c2555b06","a03b81c2162c5416","f9978ca8a660abe5","6c797b009a65972a"],"displaytype":"dtMethods"},"60dac61dd3210643":{"type":"page","label":"totalDuration","displaytype":"dtMethod"},"2a29c5c28bf45f1a":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"149cf67b4ca81773":{"type":"page","label":"updateTo","displaytype":"dtMethod"},"0d0b160bf173886b":{"type":"page","label":"from","displaytype":"dtMethod","isStatic":true},"09dc4be9038e030c":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"43cdb51b9b63b1b9":{"type":"page","label":"parseColor","displaytype":"dtMethod","isStatic":true},"6265da364503c653":{"type":"page","label":"currentLabel","displaytype":"dtMethod"},"d4204b8f13ae9009":{"type":"page","label":"recent","displaytype":"dtMethod"},"b2858d09588f2384":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"357645cd3e630097":{"type":"folder","label":"ScrambleTextPlugin","children":["ceff32533e6974e3","70aea9848fad7d9f","f91ee2882b2e81c3"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"8b4360fa3f850f9e":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"4c00a0ea1a2df967":{"type":"page","label":"getRatio","displaytype":"dtMethod"},"0f6ea912f8ed3cf7":{"type":"page","label":"scrollProxy","displaytype":"dtProperty"},"ac73f647a485bd9f":{"type":"page","label":"applyBounds","displaytype":"dtMethod"},"6254d7797a9f3826":{"type":"page","label":"timeSinceDrag","displaytype":"dtMethod","isStatic":true},"bb945f1b5836a3fa":{"type":"group","label":"Constructor","children":["7142cfd298705364"],"displaytype":"dtConstructors"},"ff278834bf12f050":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"86085ac31cb14a44":{"type":"page","label":"repeatDelay","displaytype":"dtMethod"},"f0dcc0b2d2c8c8e7":{"type":"group","label":"Methods","children":["bec60f6cd60ff057","6265da364503c653","10d088592b8a6983","05f5280e21743f35","38ba67959f173bc5","22c0e0776a5fa894","7ae217fd46c941b8","e87195ea10d96698","ba03755004151a9a","58e2f543b70f3422","01b34bc2697e9225","99a791cc5bc34c40","7b988d27511ca604","60dac61dd3210643","5f4508325a2e0985","a5a0e939a1e15082","7be1802b524c8f27","d2c60e4c72147852"],"displaytype":"dtMethods","inhChHidden":["0891734c6084b33c-inherited-2b3bb68a78e65fe7"]},"28c70b19779b65a6":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"012753da17253cb9":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"2b3bb68a78e65fe7":{"type":"folder","label":"TimelineLite","children":["74c21fb76dec0658","3853b8e39e36e027","da337dfc2601e110"],"displaytype":"dtClass","inherits":"211a71fb195b2819"},"8510bec84f8f5ab3":{"type":"folder","label":"Core","children":["11f92408d2609969","211a71fb195b2819"]},"18c206e3bcd758c3":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"adaa77111c49dea7":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"ac38f7748fba8a28":{"type":"page","label":"find","displaytype":"dtMethod","isStatic":true},"1315d24279922963":{"type":"folder","label":"CustomEase","children":["52e84092d1d9c501","18c206e3bcd758c3","1582ea86afd872d2"],"displaytype":"dtClass","inherits":"ced2d2c7aaaa4d5f"},"0371668ad22745b9":{"type":"group","label":"Properties","children":["7e1eddf0750f462e","72e083392b443236","9f6a01699fc50e73"],"displaytype":"dtProperties"},"f125e9affad597cc":{"type":"page","label":"staggerFromTo","displaytype":"dtMethod"},"263a751df9953a1b":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"ba16ab89ebee23c0":{"type":"page","label":"ease","displaytype":"dtProperty","isStatic":true},"6e944f104921175a":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"c5344f5dcfcf49a3":{"type":"folder","label":"Power4","children":["f24fb3a2d57f8f6b","ed51b120abaec5c2","586fe532b56c055a"],"displaytype":"dtClass"},"ef78fd00a67f41a2":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"fba2505e727039ff":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"ccf8d9233484488a":{"type":"page","label":"revert","displaytype":"dtMethod"},"b030a6a5f8623c77":{"type":"page","label":"onOverwrite","displaytype":"dtProperty","isStatic":true},"0ea9e67b512c6662":{"type":"page","label":"chars","displaytype":"dtProperty"},"830525841e3dd3cb":{"type":"folder","label":"SlowMo","children":["8bdf6a2f45035aaf","fd4abe80e309c14a","b8b47a21012c2526"],"displaytype":"dtClass","inherits":"ced2d2c7aaaa4d5f"},"ed553a5b6c412a65":{"type":"page","label":"fromTo","displaytype":"dtMethod","isStatic":true},"507a069e7c771a21":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"cb31e7d72b0e7b00":{"type":"folder","label":"Cubic","children":["79bc608eee70487f","b460b4edfd115a43","7a0d343c67932ddb"],"displaytype":"dtClass"},"f6d4c1c141e1b351":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"d0e776e5281dcb6c":{"type":"page","label":"defaultResistance","displaytype":"dtProperty","isStatic":true},"3ee5521bddabf8b1":{"type":"group","label":"Methods","children":["ac38f7748fba8a28"],"displaytype":"dtMethods"},"db8d74151be49b20":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"30e0bb194a03450a":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"47fb9392ebc1d108":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"021452ff672b0275":{"type":"page","label":"shiftChildren","displaytype":"dtMethod"},"5402bf6985777c02":{"type":"page","label":"endRotation","displaytype":"dtProperty"},"c9e6d8a4b4e56614":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"ced2d2c7aaaa4d5f":{"type":"folder","label":"Ease","children":["1ab5d820e53d55e7","263a751df9953a1b","1041a5c1cc29d27e"],"displaytype":"dtClass"},"ffe7905a70b61f73":{"type":"page","label":"hitTest","displaytype":"dtMethod"},"6ef668a9f15ebadd":{"type":"page","label":"Animation","displaytype":"dtConstructor"},"cfc64cf4860b7a28":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"a8cedff6562f74c9":{"type":"group","label":"Properties","children":["57b9279b6277c124"],"displaytype":"dtProperties"},"586fe532b56c055a":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"1299db89651318f1":{"type":"page","label":"getRatio","displaytype":"dtMethod"},"f9978ca8a660abe5":{"type":"page","label":"set","displaytype":"dtMethod","isStatic":true},"d708d783bf75b7f9":{"type":"page","label":"reversed","displaytype":"dtMethod"},"ae986dce4fec960c":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"57b9279b6277c124":{"type":"page","label":"target","displaytype":"dtProperty"},"5022798f02602b73":{"type":"page","label":"SteppedEase","displaytype":"dtConstructor"},"b64a6a3ccee6d6f8":{"type":"page","label":"autoScroll","displaytype":"dtProperty"},"16158325892ff508":{"type":"page","label":"pointerY","displaytype":"dtProperty"},"cdfc78d10c0d9317":{"type":"page","label":"isActive","displaytype":"dtMethod"},"b0b5d2a90d50df62":{"type":"group","label":"Properties","children":["18e2a901c1ec4b19","655846b8e15c420b","633ffc00de2e0c33"],"displaytype":"dtProperties"},"723964a4fd3ac4af":{"type":"folder","label":"Circ","children":["bc85ce2321f8a2ba","0428fae2e18a9613","d2d91cf2ebadcfaf"],"displaytype":"dtClass"},"633ffc00de2e0c33":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"fe7727d7fa29b16b":{"type":"folder","label":"Expo","children":["7bc9a119e72d6fdc","4211b5df656e89c0","51ce7cb6dea97bce"],"displaytype":"dtClass"},"c100119126b4d17b":{"type":"page","label":"getTweensOf","displaytype":"dtMethod","isStatic":true},"1d489de3c6de961d":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"8b14bde95693efa6":{"type":"page","label":"totalDuration","displaytype":"dtMethod"},"c573b4d50cc3ef87":{"type":"page","label":"isTracking","displaytype":"dtMethod","isStatic":true},"eee6bf3e1eda7652":{"type":"page","label":"isTrackingProp","displaytype":"dtMethod"},"e6d83093f7f5a207":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"0cad0bf3209f5092":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"3ef1899c737d2830":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"594254e8876faff3":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"fd83a6199b3fccbe":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"e124272392141d4f":{"type":"page","label":"removeLabel","displaytype":"dtMethod"},"d185bba975b21413":{"type":"page","label":"resume","displaytype":"dtMethod"},"681f9501cd7f99b3":{"type":"folder","label":"CustomWiggle","children":["20b7b61b00d9fd0d","4c4e0dc6ec82e9d2","e2915059f396caf2"],"displaytype":"dtClass","inherits":"1315d24279922963"},"7e1eddf0750f462e":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"9e2dfbcd4b851bdb":{"type":"page","label":"globalTimeScale","displaytype":"dtMethod","isStatic":true},"2c9525d38d4cdb74":{"type":"page","label":"update","displaytype":"dtMethod"},"07392828b060a423":{"type":"folder","label":"Sine","children":["33fd718342e0def4","25b25b3798687d9c","4155593f16330ad4"],"displaytype":"dtClass"},"677955a5f3bdfcb4":{"type":"page","label":"config","displaytype":"dtMethod"},"eb1821730d324359":{"type":"folder","label":"VelocityTracker","children":["ff278834bf12f050","a8cedff6562f74c9","cdfe8fba430bec28"],"displaytype":"dtClass"},"38ba67959f173bc5":{"type":"page","label":"getLabelBefore","displaytype":"dtMethod"},"7334cca40467aa44":{"type":"page","label":"timeScale","displaytype":"dtMethod"},"b634b21b470a9e55":{"type":"page","label":"invalidate","displaytype":"dtMethod"},"dec74fd87bb63197":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"cc4d1686bf20a1c4":{"type":"page","label":"TimelineLite","displaytype":"dtConstructor"},"19160c04837df0bb":{"type":"folder","label":"CustomBounce","children":["7e6f9f4cc2e01616","51c3b5a2632ca427","c3d534d675a3afa8"],"displaytype":"dtClass","inherits":"1315d24279922963"},"0259e6a57bbc19a8":{"type":"group","label":"Constructor","children":["0443695353538039"],"displaytype":"dtConstructors"},"ce25d7004a81e18d":{"type":"page","label":"pathDataToBezier","displaytype":"dtMethod","isStatic":true},"d938e1f03eee893f":{"type":"page","label":"untrack","displaytype":"dtMethod","isStatic":true},"ab22a377935cb849":{"type":"page","label":"fromTo","displaytype":"dtMethod"},"51c3b5a2632ca427":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"d502fa3af383145d":{"type":"page","label":"target","displaytype":"dtProperty"},"84e7a26232a0339f":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"79bc608eee70487f":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"99a791cc5bc34c40":{"type":"page","label":"repeatDelay","displaytype":"dtMethod"},"7a55f0c80975d390":{"type":"group","label":"Properties","children":["37e6c3b703353a69","f5fe26060be2a85b","7e3df7d80af0b0bb"],"displaytype":"dtProperties"},"e6e77ed616cdbcd0":{"type":"page","label":"totalDuration","displaytype":"dtMethod"},"a7027e3576dae414":{"type":"group","label":"Methods","children":["8226759a93db7a20","6928377908c249d2","da3bf77d4e5fdbda"],"displaytype":"dtMethods"},"edeb564de2d4abf1":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"6f77f2839c53472f":{"type":"page","label":"delayedCall","displaytype":"dtMethod","isStatic":true},"0a6e62faf0a53059":{"type":"folder","label":"DirectionalRotationPlugin","children":["3ef1899c737d2830","e0fb174b345d95b8","8b4360fa3f850f9e"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"c059f076d35f6211":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"0bce3fc5ec3e76b0":{"type":"page","label":"getRatio","displaytype":"dtMethod"},"8f3a18936cc397fe":{"type":"page","label":"disable","displaytype":"dtMethod"},"bdf13585fd570814":{"type":"page","label":"track","displaytype":"dtMethod","isStatic":true},"9c2d24c127d9ebc7":{"type":"page","label":"time","displaytype":"dtMethod"},"5184540aa5ce91bc":{"type":"page","label":"startDrag","displaytype":"dtMethod"},"81c4e914fdcf1d68":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"f7f7759fe81fd22f":{"type":"folder","label":"Elastic","children":["594254e8876faff3","7a55f0c80975d390","e6d83093f7f5a207"],"displaytype":"dtClass"},"da337dfc2601e110":{"type":"group","label":"Methods","children":["fb3630bc7fd65dd2","a3d5652d51086bea","b15c1fc9e7c9418c","d19482f5b1cfd929","55a9f099bdcda14c","e949a7537e48535a","3ba39b4db90dc9ba","078881c6d928c5cf","ab22a377935cb849","5103496262822a61","6428cc1a8c9024c6","708b2590f2979899","dd5fed4d3955bfea","d4204b8f13ae9009","d49e46f2e8270a08","e124272392141d4f","0fc1a8aeb91b3bc5","fd9dbda283638161","021452ff672b0275","c67479a40fbed683","f125e9affad597cc","85fd7bd3a68921cd","dd5daf294b523c5b","e6e77ed616cdbcd0","d3b7ad527e13b7fa"],"displaytype":"dtMethods","inhChShown":["ac42870b8c3fb694-inherited-211a71fb195b2819"]},"02183f29ba37301e":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"1a7ff1a6dbe597e1":{"type":"page","label":"words","displaytype":"dtProperty"},"33128efe61f40353":{"type":"group","label":"Methods","children":["677955a5f3bdfcb4","4c00a0ea1a2df967"],"displaytype":"dtMethods"},"daa700409ba890e6":{"type":"page","label":"removeProp","displaytype":"dtMethod"},"c75d3c448b8ad479":{"type":"page","label":"Draggable","displaytype":"dtConstructor"},"b8156aef40ce441e":{"type":"page","label":"rotation","displaytype":"dtProperty"},"b15c1fc9e7c9418c":{"type":"page","label":"addPause","displaytype":"dtMethod"},"29a90c573ec07617":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"e2915059f396caf2":{"type":"group","label":"Methods","children":["54ddb48cbc201e21"],"displaytype":"dtMethods","inhChHidden":["24e00423129f1300"]},"b348e04893b18cee":{"type":"group","label":"Properties","children":["6c323162f3657de1","f878aae254cc6211","c9e6d8a4b4e56614"],"displaytype":"dtProperties"},"f9e5f083d2f0f14a":{"type":"page","label":"vars","displaytype":"dtProperty"},"96fc1d850d4a51e6":{"type":"page","label":"pause","displaytype":"dtMethod"},"fd4abe80e309c14a":{"type":"group","label":"Properties","children":["ba16ab89ebee23c0"],"displaytype":"dtProperties"},"dfba312d84ede771":{"type":"page","label":"getDirection","displaytype":"dtMethod"},"3c9048f80b2538bc":{"type":"group","label":"Properties","children":["d0e776e5281dcb6c"],"displaytype":"dtProperties"},"e87195ea10d96698":{"type":"page","label":"progress","displaytype":"dtMethod"},"22c860af2d1dbbcb":{"type":"folder","label":"Power1","children":["50d2c59c532a8f8b","75a392dd00c75d1c","fd83a6199b3fccbe"],"displaytype":"dtClass"},"948f84858c0c9111":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"e51dec40a03460d5":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"478e667b4c764f52":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"eeb28a089980ab64":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"c799d800af33aa6a":{"type":"page","label":"getAllTweens","displaytype":"dtMethod","isStatic":true},"8e823ba73d922378":{"type":"group","label":"Constructor","children":["17115da28b40d682"],"displaytype":"dtConstructors"},"17115da28b40d682":{"type":"page","label":"SplitText","displaytype":"dtConstructor"},"2516648f9d1556d8":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"4dd34ae7cc4df452":{"type":"page","label":"defaultEase","displaytype":"dtProperty","isStatic":true},"91943bd05ded63bb":{"type":"folder","label":"Quad","children":["30e0bb194a03450a","b348e04893b18cee","e51dec40a03460d5"],"displaytype":"dtClass"},"c87b724c588c3884":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"6c68e64d09faf182":{"type":"page","label":"getVelocity","displaytype":"dtMethod"},"65d8dcc6c6cabcbd":{"type":"page","label":"staggerTo","displaytype":"dtMethod","isStatic":true},"66b43a250da3ed1b":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"b218bb5d19f9b9ab":{"type":"page","label":"getVelocity","displaytype":"dtMethod","isStatic":true},"37d58fccb2afe6a1":{"type":"page","label":"totalTime","displaytype":"dtMethod"},"57d33bbbf0c4c2c2":{"type":"folder","label":"RoughEase","children":["d7db3bffccebb26f","6eb509a7be806cdd","33128efe61f40353"],"displaytype":"dtClass"},"4c5618b6dde74bd2":{"type":"folder","label":"EaselPlugin","children":["6e66ce0380bb7732","324696f621bf52ea","1c237c1f074047f3"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"72e083392b443236":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"ef46b9dc2d56104b":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"13df7c5ab97ce05d":{"type":"folder","label":"ScrollToPlugin","children":["98ebb12d9759df87","478e667b4c764f52","ed15e87bd352c698"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"109ea284ffe68190":{"type":"page","label":"killChildTweensOf","displaytype":"dtMethod","isStatic":true},"6928377908c249d2":{"type":"page","label":"cubicToQuadratic","displaytype":"dtMethod","isStatic":true},"c1554e19d34a341f":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"c30ce9b52ee02ffc":{"type":"group","label":"Methods","children":["4c659aa2524b1945","c272ebc90f1e65c8","c33fc0b177a91675","b218bb5d19f9b9ab","56a562fa808f415e","a159d08fd0e75293","bdf13585fd570814","d938e1f03eee893f"],"displaytype":"dtMethods"},"ffc1eae92622a822":{"type":"page","label":"hitTest","displaytype":"dtMethod","isStatic":true},"cca5b92a93c91acc":{"type":"page","label":"ease","displaytype":"dtProperty","isStatic":true},"1582ea86afd872d2":{"type":"group","label":"Methods","children":["cb1da3c33a8e7bb2","24e00423129f1300","02cf505adaa3c1db","b387c2e659d8f05e"],"displaytype":"dtMethods"},"53a700a8824a8cfc":{"type":"page","label":"getRule","displaytype":"dtMethod","isStatic":true},"a6a411741b3de888":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"52466ef8d6a25e07":{"type":"page","label":"SimpleTimeline","displaytype":"dtConstructor"},"c33fc0b177a91675":{"type":"page","label":"calculateTweenDuration","displaytype":"dtMethod","isStatic":true},"118d25e0ad422287":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"3ba39b4db90dc9ba":{"type":"page","label":"exportRoot","displaytype":"dtMethod","isStatic":true},"652fc9fd0bc84808":{"type":"page","label":"reverse","displaytype":"dtMethod"},"4155593f16330ad4":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"f24fb3a2d57f8f6b":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"52e84092d1d9c501":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"08358b2af1bc5b64":{"type":"page","label":"untrack","displaytype":"dtMethod","isStatic":true},"ae081698f5101041":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"f51d07c5ce1f37bf":{"type":"group","label":"Properties","children":["0cad0bf3209f5092","79c15370e7fe03de","b2858d09588f2384"],"displaytype":"dtProperties"},"7a0d343c67932ddb":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"d49e46f2e8270a08":{"type":"page","label":"remove","displaytype":"dtMethod"},"4c659aa2524b1945":{"type":"page","label":"calculateChange","displaytype":"dtMethod","isStatic":true},"c272ebc90f1e65c8":{"type":"page","label":"calculateDuration","displaytype":"dtMethod","isStatic":true},"1989613671fc0074":{"type":"page","label":"resumeAll","displaytype":"dtMethod","isStatic":true},"827c234a7bf0673d":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"ba03755004151a9a":{"type":"page","label":"removeCallBack","displaytype":"dtMethod"},"f5fe26060be2a85b":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"fb3630bc7fd65dd2":{"type":"page","label":"add","displaytype":"dtMethod"},"2810d7a52bbf48a8":{"type":"page","label":"yoyo","displaytype":"dtMethod"},"83384ea8feb32555":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"f4af2f5c548d7079":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"15e4767347b7b513":{"type":"group","label":"Constructor","children":["52466ef8d6a25e07"],"displaytype":"dtConstructors"},"f878aae254cc6211":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"2000fd9279daa4a5":{"type":"page","label":"tween","displaytype":"dtProperty"},"b40bb6a3fc06daa2":{"type":"folder","label":"PixiPlugin","children":["fcb9333bd0cb5135","f53a4f032862ef4b","5194a1bcd5fa85b4"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"14c14e56fe4cfb7f":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"70aea9848fad7d9f":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"7824c0e53c911bbe":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"ca2e5cc16169165a":{"type":"page","label":"get","displaytype":"dtMethod","isStatic":true},"01b34bc2697e9225":{"type":"page","label":"repeat","displaytype":"dtMethod"},"ec3421d82ab1ddd0":{"type":"page","label":"x","displaytype":"dtProperty"},"eeeab17448587b02":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"5190c7bdac5c1b1c":{"type":"folder","label":"Easing","children":["ea91e06b445f4ac7","aa9969ee39687902","723964a4fd3ac4af","cb31e7d72b0e7b00","19160c04837df0bb","1315d24279922963","681f9501cd7f99b3","ced2d2c7aaaa4d5f","09af4edb7491fd9e","f7f7759fe81fd22f","fe7727d7fa29b16b","0c466d8095583e88","d3b047e7bd016acd","22c860af2d1dbbcb","059d5eab36bbdd55","f8a990bb64a897ea","c5344f5dcfcf49a3","91943bd05ded63bb","3eab3f172dae806f","424d2c8144aca82b","07392828b060a423","c2327a2ee1c89b0c","57d33bbbf0c4c2c2","830525841e3dd3cb","0879a53eb4051ccf"]},"0aeeb28b67105bbf":{"type":"group","label":"Methods","children":["6f77f2839c53472f","0d0b160bf173886b","8ecc7c0172b03069","c799d800af33aa6a","c100119126b4d17b","9e2dfbcd4b851bdb","14102df5f069df3e","748acc1d9c528534","e191a597bfccb4b6","109ea284ffe68190","0b7f1e0ec646b3a7","5520cb7c254b2de6","3d2718e5d3fe06be","9555ceafd00d82bd","1b0dafbb2fcc15bd","86085ac31cb14a44","1989613671fc0074","04a1993cebf0c4d6","7e006fa58303b1cc","edb1ee784263b5b1","65d8dcc6c6cabcbd","22d710f5e23c3b66","a52aa2ad91d4ef68","8b14bde95693efa6","3783d0a065069766","149cf67b4ca81773","2810d7a52bbf48a8"],"displaytype":"dtMethods","inhChHidden":["a03b81c2162c5416"]},"25b25b3798687d9c":{"type":"group","label":"Properties","children":["c87b724c588c3884","0569061e32ebf041","84e7a26232a0339f"],"displaytype":"dtProperties"},"79c15370e7fe03de":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"09af4edb7491fd9e":{"type":"folder","label":"EaseLookup","children":["14c14e56fe4cfb7f","fba2505e727039ff","3ee5521bddabf8b1"],"displaytype":"dtClass"},"0879a53eb4051ccf":{"type":"folder","label":"SteppedEase","children":["a5c3189dc5d058a7","adf9c7ee62774ba4","0f60577286c8917a"],"displaytype":"dtClass","inherits":"ced2d2c7aaaa4d5f"},"5a50595a7582d2ba":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"00b17703b89cfb4b":{"type":"page","label":"selector","displaytype":"dtProperty","isStatic":true},"e0fb174b345d95b8":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"b0b2e6f3a9e49b0a":{"type":"page","label":"endDrag","displaytype":"dtMethod"},"d7db3bffccebb26f":{"type":"group","label":"Constructor","children":["10948e3702698b9c"],"displaytype":"dtConstructors"},"ea91e06b445f4ac7":{"type":"folder","label":"Back","children":["dcf4605fe174e7e9","b0b5d2a90d50df62","8fed06c936bee4ce"],"displaytype":"dtClass"},"b179b41393276f8a":{"type":"page","label":"getByTarget","displaytype":"dtMethod","isStatic":true},"3783d0a065069766":{"type":"page","label":"totalProgress","displaytype":"dtMethod"},"8efb834a28d647b3":{"type":"page","label":"maxX","displaytype":"dtProperty"},"5b09c1a25bf1df7e":{"type":"folder","label":"RaphaelPlugin","children":["00f2f9811f5354cf","948f84858c0c9111","ec6531f0b02f4cf8"],"displaytype":"dtClass"},"15ad1f9068bff51f":{"type":"page","label":"paused","displaytype":"dtMethod"},"7142cfd298705364":{"type":"page","label":"TweenLite","displaytype":"dtConstructor"},"54a27bdcea66a8b2":{"type":"folder","label":"Utilities","children":["27ffcb75af705686","9927ce1237a8b0b1","eb1821730d324359"]},"ed459aa1a80c9521":{"type":"page","label":"SlowMo","displaytype":"dtConstructor"},"5520cb7c254b2de6":{"type":"page","label":"killTweensOf","displaytype":"dtMethod","isStatic":true},"7ed7b01bbcfcd77c":{"type":"page","label":"zIndex","displaytype":"dtProperty"},"2f7f4ddca04c7b79":{"type":"group","label":"Methods","children":["b5e39c1c0244c4f9","ce25d7004a81e18d"],"displaytype":"dtMethods"},"447e2b0a637eb56f":{"type":"folder","label":"PhysicsPropsPlugin","children":["48e094163435511b","ae986dce4fec960c","76addd3d1a1f8351"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"560295553a39dad1":{"type":"page","label":"duration","displaytype":"dtMethod"},"b4b8b312f51dcf31":{"type":"group","label":"Properties","children":["54ae9c54fa1f129c","edeb564de2d4abf1","7824c0e53c911bbe"],"displaytype":"dtProperties"},"066a1985d52b529c":{"type":"page","label":"minX","displaytype":"dtProperty"},"ac42870b8c3fb694":{"type":"page","label":"endTime","displaytype":"dtMethod"},"75a392dd00c75d1c":{"type":"group","label":"Properties","children":["08c9c08b99f1928d","6206e87e65b57251","ef46b9dc2d56104b"],"displaytype":"dtProperties"},"b6e1b50e6cda70f9":{"type":"group","label":"Constructor","children":["6ef668a9f15ebadd"],"displaytype":"dtConstructors"},"0443695353538039":{"type":"page","label":"TweenMax","displaytype":"dtConstructor"},"688b6ac671dbe69d":{"type":"page","label":"enabled","displaytype":"dtMethod"},"a4be9362b50f3a83":{"type":"page","label":"split","displaytype":"dtMethod","isStatic":true},"5f4508325a2e0985":{"type":"page","label":"totalProgress","displaytype":"dtMethod"},"7e6f9f4cc2e01616":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"748acc1d9c528534":{"type":"page","label":"isTweening","displaytype":"dtMethod","isStatic":true},"7be1802b524c8f27":{"type":"page","label":"tweenTo","displaytype":"dtMethod"},"ca5b23dca997e6d1":{"type":"group","label":"Properties","children":["4dd34ae7cc4df452","e7f6ebafb382a8cc","b030a6a5f8623c77","00b17703b89cfb4b","d502fa3af383145d","823bbb81bdf15585"],"displaytype":"dtProperties"},"ceff32533e6974e3":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"18fc5255c4712aae":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"091b70448f18262e":{"type":"folder","label":"ThrowPropsPlugin","children":["940d9a4a8e009e19","3c9048f80b2538bc","c30ce9b52ee02ffc"],"displaytype":"dtClass"},"68f0517fc3271c23":{"type":"group","label":"Constructor","children":["7d83cb2ee0afc5e8"],"displaytype":"dtConstructors"},"27ffcb75af705686":{"type":"folder","label":"Draggable","children":["46a65b241e844cdf","648945e0ecf65093","ed29f159c1c48094"],"displaytype":"dtClass"},"27db5e20e8bbb9ae":{"type":"folder","label":"AttrPlugin","children":["161275f38fc78046","a2c0edbda1b8dd97","25619ea4c3be2ee1"],"displaytype":"dtClass","inherits":"16d64b5b1b82fde8"},"9702ac0b5f53d28f":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"d19482f5b1cfd929":{"type":"page","label":"call","displaytype":"dtMethod"},"114305ffa6e0ca96":{"type":"page","label":"easeIn","displaytype":"dtProperty","isStatic":true},"e96a5eb3d0ae1709":{"type":"page","label":"easeOut","displaytype":"dtProperty","isStatic":true},"7eebd4b20adcaecc":{"type":"folder","label":"TweenMax","children":["0259e6a57bbc19a8","686dcaac6fb0f74d","0aeeb28b67105bbf"],"displaytype":"dtClass","inherits":"52db442320b34fc1"},"20b7b61b00d9fd0d":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"9555ceafd00d82bd":{"type":"page","label":"progress","displaytype":"dtMethod"},"2969a81cb4dc7123":{"type":"group","label":"Methods","children":["ccf8d9233484488a","a4be9362b50f3a83"],"displaytype":"dtMethods"},"6039d897ea7bbf79":{"type":"group","label":"Properties","children":[],"displaytype":"dtProperties"},"48e094163435511b":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"fc5f2508dcf8e967":{"type":"page","label":"easeInOut","displaytype":"dtProperty","isStatic":true},"ed15e87bd352c698":{"type":"group","label":"Methods","children":[],"displaytype":"dtMethods"},"9f56088fbb368385":{"type":"group","label":"Constructor","children":[],"displaytype":"dtConstructors"},"7e006fa58303b1cc":{"type":"page","label":"staggerFrom","displaytype":"dtMethod","isStatic":true},"56a562fa808f415e":{"type":"page","label":"isTracking","displaytype":"dtMethod","isStatic":true}},"configobjects":{"f30ae6a0d4cb24a2":{"type":"coElement","label":"onDragEndParams"},"66cba4d5da870b3b":{"type":"coElement","label":"edgeResistance"},"484a9cd6847057ea":{"type":"coElement","label":"charsClass"},"f10a4a463f486d1a":{"type":"coElement","label":"onLockAxis"},"146a504063bb6ab7":{"type":"coElement","label":"offsetY"},"2a344abc5d73a637":{"type":"coContainer","label":"CustomBounce","children":["68bbfcd7d4727cb7","179fe104eb1574d0","307e72098e372787","a5cf84fac5674d10"]},"addd2d84013b1134":{"type":"coElement","label":"type"},"71b5e21519642473":{"type":"coElement","label":"onDragEndScope"},"001be8077e6e9763":{"type":"coElement","label":"onRepeatParams"},"1e30866acfaa806d":{"type":"coElement","label":"offsetX"},"1c306a319826c160":{"type":"coElement","label":"lockAxis"},"22750cc8867b561e":{"type":"coElement","label":"smoothChildTiming"},"d0461dff035b44f9":{"type":"coElement","label":"points"},"307e72098e372787":{"type":"coElement","label":"strength"},"c0ab38e528d80db5":{"type":"coElement","label":"delay"},"0e014e8442979a30":{"type":"coElement","label":"onPress"},"98f8c0d24cc27123":{"type":"coElement","label":"onDragStartScope"},"2df6109eebc75958":{"type":"coElement","label":"stagger"},"c0912704078628d1":{"type":"coElement","label":"repeat"},"73ed096fbb4733b1":{"type":"coElement","label":"wiggles"},"c273be21a6d5d359":{"type":"coContainer","label":"TweenLite","children":["c0ab38e528d80db5","5362451ab9c301de","4c4c055e0d1b3ef4","c0b2819eb45d22fa","12bc54ae2abf7f69","6fb092df021a71b8","3858c3c0e131d9f9","1bc824ce6dc34487","710eec28580f52cc","cb1dfa66a7a72a20","31d511c03f29c247","b415f9c3aaa120c7","5831c58b3d824f56","67683f3825ed6254","1d0471f0541e51f6","08db63c99851dad9","0671715f6c9c297a","4502dc942c2f6ad3","b11dc6cdb0b25ad4","23dd15a5cb01a73a","a7dacb5385dc0208","47f712d4a2ca9bd6"]},"08db63c99851dad9":{"type":"coElement","label":"onUpdateParams"},"cb1dfa66a7a72a20":{"type":"coElement","label":"onReverseCompleteParams"},"f5404cc3146549c8":{"type":"coElement","label":"onStartParams"},"d3baed1556229a6c":{"type":"coElement","label":"template"},"45862563ed327e51":{"type":"coElement","label":"y"},"1bc824ce6dc34487":{"type":"coElement","label":"onCompleteScope"},"0e3c0b29fc38903c":{"type":"coElement","label":"matrix"},"36b18ca91ec3b297":{"type":"coElement","label":"onClick"},"138bfd0f79da1923":{"type":"coElement","label":"autoScroll"},"31d511c03f29c247":{"type":"coElement","label":"onReverseCompleteScope"},"8f60177180297349":{"type":"coElement","label":"width"},"3e643e36562500cb":{"type":"coElement","label":"dragResistance"},"e62bf18e77fe7fef":{"type":"coElement","label":"type"},"cf97049a05eea106":{"type":"coElement","label":"onReleaseScope"},"b1f70b1c29bb1592":{"type":"coElement","label":"onDragEnd"},"1b58719563b939ae":{"type":"coElement","label":"timingEase"},"a8f8b61a98efe26d":{"type":"coElement","label":"height"},"53ab3440dc93284a":{"type":"coContainer","label":"SplitText","children":["b047280f767c4b7b","484a9cd6847057ea","99dd4e1976eda5e5","435f9b9c59d62464","601ce401aa4b786e","f1164c1177ade869"]},"0e1883e99856fe87":{"type":"coElement","label":"yoyo"},"5b6654db000793db":{"type":"coElement","label":"throwProps"},"710eec28580f52cc":{"type":"coElement","label":"onReverseComplete"},"14f7b2ab2306d25d":{"type":"coElement","label":"onRepeatScope"},"5f649fd49e95f606":{"type":"coElement","label":"onThrowComplete"},"c584f051bacbf69a":{"type":"coElement","label":"onClickParams"},"98e0cdd165137d37":{"type":"coElement","label":"onStartParams"},"b32d8d5efb278d20":{"type":"coElement","label":"onReverseCompleteParams"},"12bc54ae2abf7f69":{"type":"coElement","label":"overwrite"},"34877b494cd68df3":{"type":"coElement","label":"onStartParams"},"0dc94f7962bb1809":{"type":"coContainer","label":"Draggable","children":["addd2d84013b1134","d2bd9f16ab20530b","1c306a319826c160","aca7362aad5f9793","66cba4d5da870b3b","3e643e36562500cb","df43bae4a56cfe24","316858f5f13de012","138bfd0f79da1923","a6944cbf3f89e97e","ae5d53b7dad3637a","5b6654db000793db","e6ec9a76a8a3b2ae","2ba22762a5b9b4a0","0e014e8442979a30","11eab4868f87b7c3","9bea7a673f2a5f91","b1f70b1c29bb1592","8ba85d1dc9b4a8e9","36b18ca91ec3b297","1458512f4f6da6b0","0310445a4a5ffbf5","81c56c4009633eaf","f30ae6a0d4cb24a2","5937ab91418da4cc","c584f051bacbf69a","16500e6ab1ae062d","98f8c0d24cc27123","8d4780fbb348c43d","71b5e21519642473","cf97049a05eea106","4ce57534a0d91a84","f10a4a463f486d1a","bcc4d262959c2e60","d29495128260fefc","05478e8ef895c98c","ffa4332009ed59c7","5f649fd49e95f606"]},"6c7082f81905820b":{"type":"coElement","label":"amplitudeEase"},"16500e6ab1ae062d":{"type":"coElement","label":"onPressScope"},"6c2a5ea7a2235260":{"type":"coElement","label":"onUpdateParams"},"179fe104eb1574d0":{"type":"coElement","label":"squashID"},"e4bce09225a62234":{"type":"coElement","label":"onUpdateParams"},"2ba22762a5b9b4a0":{"type":"coElement","label":"clickableTest"},"4056e396f43ce90d":{"type":"coElement","label":"clamp"},"91440e0dbaa1e01d":{"type":"coElement","label":"align"},"4ce57534a0d91a84":{"type":"coElement","label":"onClickScope"},"0516dafc90c83002":{"type":"coElement","label":"cycle"},"4b93e7c32eaa5f45":{"type":"coElement","label":"onUpdateParams"},"bf3441936fcd04fd":{"type":"coContainer","label":"TweenMax","children":["c0ab38e528d80db5","5362451ab9c301de","c0912704078628d1","ce8ef82d428fb818","0e1883e99856fe87","c928fdd09fd62a63","4c4c055e0d1b3ef4","12bc54ae2abf7f69","6fb092df021a71b8","c0b2819eb45d22fa","3858c3c0e131d9f9","1bc824ce6dc34487","634ca2f9b61c71ba","001be8077e6e9763","14f7b2ab2306d25d","710eec28580f52cc","b32d8d5efb278d20","31d511c03f29c247","b415f9c3aaa120c7","f5404cc3146549c8","67683f3825ed6254","1d0471f0541e51f6","e4bce09225a62234","0671715f6c9c297a","7f77859ab3515047","4502dc942c2f6ad3","b11dc6cdb0b25ad4","23dd15a5cb01a73a","a7dacb5385dc0208","47f712d4a2ca9bd6"]},"47f712d4a2ca9bd6":{"type":"coElement","label":"callbackScope"},"634ca2f9b61c71ba":{"type":"coElement","label":"onRepeat"},"bcc4d262959c2e60":{"type":"coElement","label":"callbackScope"},"980585c43a98afd0":{"type":"coContainer","label":"Stagger","children":["0516dafc90c83002","c0ab38e528d80db5","5362451ab9c301de","c0912704078628d1","ce8ef82d428fb818","0e1883e99856fe87","4c4c055e0d1b3ef4","12bc54ae2abf7f69","6fb092df021a71b8","c0b2819eb45d22fa","3858c3c0e131d9f9","1bc824ce6dc34487","634ca2f9b61c71ba","001be8077e6e9763","14f7b2ab2306d25d","710eec28580f52cc","cb1dfa66a7a72a20","31d511c03f29c247","b415f9c3aaa120c7","5831c58b3d824f56","67683f3825ed6254","1d0471f0541e51f6","08db63c99851dad9","0671715f6c9c297a","7f77859ab3515047","4502dc942c2f6ad3","b11dc6cdb0b25ad4","23dd15a5cb01a73a","a7dacb5385dc0208","47f712d4a2ca9bd6"]},"a5cf84fac5674d10":{"type":"coElement","label":"endAtStart"},"b11dc6cdb0b25ad4":{"type":"coElement","label":"lazy"},"ea05af7191454490":{"type":"coContainer","label":"RoughEase","children":["4056e396f43ce90d","d0461dff035b44f9","6c1ff8e4bba97b5b","a2e04ec469211693","b47d6ea25d670878","d3baed1556229a6c"]},"b6285db341c79d60":{"type":"coContainer","label":"MorphSVGPlugin.pathDataToBezier","children":["6590258193b0bcbc","1e30866acfaa806d","146a504063bb6ab7","0e3c0b29fc38903c"]},"df43bae4a56cfe24":{"type":"coElement","label":"zIndexBoost"},"c928fdd09fd62a63":{"type":"coElement","label":"yoyoEase"},"ffa4332009ed59c7":{"type":"coElement","label":"onThrowUpdate"},"d2bd9f16ab20530b":{"type":"coElement","label":"bounds"},"05478e8ef895c98c":{"type":"coElement","label":"force3D"},"81c56c4009633eaf":{"type":"coElement","label":"onDragParams"},"b047280f767c4b7b":{"type":"coElement","label":"type"},"35d0319919c01f84":{"type":"coElement","label":"autoRemoveChildren"},"e6ec9a76a8a3b2ae":{"type":"coElement","label":"minimumMovement"},"6c1ff8e4bba97b5b":{"type":"coElement","label":"randomize"},"cd30416934de29e1":{"type":"coContainer","label":"TimelineLite","children":["c0ab38e528d80db5","4c4c055e0d1b3ef4","6fb092df021a71b8","1bc824ce6dc34487","4502dc942c2f6ad3","197338cafda956a7","91440e0dbaa1e01d","2df6109eebc75958","b415f9c3aaa120c7","67683f3825ed6254","710eec28580f52cc","31d511c03f29c247","1d0471f0541e51f6","0671715f6c9c297a","35d0319919c01f84","22750cc8867b561e","9b26fbd793cd0dd0","98e0cdd165137d37","4b93e7c32eaa5f45","16a4b49f868715de","47f712d4a2ca9bd6"]},"0671715f6c9c297a":{"type":"coElement","label":"onUpdateScope"},"197338cafda956a7":{"type":"coElement","label":"tweens"},"7463e08533f9efec":{"type":"coElement","label":"onReverseCompleteParams"},"5362451ab9c301de":{"type":"coElement","label":"ease"},"c06d77ded54b7881":{"type":"coContainer","label":"CustomWiggle","children":["73ed096fbb4733b1","e62bf18e77fe7fef","6c7082f81905820b","1b58719563b939ae"]},"aca7362aad5f9793":{"type":"coElement","label":"trigger"},"a7dacb5385dc0208":{"type":"coElement","label":"autoCSS"},"d29495128260fefc":{"type":"coElement","label":"allowNativeTouchScrolling"},"8ba85d1dc9b4a8e9":{"type":"coElement","label":"onRelease"},"3858c3c0e131d9f9":{"type":"coElement","label":"onCompleteParams"},"0310445a4a5ffbf5":{"type":"coElement","label":"onDragStartParams"},"9b26fbd793cd0dd0":{"type":"coElement","label":"onCompleteParams"},"67683f3825ed6254":{"type":"coElement","label":"onStartScope"},"f1164c1177ade869":{"type":"coElement","label":"wordsClass"},"4c4c055e0d1b3ef4":{"type":"coElement","label":"paused"},"b47d6ea25d670878":{"type":"coElement","label":"taper"},"1458512f4f6da6b0":{"type":"coElement","label":"onPressParams"},"435f9b9c59d62464":{"type":"coElement","label":"position"},"16a4b49f868715de":{"type":"coElement","label":"onReverseCompleteParams"},"a6944cbf3f89e97e":{"type":"coElement","label":"liveSnap"},"ae5d53b7dad3637a":{"type":"coElement","label":"dragClickables"},"8d4780fbb348c43d":{"type":"coElement","label":"onDragScope"},"316858f5f13de012":{"type":"coElement","label":"cursor"},"601ce401aa4b786e":{"type":"coElement","label":"wordDelimiter"},"1d0471f0541e51f6":{"type":"coElement","label":"onUpdate"},"7bd7f88198b01fd3":{"type":"coContainer","label":"TimelineMax","children":["c0ab38e528d80db5","4c4c055e0d1b3ef4","6fb092df021a71b8","1bc824ce6dc34487","4502dc942c2f6ad3","197338cafda956a7","2df6109eebc75958","91440e0dbaa1e01d","b415f9c3aaa120c7","67683f3825ed6254","1d0471f0541e51f6","0671715f6c9c297a","634ca2f9b61c71ba","14f7b2ab2306d25d","710eec28580f52cc","31d511c03f29c247","35d0319919c01f84","22750cc8867b561e","c0912704078628d1","ce8ef82d428fb818","0e1883e99856fe87","515611f1e4226fa9","7463e08533f9efec","71e998538c325aca","34877b494cd68df3","6c2a5ea7a2235260","47f712d4a2ca9bd6"]},"bf3cb25451cdb408":{"type":"coElement","label":"path"},"b415f9c3aaa120c7":{"type":"coElement","label":"onStart"},"5831c58b3d824f56":{"type":"coElement","label":"onStartParams"},"99dd4e1976eda5e5":{"type":"coElement","label":"linesClass"},"9bea7a673f2a5f91":{"type":"coElement","label":"onDrag"},"6fb092df021a71b8":{"type":"coElement","label":"onComplete"},"4502dc942c2f6ad3":{"type":"coElement","label":"useFrames"},"6590258193b0bcbc":{"type":"coElement","label":"align"},"ce8ef82d428fb818":{"type":"coElement","label":"repeatDelay"},"23dd15a5cb01a73a":{"type":"coElement","label":"onOverwrite"},"5937ab91418da4cc":{"type":"coElement","label":"onReleaseParams"},"c0b2819eb45d22fa":{"type":"coElement","label":"immediateRender"},"11eab4868f87b7c3":{"type":"coElement","label":"onDragStart"},"68bbfcd7d4727cb7":{"type":"coElement","label":"squash"},"778cf2b0b9ce7ce9":{"type":"coElement","label":"x"},"515611f1e4226fa9":{"type":"coElement","label":"onCompleteParams"},"a2e04ec469211693":{"type":"coElement","label":"strength"},"71e998538c325aca":{"type":"coElement","label":"onRepeatParams"},"780cd7d653daf782":{"type":"coContainer","label":"CustomEase.getSVGData","children":["8f60177180297349","a8f8b61a98efe26d","778cf2b0b9ce7ce9","45862563ed327e51","bf3cb25451cdb408"]},"7f77859ab3515047":{"type":"coElement","label":"startAt"}}},"path":"","hash":"","lookupData":{"activeID":"root","ancestry":[]},"activeItem":{"type":"folder","label":"Docs Home","children":["52db442320b34fc1","7eebd4b20adcaecc","2b3bb68a78e65fe7","32bc2e8f667c28b7","8510bec84f8f5ab3","5190c7bdac5c1b1c","fb2d7be451025509","54a27bdcea66a8b2"],"id":"root","linkLabel":"Docs Home","urlLabel":""},"activeID":"root","displayType":"folder","activeMenuID":"root","activeMenuItem":{"type":"folder","label":"Docs Home","children":["52db442320b34fc1","7eebd4b20adcaecc","2b3bb68a78e65fe7","32bc2e8f667c28b7","8510bec84f8f5ab3","5190c7bdac5c1b1c","fb2d7be451025509","54a27bdcea66a8b2"],"id":"root","linkLabel":"Docs Home","urlLabel":""},"activeMenuLabel":"Docs Home","activeMenuDisplayType":"folder"},"contentState":{"isDirty":false,"isLoading":{"059d5eab36bbdd55":true,"07392828b060a423":true,"0879a53eb4051ccf":true,"091b70448f18262e":true,"09af4edb7491fd9e":true,"0a6e62faf0a53059":true,"0c466d8095583e88":true,"0dc94f7962bb1809":true,"11f92408d2609969":true,"1315d24279922963":true,"13df7c5ab97ce05d":true,"16d64b5b1b82fde8":true,"19160c04837df0bb":true,"211a71fb195b2819":true,"22c860af2d1dbbcb":true,"23b845c3016f0559":true,"2433928b0e0f6cc4":true,"27db5e20e8bbb9ae":true,"27ffcb75af705686":true,"28124149c0519430":true,"2a344abc5d73a637":true,"2b3bb68a78e65fe7":true,"32bc2e8f667c28b7":true,"357645cd3e630097":true,"3d0f25beac1906b4":true,"3eab3f172dae806f":true,"424d2c8144aca82b":true,"43077a47946db3db":true,"447e2b0a637eb56f":true,"4c5618b6dde74bd2":true,"5190c7bdac5c1b1c":true,"52db442320b34fc1":true,"53ab3440dc93284a":true,"54a27bdcea66a8b2":true,"57d33bbbf0c4c2c2":true,"5b09c1a25bf1df7e":true,"681f9501cd7f99b3":true,"723964a4fd3ac4af":true,"780cd7d653daf782":true,"7913694fbfa93c13":true,"7bc5a8cd3cf25890":true,"7bd7f88198b01fd3":true,"7eebd4b20adcaecc":true,"82b95bb606c34e2f":true,"830525841e3dd3cb":true,"8510bec84f8f5ab3":true,"91943bd05ded63bb":true,"980585c43a98afd0":true,"9927ce1237a8b0b1":true,"aa9969ee39687902":true,"b40bb6a3fc06daa2":true,"b6285db341c79d60":true,"bac828fc726d4d82":true,"be137a434f5b4e08":true,"bf3441936fcd04fd":true,"c06d77ded54b7881":true,"c2327a2ee1c89b0c":true,"c273be21a6d5d359":true,"c5344f5dcfcf49a3":true,"cb31e7d72b0e7b00":true,"cd30416934de29e1":true,"ced2d2c7aaaa4d5f":true,"d3b047e7bd016acd":true,"ea05af7191454490":true,"ea91e06b445f4ac7":true,"eb1821730d324359":true,"f7f7759fe81fd22f":true,"f8a990bb64a897ea":true,"fb2d7be451025509":true,"fe7727d7fa29b16b":true,"root":true},"hasErrored":{},"dataLoaded":{"059d5eab36bbdd55":{"meta":{"keywords":["js.Power2","Easing"],"title":"Power2","description":"Provides an easeIn, easeOut, and easeInOut with a power (or strength) of 2 which is identical to Cubic but with a more intuitive name. The more power, the more exaggerated the easing effect. Using a numeric approach like this in the name makes experimenting easier."},"header":{"content":"<p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 2 which is identical to <code>Cubic</code> but with a more intuitive name. The more power, the more exaggerated the easing effect. Using a numeric approach like this in the name makes experimenting easier.</p><p>This is one of the eases that is natively accelerated in TweenLite and TweenMax. All of the \"Power\" eases and their counterparts (Linear (0), Quad (1), Cubic (2), Quart (3), Quint (4), and Strong (4)) are accelerated.</p><div class=\"ease-visualizer\" data-ease=\"Power2\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example usage:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Power2.easeOut});</pre>"}},"0cad0bf3209f5092":{"meta":{"keywords":["js.Power2.easeIn"],"title":"easeIn","description":"[static] Eases in with a power of 2"},"header":{"content":"<p>[static] Eases in with a power of 2</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in with a power of 2</p>"}},"79c15370e7fe03de":{"meta":{"keywords":["js.Power2.easeInOut"],"title":"easeInOut","description":"[static] Eases in and then out with a power of 2"},"header":{"content":"<p>[static] Eases in and then out with a power of 2</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in and then out with a power of 2</p>"}},"b2858d09588f2384":{"meta":{"keywords":["js.Power2.easeOut"],"title":"easeOut","description":"[static] Eases out with a power of 2"},"header":{"content":"<p>[static] Eases out with a power of 2</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases out with a power of 2</p>"}},"07392828b060a423":{"meta":{"keywords":["js.Sine","Easing"],"title":"Sine","description":"Eases with a relatively low power either at the beginning (easeIn), the end (easeOut), or both (easeInOut)."},"header":{"content":"<p>Eases with a relatively low power either at the beginning (easeIn), the end (easeOut), or both (easeInOut). <code>Sine</code> is a convenience class that congregates the 3 types of Sine eases (SineIn, SineOut, and SineInOut) as static properties so that they can be referenced using the standard synatax, like <code>Sine.easeIn</code>, <code>Sine.easeOut</code>, and <code>Sine.easeInOut</code>.</p><div class=\"ease-visualizer\" data-ease=\"Sine\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p>"}},"c87b724c588c3884":{"meta":{"keywords":["js.Sine.easeIn"],"title":"easeIn","description":"[static] Eases in with slight acceleration."},"header":{"content":"<p>[static] Eases in with slight acceleration.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in with slight acceleration.</p>"}},"0569061e32ebf041":{"meta":{"keywords":["js.Sine.easeInOut"],"title":"easeInOut","description":"[static] Eases in and then out with slight acceleration/deceleration."},"header":{"content":"<p>[static] Eases in and then out with slight acceleration/deceleration.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in and then out with slight acceleration/deceleration.</p>"}},"84e7a26232a0339f":{"meta":{"keywords":["js.Sine.easeOut"],"title":"easeOut","description":"[static] Eases out with slight deceleration."},"header":{"content":"<p>[static] Eases out with slight deceleration.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases out with slight deceleration.</p>"}},"0879a53eb4051ccf":{"meta":{"keywords":["js.SteppedEase","Easing"],"title":"SteppedEase","description":"Most easing equations give a smooth, gradual transition between the start and end values, but SteppedEase provides an easy way to define a specific number of steps that the transition should take."},"header":{"content":"<p>Most easing equations give a smooth, gradual transition between the start and end values, but SteppedEase provides an easy way to define a specific number of steps that the transition should take. For example, if x is 0 and you want to tween it to 100 with 5 steps (20, 40, 60, 80, and 100) over the course of 2 seconds, you'd do:<br /></p><pre class='pre-container prettyprint'>TweenLite.to(mc, 2, {x:100, ease:SteppedEase.config(5)});<br />//or create an instance directly<br />var steppedEase = new SteppedEase(5);<br />TweenLite.to(mc, 3, {y:300, ease:steppedEase});</pre><div class=\"ease-visualizer\" data-ease=\"SteppedEase\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p>Note: SteppedEase is optimized for use with the GreenSock Animation Platform, so it isn't intended to be used with other engines. Specifically, its easing equation always returns values between 0 and 1.</p>"}},"5022798f02602b73":{"meta":{"keywords":["js.SteppedEase.SteppedEase()"],"title":"SteppedEase()","description":"Constructor"},"header":{"content":"<p>Constructor</p>"},"parameters":[{"name":"steps","data_type":"int","description":"<p>Number of steps between the start and the end values.</p>\n"}],"returns":{},"details":{"content":"<p>Constructor</p>"}},"c9842efb11f4c87a":{"meta":{"keywords":["js.SteppedEase.config()"],"title":"config()","description":"[static] Permits customization of the ease (defining a number of steps)."},"header":{"content":"<p>[static] Permits customization of the ease (defining a number of steps).</p>"},"parameters":[{"name":"steps","data_type":"int","description":"<p>Number of steps between the start and the end values.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"SteppedEase","content":"<p>new SteppedEase instance that is configured according to the parameters provided</p>\n"},"details":{"content":"<p>Permits customization of the ease (defining a number of steps).</p>"}},"1299db89651318f1":{"meta":{"keywords":["js.SteppedEase.getRatio()"],"title":"getRatio()","description":"[override] Translates the tween&#039;s progress ratio into the corresponding ease ratio."},"header":{"content":"<p>[override] Translates the tween's progress ratio into the corresponding ease ratio.</p>"},"parameters":[{"name":"p","data_type":"Number","description":"<p>progress ratio (a value between 0 and 1 indicating the progress of the tween/ease)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Number","content":"<p>translated number</p>\n"},"details":{"content":"<p>Translates the tween's progress ratio into the corresponding ease ratio. This is the heart of the Ease, where it does all its work.</p>"}},"091b70448f18262e":{"meta":{"keywords":["js.ThrowPropsPlugin","Plugins"],"title":"ThrowPropsPlugin","description":"ThrowPropsPlugin allows you to smoothly glide any property to a stop, honoring an initial velocity as well as applying optional restrictions on the end value."},"header":{"content":"<code>ThrowPropsPlugin</code> allows you to smoothly glide any property to a stop, honoring an initial velocity as well as applying optional restrictions on the end value. You can define a specific end value or allow it to be chosen automatically based on the initial velocity and ease or you can define a max/min range or even an array of snap-to values that act as notches. <code>ThrowPropsPlugin</code>even integrates <code>VelocityTracker</code> so that you can have it \"watch\" certain properties to keep track of their velocities for you and then use them automatically when you do a <code>throwProps</code>tween. This is perfect for flick-scrolling or animating things as though they are being thrown (where momentum factors into the tween).<br /><br />For example, let's say a user clicks and drags a ball and and then when released, the ball should continue flying at the same velocity as it was just moving (so that it appears seamless), and then glide to a rest. You can't do a normal tween because you don't know exactly where it should land or how long the tween should last (faster initial velocity would usually mean a longer duration). You'd like it to decelerate based on whatever ease you define in your tween (always use some sort of easeOut, like <code>Power1.easeOut, Strong.easeOut</code>, etc.).<br /><br />Maybe you want the final resting value to always land within a particular range so that the ball doesn't fly off the edge of the screen. But you don't want it to suddenly jerk to a stop when it hits the edge of the screen either; instead, you want it to ease gently into place even if that means going past the landing spot briefly and easing back (if the initial velocity is fast enough to require that). The whole point is to make it look <b>smooth</b>.<br /><br /><b>No problem.</b><br /><br />In its simplest form, you can pass just the initial velocity for each property like this:<br /><pre class='pre-container prettyprint'>TweenLite.to(obj, 2, {throwProps:{x:500, y:-300}});</pre>In the above example, <code>obj.x</code> will animate at 500 pixels per second initially and <code>obj.y</code> will animate at -300 pixels per second. Both will decelerate smoothly until they come to rest 2 seconds later (because the tween's duration is 2 seconds).<br /><br />To use the <code>Strong.easeOut</code> easing equation and impose maximum and minimum boundaries on the end values, use the object syntax with the <code>max</code> and <code>min</code> special properties like this:<br /><pre class='pre-container prettyprint'>TweenLite.to(obj, 2, {throwProps:{x:{velocity:500, max:1024, min:0}, y:{velocity:-300, max:720, min:0}}, ease:Strong.easeOut});</pre>Notice the nesting of the objects (<code>{}</code>). The <code>max</code> and <code>min</code> values refer to the range for the final resting position (coordinates in this case), <b>not</b> the velocity. So <code>obj.x</code> would always land between 0 and 1024 in this case, and <code>obj.y</code> would always land between 0 and 720. If you want the target object to land on a specific value rather than within a range, simply set <code>max</code> and <code>min</code> to identical values or just use the <code>\"end\"</code> property. Also notice that you must define a <code>velocity</code> value for each property (unless you're using <code><a href=\"http://api.greensock.com/js/com/greensock/plugins/ThrowPropsPlugin.html#track()\" target=\"\">track()</a> </code>- see below for details).<br /><br /><b>Valid properties for object syntax</b><br /><br /><ul><li><b>velocity</b> : Number or <code>\"auto\"</code> - the initial velocity, measured in units per second (or per frame for frames-based tweens). You may omit velocity or just use \"auto\" for properties that are being tracked automatically using the <code><a href=\"http://api.greensock.com/js/com/greensock/plugins/ThrowPropsPlugin.html#track()\" target=\"\">track()</a> </code>method.</li><li><b>min</b> : Number - the minimum end value of the property. For example, if you don't want <code>x</code> to land at a value below 0, your throwProps may look like <code>{x:{velocity:-500, min:0}}</code></li><li><b>max</b> : Number - the maximum end value of the property. For example, if you don't want <code>x</code> to exceed 1024, your throwProps may look like <code>{x:{velocity:500, max:1024}}</code></li><li><b>end</b> : [Number | Array | Function] - if <code>end</code> is defined as a <b>Number</b>, the target will land EXACTLY there (just as if you set both the <code>max</code> and <code>min</code> to identical values). If <code>end</code> is defined as a numeric <b>Array</b>, those values will be treated like \"notches\" or \"snap-to\" values so that the closest one to the natural landing spot will be selected. For example, if <code>[0,100,200]</code> is used, and the value would have naturally landed at 141, it will use the closest number (100 in this case) and land there instead. If <code>end</code> is defined as a <b>Function</b>, that function will be called and passed the natural landing value as the only parameter, and your function can run whatever logic you want, and then return the number at which it should land. This can be useful if, for example, you have a rotational tween and you want it to snap to 10-degree increments no matter how big or small, you could use a function that just rounds the natural value to the closest 10-degree increment. So any of these are valid: <code>end:100</code> or <code>end:[0,100,200,300]</code> or <code>end:function(n) { return Math.round(n / 10) * 10; }</code></li></ul>ThrowPropsPlugin isn't just for tweening x and y coordinates. It works with any numeric property, so you could use it for spinning the <code>rotation</code> of an object as well. Or the <code>scaleX</code>/<code>scaleY</code>properties. Maybe the user drags to spin a wheel and lets go and you want it to continue increasing the <code>rotation</code> at that velocity, decelerating smoothly until it stops. It even works with method-based getters/setters.<br /><br /><b>Automatically determine duration</b><br /><br />One of the trickiest parts of creating a <code>throwProps</code> tween that looks fluid and natural (particularly if you're applying maximum and/or minimum values) is determining its duration. Typically it's best to have a relatively consistent level of resistance so that if the initial velocity is very fast, it takes longer for the object to come to rest compared to when the initial velocity is slower. You also may want to impose some restrictions on how long a tween can last (if the user drags incredibly fast, you might not want the tween to last 200 seconds). The duration will also affect how far past a max/min boundary the property may go, so you might want to only allow a certain amount of overshoot tolerance. That's why <code>ThrowPropsPlugin</code> has a few static helper methods that make managing all these variables much easier. The one you'll probably use most often is the <a href=\"http://api.greensock.com/js/com/greensock/plugins/ThrowPropsPlugin.html#to()\" target=\"\"><code>to()</code> </a>method which is very similar to <code>TweenLite.to()</code> except that it doesn't have a<code>duration</code> parameter and it adds several other optional parameters. Read the <a href=\"http://api.greensock.com/js/com/greensock/plugins/ThrowPropsPlugin.html#to()\" target=\"\">docs below</a> for details.<pre class='pre-container prettyprint'>ThrowPropsPlugin.to(mc, {throwProps:{x:\"auto\", y:{velocity:\"auto\", max:1000, min:0}}, ease:Strong.easeOut});</pre>Feel free to experiment with using different easing equations to control how the values ease into place at the end. You don't need to put the \"ease\" special property inside the <code>throwProps</code>object. Just keep it in the same place it has always been, like:<br /><pre class='pre-container prettyprint'>TweenLite.to(mc, 1, {throwProps:{x:500, y:-300}, ease:Strong.easeOut});</pre><b>Automatically track velocity</b><br /><br />Another tricky aspect of smoothly transitioning from a particular velocity is tracking the property's velocity in the first place! So we've made that easier too - you can use the<code><a href=\"http://api.greensock.com/js/com/greensock/plugins/ThrowPropsPlugin.html#track()\" target=\"\">ThrowPropsPlugin.track()</a> </code>method to have the velocity (rate of change) of certain properties tracked and then <code>throwProps</code> tweens will automatically grab the appropriate tracked value internally, allowing you to omit the <code>velocity</code> values in your tweens altogether. See the <code><a href=\"http://api.greensock.com/js/com/greensock/plugins/ThrowPropsPlugin.html#track()\" target=\"\">track()</a> </code>method's description for details. And make sure you start tracking velocity at least a half-second before you need to tween because it takes a small amount of time to guage how fast something is going.<br /><br />A unique convenience of ThrowPropsPlugin compared to most other solutions out there that use frame-based loops is that everything is reverseable and you can jump to any spot in the tween immediately. So if you create several <code>throwProps</code> tweens, for example, and dump them into a TimelineLite, you could simply call <code>reverse()</code> on the timeline to watch the objects retrace their steps right back to the beginning!<br /><br /><b>Examples</b><br /><br />The following example creates a green box and a red box that you can drag and toss around the screen in a natural, fluid way. If you check the \"Snap to grid\" checkbox, the boxes will always land exactly on the grid. We use <code>Draggable</code> class so that we can focus more on the ThrowPropsPlugin code rather than all the boilerplate code needed to make things draggable:<br /><br /><p data-height=\"665\" data-theme-id=\"0\" data-slug-hash=\"zDwEk\" data-default-tab=\"js\" data-user=\"GreenSock\" data-embed-version=\"2\" data-pen-title=\"Draggable \"Toss\" Demo\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/GreenSock/pen/zDwEk/\">Draggable \"Toss\" Demo</a> by GreenSock (<a href=\"https://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script><br /><br />The next example shows how rotation can be flicked as well, and we make sure that the end rotation is always a multiple of 45 degrees:<br /><br /><p data-height=\"436\" data-theme-id=\"0\" data-slug-hash=\"gnoDc\" data-default-tab=\"js,result\" data-user=\"GreenSock\" data-embed-version=\"2\" data-pen-title=\"Draggable knob and scroll area (linked)\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/GreenSock/pen/gnoDc/\">Draggable knob and scroll area (linked)</a> by GreenSock (<a href=\"https://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p><br />ThrowPropsPlugin is a <a href=\"http://www.greensock.com/club/\" target=\"\">Club GreenSock</a> membership benefit. You must have a valid membership to use this class without violating the terms of use. Visit <a href=\"http://www.greensock.com/club/\" target=\"\">http://www.greensock.com/club/</a> to sign up or get more details."}},"d0e776e5281dcb6c":{"meta":{"keywords":["js.ThrowPropsPlugin.defaultResistance"],"title":"defaultResistance","description":"[static] The default resistance that is used to calculate how long it will take for the tweening property (or properties) to come to rest by the static ThrowPropsPlugin.to() and ThrowPropsPlugin.calculateTweenDuration() methods."},"header":{"content":"<p>[static] The default resistance that is used to calculate how long it will take for the tweening property (or properties) to come to rest by the static ThrowPropsPlugin.to() and ThrowPropsPlugin.calculateTweenDuration() methods.</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>The default <code>resistance</code> that is used to calculate how long it will take for the tweening property (or properties) to come to rest by the static <code>ThrowPropsPlugin.to()</code> and<code>ThrowPropsPlugin.calculateTweenDuration()</code> methods. Keep in mind that you can define a <code>resistance</code> value either for each individual property in the <code>throwProps</code> tween like this:</p><pre class='pre-container prettyprint'>ThrowPropsPlugin.to(obj, {throwProps:{x:{velocity:500, resistance:150}, y:{velocity:-300, resistance:50}}});</pre><p><b>OR</b> you can define a single <code>resistance</code> value that will be used for all of the properties in that particular <code>throwProps</code> tween like this:</p><pre class='pre-container prettyprint'>ThrowPropsPlugin.to(obj, {throwProps:{x:500, y:-300, resistance:150}});<br /> <br />//-OR- <br /> <br />ThrowPropsPlugin.to(obj, {throwProps:{x:{velocity:500, max:800, min:0}, y:{velocity:-300, max:800, min:100}, resistance:150}});</pre>"}},"4c659aa2524b1945":{"meta":{"keywords":["js.ThrowPropsPlugin.calculateChange()"],"title":"calculateChange()","description":"[static] Determines the amount of change given a particular velocity, an easing equation, and the duration that the tween will last."},"header":{"content":"<p>[static] Determines the amount of change given a particular velocity, an easing equation, and the duration that the tween will last.</p>"},"parameters":[{"name":"velocity","data_type":"Number","description":"<p>The initial velocity</p>\n"},{"name":"ease","data_type":"*","description":"<p>The easing equation (like <code>Strong.easeOut</code> or <code>Power2.easeOut</code>).</p>\n"},{"name":"duration","data_type":"Number","description":"<p>The duration (in seconds) of the tween</p>\n"},{"name":"checkPoint","data_type":"Number","description":"<p>(default = <code>0.05</code>)<code></code> — A value between 0 and 1 (typically 0.05) that is used to measure an easing equation&#8217;s initial strength. The goal is for the value to have moved at the initial velocity through that point in the ease. So 0.05 represents 5%. If the initial velocity is 500, for example, and the ease is <code>Strong.easeOut</code> and <code>checkpoint</code> is 0.05, it will measure 5% into that ease and plot the position that would represent where the value would be if it was moving 500 units per second for the first 5% of the tween. If you notice that your tween appears to start off too fast or too slow, try adjusting the <code>checkpoint</code> higher or lower slightly. Typically 0.05 works great.</p>\n"}],"returns":{"type":"Number","content":"<p>The amount of change (can be positive or negative based on the velocity)</p>\n"},"details":{"content":"<p>Determines the amount of change given a particular velocity, an easing equation, and the duration that the tween will last. This is useful for plotting the resting position of an object that starts out at a certain velocity and decelerates based on an ease (like <code>Strong.easeOut</code>).</p>"}},"c272ebc90f1e65c8":{"meta":{"keywords":["js.ThrowPropsPlugin.calculateDuration()"],"title":"calculateDuration()","description":"[static] Calculates the duration (in seconds) that it would take to move from a particular start value to an end value at the given initial velocity, decelerating according to a certain easing equation (like Strong.easeOut)."},"header":{"content":"<p>[static] Calculates the duration (in seconds) that it would take to move from a particular start value to an end value at the given initial velocity, decelerating according to a certain easing equation (like Strong.easeOut).</p>"},"parameters":[{"name":"start","data_type":"Number","description":"<p>Starting value</p>\n"},{"name":"end","data_type":"Number","description":"<p>Ending value</p>\n"},{"name":"velocity","data_type":"Number","description":"<p>the initial velocity at which the starting value is changing</p>\n"},{"name":"ease","data_type":"*","description":"<p>The easing equation used for deceleration (like <code>Strong.easeOut</code> or <code>Power2.easeOut</code>).</p>\n"},{"name":"checkPoint","data_type":"Number","description":"<p>(default = <code>0.05</code>)<code></code> — A value between 0 and 1 (typically 0.05) that is used to measure an easing equation&#8217;s initial strength. The goal is for the value to have moved at the initial velocity through that point in the ease. So 0.05 represents 5%. If the initial velocity is 500, for example, and the ease is <code>Strong.easeOut</code> and <code>checkpoint</code> is 0.05, it will measure 5% into that ease and plot the position that would represent where the value would be if it was moving 500 units per second for the first 5% of the tween. If you notice that your tween appears to start off too fast or too slow, try adjusting the <code>checkpoint</code> higher or lower slightly. Typically 0.05 works great.</p>\n"}],"returns":{"type":"Number","content":"<p>The duration (in seconds) that it would take to move from the start value to the end value at the initial velocity provided, decelerating according to the ease.</p>\n"},"details":{"content":"<p>Calculates the duration (in seconds) that it would take to move from a particular start value to an end value at the given initial velocity, decelerating according to a certain easing equation (like <code>Strong.easeOut</code>).</p>"}},"c33fc0b177a91675":{"meta":{"keywords":["js.ThrowPropsPlugin.calculateTweenDuration()"],"title":"calculateTweenDuration()","description":"[static] Analyzes various throwProps variables (like initial velocities, max/min values, and resistance) and determines the appropriate duration."},"header":{"content":"<p>[static] Analyzes various throwProps variables (like initial velocities, max/min values, and resistance) and determines the appropriate duration.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object whose properties the tween affects. This can be ANY object, not just a DOM element.</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object containing the end values of the properties you&#8217;re tweening, and it must also contain a <code>throwProps</code> object. For example, to create a tween that tweens<code>obj.x</code> at an initial velocity of 500 and <code>obj.y</code> at an initial velocity of -300 and applies a <code>resistance</code> of 80 and uses the <code>Strong.easeOut</code> easing equation and calls the method<code>tweenCompleteHandler</code> when it is done, the <code>vars</code> object would look like: <code>{throwProps:{x:500, y:-300, resistance:80}, ease:Strong.easeOut, onComplete:tweenCompleteHandler}</code>.</p>\n"},{"name":"maxDuration","data_type":"Number","description":"<p>(default = <code>10</code>)<code></code> — Maximum duration (in seconds)</p>\n"},{"name":"minDuration","data_type":"Number","description":"<p>(default = <code>0.2</code>)<code></code> — Minimum duration (in seconds)</p>\n"},{"name":"overshootTolerance","data_type":"Number","description":"<p>(default = <code>1</code>)<code></code> — sets a maximum number of seconds that can be added to the tween&#8217;s duration (if necessary) to accommodate temporarily overshooting the end value before smoothly returning to it at the end of the tween. This can happen in situations where the initial velocity would normally cause it to exceed the <code>max</code>or <code>min</code> values. An example of this would be in the iOS (iPhone or iPad) when you flick-scroll so quickly that the content would shoot past the end of the scroll area. Instead of jerking to a sudden stop when it reaches the edge, the content briefly glides past the max/min position and gently eases back into place. The larger the <code>overshootTolerance</code> the more leeway the tween has to temporarily shoot past the max/min if necessary.</p>\n"}],"returns":{"type":"Number","content":"<p>The duration (in seconds) that the tween should use.</p>\n"},"details":{"content":"<p>Analyzes various throwProps variables (like initial velocities, max/min values, and resistance) and determines the appropriate duration. Typically it is best to use the<code>ThrowPropsPlugin.to()</code> method for this, but <code>calculateTweenDuration()</code> could be convenient if you want to create a TweenMax instance instead of a TweenLite instance (which is what <code>throwPropsPlugin.to()</code> returns).</p>"}},"b218bb5d19f9b9ab":{"meta":{"keywords":["js.ThrowPropsPlugin.getVelocity()"],"title":"getVelocity()","description":"[static] Returns the current velocity of the given property and target object (only works if you started tracking the property using the ThrowPropsPlugin.track() or VelocityTracker.track() method)."},"header":{"content":"<p>[static] Returns the current velocity of the given property and target object (only works if you started tracking the property using the ThrowPropsPlugin.track() or VelocityTracker.track() method).</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>The object whose property is being tracked.</p>\n"},{"name":"prop","data_type":"String","description":"<p>The property name, like <code>\"x\"</code>.</p>\n"}],"returns":{"type":"Number","content":"<p>The current velocity</p>\n"},"details":{"content":"<p>Returns the current velocity of the given property and target object (only works if you started tracking the property using the <a href=\"http://api.greensock.com/js/com/greensock/plugins/ThrowPropsPlugin.html#track()\" target=\"\">ThrowPropsPlugin.track()</a> or <code>VelocityTracker.track()</code>method).</p>"}},"56a562fa808f415e":{"meta":{"keywords":["js.ThrowPropsPlugin.isTracking()"],"title":"isTracking()","description":"[static] Allows you to discern whether the velocity of a particular target or one of its properties is being tracked (typically initiated using the track() method)."},"header":{"content":"<p>[static] Allows you to discern whether the velocity of a particular target or one of its properties is being tracked (typically initiated using the track() method).</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>The target object</p>\n"},{"name":"prop","data_type":"String","description":"<p>(default = <code>null</code>)<code></code> — the name of the property to check, like <code>\"x\"</code> or <code>\"y\"</code>.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Boolean","content":"<p><code>true</code> if the target/property is being tracked, <code>false</code> if not.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Allows you to discern whether the velocity of a particular target or one of its properties is being tracked (typically initiated using the <code>track()</code> method).</p>"}},"a159d08fd0e75293":{"meta":{"keywords":["js.ThrowPropsPlugin.to()"],"title":"to()","description":"[static] Automatically analyzes various throwProps variables (like velocity, max, min, and resistance) and creates a TweenLite instance with the appropriate duration."},"header":{"content":"<p>[static] Automatically analyzes various throwProps variables (like velocity, max, min, and resistance) and creates a TweenLite instance with the appropriate duration.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object whose properties the tween affects. This can be ANY object, not just a DOM element.</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object containing the end values of the properties you&#8217;re tweening, and it must also contain a <code>throwProps</code> object. For example, to create a tween that tweens<code>obj.x</code> at an initial velocity of 500 and <code>obj.y</code> at an initial velocity of -300 and applies a <code>resistance</code> of 80 and uses the <code>Strong.easeOut</code> easing equation and calls the method<code>tweenCompleteHandler</code> when it is done, the <code>vars</code> object would look like: <code>{throwProps:{x:500, y:-300, resistance:80}, ease:Strong.easeOut, onComplete:tweenCompleteHandler}</code>.</p>\n"},{"name":"maxDuration","data_type":"Number","description":"<p>(default = <code>100</code>)<code></code> — Maximum duration of the tween</p>\n"},{"name":"minDuration","data_type":"Number","description":"<p>(default = <code>0.25</code>)<code></code> — Minimum duration of the tween</p>\n"},{"name":"overshootTolerance","data_type":"Number","description":"<p>(default = <code>1</code>)<code></code> — sets a maximum number of seconds that can be added to the tween&#8217;s duration (if necessary) to accommodate temporarily overshooting the end value before smoothly returning to it at the end of the tween. This can happen in situations where the initial velocity would normally cause it to exceed the <code>max</code>or <code>min</code> values. An example of this would be in the iOS (iPhone or iPad) when you flick-scroll so quickly that the content would shoot past the end of the scroll area. Instead of jerking to a sudden stop when it reaches the edge, the content briefly glides past the max/min position and gently eases back into place. The larger the <code>overshootTolerance</code> the more leeway the tween has to temporarily shoot past the max/min if necessary.</p>\n"}],"returns":{"type":"TweenLite","content":"<p>TweenLite instance</p>\n"},"details":{"content":"<p>Automatically analyzes various throwProps variables (like <code>velocity</code>, <code>max</code>, <code>min</code>, and <code>resistance</code>) and creates a TweenLite instance with the appropriate duration. You can use<code>ThrowPropsPlugin.to()</code> instead of <code>TweenLite.to()</code> to create a tween - they're identical except that <code>ThrowPropsPlugin.to()</code> doesn't have a <code>duration</code> parameter (it figures it out for you) and it adds a few extra parameters to the end that can optionally be used to affect the duration.</p><p>Another key difference is that <code>ThrowPropsPlugin.to()</code> will recognize the <code>resistance</code> special property which basically controls how quickly each property's velocity decelerates (and consequently influences the duration of the tween). For example, if the initial <code>velocity</code> is 500 and the <code>resistance</code> is 300, it will decelerate much faster than if the resistance was 20. You can define a <code>resistance</code> value either for each individual property in the <code>throwProps</code> tween like this:<br /></p><pre class='pre-container prettyprint'>ThrowPropsPlugin.to(obj, {throwProps:{x:{velocity:500, resistance:150}, y:{velocity:-300, resistance:50}}});</pre><p><b>OR</b> you can define a single <code>resistance</code> value that will be used for all of the properties in that particular <code>throwProps</code> tween like this:</p><pre class='pre-container prettyprint'>ThrowPropsPlugin.to(obj, {throwProps:{x:500, y:-300, resistance:150}});<br /> <br />//-OR- <br /> <br />ThrowPropsPlugin.to(obj, {throwProps:{x:{velocity:500, max:800, min:0}, y:{velocity:-300, max:700, min:100}, resistance:150}});</pre><p><code>resistance</code> should always be a positive value, although <code>velocity</code> can be negative. <code>resistance</code> always works against <code>velocity</code>. If no <code>resistance</code> value is found, the<code>ThrowPropsPlugin.defaultResistance</code> value will be used. The <code>resistance</code> values merely affect the duration of the tween and can be overriden by the <code>maxDuration</code> and<code>minDuration</code> parameters. Think of the <code>resistance</code> as more of a suggestion that ThrowPropsPlugin uses in its calculations rather than an absolute set-in-stone value. When there are multiple properties in one throwProps tween (like <code>x</code> and <code>y</code>) and the calculated duration for each one is different, the longer duration is always preferred in order to make things animate more smoothly.</p><p>You also may want to impose some restrictions on the tween's duration (if the user drags incredibly fast, for example, you might not want the tween to last 200 seconds). Use<code>maxDuration</code> and <code>minDuration</code> parameters for that. You can use the <code>overshootTolerance</code> parameter to set a maximum number of seconds that can be added to the tween's duration (if necessary) to accommodate temporarily overshooting the end value before smoothly returning to it at the end of the tween. This can happen in situations where the initial velocity would normally cause it to exceed the <code>max</code> or <code>min</code> values. An example of this would be in the iOS (iPhone or iPad) when you flick-scroll so quickly that the content would shoot past the end of the scroll area. Instead of jerking to a sudden stop when it reaches the edge, the content briefly glides past the max/min position and gently eases back into place. The larger the <code>overshootTolerance</code> the more leeway the tween has to temporarily shoot past the max/min if necessary.</p><p>If you'd like to have ThrowPropsPlugin automatically track the velocity of certain properties for you and auto-populate them internally so that you don't have to pass <code>velocity</code> values in, use the <code><a href=\"http://api.greensock.com/js/com/greensock/plugins/ThrowPropsPlugin.html#track()\" target=\"\">track()</a></code> method.</p><p><b>Valid properties for object syntax</b></p><ul><li><b>velocity</b> : Number or <code>\"auto\"</code> - the initial velocity, measured in units per second (or per frame for frames-based tweens). You may omit velocity or just use \"auto\" for properties that are being tracked automatically using the <code><a href=\"http://api.greensock.com/js/com/greensock/plugins/ThrowPropsPlugin.html#track()\" target=\"\">track()</a></code> method.</li><li><b>min</b> : Number - the minimum end value of the property. For example, if you don't want <code>x</code> to land at a value below 0, your throwProps may look like <code>{x:{velocity:-500, min:0}}</code></li><li><b>max</b> : Number - the maximum end value of the property. For example, if you don't want <code>x</code> to exceed 1024, your throwProps may look like <code>{x:{velocity:500, max:1024}}</code></li><li><b>end</b> : [Number | Array | Function] - if <code>end</code> is defined as a <b>Number</b>, the target will land EXACTLY there (just as if you set both the <code>max</code> and <code>min</code> to identical values). If <code>end</code> is defined as a numeric <b>Array</b>, those values will be treated like \"notches\" or \"snap-to\" values so that the closest one to the natural landing spot will be selected. For example, if<code>[0,100,200]</code> is used, and the value would have naturally landed at 141, it will use the closest number (100 in this case) and land there instead. If <code>end</code> is defined as a <b>Function</b>, that function will be called and passed the natural landing value as the only parameter, and your function can run whatever logic you want, and then return the number at which it should land. This can be useful if, for example, you have a rotational tween and you want it to snap to 10-degree increments no matter how big or small, you could use a function that just rounds the natural value to the closest 10-degree increment. So any of these are valid: <code>end:100</code> or <code>end:[0,100,200,300]</code> or <code>end:function(n) { return Math.round(n / 10) * 10; }</code></li><li><b>resistance</b> : Number - think of resistance like the rate of velocity decay. If no <code>resistance</code> value is found, the <code>ThrowPropsPlugin.defaultResistance</code> value will be used. The<code>resistance</code> values merely affect the duration of the tween and can be overriden by the <code>maxDuration</code> and <code>minDuration</code> parameters.</li></ul><p>&nbsp;</p>"}},"bdf13585fd570814":{"meta":{"keywords":["js.ThrowPropsPlugin.track()"],"title":"track()","description":"[static] Allows you to have the velocity of particular properties automatically tracked for you so that ThrowPropsPlugin tweens can access that data internally instead of manually calculating it and feeding it into each tween."},"header":{"content":"<p>[static] Allows you to have the velocity of particular properties automatically tracked for you so that ThrowPropsPlugin tweens can access that data internally instead of manually calculating it and feeding it into each tween.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>the target object whose properties will be tracked</p>\n"},{"name":"props","data_type":"String","description":"<p>a comma-delimited list of property names, like <code>\"y\"</code> or <code>\"x,y\"</code></p>\n"},{"name":"type","data_type":"String","description":"<p>a comma-delimited list of property types (only helpful if they are rotation-based), <code>\"rad\"</code> for radian-based rotation or <code>\"deg\"</code> for degree-based rotation &#8211; this is only useful you&#8217;d like to have VelocityTracker compensate for artificial jumps in rotational values when the rotational midline is crossed, like when rotation goes from 179 to -178 degrees it would interpret that as a change of 3 instead of 357 degrees. Leave this blank unless you want the rotational compensation. You can use <code>\"num\"</code> to indicate normal numeric behavior (or leave it blank).</p>\n"}],"returns":{"type":"VelocityTracker","content":"<p>a VelocityTracker object that&#8217;s responsible for doing the tracking. You can use this if you want &#8211; the most useful method is its <code>getVelocity()</code> method that you feed the property name to like <code>myTracker.getVelocity(\"y\")</code> to get the target&#8217;s <code>y</code> velocity anytime. Normally, however, you don&#8217;t need to keep track of this VelocityTracker object at all because the work is done internally and ThrowPropsPlugin knows how to find it.</p>\n"},"details":{"content":"<p>Allows you to have the velocity of particular properties automatically tracked for you so that ThrowPropsPlugin tweens can access that data internally instead of manually calculating it and feeding it into each tween. For example, let's say there's an object that the user interacts with by dragging it or maybe it is being tweened and then at some point you want to create a<code>throwProps</code> tween that smoothly continues that motion and glides to a rest. Normally, you'd need to write your own tracking code that records that object's <code>x</code> and <code>y</code> properties and the time stamps so that when it comes time to feed the <code>velocity</code> into the <code>throwProps</code> tween, you'd have the necessary data to calculate it. But let's face it: that can be cumbersome to do manually, and that's precisely why the <code>track()</code> method exists.</p><p>Just feed in the <code>target</code> and a comma-delimited list of its properties that you want tracked like this:<br /></p><pre class='pre-container prettyprint'>ThrowPropsPlugin.track(obj, \"x,y\");</pre><p>Then every time the core tweening engine updates (at whatever frame rate you're running), the <code>x</code> and <code>y</code> values (or whichever properties you define) will be recorded along with time stamps (it keeps a maximum of 2 of these values and continually writes over the previous ones, so don't worry about memory buildup). This even works with function-based properties like getters and setters.</p><p>Then, after at least 100ms and 2 \"ticks\" of the core engine have elapsed (so that some data has been recorded), you can create <code>throwProps</code> tweens for those properties and omit the<code>\"velocity\"</code> values and it will automatically populate them for you internally. For example:<br /></p><pre class='pre-container prettyprint'>//first, start tracking \"x\" and \"y\":<br />ThrowPropsPlugin.track(obj, \"x,y\");<br /> <br />//then, after at least 100ms, let's smoothly tween to EXACTLY x:200, y:300<br />TweenLite.to(obj, 2, {throwProps:{x:{end:200}, y:{end:300}}, ease:Strong.easeOut});<br /> <br />//and if you want things to use the defaults and have obj.x and obj.y glide to a stop based on the velocity rather than setting any destination values, just use \"auto\":<br />TweenLite.to(obj, 2, {throwProps:{x:\"auto\", y:\"auto\"}, ease:Strong.easeOut});</pre><p>Notice that <code>\"auto\"</code> is a valid option when you're tracking the properties too, but <b>only</b> for tracked properties.</p><p><b>What kinds of properties can be tracked?</b></p><p>Pretty much any numeric property of any object can be tracked, including function-based ones. For example, <code>obj.x</code> or <code>obj.rotation</code> or even <code>obj.myCustomProp()</code>. In fact, for getters and setters that start with the word \"get\" or \"set\" (like <code>getCustomProp()</code> and <code>setCustomProp()</code>), it will automatically find the matching counterpart method and use the getter appropriately, so you can track the getter or setter and it'll work. You <b>cannot</b>, however, track custom plugin-related values like \"directionalRotation\" or \"autoAlpha\" or \"physics2D\" because those aren't real properties of the object. You should instead track the real properties that those plugins affect, like \"rotation\" or \"alpha\" or \"x\" or \"y\".</p><p><b>IMPORTANT:</b> you should <code>untrack()</code> properties when you no longer need them tracked in order to maximize performance and ensure things are released for garbage collection. To untrack, simply use the <code>untrack()</code> method:</p>"}},"d938e1f03eee893f":{"meta":{"keywords":["js.ThrowPropsPlugin.untrack()"],"title":"untrack()","description":"[static] Stops tracking the velocity of certain properties (or all properties of an object), like ones initiated with the track() method."},"header":{"content":"<p>[static] Stops tracking the velocity of certain properties (or all properties of an object), like ones initiated with the track() method.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>the target object whose properties should stop being tracked</p>\n"},{"name":"props","data_type":"String","description":"<p>(default = <code>null</code>)<code></code> — a comma-delimited list of properties to stop tracking. If <code>null</code>, ALL properties of the <code>target</code> will stop being tracked.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Stops tracking the velocity of certain properties (or all properties of an object), like ones initiated with the <code>track()</code> method.<br /></p><pre class='pre-container prettyprint'>//starts tracking \"x\" and \"y\":<br />ThrowPropsPlugin.track(obj, \"x,y\");<br /> <br />//stops tracking only the \"x\" property: <br />ThrowPropsPlugin.untrack(obj, \"x\");<br /> <br />//stops tracking \"x\" and \"y\":<br />ThrowPropsPlugin.untrack(obj, \"x,y\");<br /> <br />//stops tracking all properties of obj:<br />ThrowPropsPlugin.untrack(obj);</pre>"}},"09af4edb7491fd9e":{"meta":{"keywords":["js.EaseLookup","Easing"],"title":"EaseLookup","description":"EaseLookup enables you to find the easing function associated with a particular name (String), like &quot;strongEaseOut&quot; which can be useful when loading in XML data that comes in as Strings but needs to be translated to native function references."},"header":{"content":"<p>EaseLookup enables you to find the easing function associated with a particular name (String), like \"strongEaseOut\" which can be useful when loading in XML data that comes in as Strings but needs to be translated to native function references.</p>"}},"ac38f7748fba8a28":{"meta":{"keywords":["js.EaseLookup.find()"],"title":"find()","description":"[static] Finds the easing function associated with a particular name (String), like &quot;easeOutStrong&quot;."},"header":{"content":"<p>[static] Finds the easing function associated with a particular name (String), like \"easeOutStrong\".</p>"},"parameters":[{"name":"name","data_type":"String","description":"<p>The name of the easing function, with or without the period and case insensitive (i.e. &#8220;Strong.easeOut&#8221; or &#8220;easeOutStrong&#8221;)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Ease","content":"<p>The easing function associated with the name</p>\n"},"details":{"content":"<p>Finds the easing function associated with a particular name (String), like \"easeOutStrong\". This can be useful when loading in XML data that comes in as Strings but needs to be translated to native function references. You can pass in the name with or without the period, and it is case insensitive, so any of the following will find the Strong.easeOut function:</p><pre class='pre-container prettyprint'>EaseLookup.find(\"Strong.easeOut\")<br />EaseLookup.find(\"easeOutStrong\")<br /></pre><p>You can translate strings directly when tweening, like this:<br /></p><pre class='pre-container prettyprint'>TweenLite.to(mc, 1, {x:100, ease:EaseLookup.find(myString)});</pre>"}},"0a6e62faf0a53059":{"meta":{"keywords":["js.DirectionalRotationPlugin","Plugins"],"title":"DirectionalRotationPlugin","description":"Tweens any rotation-related property to another value in a particular direction."},"header":{"content":"<p><span class=\"inTweenMax\">Included in TweenMax: <span class=\"yes\">YES</span></span></p><p>Tweens any rotation-related property to another value in a particular direction which can be either <b>clockwise</b> (<code>\"_cw\"</code> suffix), <b>counter-clockwise</b> (<code>\"_ccw\"</code> suffix), or in the shortest direction (<code>\"_short\"</code> suffix) in which case the plugin chooses the direction for you based on the shortest path. For example:</p><pre class='pre-container prettyprint'>//obj.rotation starts at 45<br />var obj = {rotation:45}; <br /> <br />//tweens to the 270 position in a clockwise direction<br />TweenLite.to(obj, 1, {directionalRotation:\"270_cw\"}); <br /> <br />//tweens to the 270 position in a counter-clockwise direction<br />TweenLite.to(obj, 1, {directionalRotation:\"270_ccw\"});<br /> <br />//tweens to the 270 position in the shortest direction (which, in this case, is counter-clockwise)<br />TweenLite.to(obj, 1, {directionalRotation:\"270_short\"});</pre><p>Notice that the value is in quotes, thus a string with a particular suffix indicating the direction (\"_cw\", \"_ccw\", or \"_short\"). You can also use the <code>\"+=\"</code> or <code>\"-=\"</code> prefix to indicate relative values.</p><p>By default, directionalRotation assumes you're attempting to tween the <code>\"rotation\"</code> property of the target, but you can define any rotational property name (including MULTIPLE properties) by passing an object instead, like this:</p><pre class='pre-container prettyprint'>//animate obj.rotationX and obj.rotationY:<br />TweenLite.to(obj, 1, {directionalRotation:{rotationX:\"-140_cw\", rotationY:\"70_short\"}, ease:Power2.easeIn});</pre><p>DirectionalRotationPlugin's functionality is built into the <b>CSSPlugin</b>, so you do not need to load DirectionalRotationPlugin separately if you just want to tween css-related properties of DOM elements. For example, you could animate rotation-related css properties like this (assuming CSSPlugin is loaded and <code>yourElement</code> is a DOM element):</p><p>Check out an <a href=\"http://codepen.io/GreenSock/pen/jiEyG\" target=\"\">interactive example here</a>.</p><pre class='pre-container prettyprint'>TweenLite.to(yourElement, 1, {rotation:\"270_ccw\", rotationX:\"-45_cw\", rotationY:\"+=30_cw\"});</pre><p>If you want to define the values in radians instead of degrees, you can use the special <code>useRadians:true</code> flag, like this:</p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {directionalRotation:{rotation:\"1.5_ccw\", useRadians:true}, ease:Power2.easeInOut});</pre><p>And if the value that you want to pass in is a numeric variable, you can easily append the appropriate suffix like this:</p><pre class='pre-container prettyprint'>var myValue = -270;<br />TweenLite.to(obj, 1, {directionalRotation: (myValue + \"_short\") });</pre>"}},"0c466d8095583e88":{"meta":{"keywords":["js.Linear","Easing"],"title":"Linear","description":"Linear ease with no acceleration or deceleration. Linear is identical to Power0."},"header":{"content":"<p>Linear ease with no acceleration or deceleration. Linear is identical to <code>Power0</code>.</p><p>This is one of the eases that is natively accelerated in TweenLite and TweenMax. All of the \"Power\" eases and their counterparts (Linear (0), Quad (1), Cubic (2), Quart (3), Quint (4), and Strong (4)) are accelerated.</p><div class=\"ease-visualizer\" data-ease=\"Power0\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example usage:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Linear.easeNone});</pre>"}},"f8a5c0f959c5c320":{"meta":{"keywords":["js.Linear.Linear()"],"title":"Linear()","description":"Constructor"},"header":{"content":"<p>Constructor</p>"},"parameters":[],"returns":{},"details":{"content":"<p>Constructor</p>"}},"3a1185cd458dbf47":{"meta":{"keywords":["js.Linear.ease"],"title":"ease","description":"[static] The default ease instance which can be reused many times in various tweens in order to conserve memory and improve performance slightly compared to creating a new instance each time."},"header":{"content":"<p>[static] The default ease instance which can be reused many times in various tweens in order to conserve memory and improve performance slightly compared to creating a new instance each time.</p>"},"returns":{"type":"Linear","content":""},"details":{"content":"<p>The default ease instance which can be reused many times in various tweens in order to conserve memory and improve performance slightly compared to creating a new instance each time.</p>"}},"c1554e19d34a341f":{"meta":{"keywords":["js.Linear.easeIn"],"title":"easeIn","description":"[static] Linear ease with no acceleration or deceleration"},"header":{"content":"<p>[static] Linear ease with no acceleration or deceleration</p>"},"returns":{"type":"Linear","content":""},"details":{"content":"<p>Linear ease with no acceleration or deceleration</p>"}},"515e2689add7a2d1":{"meta":{"keywords":["js.Linear.easeInOut"],"title":"easeInOut","description":"[static] Linear ease with no acceleration or deceleration"},"header":{"content":"<p>[static] Linear ease with no acceleration or deceleration</p>"},"returns":{"type":"Linear","content":""},"details":{"content":"<p>Linear ease with no acceleration or deceleration</p>"}},"4919ddfb10ad7aa4":{"meta":{"keywords":["js.Linear.easeNone"],"title":"easeNone","description":"[static] Linear ease with no acceleration or deceleration (for backwards compatibility)"},"header":{"content":"<p>[static] Linear ease with no acceleration or deceleration (for backwards compatibility)</p>"},"returns":{"type":"Linear","content":""},"details":{"content":"<p>Linear ease with no acceleration or deceleration (for backwards compatibility)</p>"}},"e96a5eb3d0ae1709":{"meta":{"keywords":["js.Linear.easeOut"],"title":"easeOut","description":"[static] Linear ease with no acceleration or deceleration"},"header":{"content":"<p>[static] Linear ease with no acceleration or deceleration</p>"},"returns":{"type":"Linear","content":""},"details":{"content":"<p>Linear ease with no acceleration or deceleration</p>"}},"0bce3fc5ec3e76b0":{"meta":{"keywords":["js.Linear.getRatio()"],"title":"getRatio()","description":"Translates the tween&#039;s progress ratio into the corresponding ease ratio."},"header":{"content":"<p>Translates the tween's progress ratio into the corresponding ease ratio.</p>"},"parameters":[{"name":"p","data_type":"Number","description":"<p>progress ratio (a value between 0 and 1 indicating the progress of the tween/ease)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Number","content":"<p>translated number</p>\n"},"details":{"content":"<p>Translates the tween's progress ratio into the corresponding ease ratio. This is the heart of the Ease, where it does all its work.</p>"}},"addd2d84013b1134":{"name":"type","returns":{"type":"String","content":"indicates the type of dragging (the properties that the dragging should affect). Any of the following work: <b>\"x,y\"</b> (basically the translateX and translateY of transform) | <b>\"top,left\"</b> | <b>\"rotation\"</b> |<b>\"scroll\"</b> | <b>\"x\"</b> | <b>\"y\"</b> | <b>\"top\"</b> | <b>\"left\"</b> | <b>\"scrollTop\"</b> | <b>\"scrollLeft\"</b>. The default is <code>\"x,y\"</code> for all browsers except old versions of IE that don't natively support transforms in which case <code>\"top,left\"</code> is the default.","contentShort":"indicates the type of dragging (the properties that the dragging should affect), like x. y, rotation, etc"}},"d2bd9f16ab20530b":{"name":"bounds","returns":{"type":"Element | String | Object","content":"to cause the draggable element to stay within the bounds of another DOM element (like a container), you can pass the element like<code>bounds:document.getElementById(\"container\")</code> or a jQuery object is fine too, or even selector text like <code>\"#container\"</code> which gets passed to whatever <code>TweenLite.selector</code> is. If you prefer, you can define bounds as a rectangle instead, like <code>bounds:{top:100, left:0, width:1000, height:800}</code>which is based on the parent's coordinate system (top/left would be from the upper left corner of the parent). Or you can define specific maximum and minimum values like <code>bounds:{minX:10, maxX:300, minY:50, maxY:500}</code> or <code>bounds:{minRotation:0, maxRotation:270}</code>.","contentShort":"to cause the draggable element to stay within the bounds of another DOM element (like a container)."}},"1c306a319826c160":{"name":"lockAxis","returns":{"type":"Boolean","content":"if <code>true</code>, dragging more than 2 pixels in either direction (horizontally or vertically) will lock movement into that axis so that the element can only be dragged that direction (horizontally or vertically, whichever had the most initial movement) during that drag. No diagonal movement will be allowed. Obviously this is only applicable for <code>type:\"x,y\"</code> and <code>type:\"top,left\"</code> and <code>type:\"scroll\"</code>Draggables. If you only want to allow vertical movement, you should use <code>type:\"y\"</code> or <code>type:\"top\"</code> or<code>type:\"scrollTop\"</code> or if you only want to allow horizontal movement, you should use <code>type:\"x\"</code> or<code>type:\"left\"</code> or <code>type:\"scrollLeft\"</code>.","contentShort":"if <code>true</code>, dragging more than 2 pixels in either direction (horizontally or vertically) will lock movement into that axis so that the element can only be dragged that direction"}},"aca7362aad5f9793":{"name":"trigger","returns":{"type":"Element | String | Object","content":"if you want only a certain area to trigger the dragging (like the top bar of a window) instead of the entire element, you can define a child element as the <code>trigger</code>, like<code>trigger:yourElement</code> or <code>trigger:\"#topBar\"</code> or <code>trigger:$(\"#yourID\")</code>. You may define the trigger as an element or a selector string (which gets fed to whatever <code>TweenLite.selector</code> is), or a jQuery object.","contentShort":"if you want only a certain area to trigger the dragging (like the top bar of a window) instead of the entire element, you can define a child element as the <code>trigger</code>."}},"66cba4d5da870b3b":{"name":"edgeResistance","returns":{"type":"Number","content":"a number between 0 and 1 that controls the degree to which resistance is applied to the element as it goes outside the bounds (if any are applied), where 1 won't allow it to be dragged past the bounds at all, 0.75 applies a lot of resistance (making the object travel at quarter-speed beyond the border while dragging), and 0.5 would be half-speed beyond the border, etc. This can even apply to rotation.","contentShort":"a number between 0 and 1 that controls the degree to which resistance is applied to the element as it goes outside the bounds."}},"3e643e36562500cb":{"name":"dragResistance","returns":{"type":"Number","content":"a number between 0 and 1 that controls the degree to which resistance is constantly applied to the element as it is dragged, where 1 won't allow it to be dragged at all, 0.75 applies a lot of resistance (making the object travel at quarter-speed), and 0.5 would be half-speed, etc. This can even apply to rotation.","contentShort":"a number between 0 and 1 that controls the degree to which resistance is constantly applied to the element as it is dragged."}},"df43bae4a56cfe24":{"name":"zIndexBoost","returns":{"type":"Boolean","content":"by default, for vertical/horizontal dragging, when an element is pressed/touched, it has its <code>zIndex</code> set to a high value (1000 by default) and that number gets incremented and applied to each new element that gets pressed/touched so that the stacking order looks correct (newly pressed objects rise to the top), but if you prefer to skip this behavior set<code>zIndexBoost:false</code>.","contentShort":"by default, for vertical/horizontal dragging, when an element is pressed/touched, it has its <code>zIndex</code> set to a high value (1000 by default)  so that newly selected items will rise above others."}},"316858f5f13de012":{"name":"cursor","returns":{"type":"String","content":"by default (except for <code>type:\"rotation\"</code>), the <code>cursor</code> css property of the element is set to <code>\"move\"</code> so that when the mouse rolls over it, there's a visual cue indicating that it's moveable, but you may define a different <code>cursor</code> if you prefer (as described at <a href=\"http://devdocs.io/css/cursor\" target=\"\">http://devdocs.io/css/cursor</a>) like<code>cursor:\"pointer\"</code>.","contentShort":"by default (except for <code>type:\"rotation\"</code>), the <code>cursor</code> css property of the element is set to <code>\"move\"</code> so that when the mouse rolls over it, there's a visual cue indicating that it's moveable."}},"138bfd0f79da1923":{"name":"autoScroll","returns":{"type":"Number","content":"To enable auto-scrolling when a Draggable is dragged within 40px of an edge of a scrollable container, set <code>autoScroll</code> to a non-zero value, where 1 is normal speed, 2 is double-speed, etc. (you can use any number). For a more intuitive/natural feel, it will scroll faster as the mouse/touch gets closer to the edge. The default value is 0 (no auto-scrolling). For a demo, see <a href=\"http://codepen.io/GreenSock/pen/YPvdYv/?editors=001\">http://codepen.io/GreenSock/pen/YPvdYv/?editors=001</a>","contentShort":"To enable auto-scrolling when a Draggable is dragged within 40px of an edge of a scrollable container, set <code>autoScroll</code> to a non-zero value, where 1 is normal speed, 2 is double-speed, etc."}},"a6944cbf3f89e97e":{"name":"liveSnap","returns":{"type":"Function | Boolean | Array | Object","content":"allows you to define rules that get applied <b>WHILE</b> the element is being dragged (whereas regular <code>snap</code> affects only the end value(s), where the element lands after the drag is released). For example, maybe you want the rotation to snap to 10-degree increments while dragging or you want the x and y values to snap to a grid (whichever cell is closest). You can define the<code>liveSnap</code> in any of the following ways:\n<ul>\n\t<li><b>as a function</b> - this function will be passed one numeric parameter, the natural (unaltered) value. The function must return whatever the new value should be (you run whatever logic you want inside your function and spit back the value). For example, to make the value snap to the closest increment of 50, you'd do <code>liveSnap:function(value) { return Math.round(value / 50) * 50; }</code></li>\n\t<li><b>as an array</b> - if you use an array of values, Draggable will loop through the array and find the closest number (as long as it's not outside any bounds you defined). For example, to have it choose the closest number from 10, 50, 200, and 450, you'd do <code>liveSnap:[10,50,200,450]</code></li>\n\t<li><b>as an object</b> - if you'd like to use different logic for each property, like if <code>type</code> is <code>\"x,y\"</code> and you'd like to have the \"x\" part snap to one set of values, and the \"y\" part snap to a different set of values, you can use an object that has matching properties, like: <code>liveSnap:{x:[5,20,80,400], y:[10,60,80,500]}</code> or if <code>type</code> is <code>\"top,left\"</code> and you want to use a different function for each, you'd do <code>liveSnap:{top:function(value) { return Math.round(value / 50) * 50; }, left:function(value) { return Math.round(value / 100) * 100; }}</code>. As of GSAP 1.20.0, you can define a <code>points</code> property inside this object that combines both x and y, like <code>liveSnap:{points:[{x:0, y:0},{x:100, y:0}],\n radius:20}</code> which will snap to any point in the array when it's within 20px (distance). Or you can even use a function-based value to run your own snapping logic, like <code>liveSnap:{points:function(point) { //run custom logic and return a new point }}</code>. See <a href=\"#snapping\">snapping section</a> of this page for examples.</li>\n\t<li><b>as a boolean (true)</b> - live snapping will use whatever is defined for the <code>snap</code> (so that instead of only applying to the end value(s), it will apply it \"live\" while dragging too)</li>\n</ul>","contentShort":"defines rules that get applied <b>WHILE</b> the element is being dragged."}},"ae5d53b7dad3637a":{"name":"dragClickables","returns":{"type":"Boolean","content":"By default, Draggable will ignore clicks on <code>&lt;a&gt;</code>, <code>&lt;input&gt;</code> <code>&lt;select&gt;</code>,<code>&lt;button&gt;</code>, and <code>&lt;textarea&gt;</code> elements (as well as any element that has a <code>data-clickable=\"true\"</code>attribute), allowing the browser's default behavior (like clicking on an input would give it focus and drop the cursor there to begin typing), but if you want Draggable to hijack those clicks and initiate dragging instead, set <code>dragClickables:true</code>.","contentShort":"by setting <code>dragClickables:true</code> Draggable will initiate dragging when you click on <code>&lt;a&gt;</code>, <code>&lt;input&gt;</code> <code>&lt;select&gt;</code>,<code>&lt;button&gt;</code>, and <code>&lt;textarea&gt;</code> elements."}},"5b6654db000793db":{"name":"throwProps","returns":{"type":"Boolean | Object","content":"ThrowPropsPlugin is the key to getting the momentum-based motion after the users' mouse (or touch) is released; to have Draggable auto-apply a ThrowPropsPlugin tween to the element when the mouse is released (or touch ends), you can set <code>throwProps:true</code>. Or for advanced effects, you can define the actual <code>throwProps</code> object that will get fed into the<code>ThrowPropsPlugin.to()</code> call, like <code>throwProps:{top:{min:0, max:1000, end:[0,200,400,600]}}</code>. However, if you want ultimate control over the <code>ThrowPropsPlugin</code> tween, you can simply use an onDragEnd to call your own function that creates the tween. Note that ThrowPropsPlugin is a membership benefit of <a href=\"http://www.greensock.com/club/\" target=\"\">Club GreenSock</a>, so it is not in the public downloads or github repository.\n\nIf <code>throwProps:true</code> is defined, you may also use any of the following configuration properties that apply to the movement after the mouse/touch is released:\n<ul>\n\t<li><b>snap</b> : Function | Object | Array - allows you to define rules for where the element can land after it gets released. For example, maybe you want the rotation to always end at a 90-degree increment or you want the x and y values to be exactly on a grid (whichever cell is closest to the natural landing spot) or maybe you want it to land on a very specific value. You can define the <code>snap</code> in any of the following ways:\n<ul>\n\t<li><b>as a function</b> - this function will be passed one numeric parameter, the natural ending value. The function must return whatever the new ending value should be (you run whatever logic you want inside the function and spit back the value). For example, to make the value snap to the closest increment of 50, you'd do <code>snap:function(endValue) { return Math.round(endValue / 50) * 50; }</code></li>\n\t<li><b>as an array</b> - if you use an array of values, ThrowPropsPlugin will first plot the natural landing position and then loop through the array and find the closest number (as long as it's not outside any bounds you defined). For example, to have it choose the closest number from 10, 50, 200, and 450, you'd do <code>snap:[10,50,200,450]</code></li>\n\t<li><b>as an object</b> - if you'd like to use different logic for each property, like if <code>type</code> is <code>\"x,y\"</code> and you'd like to have the \"x\" part snap to one set of values, and the \"y\" part snap to a different set of values, you can use an object that has matching properties, like: <code>snap:{x:[5,20,80,400], y:[10,60,80,500]}</code> or if <code>type</code> is <code>\"top,left\"</code> and you want to use a different function for each, you'd do <code>snap:{top:function(endValue) { return Math.round(endValue / 50) * 50; }, left:function(endValue) { return Math.round(endValue / 100) * 100; }}</code>. As of GSAP 1.20.0, you can define a <code>points</code> property inside this object that combines both x and y, like <code>liveSnap:{points:[{x:0, y:0},{x:100, y:0}],\n radius:20}</code> which will snap to any point in the array when it's within 20px (distance). Or you can even use a function-based value to run your own snapping logic, like <code>liveSnap:{points:function(point) { //run custom logic and return a new point }}</code>. See <a href=\"#snapping\">snapping section</a> of this page for examples.</li>\n</ul>\n</li>\n\t<li><b>onThrowUpdate</b> : Function - a function that should be called each time the ThrowPropsPlugin tween updates/renders (basically on each \"tick\" of the engine while the tween is active). This only applies to the tween that gets generated after the user releases their mouse/touch - the function is not called while the user is dragging the element (that's what <code>onDrag</code> is for). By default, the scope of the <code>onThrowUpdate</code> is the Draggable instance itself, but you may define an<code>onThrowUpdateScope</code> if you prefer, just like any other TweenLite or TweenMax.</li>\n\t<li><b>onThrowComplete</b> : Function - a function that should be called when the ThrowPropsPlugin tween finishes. This only applies to the tween that gets generated after the user releases their mouse/touch - the function is not called immediately when the user releases their mouse/touch - that's what <code>onDragEnd</code> is for. By default, the scope of the <code>onThrowComplete</code> is the Draggable instance itself, but you may define an <code>onThrowCompleteScope</code> if you prefer, just like any other TweenLite or TweenMax.</li>\n\t<li><b>throwResistance</b> : Number - a number (1000 by default) that controls how much resistance or friction there is when the mouse/touch is released and momentum-based motion is enabled (by setting <code>throwProps:true</code>). The larger the number, the more resistance and the quicker the motion decelerates. (requires <code>ThrowPropsPlugin</code> and setting <code>throwProps:true</code>, otherwise<code>throwResistance</code> will simply be ignored.)</li>\n\t<li><b>maxDuration</b> : Number - the maximum duration (in seconds) that the kinetic-based throwProps tween can last. <code>ThrowPropsPlugin</code> will automatically analyze the velocity and bounds and determine an appropriate duration (faster movements would typically result in longer tweens to decelerate), but you can cap the duration by defining a <code>maxDuration</code>. The default is 10 seconds. This has nothing to do with the maximum amount of time that the user can drag the object - it's only the <code>throwProps</code> tween that results <b>after</b> they release the mouse/touch. (requires<code>ThrowPropsPlugin</code> and setting <code>throwProps:true</code>, otherwise <code>maxDuration</code> will simply be ignored.)</li>\n\t<li><b>minDuration</b> : Number - the minimum duration (in seconds) that the kinetic-based throwProps tween should last. <code>ThrowPropsPlugin</code> will automatically analyze the velocity and bounds and determine an appropriate duration (faster movements would typically result in longer tweens to decelerate), but you can force the tween to take at least a certain amount of time by defining a<code>minDuration</code>. The default is 0.2 seconds. This has nothing to do with the minimum amount of time that the user can drag the object - it's only the <code>throwProps</code> tween that results <b>after</b> they release the mouse/touch. (requires <code>ThrowPropsPlugin</code> and setting <code>throwProps:true</code>, otherwise <code>minDuration</code> will simply be ignored.)</li>\n\t<li><b>overshootTolerance</b> : Number - affects how much overshooting is allowed before smoothly returning to the resting position at the end of the tween. This can happen when the initial velocity from the flick would normally cause it to exceed the bounds/min/max. The larger the <code>overshootTolerance</code> the more leeway the tween has to temporarily shoot past the max/min if necessary. The default is 1. If you don't want to allow any overshooting, you can set it to 0.</li>\n</ul>","contentShort":"Enables momentum-based motion after the users' mouse (or touch) is released."}},"e6ec9a76a8a3b2ae":{"name":"minimumMovement","returns":{"type":"Integer","content":"By default, Draggable requires that the mouse/touch moves more than 2 pixels in order to be interpreted as a drag, but you can change that threshold using <code>minimumMovement</code>. So <code>minimumMovement:6</code> would require that the mouse/touch moves more than 6 pixels to be interpreted as a drag. ","contentShort":"by default, Draggable requires that the mouse/touch moves more than 2 pixels in order to be interpreted as a drag, but you can change that threshold using <code>minimumMovement</code>. "}},"2ba22762a5b9b4a0":{"name":"clickableTest","returns":{"type":"Function","content":"Your Draggable may contain child elements that are \"clickable\", like links (&lt;a&gt; tags), &lt;button&gt; or &lt;input&gt; elements, etc. By default, it treats clicks/taps on those elements differently, not allowing the user to drag them. You can set <code>dragClickables:true</code> to override that, but it still may be handy to control exactly what Draggable considers to be a \"clickable\" element, so you can use your own function that accepts the clicked-on element as the only parameter and returns <code>true</code> or <code>false</code> accordingly. Draggable will call this function whenever the user presses their mouse/finger down on a Draggable, and the target of that event will be passed to your <code>clickableTest</code> function. ","contentShort":"A custom function that developers can use for debugging purposes to determine what element has been clicked inside a Draggable. "}},"0e014e8442979a30":{"name":"onPress","returns":{"type":"Function","content":"a function that should be called as soon as the mouse (or touch) <b>presses down</b> on the element. Inside that function, <code>\"this\"</code> refers to the <code>Draggable</code> instance (unless you specifically set the scope using <code>onPressScope</code>), making it easy to access the target element (<code>this.target</code>) or the boundary coordinates (<code>this.maxX, this.minX, this.maxY</code>, and <code>this.minY</code>). By default, the<code>pointerEvent</code> (last mouse or touch event related to the Draggable) will be passed as the only parameter to the callback so that you can, for example, access its pageX or pageY or target or currentTarget, etc.","contentShort":"a function that should be called as soon as the mouse (or touch) <b>presses down</b> on the element. Inside that function."}},"11eab4868f87b7c3":{"name":"onDragStart","returns":{"type":"Function","content":"a function that should be called as soon as the mouse (or touch) <b>moves more than 2 pixels</b>, meaning that dragging has begun. Inside that function, <code>\"this\"</code> refers to the <code>Draggable</code>instance (unless you specifically set the scope using <code>onDragStartScope</code>), making it easy to access the target element (<code>this.target</code>) or the boundary coordinates (<code>this.maxX, this.minX, this.maxY</code>, and <code>this.minY</code>). By default, the <code>pointerEvent</code> (last mouse or touch event related to the Draggable) will be passed as the only parameter to the callback so that you can, for example, access its pageX or pageY or target or currentTarget, etc.","contentShort":"a function that should be called as soon as the mouse (or touch) <b>moves more than 2 pixels</b>."}},"9bea7a673f2a5f91":{"name":"onDrag","returns":{"type":"Function","content":"a function that should be called every time the mouse (or touch) <b>moves</b> during the drag. Inside that function, <code>\"this\"</code> refers to the <code>Draggable</code> instance (unless you specifically set the scope using <code>onDragScope</code>), making it easy to access the target element (<code>this.target</code>) or the boundary coordinates (<code>this.maxX, this.minX, this.maxY</code>, and <code>this.minY</code>). By default, the <code>pointerEvent</code>(last mouse or touch event related to the Draggable) will be passed as the only parameter to the callback so that you can, for example, access its pageX or pageY or target or currentTarget, etc.","contentShort":"a function that should be called every time the mouse (or touch) <b>moves</b> during the drag. "}},"b1f70b1c29bb1592":{"name":"onDragEnd","returns":{"type":"Function","content":"a function that should be called as soon as the mouse (or touch) is <b>released</b>after the drag. Even if nothing is moved, the <code>onDragEnd</code> will always fire, whereas the <code>onClick</code> callback only fires if the mouse/touch moves less than 3 pixels. Inside that function, <code>\"this\"</code> refers to the<code>Draggable</code> instance (unless you specifically set the scope using <code>onDragEndScope</code>), making it easy to access the target element (<code>this.target</code>) or the boundary coordinates (<code>this.maxX, this.minX, this.maxY</code>, and <code>this.minY</code>). By default, the <code>pointerEvent</code> (last mouse or touch event related to the Draggable) will be passed as the only parameter to the callback so that you can, for example, access its pageX or pageY or target or currentTarget, etc.","contentShort":"a function that should be called as soon as the mouse (or touch) is <b>released</b>after the drag. "}},"8ba85d1dc9b4a8e9":{"name":"onRelease","returns":{"type":"Function","content":"a function that should be called as soon as the mouse (or touch) is <b>released</b> after having been pressed on the target element, regardless of whether or not anything was dragged. Inside that function, <code>\"this\"</code> refers to the <code>Draggable</code> instance (unless you specifically set the scope using<code>onReleaseScope</code>), making it easy to access the target element (<code>this.target</code>) or the boundary coordinates (<code>this.maxX, this.minX, this.maxY</code>, and <code>this.minY</code>). By default, the <code>pointerEvent</code>(last mouse or touch event related to the Draggable) will be passed as the only parameter to the callback so that you can, for example, access its pageX or pageY or target or currentTarget, etc.","contentShort":"a function that should be called as soon as the mouse (or touch) is <b>released</b> after having been pressed on the target element, regardless of whether or not anything was dragged. "}},"36b18ca91ec3b297":{"name":"onClick","returns":{"type":"Function","content":"a function that should be called only when the mouse/touch is pressed on the element and released without moving 3 pixels or more. This makes it easier to discern the user's intent (click or drag). Inside that function, <code>\"this\"</code> refers to the <code>Draggable</code> instance (unless you specifically set the scope using <code>onClickScope</code>), making it easy to access the target element (<code>this.target</code>) or the boundary coordinates (<code>this.maxX, this.minX, this.maxY</code>, and <code>this.minY</code>). By default, the<code>pointerEvent</code> (last mouse or touch event related to the Draggable) will be passed as the only parameter to the callback so that you can, for example, access its pageX or pageY or target or currentTarget, etc.","contentShort":"a function that should be called only when the mouse/touch is pressed on the element and released without moving 3 pixels or more."}},"1458512f4f6da6b0":{"name":"onPressParams","returns":{"type":"Array","content":"an optional array of parameters to feed the <code>onPress</code> callback. For example,<code>onPressParams:[\"drag started\", 5]</code> would fit with this code: <code>onPress:function(message, num) { console.log(\"message: \" + message + \", num: \" + num); }</code>","contentShort":"an optional array of parameters to feed the <code>onPress</code> callback."}},"0310445a4a5ffbf5":{"name":"onDragStartParams","returns":{"type":"Array","content":"an optional array of parameters to feed the <code>onDragStart</code> callback. For example, <code>onDragStartParams:[\"drag started\", 5]</code> would fit with this code:<code>onDragStart:function(message, num) { console.log(\"message: \" + message + \", num: \" + num); }</code>","contentShort":"an optional array of parameters to feed the <code>onDragStart</code> callback."}},"81c56c4009633eaf":{"name":"onDragParams","returns":{"type":"Array","content":"an optional array of parameters to feed the <code>onDrag</code> callback. For example,<code>onDragParams:[\"dragged\", 5]</code> would fit with this code: <code>onDrag:function(message, num) { console.log(\"message: \" + message + \", num: \" + num); }</code>","contentShort":"an optional array of parameters to feed the <code>onDrag</code> callback."}},"f30ae6a0d4cb24a2":{"name":"onDragEndParams","returns":{"type":"Array","content":"an optional array of parameters to feed the <code>onDragEnd</code> callback. For example, <code>onDragEndParams:[\"drag ended\", 5]</code> would fit with this code:<code>onDragEnd:function(message, num) { console.log(\"message: \" + message + \", num: \" + num); }</code>","contentShort":"an optional array of parameters to feed the <code>onDragEnd</code> callback."}},"5937ab91418da4cc":{"name":"onReleaseParams","returns":{"type":"Array","content":"an optional array of parameters to feed the <code>onRelease</code> callback. For example, <code>onReleaseParams:[\"drag ended\", 5]</code> would fit with this code:<code>onRelease:function(message, num) { console.log(\"message: \" + message + \", num: \" + num); }</code>","contentShort":"an optional array of parameters to feed the <code>onRelease</code> callback."}},"c584f051bacbf69a":{"name":"onClickParams","returns":{"type":"Array","content":"an optional array of parameters to feed the <code>onClick</code> callback. For example,<code>onClickParams:[\"clicked\", 5]</code> would fit with this code: <code>onClick:function(message, num) { console.log(\"message: \" + message + \", num: \" + num); }</code>","contentShort":"an optional array of parameters to feed the <code>onClick</code> callback."}},"16500e6ab1ae062d":{"name":"onPressScope","returns":{"type":"Object","content":"defines the scope of the <code>onPress</code> function (what <code>\"this\"</code> refers to inside that function).","contentShort":""}},"98f8c0d24cc27123":{"name":"onDragStartScope","returns":{"type":"Object","content":"defines the scope of the <code>onDragStart</code> function (what <code>\"this\"</code> refers to inside that function).","contentShort":""}},"8d4780fbb348c43d":{"name":"onDragScope","returns":{"type":"Object","content":"defines the scope of the <code>onDrag</code> function (what <code>\"this\"</code> refers to inside that function).","contentShort":""}},"71b5e21519642473":{"name":"onDragEndScope","returns":{"type":"Object","content":"defines the scope of the <code>onDragEnd</code> function (what <code>\"this\"</code> refers to inside that function).","contentShort":""}},"cf97049a05eea106":{"name":"onReleaseScope","returns":{"type":"Object","content":"defines the scope of the <code>onRelease</code> function (what <code>\"this\"</code> refers to inside that function).","contentShort":""}},"4ce57534a0d91a84":{"name":"onClickScope","returns":{"type":"Object","content":"defines the scope of the <code>onClick</code> function (what <code>\"this\"</code> refers to inside that function).","contentShort":""}},"f10a4a463f486d1a":{"name":"onLockAxis","returns":{"type":"Function","content":"a function that should be called as soon as movement is locked into the horizontal or vertical axis. This happens when <code>lockAxis</code> is <code>true</code> and the user drags enough for Draggable to determine which axis to lock. It also happens on touch-enabled devices when you have a Draggable whose <code>type</code> only permits it to drag along one axis (like <code>type:\"x\"</code>, <code>type:\"y\"</code>, <code>type:\"left\"</code>, or <code>type:\"top\"</code>) and the user touch-drags and Draggable determines the direction, either allowing native touch-scrolling or Draggable-induced dragging. Inside the function, <code>\"this\"</code> refers to the <code>Draggable</code> instance, making it easy to access the locked axis (<code>this.lockedAxis</code> which will either be <code>\"x\"</code> or <code>\"y\"</code>), or the target element (<code>this.target</code>), etc. By default, the <code>pointerEvent</code> (last mouse or touch event related to the Draggable) will be passed as the only parameter to the callback so that you can, for example, access its <code>pageX</code> or <code>pageY</code> or <code>target</code> or <code>currentTarget</code>, etc.","contentShort":"a function that should be called as soon as movement is locked into the horizontal or vertical axis."}},"bcc4d262959c2e60":{"name":"callbackScope","returns":{"type":"Object","content":"The scope to be used for all of the callbacks (onDrag, onDragEnd, onDragStart, etc). The scope is what \"this\" refers to inside any of the callbacks. The older callback-specific scope properties are deprecated but still work.","contentShort":""}},"d29495128260fefc":{"name":"allowNativeTouchScrolling","returns":{"type":"Boolean","content":"by default, allows you to native touch-scroll in the opposite direction as Draggables that are limited to one axis . For example, a Draggable of type : \" x \" or \" left \" would permit native touch-scrolling in the vertical direction , and type : \" y \" or \" top \" would permit native horizontal touch-scrolling.","contentShort":"by default, allows you to native touch-scroll in the opposite direction as Draggables that are limited to one axis ."}},"05478e8ef895c98c":{"name":"force3D","returns":{"type":"Boolean","content":"by default, 3D transforms are used (when the browser supports them) in order to force the element onto its own layer on the GPU, thus speeding compositing. Typically this provides the best performance, but you can disable it by setting <code>force3D:false</code>. This may be a good idea if the element that you're dragging contains child elements that are animating.","contentShort":"by default, 3D transforms are used (when the browser supports them) in order to force the element onto its own layer on the GPU, thus speeding compositing."}},"ffa4332009ed59c7":{"returns":{"type":"Function","contentShort":"An onUpdate callback for the throwProps tween that's generated when the element is flicked.","content":"A function that should be called every time the element updates its position/rotation during the \"throw\" animation (after the user flicks, releasing the mouse/touch with momentum). It is essentially the onUpdate that is assigned to that throwProps tween, so it gets called on every \"tick\" (refresh) until the element comes to rest. "}},"5f649fd49e95f606":{"returns":{"type":"Function","contentShort":"A function that should be called when the \"flick\" (throwProps) animation finishes (when the element comes to rest after a \"flick\").","content":"A function that should be called when the \"flick\" (throwProps) animation finishes (when the element comes to rest after a \"flick\"). Only applies when ThrowPropsPlugin is loaded and you have defined <code>throwProps:true</code>. It is essentially the onComplete that's assigned to the throwProps tween. "}},"11f92408d2609969":{"meta":{"keywords":["js.Animation"],"title":"Animation","description":""},"header":{"content":"<p>Base class for all TweenLite, TweenMax, TimelineLite, and TimelineMax classes, providing core methods/properties/functionality, but there is no reason to create an instance of this class directly.</p>"}},"6ef668a9f15ebadd":{"meta":{"keywords":["js.Animation.Animation()"],"title":"Animation","description":"Constructor"},"header":{"content":"<p>Constructor</p>"},"parameters":[{"name":"duration","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — duration in seconds (or frames for frames-based tweens)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — configuration variables (for example, <code>{x:100, y:0, opacity:0.5, onComplete:myFunction}</code>)</p>\n"}],"returns":{},"details":{"content":"<p>Constructor</p>"}},"fd0b8307fd5118c6":{"meta":{"keywords":["js.Animation.data"],"title":"data","description":"A place to store any data you want (initially populated with vars.data if it exists)."},"header":{"content":"<p>A place to store any data you want (initially populated with vars.data if it exists).</p>"},"returns":{"type":"*","content":""},"details":{"content":"<p>A place to store any data you want (initially populated with vars.data if it exists).</p>"}},"4e8b086407f4fb2c":{"meta":{"keywords":["js.Animation.timeline"],"title":"timeline","description":"[Read-only] Parent timeline."},"header":{"content":"<p>[Read-only] Parent timeline.</p>"},"returns":{"type":"SimpleTimeline","content":""},"details":{"content":"<p>Parent timeline. Every animation is placed onto a timeline (the root timeline by default) and can only have one parent. An instance cannot exist in multiple timelines at once.</p>"}},"1d9a881066fb186e":{"meta":{"keywords":["js.Animation.vars"],"title":"vars","description":"The vars object passed into the constructor which stores configuration variables like onComplete, onUpdate, etc."},"header":{"content":"<p>The vars object passed into the constructor which stores configuration variables like onComplete, onUpdate, etc.</p>"},"returns":{"type":"Object","content":""},"details":{"content":"<p>The <code>vars</code> object passed into the constructor which stores configuration variables like onComplete, onUpdate, etc. as well as tweening properties like opacity, x, y or whatever.</p>"}},"f35957809b52dfd2":{"meta":{"keywords":["js.Animation.delay()","Delay","Utilities"],"title":"delay()","description":"Gets or sets the animation&#039;s initial delay which is the length of time in seconds (or frames for frames-based tweens) before the animation should begin."},"header":{"content":"<p>Gets or sets the animation's initial delay which is the length of time in seconds (or frames for frames-based tweens) before the animation should begin.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"* ","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the animation's initial <code>delay</code> which is the length of time in seconds (or frames for frames-based tweens) before the animation should begin. A tween's starting values are not recorded until after the <code>delay</code> has expired (except in <code>from()</code> tweens which render immediately by default unless <code>immediateRender:false</code> is set in the <code>vars</code>parameter). An animation's <code>delay</code> is unaffected by its <code>timeScale</code>, so if you were to change <code>timeScale</code> from 1 to 10, for example, it wouldn't cause the delay to grow tenfold.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like<code>myAnimation.delay(2).timeScale(0.5).play(1);</code></p><pre class='pre-container prettyprint'>var currentDelay = myAnimation.delay(); //gets current delay<br />myAnimation.delay(2); //sets delay</pre>"}},"560295553a39dad1":{"meta":{"keywords":["js.Animation.duration()"],"title":"duration()","description":"Gets or sets the animation&#039;s duration, not including any repeats or repeatDelays (which are only available in TweenMax and TimelineMax)."},"header":{"content":"<p>Gets or sets the animation's duration, not including any repeats or repeatDelays (which are only available in TweenMax and TimelineMax).</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the animation's duration, <b>not</b> including any repeats or repeatDelays (which are only available in TweenMax and TimelineMax). For example, if a TweenMax instance has a <code>duration</code> of 2 and a <code>repeat</code> of 3, its <code>totalDuration</code> would be 8 (one standard play plus 3 repeats equals 4 total cycles).</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myAnimation.duration(2).delay(0.5).play(1);</code></p><pre class='pre-container prettyprint'>var currentDuration = myAnimation.duration(); //gets current duration<br />myAnimation.duration(2); //sets duration</pre>"}},"ac42870b8c3fb694":{"meta":{"keywords":["js.Animation.endTime()"],"title":"endTime()","description":"Returns the time at which the animation will finish according to the parent timeline&#039;s local time. "},"header":{"content":"<p>Returns the time at which the animation will finish according to the parent timeline's local time. </p>"},"parameters":[{"name":"includeRepeats","data_type":"Boolean","description":"<p>(default = <code>true</code>) — by default, repeats are included when calculating the end time but you can pass <code>false</code> to prevent that.</p>\n"}],"returns":{"type":"Number","content":""},"details":{"content":"<p>Returns the time at which the animation will finish according to the parent timeline's local time. This does factor in the timeScale. For example:<br /></p><pre class='pre-container prettyprint'>var tl = new TimelineLite();<br />var tween = TweenLite.to(e, 1, {x:100}); //create a 1-second tween<br />tl.add(tween, 0.5); //insert the tween at 0.5 seconds into the timeline<br />console.log(tween.endTime()); //1.5<br />tween.timeScale(2); //double the speed of the tween, thus it'll finish in half the normal time<br />console.log(tween.endTime()); //1</pre>"}},"7e0c6f182a9fa2db":{"meta":{"keywords":["js.Animation.eventCallback()"],"title":"eventCallback()","description":"Gets or sets an event callback like &quot;onComplete&quot;, &quot;onUpdate&quot;, &quot;onStart&quot;, &quot;onReverseComplete&quot; or &quot;onRepeat&quot; (onRepeat only applies to TweenMax or TimelineMax instances) along with any parameters that should be passed to that callback."},"header":{"content":"<p>Gets or sets an event callback like \"onComplete\", \"onUpdate\", \"onStart\", \"onReverseComplete\" or \"onRepeat\" (onRepeat only applies to TweenMax or TimelineMax instances) along with any parameters that should be passed to that callback.</p>"},"parameters":[{"name":"type","data_type":"String","description":"<p>The type of event callback, like <code>\"onComplete\", \"onUpdate\", \"onStart\"</code> or <code>\"onRepeat\"</code>. This is case-sensitive.</p>\n"},{"name":"callback","data_type":"Function","description":"<p>(default = <code>null</code>)<code></code> — The function that should be called when the event occurs.</p>\n"},{"name":"params","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — An array of parameters to pass the callback. Use <code>\"{self}\"</code> to refer to the animation instance itself. Example: <code>[\"param1\",\"{self}\"]</code></p>\n"},{"name":"scope","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The scope in which the callback should be called (basically, what &#8220;this&#8221; refers to in the function). NOTE: this parameter only pertains to the JavaScript and AS2 versions; it is omitted in AS3.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the all but the first parameter returns the current value (getter), whereas defining more than the first parameter sets the callback (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets an event callback like <code>\"onComplete\", \"onUpdate\", \"onStart\", \"onReverseComplete\"</code> or <code>\"onRepeat\"</code> (<code>onRepeat</code> only applies to TweenMax or TimelineMax instances) along with any parameters that should be passed to that callback. This is the same as defining the values directly in the constructor's <code>vars</code> parameter initially, so the following two lines are functionally equivalent:</p><pre class='pre-container prettyprint'>//the following two lines produce IDENTICAL results:<br />var myAnimation = new TweenLite(mc, 1, {x:100, onComplete:myFunction, onCompleteParams:[\"param1\",\"param2\"]});<br />myAnimation.eventCallback(\"onComplete\", myFunction, [\"param1\",\"param2\"]);</pre><p>The benefit of using <code>eventCallback()</code> is that it allows you to set callbacks even after the animation instance has been created and it also allows you to inspect the callback references or even delete them on-the-fly (use <code>null</code> to delete the event callback).<br /></p><pre class='pre-container prettyprint'>//deletes the onUpdate<br />myAnimation.eventCallback(\"onUpdate\", null);</pre><p><b>IMPORTANT: </b>Animation instances can only have one callback associated with each event type (one <code>onComplete</code>, one <code>onUpdate</code>, one <code>onStart</code>, etc.). So setting a new value will overwrite the old one. All of the values populate the <code>vars</code> object too which was originally passed into the constructor (think of that like a storage place for configuration data).</p><p>This method serves as both a getter and setter. Omitting all but the first parameter returns the current value (getter), whereas defining more than the first parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myAnimation.eventCallback(\"onComplete\", completeHandler).eventCallback(\"onUpdate\", updateHandler, [\"param1\",\"{self}\"]).play(1);</code></p><pre class='pre-container prettyprint'>var currentOnComplete = myAnimation.eventCallback(\"onComplete\"); //gets current onComplete<br />myAnimation.eventCallback(\"onComplete\", myFunction); //sets the onComplete</pre><p><b>Note:</b> - Due to the way JavaScript doesn't maintain scope (what \"<code>this</code>\" refers to, or the context) in function calls, it can be useful to define the scope specifically in the 4th parameter. </p>"}},"b634b21b470a9e55":{"meta":{"keywords":["js.Animation.invalidate()"],"title":"invalidate()","description":"Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values."},"header":{"content":"<p>Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values.</p>"},"parameters":[],"returns":{"type":"*","content":"<p><code>*</code> — self (makes chaining easier)</p>\n"},"details":{"content":"<p>Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values. When you <code>invalidate()</code> an animation, it will be re-initialized the next time it renders and its <code>vars</code>object will be re-parsed. The timing of the animation (duration, startTime, delay) will not be affected.</p><p>Another example would be if you have a <code>TweenMax(mc, 1, {x:100, y:100})</code> that ran when mc.x and mc.y were initially at 0, but now mc.x and mc.y are 200 and you want them tween to 100 again, you could simply <code>invalidate()</code> the tween and <code>restart()</code> it. Without invalidating first, restarting it would cause the values jump back to 0 immediately (where they started when the tween originally began). When you invalidate a TimelineLite/TimelineMax, it automatically invalidates all of its children.</p>"}},"cdfc78d10c0d9317":{"meta":{"keywords":["js.Animation.isActive()"],"title":"isActive()","description":"Indicates whether or not the animation is currently active (meaning the virtual playhead is actively moving across this instance&#039;s time span and it is not paused, nor are any of its ancestor timelines)."},"header":{"content":"<p>Indicates whether or not the animation is currently active (meaning the virtual playhead is actively moving across this instance's time span and it is not paused, nor are any of its ancestor timelines).</p>"},"parameters":[],"returns":{"type":"Boolean","content":""},"details":{"content":"<p>Indicates whether or not the animation is currently active (meaning the virtual playhead is actively moving across this instance's time span and it is not paused, nor are any of its ancestor timelines). So for example, if a tween is in the middle of tweening, it's active, but after it is finished (or before it begins), it is <b>not</b> active. If it is paused or if it is placed inside of a timeline that's paused (or if any of its ancestor timelines are paused), <code>isActive()</code> will return <code>false</code>. If the playhead is directly on top of the animation's start time (even if it hasn't rendered quite yet), that counts as \"active\".</p><p>You may also check the <code><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenMax.progress()\"><span data-link-id=\"9555ceafd00d82bd\"></span></span></code> or <code><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenMax.totalProgress()\"><span data-link-id=\"3783d0a065069766\"></span></span></code>, but those don't take into consideration the paused state or the position of the parent timeline's playhead.</p><p>In the demo below we use isActive() to make sure the tween can not have its direction changed while it is active. Click the <strong>toogle tween direction</strong> button repeatedly to see that clicks are ignored while the box is moving.</p><p data-height=\"256\" data-theme-id=\"9446\" data-slug-hash=\"Pwzomo\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/Pwzomo/'>check isActive()</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p>"}},"9b20c27ddbcaa297":{"meta":{"keywords":["js.Animation.kill()"],"title":"kill()","description":"Kills the animation entirely or in part depending on the parameters."},"header":{"content":"<p>Kills the animation entirely or in part depending on the parameters.</p>"},"parameters":[{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — To kill only specific properties, use a generic object containing enumerable properties corresponding to the ones that should be killed, like <code>{x:true, y:true}</code>. The values assigned to each property of the object don&#8217;t matter &#8211; the sole purpose of the object is for iteration over the named properties (in this case, <code>x</code> and <code>y</code>). If no object (or <code>null</code>) is defined, <b>ALL</b> properties will be killed.</p>\n"},{"name":"target","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — To kill only aspects of the animation related to a particular target (or targets), reference it here. For example, to kill only parts having to do with <code>myObject</code>, do <code>kill(null, myObject)</code> or to kill only parts having to do with <code>myObject1</code> and<code>myObject2</code>, do <code>kill(null, [myObject1, myObject2])</code>. If no target is defined, <b>ALL</b> targets will be affected.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Kills the animation entirely or in part depending on the parameters. Simply calling <code>kill()</code> (omitting the parameters) will immediately stop the animation and release it for garbage collection. To kill only particular tweening properties of the animation, use the first parameter which should be a generic object with enumerable properties corresponding to those that should be killed, like <code>{x:true, y:true}</code>. The second parameter allows you to define a target (or array of targets) to affect.</p><p>Note: the values assigned to each property of the <code>vars</code> parameter object don't matter - the sole purpose of the object is for iteration over the named properties. In other words, <code>{x:true, y:true}</code> would produce the same results as <code>{x:false, y:false}</code>.</p><pre class='pre-container prettyprint'>//kill the entire animation:<br />myAnimation.kill();<br /> <br />//kill only the \"x\" and \"y\" properties of the animation (all targets):<br />myAnimation.kill({x:true, y:true});<br /> <br />//kill all parts of the animation related to the target \"myObject\" (if the tween has multiple targets, the others will not be affected):<br />myAnimation.kill(null, myObject);<br /> <br />//kill only the \"x\" and \"y\" properties of animations of the target \"myObject\":<br />myAnimation.kill({x:true, y:true}, myObject);<br />  <br />//kill only the \"opacity\" properties of animations of the targets \"myObject1\" and \"myObject2\":<br />myAnimation.kill({opacity:true}, [myObject1, myObject2]);</pre>"}},"96fc1d850d4a51e6":{"meta":{"keywords":["js.Animation.pause()"],"title":"pause()","description":"Pauses the instance, optionally jumping to a specific time."},"header":{"content":"<p>Pauses the instance, optionally jumping to a specific time.</p>"},"parameters":[{"name":"atTime","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The time (or label for TimelineLite/TimelineMax instances) that the instance should jump to before pausing (if none is defined, it will pause wherever the playhead is currently located).</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>default = <code>true</code>)<code></code> — If <code>true</code> (the default), no events or callbacks will be triggered when the playhead moves to the new position defined in the <code>atTime</code> parameter.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Pauses the instance, optionally jumping to a specific time.</p><p>If you define a time to jump to (the first parameter, which could also be a label for TimelineLite or TimelineMax instances), the playhead moves there immediately and if there are any events/callbacks inbetween where the playhead was and the new time, they will not be triggered because by default <code>suppressEvents</code> (the 2nd parameter) is <code>true</code>. Think of it like picking the needle up on a record player and moving it to a new position before placing it back on the record. If, however, you do not want the events/callbacks suppressed during that initial move, simply set the <code>suppressEvents</code> parameter to <code>false</code>.</p><pre class='pre-container prettyprint'>//pauses wherever the playhead currently is:<br />myAnimation.pause();<br /> <br />//jumps to exactly 2-seconds into the animation and then pauses:<br />myAnimation.pause(2);<br /> <br />//jumps to exactly 2-seconds into the animation and pauses but doesn't suppress events during the initial move:<br />myAnimation.pause(2, false);</pre>"}},"15ad1f9068bff51f":{"meta":{"keywords":["js.Animation.paused()"],"title":"paused()","description":"Gets or sets the animation&#039;s paused state which indicates whether or not the animation is currently paused."},"header":{"content":"<p>Gets or sets the animation's paused state which indicates whether or not the animation is currently paused.</p>"},"parameters":[{"name":"value","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the animation's paused state which indicates whether or not the animation is currently paused. This does not take into account anscestor timelines. So for example, a tween that is not paused might appear paused if its parent timeline (or any ancenstor timeline) is paused. Pausing an animation doesn't remove it from its parent timeline, but it does cause it not to be factored into the parent timeline's<code>duration/totalDuration</code>. When an animation completes, it does <b>NOT</b> alter its paused state.</p><p>In most cases, it is easiest to use the <code>pause()</code> method to pause the animation, and <code>resume()</code> to resume it. But to check the current state, you must use the <code>paused()</code> method. It can also be useful for toggling like <code>myAnimation.paused( !myAnimation.paused() );</code></p><p>You can set the <code>paused</code> state initially by passing <code>paused:true</code> in the <code>vars</code> parameter.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myAnimation.paused(true).delay(2).timeScale(0.5);</code><br /></p><pre class='pre-container prettyprint'>var paused = myAnimation.paused(); //gets current paused state<br />myAnimation.paused( true ); //sets paused state to true (just like pause())<br />myAnimation.paused( !myAnimation.paused() ); //toggles the paused state</pre>"}},"a8b5fe1cfbc57740":{"meta":{"keywords":["js.Animation.play()"],"title":"play()","description":"Begins playing forward, optionally from a specific time (by default playback begins from wherever the playhead currently is)."},"header":{"content":"<p>Begins playing forward, optionally from a specific time (by default playback begins from wherever the playhead currently is).</p>"},"parameters":[{"name":"from","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The time (or label for TimelineLite/TimelineMax instances) from which the animation should begin playing (if none is defined, it will begin playing from wherever the playhead currently is).</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code> (the default), no events or callbacks will be triggered when the playhead moves to the new position defined in the <code>from</code> parameter.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Begins playing forward, optionally from a specific time (by default playback begins from wherever the playhead currently is). This also ensures that the instance is neither paused nor reversed.</p><p>If you define a \"from\" time (the first parameter, which could also be a label for TimelineLite or TimelineMax instances), the playhead moves there immediately and if there are any events/callbacks inbetween where the playhead was and the new time, they will not be triggered because by default<code>suppressEvents</code> (the 2nd parameter) is <code>true</code>. Think of it like picking the needle up on a record player and moving it to a new position before placing it back on the record. If, however, you do not want the events/callbacks suppressed during that initial move, simply set the<code>suppressEvents</code> parameter to <code>false</code>.</p><pre class='pre-container prettyprint'>//begins playing from wherever the playhead currently is:<br />myAnimation.play();<br />//begins playing from exactly 2-seconds into the animation:<br />myAnimation.play(2);<br />//begins playing from exactly 2-seconds into the animation but doesn't suppress events during the initial move:<br />myAnimation.play(2, false);</pre>"}},"7bb4870bba9c525d":{"meta":{"keywords":["js.Animation.progress()"],"title":"progress()","description":"Gets or sets the animations&#039;s progress which is a value between 0 and 1 indicating the position of the virtual playhead (excluding repeats) where 0 is at the beginning, 0.5 is at the halfway point, and 1 is at the end (complete)."},"header":{"content":"<p>Gets or sets the animations's progress which is a value between 0 and 1 indicating the position of the virtual playhead (excluding repeats) where 0 is at the beginning, 0.5 is at the halfway point, and 1 is at the end (complete).</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, no events or callbacks will be triggered when the playhead moves to the new position.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the animations's progress which is a value between 0 and 1 indicating the position of the virtual playhead (<b>excluding</b> repeats) where 0 is at the beginning, 0.5 is at the halfway point, and 1 is at the end (complete). If the animation has a non-zero <code>repeat</code> defined (only available in TweenMax and TimelineMax), <code>progress()</code> and <code>totalProgress()</code> will be different because <code>progress()</code> doesn't include the <code>repeat</code> or<code>repeatDelay</code> whereas <code>totalProgress()</code> does. For example, if a TimelineMax instance is set to repeat once, at the end of the first cycle<code>totalProgress()</code> would only be 0.5 whereas <code>progress()</code> would be 1. If you watched both properties over the course of the entire animation, you'd see <code>progress()</code> go from 0 to 1 twice (once for each cycle) in the same time it takes the <code>totalProgress()</code> to go from 0 to 1 once.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myAnimation.progress(0.5).play();</code></p><pre class='pre-container prettyprint'>var progress = myAnimation.progress(); //gets current progress<br />myAnimation.progress(0.25); //sets progress to one quarter finished</pre>"}},"db54f293b92ce54b":{"meta":{"keywords":["js.Animation.restart()"],"title":"restart()","description":"Restarts and begins playing forward from the beginning."},"header":{"content":"<p>Restarts and begins playing forward from the beginning.</p>"},"parameters":[{"name":"includeDelay","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — Determines whether or not the delay (if any) is honored when restarting. For example, if a tween has a delay of 1 second, like <code>new TweenLite(mc, 2, {x:100, delay:1});</code> and then later <code>restart()</code> is called, it will begin immediately, but<code>restart(true)</code> will cause the delay to be honored so that it won&#8217;t begin for another 1 second.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code> (the default), no events or callbacks will be triggered when the playhead moves to the new position defined in the <code>time</code> parameter.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Restarts and begins playing forward from the beginning.</p><pre class='pre-container prettyprint'>//restarts, not including any delay that was defined<br />myAnimation.restart();<br /> <br />//restarts, including any delay, and doesn't suppress events during the initial move back to time:0<br />myAnimation.restart(true, false);</pre>"}},"d185bba975b21413":{"meta":{"keywords":["js.Animation.resume()"],"title":"resume()","description":"Resumes playing without altering direction (forward or reversed), optionally jumping to a specific time first."},"header":{"content":"<p>Resumes playing without altering direction (forward or reversed), optionally jumping to a specific time first.</p>"},"parameters":[{"name":"from","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The time (or label for TimelineLite/TimelineMax instances) that the instance should jump to before resuming playback (if none is defined, it will resume wherever the playhead is currently located).</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code> (the default), no events or callbacks will be triggered when the playhead moves to the new position defined in the <code>from</code> parameter.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Resumes playing without altering direction (forward or reversed), optionally jumping to a specific time first.</p><p>If you define a time to jump to (the first parameter, which could also be a label for TimelineLite or TimelineMax instances), the playhead moves there immediately and if there are any events/callbacks inbetween where the playhead was and the new time, they will not be triggered because by default<code>suppressEvents</code> (the 2nd parameter) is <code>true</code>. Think of it like picking the needle up on a record player and moving it to a new position before placing it back on the record. If, however, you do not want the events/callbacks suppressed during that initial move, simply set the<code>suppressEvents</code> parameter to <code>false</code>.</p><pre class='pre-container prettyprint'>//resumes from wherever the playhead currently is:<br />myAnimation.resume();<br /> <br />//jumps to exactly 2-seconds into the animation and then resumes playback:<br />myAnimation.resume(2);<br /> <br />//jumps to exactly 2-seconds into the animation and resumes playbck but doesn't suppress events during the initial move:<br />myAnimation.resume(2, false);</pre>"}},"652fc9fd0bc84808":{"meta":{"keywords":["js.Animation.reverse()"],"title":"reverse()","description":"Reverses playback so that all aspects of the animation are oriented backwards including, for example, a tween&#039;s ease."},"header":{"content":"<p>Reverses playback so that all aspects of the animation are oriented backwards including, for example, a tween's ease.</p>"},"parameters":[{"name":"from","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The time (or label for TimelineLite/TimelineMax instances) from which the animation should begin playing in reverse (if none is defined, it will begin playing from wherever the playhead currently is). To begin at the very end of the animation, use <code>0</code>. Negative numbers are relative to the end of the animation, so -1 would be 1 second from the end.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p><code>Boolean</code> (default = <code>true</code>)<code></code> — If <code>true</code> (the default), no events or callbacks will be triggered when the playhead moves to the new position defined in the <code>from</code> parameter.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Reverses playback so that all aspects of the animation are oriented backwards including, for example, a tween's ease. This will cause the instance's <code>time</code> and <code>totalTime</code> to move back towards zero as well. You can optionally define a specific time to jump to before reversing (by default it begins playing in reverse from wherever the playhead currently is). Calling<code>reverse()</code> also ensures that the instance is neither paused nor reversed.</p><p>To jump to the very end of the animation and play in reverse from there, use 0 as the \"from\" parameter, like <code>reverse(0)</code>.</p><p>To check whether or not the instance is reversed, use the <code>reversed()</code> method, like <code>if (myAnimation.reversed()) {...}</code></p><p>If you define a \"from\" time (the first parameter, which could also be a label for TimelineLite or TimelineMax instances), the playhead moves there immediately and if there are any events/callbacks inbetween where the playhead was and the new time, they will not be triggered because by default <code>suppressEvents</code> (the 2nd parameter) is <code>true</code>. Think of it like picking the needle up on a record player and moving it to a new position before placing it back on the record. If, however, you do not want the events/callbacks suppressed during that initial move, simply set the <code>suppressEvents</code> parameter to <code>false</code>.</p><pre class='pre-container prettyprint'>//reverses playback from wherever the playhead currently is:<br /> myAnimation.reverse();<br /> <br /> //reverses playback from exactly 2 seconds into the animation:<br /> myAnimation.reverse(2);<br /> <br /> //reverses playback from exactly 2 seconds into the animation but doesn't suppress events during the initial move:<br />myAnimation.reverse(2, false);<br /> <br />//reverses playback from the very END of the animation:<br />myAnimation.reverse(0);<br />  <br />//reverses playback starting from exactly 1 second before the end of the animation:<br />myAnimation.reverse(-1);<br /> <br />//flips the orientation (if it's forward, it will go backward, if it is backward, it will go forward):<br />if (myAnimation.reversed()) {<br />    myAnimation.play();<br />} else {<br />    myAnimation.reverse();<br />}<br /> <br />//flips the orientation using the reversed() method instead (shorter version of the code above):<br />myAnimation.reversed( !myAnimation.reversed() );</pre>"}},"d708d783bf75b7f9":{"meta":{"keywords":["js.Animation.reversed()"],"title":"reversed()","description":"Gets or sets the animation&#039;s reversed state which indicates whether or not the animation should be played backwards."},"header":{"content":"<p>Gets or sets the animation's reversed state which indicates whether or not the animation should be played backwards.</p>"},"parameters":[{"name":"value","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the animation's reversed state which indicates whether or not the animation should be played backwards. This value is not affected by<code>yoyo</code> repeats (TweenMax and TimelineMax only) and it does not take into account the reversed state of anscestor timelines. So for example, a tween that is not reversed might appear reversed if its parent timeline (or any ancenstor timeline) is reversed.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.<br /></p><pre class='pre-container prettyprint'>var rev = myAnimation.reversed(); //gets current orientation<br />myAnimation.reversed( true ); //sets the orientation to reversed<br />myAnimation.reversed( !myAnimation.reversed() ); //toggles the orientation</pre>"}},"b6d7efcbb07722e0":{"meta":{"keywords":["js.Animation.seek()"],"title":"seek()","description":"Jumps to a specific time without affecting whether or not the instance is paused or reversed."},"header":{"content":"<p>Jumps to a specific time without affecting whether or not the instance is paused or reversed.</p>"},"parameters":[{"name":"time","data_type":"*","description":"<p>The time (or label for TimelineLite/TimelineMax instances) to go to.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code> (the default), no events or callbacks will be triggered when the playhead moves to the new position defined in the <code>time</code> parameter.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Jumps to a specific time without affecting whether or not the instance is paused or reversed.</p><p>If there are any events/callbacks inbetween where the playhead was and the new time, they will not be triggered because by default<code>suppressEvents</code> (the 2nd parameter) is <code>true</code>. Think of it like picking the needle up on a record player and moving it to a new position before placing it back on the record. If, however, you do not want the events/callbacks suppressed during that initial move, simply set the<code>suppressEvents</code> parameter to <code>false</code>.<br /></p><pre class='pre-container prettyprint'>//jumps to exactly 2 seconds<br />myAnimation.seek(2);<br /><br />//jumps to exactly 2 seconds but doesn't suppress events during the initial move:<br />myAnimation.seek(2, false);</pre>"}},"e646e51de97ab747":{"meta":{"keywords":["js.Animation.startTime()"],"title":"startTime()","description":"Gets or sets the time at which the animation begins on its parent timeline (after any delay that was defined)."},"header":{"content":"<p>Gets or sets the time at which the animation begins on its parent timeline (after any delay that was defined).</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the time at which the animation begins on its parent timeline (after any <code>delay</code> that was defined). For example, if a tween starts at exactly 3 seconds into the timeline on which it is placed, the tween's <code>startTime</code> would be 3.</p><p>The <code>startTime</code> may be automatically adjusted to make the timing appear seamless if the parent timeline's <code>smoothChildTiming</code> property is <code>true</code>and a timing-dependent change is made on-the-fly, like <code>reverse()</code> is called or <code>timeScale()</code> is changed, etc. See the documentation for the<code>smoothChildTiming</code> property of timelines for more details.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p><pre class='pre-container prettyprint'>var start = myAnimation.startTime(); //gets current start time<br />myAnimation.startTime(2); //sets the start time</pre>"}},"9c2d24c127d9ebc7":{"meta":{"keywords":["js.Animation.time()"],"title":"time()","description":"Gets or sets the local position of the playhead (essentially the current time), described in seconds (or frames for frames-based animations) which will never be less than 0 or greater than the animation&#039;s duration."},"header":{"content":"<p>Gets or sets the local position of the playhead (essentially the current time), described in seconds (or frames for frames-based animations) which will never be less than 0 or greater than the animation's duration.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining. Negative values will be interpreted from the <b>END</b> of the animation.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, no events or callbacks will be triggered when the playhead moves to the new position defined in the <code>value</code> parameter.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the local position of the playhead (essentially the current time), described in seconds (or frames for frames-based animations) which will never be less than 0 or greater than the animation's <code>duration</code>. For example, if the <code>duration</code> is 10 and you were to watch the <code>time</code> during the course of the animation, you'd see it go from 0 at the beginning to 10 at the end. Setting <code>time</code> to 5 would cause the animation to jump to its midway point (because it's half of the duration).</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.<br /></p><pre class='pre-container prettyprint'>var currentTime = myAnimation.time(); //gets current time<br />myAnimation.time(2); //sets time, jumping to new value just like seek().</pre>"}},"7334cca40467aa44":{"meta":{"keywords":["js.Animation.timeScale()"],"title":"timeScale()","description":"Factor that&#039;s used to scale time in the animation where 1 = normal speed (the default), 0.5 = half speed, 2 = double speed, etc."},"header":{"content":"<p>Factor that's used to scale time in the animation where 1 = normal speed (the default), 0.5 = half speed, 2 = double speed, etc.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Factor that's used to scale time in the animation where 1 = normal speed (the default), 0.5 = half speed, 2 = double speed, etc. For example, if an animation's <code>duration</code> is 2 but its <code>timeScale</code> is 0.5, it will take 4 seconds to finish. If you nest that animation in a timeline whose <code>timeScale</code> is 0.5 as well, it would take 8 seconds to finish. You can even tween the <code>timeScale</code> to gradually slow it down or speed it up.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myAnimation.timeScale(2).play(1);</code></p><pre class='pre-container prettyprint'>var currentTimeScale = myAnimation.timeScale(); //gets current timeScale<br />myAnimation.timeScale( 0.5 ); //sets timeScale to half-speed</pre>"}},"8ecf8286d1667a67":{"meta":{"keywords":["js.Animation.totalDuration()"],"title":"totalDuration()","description":"Gets or sets the animation&#039;s total duration including any repeats or repeatDelays (which are only available in TweenMax and TimelineMax)."},"header":{"content":"<p>Gets or sets the animation's total duration including any repeats or repeatDelays (which are only available in TweenMax and TimelineMax).</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the animation's <b>total</b> duration including any repeats or repeatDelays (which are only available in TweenMax and TimelineMax). For example, if a TweenMax instance has a <code>duration</code> of 2 and a repeat of 3, its <code>totalDuration</code> would be 8 (one standard play plus 3 repeats equals 4 total cycles).</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myAnimation.totalDuration(2).delay(0.5).play(1);</code><br /></p><pre class='pre-container prettyprint'>var ctd = myAnimation.totalDuration(); //gets current total duration<br />myAnimation.totalDuration(2); //sets total duration</pre>"}},"43a03109965e7d4e":{"meta":{"keywords":["js.Animation.totalProgress()"],"title":"totalProgress()","description":"Gets or sets the animation&#039;s total progress which is a value between 0 and 1 indicating the position of the virtual playhead (including repeats) where 0 is at the beginning, 0.5 is at the halfway point, and 1 is at the end (complete)."},"header":{"content":"<p>Gets or sets the animation's total progress which is a value between 0 and 1 indicating the position of the virtual playhead (including repeats) where 0 is at the beginning, 0.5 is at the halfway point, and 1 is at the end (complete).</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, no events or callbacks will be triggered when the playhead moves to the new position.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the animation's total progress which is a value between 0 and 1 indicating the position of the virtual playhead (<b>including</b> repeats) where 0 is at the beginning, 0.5 is at the halfway point, and 1 is at the end (complete). If the animation has a non-zero <code>repeat</code> defined (only available in TweenMax and TimelineMax), <code>progress()</code> and <code>totalProgress()</code> will be different because <code>progress()</code> doesn't include the <code>repeat</code> or<code>repeatDelay</code> whereas <code>totalProgress()</code> does. For example, if a TimelineMax instance is set to repeat once, at the end of the first cycle<code>totalProgress()</code> would only be 0.5 whereas <code>progress</code> would be 1. If you watched both properties over the course of the entire animation, you'd see <code>progress</code> go from 0 to 1 twice (once for each cycle) in the same time it takes the <code>totalProgress()</code> to go from 0 to 1 once.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myAnimation.totalProgress(0.5).play();</code><br /></p><pre class='pre-container prettyprint'>var progress = myAnimation.totalProgress(); //gets total progress<br />myAnimation.totalProgress(0.25); //sets total progress to one quarter finished</pre>"}},"37d58fccb2afe6a1":{"meta":{"keywords":["js.Animation.totalTime()"],"title":"totalTime()","description":"Gets or sets the position of the playhead according to the totalDuration which includes any repeats and repeatDelays (only available in TweenMax and TimelineMax)."},"header":{"content":"<p>Gets or sets the position of the playhead according to the totalDuration which includes any repeats and repeatDelays (only available in TweenMax and TimelineMax).</p>"},"parameters":[{"name":"time","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining. Negative values will be interpreted from the <b>END</b> of the animation.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, no events or callbacks will be triggered when the playhead moves to the new position defined in the <code>time</code> parameter.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the position of the playhead according to the <code>totalDuration</code> which <b>includes any repeats and repeatDelays</b> (only available in TweenMax and TimelineMax). For example, if a TweenMax instance has a <code>duration</code> of 2 and a <code>repeat</code> of 3, <code>totalTime</code> will go from 0 to 8 during the course of the tween (plays once then repeats 3 times, making 4 total cycles) whereas <code>time</code> will go from 0 to 2 a total of 4 times. If you added a<code>repeatDelay</code> of 1, that would make the <code>totalTime</code> go from 0 to 11 over the course of the tween.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p><p><code>totalTime</code> will never exceed the <code>totalDuration</code>, nor will it be less than 0 (values will be clipped appropriately). Negative values will be interpreted from the <b>END</b> of the animation. For example, -2 would be 2 seconds before the end. If the animation's <code>totalDuration</code> is 6 and you do<code>myAnimation.totalTime(-2)</code>, it will jump to a <code>totalTime</code> of 4.<br /></p><pre class='pre-container prettyprint'>var tt = myAnimation.totalTime(); //gets total time<br />myAnimation.totalTime(2); //sets total time, jumping to new value just like seek().</pre>"}},"1315d24279922963":{"meta":{"keywords":["js.CustomEase","Easing"],"title":"CustomEase","description":"Allows you to create literally **ANY** ease by simply drawing it in the Ease Visualizer or by copying/pasting an SVG path. Unlimited control points. "},"header":{"content":"<p><span class=\"inTweenMax\">Included in TweenMax: <span class=\"no\">NO</span></span></p><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/A9ROywSFFiY?rel=0&feature=player_detailpage\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><p>CustomEase frees you from the limitations of canned easing options; create literally any easing curve imaginable by simply drawing it in the <a href=\"/ease-visualizer/\">Ease Visualizer</a> or by copying/pasting an SVG path. <strong><i>Zero limitations</i></strong>. Use as many control points as you want.</p><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/rJRrUHds7fc?rel=0&feature=player_detailpage\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><p>The easiest way to create a CustomEase is to click the \"Custom\" link in the Ease Visualizer (below) and then edit the curve.</p><ul class=\"compact\"><li><strong>Add points</strong> - ATL/OPTION-click anywhere on the curve</li><li><strong>Delete points</strong> - Select the point and then press the DELETE key on the keyboard</li><li><strong>Toggle smooth/corner</strong> - ALT/OPTION-click on an anchor point. Or, ALT/OPTION-drag a control handle to turn it into a corner (not smooth) point.</li><li><strong>Select multiple points</strong> - Hold the SHIFT key while clicking anchor points.</li><li><strong>Undo</strong> - Press CTRL-Z</li><li><strong>Disable snapping</strong> - Hold SHIFT while dragging</li></ul><div class=\"ease-visualizer\" data-ease=\"CustomEase\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><h2>Copy/Paste SVG</h2><p>When in the \"custom\" mode of the Ease Visualizer, you can select the orange text at the bottom (the CustomEase data string), highlight it all, and then paste in an SVG path (like from Adobe Illustrator) and then click elsewhere and the Ease Visualizer will grab the first <code>&lt;path&gt;</code> and convert it into the proper format. </p><h2>Using cubic-bezier values</h2><p>CustomEase also recognizes standard <code>cubic-bezier()</code> strings containing four numbers, like those you can get from <a href=\"http://cubic-bezier.com\">cubic-bezier.com</a>. For example, <code>\".17,.67,.83,.67\"</code>. Either paste that into the orange text area in the bottom of the Ease Visualizer or feed it directly into the <code>CustomEase.create()</code> method, like <code>CustomEase.create(\"easeName\", \".17,.67,.83,.67\");</code>. </p><h2>The code</h2><p>Instead of using the long data string in each tween, you simply <code>create()</code> a CustomEase once (typically as soon as your page/app loads) and assign it a memorable ID (like <code>\"hop\"</code> or <code>\"wiggle\"</code> or whatever you want) that you reference thereafter in any of your tweens, like:<br /></p><pre class='pre-container prettyprint'>//define your CustomEase and give it an ID (\"hop\" in this case)<br />CustomEase.create(\"hop\", \"M0,0 C0,0 0.056,0.442 0.175,0.442 0.294,0.442 0.332,0 0.332,0 0.332,0 0.414,1 0.671,1 0.991,1 1,0 1,0\");<br /><br />//now you can reference the ease by ID (as a string):<br />TweenLite.to(element, 1, {y:-100, ease:\"hop\"});<br /></pre><p>Creating the ease(s) initially ensures maximum performance during animation because there's some overhead involved in calculating all the points internally and optimizing the data for blisteringly fast runtime performance. That only happens once, upon creation. </p><p>Typically the path string uses normalized values (0-1), but you can pass in any SVG path data that uses cubic bezier instructions (\"M\", \"C\", \"S\", \"L\", or \"Z\" commands) and it'll normalize things internally.</p><h2>Download CustomEase</h2><p>You must have a GreenSock account which is completely free to set up. Plus it gets you access to our <a href=\"/forums/\">community forums</a> (a fantastic place to learn and get your questions answered). The widget below lets you sign up or if you're already logged in, it'll give you immediate access to the download zip that contains CustomEase in the \"easing\" directory. <i>Note: CustomEase is not in the github repository or CDN; it's only available for download at GreenSock.com.</i><br />[[loginwidget]]</p>"}},"cb1da3c33a8e7bb2":{"meta":{"keywords":["js.CustomEase.create()"],"title":"create()","description":"Creates a CustomEase instance"},"header":{"content":"<p>Creates a CustomEase instance</p>"},"parameters":[{"name":"ID","data_type":"String","description":"<p>An ID (name) that can be used to identify this CustomEase instance, like <code>\"hop\"</code></p>\n"},{"name":"data","data_type":"String","description":"<p>The string describing the easing curve, like <code>\"M0,0 C0,0 0.056,0.442 0.175,0.442 0.294,0.442 0.332,0 0.332,0 0.332,0 0.414,1 0.671,1 0.991,1 1,0 1,0\"</code>. This can be SVG path data containing &#8220;M&#8221;, &#8220;C&#8221;, &#8220;S&#8221;, &#8220;L&#8221;, or &#8220;Z&#8221; commands, or it can be a string containing 4 numbers from CSS cubic-bezier() data like from cubic-bezier.com. Typically the values are normalized (0-1) but if not, they&#8217;ll be normalized internally.</p>\n"}],"returns":{"type":"CustomEase","content":"<p>Returns a new CustomEase instance</p>\n"},"details":{"content":"<p>Creates a <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:CustomEase\"><span data-link-id=\"1315d24279922963\"></span></span> instance and associates it with a particular ID (name) that can be used later in your animation code.</p><pre class='pre-container prettyprint'><br />//create a CustomEase with an ID of \"hop\"<br />CustomEase.create(\"hop\", \"M0,0 C0,0 0.056,0.445 0.175,0.445 0.294,0.445 0.332,0 0.332,0 0.332,0 0.414,1 0.671,1 0.991,1 1,0 1,0\");<br /><br />//then, in your tween you can reference the ID for the ease:<br />TweenMax.to(element, 1, {y:-100, ease:\"hop\"});<br /></pre><p><iframe height='300' scrolling='no' title='Single Tween with CustomEase' src='//codepen.io/GreenSock/embed/84d89c6dc09205ec564b151966af7dea/?height=300&theme-id=3984&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='http://codepen.io/GreenSock/pen/84d89c6dc09205ec564b151966af7dea/'>Single Tween with CustomEase</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.<br /></iframe></p><p>We strongly recommend creating the CustomEase(s) when your page/app initially loads (rather than directly in each tween) in order to maximize performance and readability. You then reference it by ID in the tweening code. When an ease is created, it must parse the points and do various calculations to prepare for blisteringly fast runtime performance during the animation, so front-loading those calculations when your page/app loads is typically best. </p><p><iframe src=\"http://www.youtube.com/embed/rJRrUHds7fc?rel=0&feature=player_detailpage\" width=\"838\" height=\"471\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\" style=\"margin:10px 0;\"></iframe></p><h2>Download CustomEase</h2><p>You must have a GreenSock account which is completely free to set up. Plus it gets you access to our <a href=\"/forums/\">community forums</a> (a fantastic place to learn and get your questions answered). The widget below lets you sign up or if you're already logged in, it'll give you immediate access to the download zip that contains CustomEase in the \"easing\" directory. <i>Note: CustomEase is not in the github repository or CDN; it's only available for download at GreenSock.com.</i><br />[[loginwidget]]</p>"}},"24e00423129f1300":{"meta":{"keywords":["js.CustomEase.get()"],"title":"get()","description":"Gets the CustomEase instance associated with the ID provided."},"header":{"content":"<p>Gets the CustomEase instance associated with the ID provided.</p>"},"parameters":[{"name":"ID","data_type":"String","description":"<p>The ID (name) associated with the CustomEase instance, like <code>\"hop\"</code></p>\n"}],"returns":{"type":"CustomEase","content":"<p>Returns the CustomEase instance associated with the ID provided.</p>\n"},"details":{"content":"<p>Gets the <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:CustomEase\"><span data-link-id=\"1315d24279922963\"></span></span> instance associated with the ID (name) provided. </p><pre class='pre-container prettyprint'><br />//create a CustomEase with an ID of \"hop\"<br />CustomEase.create(\"hop\", \"M0,0 C0,0 0.056,0.445 0.175,0.445 0.294,0.445 0.332,0 0.332,0 0.332,0 0.414,1 0.671,1 0.991,1 1,0 1,0\");<br /><br />//then, later, you can get it like this:<br />var ease = CustomEase.get(\"hop\");<br /></pre><p>Typically you don't need to <code>get()</code> the CustomEase instance because you can just pass its ID into any animation as the ease and GSAP will find it internally. </p><h2>Download CustomEase</h2><p>You must have a GreenSock account which is completely free to set up. Plus it gets you access to our <a href=\"/forums/\">community forums</a> (a fantastic place to learn and get your questions answered). The widget below lets you sign up or if you're already logged in, it'll give you immediate access to the download zip that contains CustomEase in the \"easing\" directory. <i>Note: CustomEase is not in the github repository or CDN; it's only available for download at GreenSock.com.</i><br />[[loginwidget]]</p>"}},"02cf505adaa3c1db":{"meta":{"keywords":["js.CustomEase.getRatio()"],"title":"getRatio()","description":"Converts a linear progress value (0-1) into the corresponding eased value."},"header":{"content":"<p>Converts a linear progress value (0-1) into the corresponding eased value.</p>"},"parameters":[{"name":"progress","data_type":"Number","description":"<p>Converts a linear progress value (0-1) into the corresponding eased value.</p>\n"}],"returns":{"type":"CustomEase","content":""},"details":{"content":"<p>Converts a linear progress value (0-1) into the corresponding eased value. In other words, if the tween is halfway done (progress of 0.5), you'd get the corresponding ease ratio like this:<br /></p><pre class='pre-container prettyprint'><br />//create a CustomEase with an ID of \"hop\"<br />var ease = CustomEase.create(\"hop\", \"M0,0 C0,0 0.056,0.445 0.175,0.445 0.294,0.445 0.332,0 0.332,0 0.332,0 0.414,1 0.671,1 0.991,1 1,0 1,0\");<br /><br />//get the eased ratio at the progress of 0.5 (halfway done):<br />var value = ease.getRatio(0.5);<br /></pre><p>See <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:CustomEase\"><span data-link-id=\"1315d24279922963\"></span></span> for more details.</p>"}},"b387c2e659d8f05e":{"meta":{"keywords":["js.CustomEase.getSVGData()"],"title":"getSVGData()","description":"Calculates the SVG <code>path</code> data string for visualizing the supplied ease graphically. "},"header":{"content":"<p>Calculates the SVG <code>&lt;path&gt;</code> data string for visualizing the supplied ease graphically. </p>"},"parameters":[{"name":"ease","data_type":"*","description":"<p>The ease that should be visualized as an SVG path. Can be a reference to a CustomEase instance, a string ID of a CustomEase (<code>\"hop\"</code>) or even a standard ease like Power2.easeOut.</p>\n"},{"name":"vars","data_type":"Object","description":"<p>A config object containing properties that affect how the ease is rendered, like width, height, x, y, etc. Typically it&#8217;s best to define at least a <code>width</code> and <code>height</code> (default is 100 for each). <code>x</code> and <code>y</code> default to 0.</p>\n","related_configuration_object":"780cd7d653daf782"}],"returns":{"type":"String","content":"<p>An SVG <code>&lt;path&gt;</code> data string like <code>\"M0,0 C0,0 0.056,0.445 0.175,0.445 0.294,0.445 0.332,0 0.332,0 0.332,0 0.414,1 0.671,1 0.991,1 1,0 1,0\"</code>.</p>\n"},"details":{"content":"<p>Calculates the SVG <code>&lt;path&gt;</code> data string for visualizing the any ease graphically at any size that you define, like <code>{width:500, height:400, x:10, y:50}</code>. You can supply a <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:CustomEase\"><span data-link-id=\"1315d24279922963\"></span></span> or the ID associated with one, or even a standard ease like <code>Power2.easeOut</code>. Feed in a <code>path</code> in the vars object and it'll populate its <code>d</code> attribute for you, like:</p><pre class='pre-container prettyprint'><br />//create a CustomEase with an ID of \"hop\"<br />CustomEase.create(\"hop\", \"M0,0 C0,0 0.056,0.445 0.175,0.445 0.294,0.445 0.332,0 0.332,0 0.332,0 0.414,1 0.671,1 0.991,1 1,0 1,0\");<br /><br />//draw the ease visually in the SVG <path> that has an ID of \"ease\" at 500px by 400px:<br />CustomEase.getSVGData(\"hop\", {width:500, height:400, path:\"#ease\"});<br /></pre><h3>Demo</h3><p data-height=\"550\" data-theme-id=\"9446\" data-slug-hash=\"jVYgvb\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/jVYgvb?editors=0010'>CustomEase.getSVGData()</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><h2>Download CustomEase</h2><p>You must have a GreenSock account which is completely free to set up. Plus it gets you access to our <a href=\"/forums/\">community forums</a> (a fantastic place to learn and get your questions answered). The widget below lets you sign up or if you're already logged in, it'll give you immediate access to the download zip that contains CustomEase in the \"easing\" directory. <i>Note: CustomEase is not in the github repository or CDN; it's only available for download at GreenSock.com.</i><br />[[loginwidget]]</p>"}},"13df7c5ab97ce05d":{"meta":{"keywords":["js.ScrollToPlugin","Plugins"],"title":"ScrollToPlugin","description":"Animates the scroll position of the window or DOM element."},"header":{"content":"<p>Animates the scroll position of the window (like doing <code>window.scrollTo(x, y)</code>) or a DOM element (like doing <code>myDiv.scrollTop = y; myDiv.scrollLeft = x;</code>). </p><p>To scroll the window to a particular position, use <code>window</code> as the target of the tween like this:</p><pre class='pre-container prettyprint'>//scroll to 400 pixels down from the top<br />TweenLite.to(window, 2, {scrollTo:400});<br /><br />//or to scroll to the element with the ID \"#someID\" (as of GSAP 1.19.0):<br />TweenLite.to(window, 2, {scrollTo:\"#someID\"});<br /></pre><p>To tween the content of a div, make sure you've set the <code>overflow:scroll</code> on the div and then:<br /></p><pre class='pre-container prettyprint'>//scroll to 250 pixels down from the top of the content in the div<br />TweenLite.to(myDiv, 2, {scrollTo:250});</pre><p>You can define an x or y value or both (to scroll on both the x- and y-axis). For example, to scroll to 400 pixels from the top and 200 pixels from the left, do this:<br /></p><pre class='pre-container prettyprint'>TweenLite.to(myDiv, 2, {scrollTo:{y:400, x:200}, ease:Power2.easeOut});</pre><p>As of <a href=\"/1-19-0/\">GSAP 1.19.0</a>, you can also optionally pass <code>offsetX</code> and/or <code>offsetY</code> numeric values if you want to offset the destination from the element.<br /> </p><pre class='pre-container prettyprint'><br />//scroll #someID into view with 50 pixels from the top (like a margin)<br />TweenMax.to(window, 2, {scrollTo:{y:\"#someID\", offsetY:50}});<br /></pre><p>The demo below uses the <code>offsetY</code> so that each section scrolls into view just under the navigation. Click the section buttons in the demo below. Check out the JS source. </p><p data-height=\"400\" data-theme-id=\"9446\" data-slug-hash=\"4be7ea5c962b62bcd156612524687a5a\" data-default-tab=\"result\" data-user=\"GreenSock\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/4be7ea5c962b62bcd156612524687a5a/\">ScrollToPlugin: Scroll to Element</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><p>By default, the ScrollToPlugin will automatically sense if the scroll position was changed outside of itself (like if the user manually started dragging the scrollbar mid-tween) and cancel that portion of the tween. If, however, you'd like to prevent the auto-killing behavior, set <code>autoKill:false</code> inside the <code>scrollTo</code> object, like:</p><pre class='pre-container prettyprint'>TweenLite.to(myDiv, 2, {scrollTo:{y:400, autoKill:false}, ease:Power2.easeOut});</pre><p>If you would like to detect when autoKill gets triggered you can define an <code>onAutoKill</code> callback.<br /></p><pre class='pre-container prettyprint'>TweenLite.to(window, 2, {scrollTo:{y:300, onAutoKill:myAutoKillFunction}});<br /><br />function myAutoKillFunction() {<br /> alert(\"autoKill\");<br />}</pre><p><!--<h3>ScrollToPlugin.autoKillThreshold</h3>As of <a href=\"/1-19-0/\">GSAP 1.19.0</a>, you can set <code>ScrollToPlugin.autoKillThreshold</code> (default is <code>7</code>) which determines how many pixels the scroll position must drift before triggering the <code>autoKill</code> (like if the user starts scrolling while a scrollTo tween is in-progress). --></p><p>To scroll to the maximum scroll position, use the string <code>\"max\"</code> as the value, like this:<br /></p><pre class='pre-container prettyprint'>TweenLite.to(myDiv, 2, {scrollTo:{y:\"max\"}});</pre><p>If you don't wrap the value in an object, it will assume you want to scroll in the \"y\" direction, so these two lines are functionally equivalent:<br /></p><pre class='pre-container prettyprint'>TweenLite.to(myDiv, 2, {scrollTo:{y:\"max\"}});<br />TweenLite.to(myDiv, 2, {scrollTo:\"max\"});</pre><p><!--<h3>ScrollToPlugin.getOffset()</h3>As of <a href=\"/1-19-0/\">GSAP 1.19.0</a>, ScrollToPlugin exposes a <code>getOffset()</code> method that returns an object with \"x\" and \"y\" properties corresponding to the amount of offset from the container. For example, <code>ScrollToPlugin.getOffset(element, window)</code> might return <code>{x:0, y:310}</code>. --></p>"}},"16d64b5b1b82fde8":{"meta":{"keywords":["js.TweenPlugin","Plugins"],"title":"TweenPlugin","description":""},"header":{"content":"<p>TweenPlugin is the base class for all TweenLite and TweenMax plugins, but generally isn't used directly.</p><p><b>USAGE:</b></p><p>To create your own plugin, extend TweenPlugin and override whichever methods you need (typically <code>_onInitTween()</code> and <code>setRatio()</code>). To make things easier, we have included a file named <code>TEMPLATE_Plugin.js</code> in the plugins directory that serves as a jumping-off point and it has some comments in the code. <code>_onInitTween()</code> is called when the tween renders for the first time and <code>setRatio()</code> is called on every update and passes a ratio parameter which is typically a value between 0 and 1, and it changes according to the ease). There are a few key concepts to keep in mind:</p><ol><li>Pass the TweenPlugin constructor a comma-delimited list of property names that the plugin should overwrite, the first of which should be the property name that the plugin intercepts. For example, the ScrollToPlugin handles any tweens of <code>\"scrollTo\"</code> and it also overwrites other concurrent tweens that are handling the \"scrollTo\" but you may have a ScalePlugin that handles both \"scaleX\" and \"scaleY\" properties, thus the comma-delimited list would look like <code>\"scale,scaleX,scaleY\"</code>. The first name in the list must be unique - two plugins cannot handle the same primary property.</li><li>When a tween that uses your plugin initializes its tween values (normally when it renders for the first time), a new instance of your plugin will be created and its <code>_onInitTween()</code>method is called. That's where you'll want to record any initial values and prepare for the tween. <code>_onInitTween()</code> should return a Boolean value that essentially indicates whether or not the plugin initted successfully. If you return false, TweenLite/Max will just use a normal tween for the value, ignoring the plugin for that particular tween. For example, maybe your tween only works with DOM elements, so if the target isn't one you could return <code>false</code></li><li>The <code>setRatio()</code> method will be called on every frame during the course of the tween and it will be passed a single parameter that's a multiplier (typically between 0 and 1, according to the ease) describing the total amount of change from the beginning of the tween (0). It is normally zero at the beginning of the tween and 1 at the end, and inbetween it could be any value based on the ease applied (for example, an <code>ElasticOut</code> ease would cause the value to shoot past 1 and back again before the end of the tween). So if the tween uses the<code>Linear.ease</code>, when it's halfway finished, <code>setRatio(0.5)</code> would be called</li><li>The <code>_overwriteProps</code> is an array that should contain the properties that your plugin should overwrite in <code>\"auto\"</code> overwrite mode. For example, an <code>autoAlpha</code> plugin could control the<code>\"visible\"</code> and <code>\"alpha\"</code> properties of an object, so if another tween is created that controls the <code>alpha</code> of the target object, your plugin's <code>_kill()</code> method will be called which should handle killing the <code>\"alpha\"</code> part of the tween. It is your responsibility to populate (and depopulate) the <code>_overwriteProps</code> Array. Failure to do so properly can cause odd overwriting behavior.</li><li>There's a <code>_roundProps()</code> method that gets called by the <code>RoundPropsPlugin</code> if the user requests that certain properties get rounded to the nearest integer. If you use <code>_addTween()</code>method to add property tweens, rounding will happen automatically (if necessary), but if you don't use <code>_addTween()</code> and prefer to manually calculate tween values in your <code>setRatio()</code>method, just remember to override the <code>_roundProps()</code> method if that makes sense in your plugin (some plugins wouldn't need to accommodate rounding, like color plugins, in which case you can ignore the method altogether).</li><li>If you need to run a function when the tween gets disabled, add an <code>_onDisable()</code> method (named exactly that) to your plugin. It will automatically be called when the tween gets disabled (typically when it finishes and is removed from its parent timeline). Same for <code>_onEnable()</code> if you need to run code when a tween is enabled. These methods should return a Boolean value indicating whether or not they changed any properties on the target becaues if so (<code>true</code>), it helps notify any initting tweens of the same target to re-init. It is very rare that an <code>_onDisable()</code> or <code>_onEnable()</code> method is necessary, but it can be useful for things like MotionBlurPlugin which must do some very advanced things, hiding the target, changing its alpha to almost 0, etc. only while the tween occurs. If another alpha tween of that same target overwrites an existing motionBlur of the same target, the alpha would be at the wrong value normally, but the if the <code>_onDisable()</code> returns <code>true</code>, it would force the new tween to re-init AFTER the alpha was fixed inside the <code>_onDisable()</code>. Again, this is <b>VERY</b>rare.</li><li>Please use the same naming convention as the rest of the plugins, like MySpecialPropertyNamePlugin.</li><li>If you are handling more than one property in your plugin (like RoundPropsPlugin or ShortRotationPlugin), and you're not using <code>_addTween()</code> to create property tweens internally, make sure you override the <code>_kill()</code> method which will be passed a <code>vars</code> parameter with properties that need to be killed (typically for overwriting).</li></ol>"}},"19160c04837df0bb":{"meta":{"keywords":["js.CustomBounce","Easing"],"title":"CustomBounce","description":"Configure your own bounce ease with squash and stretch"},"header":{"content":"<p>GSAP always had the tried-and-true <code>Bounce.easeOut</code>, but there was no way to customize how \"bouncy\" it was, nor could you get a synchronized squash and stretch effect during the bounce because: </p><ul class=\"compact\"><li>The \"bounce\" ease needs to stick to the ground momentarily at the point of the bounce while the squashing occurs. <code>Bounce.easeOut</code> offers no such customization.</li><li>There was no way to create the corresponding [synchronized] scaleX/scaleY ease for the squashing/stretching. <a href=\"/customease/\">CustomEase</a> solves this now, but it'd still be very difficult to manually draw that ease with all the points lined up in the right spots to match up with the bounces.</li></ul><p>With CustomBounce, you can set a few parameters and it'll create <strong>BOTH</strong> CustomEases for you (one for the bounce, and one [optionally] for the squash/stretch). Think of CustomBounce like a wrapper that creates a CustomEase under the hood based on the variables you pass in.</p><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/iO8J_CiH1fk?rel=0&feature=player_detailpage?rel=0\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><h3>Options</h3><ul><li><strong><code>strength</code></strong> (Number) - a number between 0 and 1 that determines how \"bouncy\" the ease is, so 0.9 will have a lot more bounces than 0.3. Default: 0.7</li><li><strong><code>endAtStart</code></strong> (Boolean) - if true, the ease will end back where it started, allowing you to get an effect like an object sitting on the ground, leaping into the air, and bouncing back down to a stop. Default: false</li><li><strong><code>squash</code></strong> (Number) - controls how long the squash should last (the gap between bounces, when it appears \"stuck\"). Typically <code>2</code> is a good number, but <code>4</code> (as an example) would make the squash longer in relation to the rest of the ease. Default: 0</li><li><strong><code>squashID</code></strong> (String) - the ID that should be assigned to the squash ease. The default is whatever the ID of the bounce is plus \"-squash\" appended to the end. For example, <code>CustomBounce.create(\"hop\", {strength:0.6, squash:2})</code> would default to a squash ease ID of <code>\"hop-squash\"</code>.</li></ul><p>How do you get the bounce and the squash/stretch to work together? You'd use two tweens; one for the position (\"y\"), and the other for the scaleX/scaleY, with both running at the same time:<br /></p><pre class='pre-container prettyprint'>//Create a custom bounce ease:<br />CustomBounce.create(\"myBounce\", {strength:0.6, squash:3, squashID:\"myBounce-squash\"});<br />//do the bounce by affecting the \"y\" property.<br />TweenMax.from(\".class\", 2, {y:-200, ease:\"myBounce\"});<br />//and do the squash/stretch at the same time:<br />TweenMax.to(\".class\", 2, {scaleX:140, scaleY:60, ease:\"myBounce-squash\", transformOrigin:\"center bottom\"});<br /> </pre><p data-height=\"525\" data-theme-id=\"3984\" data-slug-hash=\"pRowwX\" data-default-tab=\"result\" data-user=\"GreenSock\" data-embed-version=\"2\" data-pen-title=\"CustomBounce from GreenSock\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/GreenSock/pen/pEEVoV/\">CustomBounce from GreenSock</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script></p>"}},"08efb16bbc092c14":{"meta":{"keywords":["js.CustomBounce.create()"],"title":"create()","description":"Creates a CustomBounce ease based on the parameters you provide."},"header":{"content":"<p>Creates a CustomBounce ease based on the parameters you provide.</p>"},"parameters":[{"name":"ID","data_type":"String","description":"<p>An ID (name) that can be used to identify this CustomBounce instance, like <code>\"superBounce\".</code></p>\n"},{"name":"vars","data_type":"Object","description":"<p>configuration options for the ease for setting its strength (bounciness), and squash.</p>\n","related_configuration_object":"2a344abc5d73a637"}],"returns":{"type":"CustomBounce","content":"<p>Returns a CustomBounce ease instance.</p>\n"},"details":{"content":"<p>This method creates a new CustomBouunce ease and a separate ease to handle the squash and stretch (optional).</p><p>For the bounce and the squash/stretch to work together use two tweens; one for the position (\"y\"), and the other for the scaleX/scaleY, with both running at the same time:<br /></p><pre class='pre-container prettyprint'>//Create a custom bounce ease:<br />CustomBounce.create(\"myBounce\", {strength:0.6, squash:3, squashID:\"myBounce-squash\"});<br />//do the bounce by affecting the \"y\" property.<br />TweenMax.from(\".class\", 2, {y:-200, ease:\"myBounce\"});<br />//and do the squash/stretch at the same time:<br />TweenMax.to(\".class\", 2, {scaleX:140, scaleY:60, ease:\"myBounce-squash\", transformOrigin:\"center bottom\"});<br /> </pre><p data-height=\"525\" data-theme-id=\"3984\" data-slug-hash=\"pRowwX\" data-default-tab=\"result\" data-user=\"GreenSock\" data-embed-version=\"2\" data-pen-title=\"CustomBounce from GreenSock\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/GreenSock/pen/pEEVoV/\">CustomBounce from GreenSock</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script></p>"}},"211a71fb195b2819":{"meta":{"keywords":["js.SimpleTimeline"],"title":"SimpleTimeline","description":""},"header":{"content":"<p>SimpleTimeline is the base class for TimelineLite and TimelineMax, providing the most basic timeline functionality and it is used for the root timelines in TweenLite but is only intended for internal use in the GreenSock tweening platform. It is meant to be very fast and lightweight.</p>"}},"52466ef8d6a25e07":{"meta":{"keywords":["js.SimpleTimeline.SimpleTimeline()"],"title":"SimpleTimeline()","description":"Constructor"},"header":{"content":"<p>Constructor</p>"},"parameters":[{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — Object containing configuration variables like onComplete, onUpdate, onStart, data, etc.</p>\n"}],"returns":{},"details":{"content":"<p>Constructor</p>"}},"a8583ff10d4f8c14":{"meta":{"keywords":["js.SimpleTimeline.autoRemoveChildren"],"title":"autoRemoveChildren","description":"If true, child tweens/timelines will be removed as soon as they complete."},"header":{"content":"<p>If true, child tweens/timelines will be removed as soon as they complete.</p>"},"returns":{"type":"Boolean","content":""},"details":{"content":"<p>If <code>true</code>, child tweens/timelines will be removed as soon as they complete. (<code>false</code> by default except on the root timeline(s))</p>"}},"180106cf49a52891":{"meta":{"keywords":["js.SimpleTimeline.smoothChildTiming"],"title":"smoothChildTiming","description":"Controls whether or not child tweens/timelines are repositioned automatically (changing their startTime) in order to maintain smooth playback when properties are changed on-the-fly."},"header":{"content":"<p>Controls whether or not child tweens/timelines are repositioned automatically (changing their startTime) in order to maintain smooth playback when properties are changed on-the-fly.</p>"},"returns":{"type":"Boolean","content":""},"details":{"content":"<p>Controls whether or not child tweens/timelines are repositioned automatically (changing their <code>startTime</code>) in order to maintain smooth playback when properties are changed on-the-fly. For example, imagine that the timeline's playhead is on a child tween that is 75% complete, moving mc.x from 0 to 100 and then that tween's <code>reverse()</code> method is called. If <code>smoothChildTiming</code> is <code>false</code> (the default except for the root timelines), the tween would flip in place, keeping its <code>startTime</code> consistent. Therefore the playhead of the timeline would now be at the tween's 25% completion point instead of 75%. Remember, the timeline's playhead position and direction are unaffected by child tween/timeline changes. mc.x would jump from 75 to 25, but the tween's position in the timeline would remain consistent. However, if <code>smoothChildTiming</code> is <code>true</code>, that child tween's <code>startTime</code> would be adjusted so that the timeline's playhead intersects with the same spot on the tween (75% complete) as it had immediately before <code>reverse()</code> was called, thus playback appears perfectly smooth. mc.x would still be 75 and it would continue from there as the playhead moves on, but since the tween is reversed now mc.x will travel back towards 0 instead of 100. Ultimately it's a decision between prioritizing smooth on-the-fly playback (<code>true</code>) or consistent position(s) of child tweens/timelines (<code>false</code>).</p><p>Some examples of on-the-fly changes to child tweens/timelines that could cause their <code>startTime</code> to change when <code>smoothChildTiming</code> is <code>true</code> are: <code>reversed, timeScale, progress, totalProgress, time, totalTime, delay, pause, resume, duration,</code> and <code>totalDuration</code>.</p>"}},"f3d0f009919eaed3":{"meta":{"keywords":["js.SimpleTimeline.add()"],"title":"add()","description":"Adds a TweenLite, TweenMax, TimelineLite, or TimelineMax instance to the timeline at a specific time."},"header":{"content":"<p>Adds a TweenLite, TweenMax, TimelineLite, or TimelineMax instance to the timeline at a specific time.</p>"},"parameters":[{"name":"child","data_type":"*","description":"<p>TweenLite, TweenMax, TimelineLite, or TimelineMax instance to insert</p>\n"},{"name":"position","data_type":"*","description":"<p>(default = <code>+=0</code>)<code></code> — The position at which the tween/timeline should be inserted which can be expressed as a number (for an absolute time as seconds or frames for frames-based timelines) or a string, using &#8220;+=&#8221; or &#8220;-=&#8221; prefix to indicate a relative value (relative to the END of the timeline). For example, <code>myTimeline.insert(myTween, 3)</code> would insert myTween 3 seconds into the timeline.</p>\n"},{"name":"align","data_type":"String","description":"<p>(default = <code>normal</code>)<code></code> — Determines how the tweens/timelines/callbacks/labels will be aligned in relation to each other before getting inserted. Options are: <code>\"sequence\"</code> (aligns them one-after-the-other in a sequence), <code>\"start\"</code> (aligns the start times of all of the objects (ignoring delays)), and <code>\"normal\"</code> (aligns the start times of all the tweens (honoring delays)). The default is <code>\"normal\"</code>.</p>\n"},{"name":"stagger","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Staggers the inserted objects by a set amount of time (in seconds) (or in frames for frames-based timelines). For example, if the stagger value is 0.5 and the <code>\"align\"</code> parameter is set to <code>\"start\"</code>, the second one will start 0.5 seconds after the first one starts, then 0.5 seconds later the third one will start, etc. If the align property is <code>\"sequence\"</code>, there would be 0.5 seconds added between each tween. Default is 0.</p>\n"}],"returns":{"type":"*","content":"<p>this timeline instance (useful for chaining like <code>myTimeline.add(...).add(...)</code>)</p>\n"},"details":{"content":"<p>Adds a TweenLite, TweenMax, TimelineLite, or TimelineMax instance to the timeline at a specific time. In classes like TimelineLite and TimelineMax that override this method, it allows things like callbacks, labels, and arrays of tweens/timelines/callbacks/labels to be inserted too. They also allow the position to be defined in terms of either a numeric time or a label (String).</p>"}},"0891734c6084b33c":{"meta":{"keywords":["js.SimpleTimeline.render()"],"title":"render()","description":"renders"},"header":{"content":"<p>renders</p>"},"parameters":[{"name":"time","data_type":"Number","description":"<p>the time</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>false</code>)</p>\n"},{"name":"force","data_type":"Boolean","description":"<p>(default = <code>false</code>)</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>renders</p>"}},"22c860af2d1dbbcb":{"meta":{"keywords":["js.Power1","Easing"],"title":"Power1","description":"Provides an easeIn, easeOut, and easeInOut with a power (or strength) of 1 which is identical to Quad but with a more intuitive name. The more power, the more exaggerated the easing effect. Using a numeric approach like this in the name makes experimenting easier."},"header":{"content":"<p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 1 which is identical to <code>Quad</code> but with a more intuitive name. The more power, the more exaggerated the easing effect. Using a numeric approach like this in the name makes experimenting easier.</p><p>This is one of the eases that is natively accelerated in TweenLite and TweenMax. All of the \"Power\" eases and their counterparts (Linear (0), Quad (1), Cubic (2), Quart (3), Quint (4), and Strong (4)) are accelerated.</p><div class=\"ease-visualizer\" data-ease=\"Power1\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example usage:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Power1.easeOut});</pre>"}},"08c9c08b99f1928d":{"meta":{"keywords":["js.Power1.easeIn"],"title":"easeIn","description":"[static] Eases in with a power of 1"},"header":{"content":"<p>[static] Eases in with a power of 1</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in with a power of 1</p>"}},"6206e87e65b57251":{"meta":{"keywords":["js.Power1.easeInOut"],"title":"easeInOut","description":"[static] Eases in and then out with a power of 1"},"header":{"content":"<p>[static] Eases in and then out with a power of 1</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in and then out with a power of 1</p>"}},"ef46b9dc2d56104b":{"meta":{"keywords":["js.Power1.easeOut"],"title":"easeOut","description":"[static] Eases out with a power of 1."},"header":{"content":"<p>[static] Eases out with a power of 1.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases out with a power of 1</p>"}},"23b845c3016f0559":{"meta":{"keywords":["js.ColorPropsPlugin","Plugins"],"title":"ColorPropsPlugin","description":"Allows you to animate any color-related property of any object (for DOM element properties, these capabilities are already built into CSSPlugin, so you only need ColorPropsPlugin if you&#039;re animating color properties of non-DOM elements, like canvas library objects or custom objects/properties). "},"header":{"content":"<p>Tweens any color-related property of any object, like <code>myObject.borderColor</code> from <code>\"rgb(255,0,51)\"</code> to <code>\"rgb(102,204,0)\"</code> (and you can define the initial color in almost any format like<code>\"#FF00CC\"</code> or <code>\"rgba(255,0,51,0.5)\"</code> or <code>\"red\"</code> or <code>\"#f0c\"</code> or <code>0xFF00CC</code> or <code>\"hsl(105,50%,80%)\"</code>). New values are always set in the format <code>\"rgb(...)\"</code> (or <code>rgba(...)</code> for values that include alpha). Or, if you want them applied as a number rather than rgb() string, simply set <code>format:\"number\"</code> in the colorProps:{} object (new in version 1.3.0).</p><p>You can tween an unlimited number of color properties simultaneously. Just use the associated property name inside the <code>colorProps:{}</code> object like this:</p><pre class='pre-container prettyprint'>//tweens myObject.borderColor and myObject.myCustomProp <br />TweenLite.to(myObject, 1, {colorProps:{borderColor:\"red\", myCustomProp:\"rgb(204,51,0)\"}, ease:Linear.easeNone});</pre><p>ColorPropsPlugin is <b>NOT</b> generally intended to be used with css-related color properties because the CSSPlugin already handles those. ColorPropsPlugin is meant to tween other color-related properties directly on your JavaScript object(s).</p><p>You may even use getter and setter functions on your JavasScript object if you want, so for example let's say your JavaScript object has a <code>getColor()</code> and <code>setColor()</code> method; tweening the value would be as simple as:</p><pre class='pre-container prettyprint'>//tween a getter/setter-based value<br />TweenLite.to(myObject, 1, {colorProps:{setColor:\"rgb(102,255,51)\"}, ease:Linear.easeNone});</pre><p>This even works for single-method getters/setters (like the ones in jQuery). For example, maybe you have a <code>lineColor()</code> method that serves as a getter and a setter based on whether or not you pass in a parameter like this:<br /></p><pre class='pre-container prettyprint'>//gets<br />var color = myObject.lineColor(); <br /> <br />//sets<br />myObject.lineColor(\"rgb(255,0,51)\"); <br /> <br />//tweens<br />TweenLite.to(myObject, 1, {colorProps:{lineColor:\"rgb(102,255,51)\"}, ease:Linear.easeNone});</pre><p><b>Note:</b> a common mistake is to forget to wrap color-related properties in a <code>colorProps</code> object which is essential for specifying your intent.</p>"}},"2433928b0e0f6cc4":{"meta":{"keywords":["js.DrawSVGPlugin","Animation","Plugins"],"title":"DrawSVGPlugin","description":"DrawSVGPlugin allows you to progressively reveal (or hide) the stroke of an SVG <path>, <line>, <polyline>, <polygon>, <rect>, or <ellipse> and you can even animate outward from the center of the stroke (or any position/segment). It does this by controlling the stroke-dashoffset."},"header":{"content":"<p>DrawSVGPlugin allows you to progressively reveal (or hide) the <strong>stroke</strong> of an SVG <code>&lt;path&gt;</code>, <code>&lt;line&gt;</code>, <code>&lt;polyline&gt;</code>, <code>&lt;polygon&gt;</code>, <code>&lt;rect&gt;</code>, or <code>&lt;ellipse&gt;</code> and you can even animate outward from the center of the stroke (or any position/segment). It does this by controlling the <code>stroke-dashoffset</code> and <code>stroke-dasharray</code> CSS properties. </p><p>Think of the <code>drawSVG</code> value as describing the stroked portion of the overall SVG element (which doesn't necessarily have to start at the beginning). For example, <code>drawSVG:\"20% 80%\"</code> renders the stroke between the 20% and 80% positions, meaning there's a 20% gap on each end. If you started at <code>\"50% 50%\"</code> and animated to <code>\"0% 100%\"</code>, it would draw the stroke from the middle outward to fill the whole path.</p><p data-height=\"584\" data-theme-id=\"9447\" data-slug-hash=\"d99f307bef8b65451613ba899154515b\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/d99f307bef8b65451613ba899154515b/'>DrawSVGPlugin Values: carl click next</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><p>Remember, the <code>drawSVG</code> value doesn't describe the values <i>between</i> which you want to animate - it describes the end state to which you're animating (or the beginning if you're using a <code>from()</code> tween). So <code>TweenLite.to(\"#path\", 1, {drawSVG:\"20% 80%\"})</code> animates it from wherever the stroke is currently to a state where the stroke exists between the 20% and 80% positions along the path. It does <strong>NOT</strong> animate it from 20% to 80% over the course of the tween. This is a <strong>GOOD</strong> thing because it gives you much more flexibility. You're not limited to starting out at a single point along the path and animating in one direction only. You control the whole segment (starting and ending positions). So you could even animate a dash from one end of the path to the other, never changing size, like <code>TweenLite.fromTo(\"#path\", 1, {drawSVG:\"0 5%\"}, {drawSVG:\"95% 100%\"});</code></p><p>You may use either <strong>percentages</strong> or <strong>absolute lengths</strong>. If you use a single value, 0 is assumed for the starting value, so <code>\"100%\"</code> is the same as <code>\"0 100%\"</code> and <code>\"true\"</code>.</p><p><strong>IMPORTANT:</strong> In order to animate the stroke, you must first actually apply one using either css or SVG attributes:<br /></p><pre class='pre-container prettyprint'><br />//Define a stroke and stroke-width in CSS:<br />.yourPath {<br />    stroke-width: 10px;<br />    stroke: red;<br />}<br /><br />//or as SVG attributes:<br /><circle stroke-width=\"10\" stroke=\"red\" fill=\"none\" cx=\"100\" cy=\"100\" r=\"50\" class=\"yourPath\" /><br /></pre><h2>How do I animate many strokes and stagger animations?</h2><p>The great thing about having DrawSVGPlugin integrated into GSAP is that you can tap into the rich API to quickly create complex effects and have total control (pause, resume, reverse, seek, nest, etc.). So let's say you have 20 SVG elements that all have the class \"draw-me\" applied to them, and you want to draw them in a staggered fashion, you could do:<br /></p><pre class='pre-container prettyprint'>//draws all elements with the \"draw-me\" class applied with staggered start times 0.1 seconds apart<br />TweenMax.staggerFrom(\".draw-me\", 2, {drawSVG:0}, 0.1);</pre><p>Or you could create a <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineLite\"><span data-link-id=\"2b3bb68a78e65fe7\"></span></span> and drop the tweens into it so that you can control the entire sequence as a whole:<br /></p><pre class='pre-container prettyprint'>var tl = new TimelineLite();<br />tl.staggerFrom(\".draw-me\", 2, {drawSVG:0}, 0.1);<br />//now we can control it:<br />tl.pause();<br />tl.play();<br />tl.reverse();<br />tl.seek(0.5);<br />...</pre><h2>Video</h2><p><iframe src=\"http://www.youtube.com/embed/6UAoyBcn2fk?rel=0&feature=player_detailpage\" width=\"838\" height=\"471\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></p><h2>Caveats / Notes</h2><ul><li>DrawSVGPlugin does <strong>not</strong> animate the fill of the SVG at all - it only affects the stroke using <code>stroke-dashoffset</code> and <code>stroke-dasharray</code> CSS properties.</li><li>In some rare situations, Firefox doesn't properly calculate the total length of <code>&lt;path&gt;</code> elements, so you may notice that the path stops a bit short even if you animate to 100%. In this [uncommon] scenario, there are two solutions: either add more anchors to your path to make the control points hug closer to the path, or overshoot the percentage a bit, like use 102% instead of 100%. To be clear, this is a Firefox bug, not a bug with DrawSVGPlugin.</li><li>DrawSVGPlugin is a <a href=\"/club/\" target=\"\">Club GreenSock</a> membership benefit. You must have a valid membership to use this class without violating the terms of use. Visit <a href=\"/club/\" target=\"\">http://greensock.com/club/</a> to sign up or get more details.</li><li>As of December 2014, iOS Safari has a bug that causes it to render <code>&lt;rect&gt;</code> strokes incorrectly in some cases (too thick, and slight artifacts around the edges, plus it misplaces the origin). The best workaround is to either convert your <code>&lt;rect&gt;</code> to a <code>&lt;path&gt;</code> or <code>&lt;polyline&gt;</code>.</li><li>You cannot affect the contents of a <code>&lt;use&gt;</code> element because browsers simply don't allow it. Well, you can tween them but you won't see any changes on the screen.</li></ul>"}},"27db5e20e8bbb9ae":{"meta":{"keywords":["js.AttrPlugin","Plugins"],"title":"AttrPlugin","description":"Tweens any numeric <code>attribute</code> of a DOM element, like <code>cx</code> in <code><circle cx=\"100\" cy=\"0\" r=\"50\"/></code>"},"header":{"content":"<span class=\"inTweenMax\">Included in TweenMax: <span class=\"yes\">YES</span></span>Tweens any numeric attribute of a DOM element. For example, let&#39;s say your DOM element looks like this:<br><pre class=\"pre-container prettyprint lang-html\">&lt;rect id=&quot;rect&quot; fill=&quot;none&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;500&quot; height=&quot;400&quot;&gt;&lt;/rect&gt;</pre>You could tween the &quot;x&quot;, &quot;y&quot;, &quot;width&quot;, or &quot;height&quot; attributes using AttrPlugin like this:<br><pre class=\"pre-container prettyprint\">TweenLite.to(&quot;#rect&quot;, 1, {attr:{x:100, y:50, width:100, height:100}, ease:Linear.easeNone});</pre>You can tween an unlimited number of attributes simultaneously. Just use the associated property name inside the&nbsp;<code>attr:{}</code>&nbsp;object.<br><br>AttrPlugin is&nbsp;<strong>NOT</strong>&nbsp;intended to be used with css-related properties because the <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:CSSPlugin\"><span data-link-id=\"be137a434f5b4e08\"></span></span> already handles those. In the example above, if you specify <code>x</code> outside the <code>attr:{}</code> object, it would animate the CSS transform instead (as if you wanted to affect the <code>translateX()</code> of the CSS transform).<br><br>AttrPlugin will retain suffixes like &quot;%&quot;, meaning you can tween values like <code> &lt;rect width=&quot;50%&quot;...&gt;</code>. Caveat: it doesn&#39;t do unit conversion (like px to %), but that&#39;s rarely needed anyway.<br><br><strong>Note:</strong>&nbsp;a common mistake is to forget to wrap attributes in a&nbsp;<code>attr:{}</code>&nbsp;object which is essential for specifying your intent."}},"27ffcb75af705686":{"meta":{"keywords":["js.Draggable","Drag","Utilities"],"title":"Draggable","description":"Draggable provides a surprisingly simple way to make virtually any DOM element draggable, spinnable, tossable, and even flick-scrollable using mouse and/or touch events, plus Draggable integrates beautifully (and optionally) withThrowPropsPlugin so that the user can flick and have the motion decelerate smoothly based on momentum."},"header":{"content":"<p>Provides a surprisingly simple way to make virtually any DOM element draggable, spinnable, tossable, and even flick-scrollable using mouse and/or touch events, plus&nbsp;<code>Draggable</code>&nbsp;integrates beautifully (and optionally) with<code>ThrowPropsPlugin</code>&nbsp;so that the user can flick and have the motion decelerate smoothly based on momentum.</p>\n\n<p>For an interactive demo, go to&nbsp;<a href=\"http://greensock.com/draggable/\" target=\"external\">http://greensock.com/draggable/</a>.</p>\n\n<h3>Features</h3>\n\n<ul>\n\t<li><strong>Touch enabled</strong>&nbsp;- works great on tablets, phones, and desktop browsers.</li>\n\t<li><strong>Incredibly smooth</strong>&nbsp;- GPU-accelerated and requestAnimationFrame-driven for ultimate performance. Compared to other options out there,&nbsp;<code>Draggable</code>&nbsp;just&nbsp;<em>feels</em>&nbsp;far more natural and fluid, particularly when imposing bounds and momentum.</li>\n\t<li><strong>Momentum-based animation</strong>&nbsp;- if you have ThrowPropsPlugin loaded, you can simply set&nbsp;<code>throwProps:true</code>&nbsp;in the config object and it&#39;ll automatically apply natural, momentum-based movement after the mouse/touch is released, causing the object to glide gracefully to a stop. You can even control the amount of resistance, maximum or minimum duration, etc.</li>\n\t<li><strong>Impose bounds</strong>&nbsp;- tell a draggable element to stay within the bounds of another DOM element (a container) as in&nbsp;<code>bounds:&quot;#container&quot;</code>&nbsp;or define bounds as coordinates like&nbsp;<code>bounds:{top:100, left:0, width:1000, height:800}</code>&nbsp;or specific maximum/minimum values like&nbsp;<code>bounds:{minRotation:0, maxRotation:270}</code>.</li>\n\t<li><strong>Sense overlaps with hitTest()</strong>&nbsp;- see if one element is overlapping another and even set a tolerance threshold (like at least 20 pixels or 25% of either element&#39;s total surface area) using the super-flexible <code>Draggable.hitTest()</code>&nbsp;method. Feed it a mouse event and it&#39;ll tell you if the mouse is over the element. See&nbsp;<a href=\"http://codepen.io/GreenSock/pen/GFBvn\" target=\"external\">http://codepen.io/GreenSock/pen/GFBvn</a>&nbsp;for a simple example.</li>\n\t<li><strong>Define a trigger element</strong>&nbsp;- maybe you want only a certain area to trigger the dragging (like the top bar of a window) - it&#39;s as simple as&nbsp;<code>trigger:&quot;#topBar&quot;</code>, for example.</li>\n\t<li><strong>Drag position, rotation, or scroll</strong>&nbsp;- lots of drag types to choose from:&nbsp;<code>&quot;x,y&quot;</code> | <code>&quot;top,left&quot;</code> | <code>&quot;rotation&quot;</code> | <code>&quot;scroll&quot;</code> | <code>&quot;x&quot;</code> | <code>&quot;y&quot;</code> | <code>&quot;top&quot;</code> | <code>&quot;left&quot;</code> | <code>&quot;scrollTop&quot;</code> | <code>&quot;scrollLeft&quot;</code></li>\n\t<li><strong>Lock movement along a certain axis</strong>&nbsp;- set <code>lockAxis:true</code> and Draggable will watch the direction the user starts to drag and then restrict it to that axis. Or if you only want to allow vertical or horizontal movement, that&#39;s easy too using the <code>type</code> (<code>&quot;top&quot;</code>,&nbsp;<code>&quot;y&quot;</code>&nbsp;or <code>&quot;scrollTop&quot;</code> only allow vertical movement; <code>&quot;x&quot;</code>, <code>&quot;left&quot;</code>,&nbsp;or <code>&quot;scrollLeft&quot;</code> only allow horizontal movement).</li>\n\t<li><strong>Rotation honors transform origin</strong>&nbsp;- by default, spinnable elements will rotate around their center, but you can set&nbsp;<code>transformOrigin</code>&nbsp;to something else to make the pivot point be elsewhere. For example, if you call&nbsp;<code>TweenLite.set(yourElement, {transformOrigin:&quot;top left&quot;})</code>&nbsp;before dragging, it will rotate around its top left corner. Or use % or px. Whatever is set in the element&#39;s css will be honored.</li>\n\t<li><strong>Rich callback system and event dispatching</strong>&nbsp;- you can use any of the following callbacks:&nbsp;<code>onPress</code>, <code>onDragStart</code>, <code>onDrag</code>, <code>onDragEnd</code>, <code>onRelease,</code>, <code>onLockAxis</code>,&nbsp;and&nbsp;<code>onClick</code>. Inside the callbacks, <code>&quot;this&quot;</code> refers to the Draggable instance itself, so you can easily access its &quot;target&quot; or bounds, etc. If you prefer event listeners instead, Draggable dispatches events too so you can do things like<code>yourDraggable.addEventListener(&quot;dragend&quot;, yourFunc);</code></li>\n\t<li><strong>Works great with SVG</strong></li>\n\t<li><strong>Even works in transformed containers!</strong> Got a Draggable inside a rotated/scaled container? No problem. No other tool handles this properly that we&#39;ve seen.</li>\n\t<li><strong>Auto-scrolling, even in multiple containers</strong> - set <code>autoScroll:1</code> for normal-speed auto scrolling, or <code>autoScroll:2</code> would scroll twice as fast, etc. The closer you move toward the edge, the faster scrolling gets. See a <a href=\"http://codepen.io/GreenSock/pen/YPvdYv/?editors=001\">demo here</a> (added in version 0.12.0)</li>\n\t<li><strong>Sense clicks when the element moves less than 3 pixels</strong>&nbsp;- a common challenge is figuring out when a user is trying to click/tap an object rather than drag it, so if the mouse/touch moves less than 3 pixels from its starting position, it will be interpreted as a &quot;click&quot; and the onClick callback will be called (and a &quot;click&quot; event dispatched) without actually moving the element. You can define a different threshold using <code>minimumMovement</code> config property, like <code>minimumMovement:6</code> for 6 pixels.</li>\n\t<li><strong>Even works in IE8!</strong>&nbsp;- all major browsers are supported.</li>\n</ul>\n\n<h3>Usage</h3>\n\n<p>In its simplest form, you can make an element draggable (vertically and horizontally) like this:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">Draggable.create(&quot;#yourID&quot;);</pre>\n\n<p>This will simply find the element with the ID&nbsp;<code>&quot;yourID&quot;</code>&nbsp;and make it draggable with no bounds or any kinetic motion after release. You don&#39;t need to use selector text either - you can pass the element itself or a jQuery object.</p>\n\n<p>Use the&nbsp;<code>vars</code>&nbsp;parameter to define various other configuration options. For example, to make the object scroll only vertically using the&nbsp;<code>&quot;y&quot;</code>&nbsp;transform and stay within the bounds of a DOM element with an ID of<code>&quot;container&quot;</code>, and call a function when clicked and another when the drag ends and make it have momentum-based motion (assuming you loaded ThrowPropsPlugin), do this:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">Draggable.create(&quot;#yourID&quot;, {\n\ttype:&quot;y&quot;,\n\tbounds: document.getElementById(&quot;container&quot;),\n\tthrowProps:true,\n\tonClick:function() {\n\t\tconsole.log(&quot;clicked&quot;);\n\t},\n\tonDragEnd:function() {\n\t\tconsole.log(&quot;drag ended&quot;);\n\t}\n});</pre>\n\n<p>Or to make something&nbsp;<strong>spinnable</strong>&nbsp;(dragging rotates the element), you could simply do:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">Draggable.create(&quot;#yourID&quot;, {\n   type:&quot;rotation&quot;,\n   throwProps:true\n});</pre>\n\n<p>And to add the ability to snap to 90-degree increments after the mouse/touch is released (like flick-spinning that always lands on 90-degree increments), use the&nbsp;<code>snap</code>&nbsp;option:</p><pre class=\"pre-container prettyprint\">Draggable.create(&quot;#yourID&quot;, {\n   type:&quot;rotation&quot;,\n   throwProps:true,\n   snap:function(value) {\n//this function gets called by ThrowPropsPlugin when the mouse/finger is released and it plots where rotation should normally end and we can alter that value and return a new one instead. This gives us an easy way to apply custom snapping behavior with any logic we want. In this case, we&#39;ll just make sure the end value snaps to 90-degree increments but only when the &quot;snap&quot; checkbox is selected.\n      return Math.round(value / 90) * 90;\n   }\n});</pre>\n\n<p>Or to make the element&nbsp;<strong>flick-scrollable</strong>, so that dragging it actually scrolls the content, make sure you&#39;ve set the element&#39;s height (and/or width), and then do this:</p><pre class=\"pre-container prettyprint\">Draggable.create(&quot;#yourID&quot;, {\n   type:&quot;scroll&quot;,\n   throwProps:true\n});</pre>\n\n<h2>Config object properties</h2>\n\n<p>[config id=&quot;0dc94f7962bb1809&quot;]</p>\n<a name=\"snapping\"></a>\n\n<h2>Snapping</h2> Draggable has advanced snapping capabilities. You can define a <code>snap</code> value in the config object to control where the Draggable will snap <strong>AFTER</strong> it is released, or you can define a <code>liveSnap</code> value where the Draggable should snap <strong>WHILE</strong> dragging. You can define these values in any of the following ways:\n\n<h3>As an array of snap-to values</h3><pre class=\"pre-container prettyprint\">Draggable.create(&quot;#id&quot;, {\n    type:&quot;x,y&quot;,\n    liveSnap:{\n        //snaps to the closest point in the array, but only when it&#39;s within 15px (new in GSAP 1.20.0 release):\n        points:[{x:0, y:0}, {x:100, y:0}, {x:200, y:50}],\n        radius: 15\n    }\n});\n</pre>\n\n<p><code>points</code> is a special property introduced in GSAP 1.20.0 that allows you to combine both x and y logic into a single place. You can also use separate per-property arrays:</p><pre class=\"pre-container prettyprint\">Draggable.create(&quot;#id&quot;, {\n    type:&quot;x,y&quot;,\n    liveSnap:{\n        //x and y (or top and left) can each have their own array of values to snap to:\n        x:[0, 100, 200, 300],\n        y:[0, 50, 100, 150]\n    }\n});\n</pre>\n\n<h3>As a function with custom logic</h3><pre class=\"pre-container prettyprint\">Draggable.create(&quot;#id&quot;, {\n    type:&quot;x,y&quot;,\n    liveSnap:{\n        points: function(point) {\n            //if it&#39;s within 100px, snap exactly to 500,250\n            var dx = point.x - 500;\n            var dy = point.y - 250;\n            if (Math.sqrt(dx * dx + dy * dy) &lt; 100) {\n                return {x:500, y:250};\n            }\n            return point; //otherwise don&#39;t change anything.\n        }\n    }\n});\n</pre>\n\n<p>Or use separate per-property functions:</p><pre class=\"pre-container prettyprint\">Draggable.create(&quot;#id&quot;, {\n    type:&quot;x,y&quot;,\n    liveSnap:{\n        x: function(value) {\n            //snap to the closest increment of 50.\n            return Math.round(value / 50) * 50; \n        },\n        y: function(value) {\n            //snap to the closest increment of 25.\n            return Math.round(value / 25) * 25;\n        }\n    }\n});\n</pre>\n\n<p>It&#39;s just as simple for a rotation Draggable:</p><pre class=\"pre-container prettyprint\">Draggable.create(&quot;#id&quot;, {\n    type:&quot;rotation&quot;,\n    liveSnap:{\n        rotation: function(value) {\n            //snap to the closest increment of 10.\n            return Math.round(value / 10) * 10; \n        }\n    }\n});\n</pre>\n\n<h2>Getting the velocity</h2>\n\n<p>As long as you&#39;ve loaded&nbsp;<code>ThrowPropsPlugin</code>&nbsp;and set&nbsp;<code>throwProps:true</code>&nbsp;on your Draggable, you can tap into the&nbsp;<code>ThrowPropsPlugin.getVelocity()</code>&nbsp;method. Draggable will automatically start tracking the velocity of the necessary properties based on whatever its &quot;type&quot; is (<code>type:&quot;x,y&quot;</code>&nbsp;will track x and y,&nbsp;<code>type:&quot;rotation&quot;</code>&nbsp;will track rotation, etc.). The only odd duck is &quot;scroll&quot; (or &quot;scrollTop&quot; or &quot;scrollLeft&quot;) because browsers don&#39;t allow overscrolling, so Draggable has to create a special&nbsp;<code>ScrollProxy</code>&nbsp;object that manages the complexity of adding transforms or margins when necessary. Therefore, to get the scrolling-based velocity, you&#39;d use that proxy and check its &quot;top&quot; or &quot;left&quot; values (&quot;top&quot; for the vertical scrolling velocity, and &quot;left&quot; for horizontal). Here are a few examples that you could add to the <code>onDragEnd</code> callback to log the velocity when the user releases their mouse/touch:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">//positional velocity\nDraggable.create(&quot;#movableID&quot;, {\n\ttype:&quot;x,y&quot;,\n\tthrowProps:true,\n\tonDragEnd:function() {\n\t\tconsole.log(&quot;x velocity is: &quot; + ThrowPropsPlugin.getVelocity(this.target, &quot;x&quot;) + &quot; and the duration is &quot; + this.tween.duration() + &quot; seconds.&quot;);\n\t}\n});\n\n//scroll velocity\nDraggable.create(&quot;#scrollableID&quot;, {\n\ttype:&quot;scroll&quot;,\n\tthrowProps:true,\n\tonDragEnd:function() {\n\t\tconsole.log(&quot;vertical scroll velocity is: &quot; + ThrowPropsPlugin.getVelocity(this.scrollProxy, &quot;top&quot;) + &quot;, horizontal scroll velocity is: &quot; + ThrowPropsPlugin.getVelocity(this.scrollProxy, &quot;left&quot;));\n\t}\n});</pre>\n\n<h2>Notes, dependencies, and limitations</h2>\n\n<ul>\n\t<li>Requires TweenLite and CSSPlugin (or just TweenMax which already contains both TweenLite and CSSPlugin). Does&nbsp;<strong>not</strong>&nbsp;require jQuery or any other framework.</li>\n\t<li>If you want a particular element to be &quot;clickable&quot;, thus ignored by Draggable, simply add a&nbsp;<code>data-clickable=&quot;true&quot;</code>&nbsp;attribute to it, or an onclick. By default, Draggable automatically ignores clicks on<code>&lt;a&gt;</code>,&nbsp;<code>&lt;input&gt;</code>,&nbsp;<code>&lt;select&gt;</code>,&nbsp;<code>&lt;button&gt;</code>, and&nbsp;<code>&lt;textarea&gt;</code>&nbsp;elements. If you prefer to run your own logic to determine if an object should be considered &quot;clickable&quot;, you can set the <code>clickableTest</code> config property to a function of your choosing that returns true or false.</li>\n\t<li><code>Draggable</code>&nbsp;can be used&nbsp;<strong>without</strong>&nbsp;<code>ThrowPropsPlugin</code>, but doing so will disable any momentum-based motion (like being able to flick objects and have them continue while decelerating).&nbsp;<code>ThrowPropsPlugin</code>&nbsp;is a membership benefit of&nbsp;<a href=\"http://greensock.com/club/\">Club GreenSock</a>. Please consider joining if you haven&#39;t already.</li>\n\t<li>In order to make things moveable via their&nbsp;<code>&quot;top&quot;</code>&nbsp;and&nbsp;<code>&quot;left&quot;</code>&nbsp;css properties, you must make sure that the elements have their&nbsp;<code>position</code>&nbsp;css property set to either&nbsp;<code>&quot;relative&quot;</code>&nbsp;or&nbsp;<code>&quot;absolute&quot;</code>&nbsp;(that&#39;s just how css works).</li>\n\t<li>By default, all callback functions and &quot;snap&quot; functions and &quot;liveSnap&quot; functions are scoped to the associated Draggable instance, so &quot;this&quot; refers to the Draggable instance. You can get the current horizontal or vertical values using&nbsp;<code>this.x</code>&nbsp;and&nbsp;<code>this.y</code>&nbsp;inside those functions. And if you applied bounds, you can also get the maximum and minimum &quot;legal&quot; values for that particular instance using&nbsp;<code>this.maxX, this.minX, this.maxY</code>, and&nbsp;<code>this.minY</code>.</li>\n\t<li><strong>Having trouble with momentum-based motion?</strong>&nbsp;Make sure you have&nbsp;<code>ThrowPropsPlugin</code>&nbsp;loaded. It&#39;s not in the public downloads because it is a membership benefit of&nbsp;<a href=\"http://greensock.com/club/\" target=\"\">Club GreenSock</a>; you get it by logging into your&nbsp;GreenSock account&nbsp;and downloading it there. Also, make sure you&#39;ve set <code>throwProps:true</code>&nbsp;in the&nbsp;<code>vars</code>&nbsp;config object, like&nbsp;<code>Draggable.create(yourObject, {throwProps:true});</code></li>\n\t<li>If you use an element for the&nbsp;<code>bounds</code>, it should not be rotated differently than the target element.</li>\n</ul>\n\n<p><strong>Examples</strong></p>\n\n<p>For an interactive demo, go to&nbsp;<a href=\"http://greensock.com/draggable/\">http://greensock.com/draggable/</a>.</p>\n\n<p>The following example creates a green box and a red box that you can drag and toss around the screen in a natural, fluid way. If you check the &quot;Snap to grid&quot; checkbox, the boxes will always land exactly on the grid.</p>\n<div class=\"cp_embed_wrapper\">\n\t<iframe id=\"cp_embed_zDwEk\" src=\"http://codepen.io/GreenSock/embed/zDwEk?default-tab=result&height=489&slug-hash=zDwEk&theme-id=9446&user=GreenSock\" scrolling=\"no\" frameborder=\"0\" height=\"489\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed 1\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"></iframe>\n</div>\n\n<p>\n\t<script async=\"\" src=\"http://codepen.io/assets/embed/ei.js\"></script>\n</p>\n"}},"c75d3c448b8ad479":{"meta":{"keywords":["js.Draggable.Draggable()"],"title":"Draggable()","description":"Contstructor"},"header":{"content":"<p>Contstructor</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>The object that will be dragged.</p>\n","related_configuration_object":"0dc94f7962bb1809"},{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code></p>\n"}],"returns":{},"details":{"content":"<p>Constructor. Typically it's best to use <code>Draggable.create()</code> instead of the constructor because it can accommodate multiple elements with one call.</p>"}},"b64a6a3ccee6d6f8":{"meta":{"keywords":["js.Draggable.autoScroll"],"title":"autoScroll","description":"To enable auto-scrolling when a Draggable is dragged within 40px of an edge of a scrollable container, set autoScroll to a non-zero value, where 1 is normal speed, 2 is double-speed, etc. (you can use any number). For a more intuitive/natural feel, it will scroll faster as the mouse/touch gets closer to the edge. The default value is 0 (no auto-scrolling)."},"header":{"content":"<p>To enable auto-scrolling when a Draggable is dragged within 40px of an edge of a scrollable container, set <code>autoScroll</code> to a non-zero value, where 1 is normal speed, 2 is double-speed, etc. (you can use any number). For a more intuitive/natural feel, it will scroll faster as the mouse/touch gets closer to the edge. The default value is 0 (no auto-scrolling).</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>To enable auto-scrolling when a Draggable is dragged within 40px of an edge of a scrollable container, set <code>autoScroll</code> to a non-zero value, where 1 is normal speed, 2 is double-speed, etc. (you can use any number). For a more intuitive/natural feel, it will scroll faster as the mouse/touch gets closer to the edge. The default value is 0 (no auto-scrolling).</p><h2>Video</h2><p><iframe src=\"http://www.youtube.com/embed/lyL8vtF1L68?rel=0&feature=player_detailpage\" width=\"838\" height=\"471\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></p><h2>Demo</h2><p data-height=\"489\" data-theme-id=\"9446\" data-slug-hash=\"YPvdYv\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/YPvdYv/'>SVG + CSS Transform Timeline</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://codepen.io/assets/embed/ei.js\"></script></p>"}},"5402bf6985777c02":{"meta":{"keywords":["js.Draggable.endRotation"],"title":"endRotation","description":"The ending rotation of the Draggable instance which is calculated as soon as the mouse/touch is released after a drag, meaning you can use it to predict precisely where it'll land after a throwProps flick."},"header":{"content":"<p>[read-only] [only applies to type:\"rotation\"] The ending rotation of the Draggable instance which is calculated as soon as the mouse/touch is released after a drag, meaning you can use it to predict precisely where it'll land after a <code>throwProps</code> flick.</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>[only applies to type:\"rotation\"] The ending rotation of the Draggable instance. endRotation gets populated immediately when the mouse (or touch) is released after dragging, even before tweening has completed. This makes it easy to predict exactly what angle the element will land at (useful for <code>throwProps:true</code> Draggables where momentum gets applied and you want to predict where it'll land).</p>"}},"d5a05b37afbe9b9a":{"meta":{"keywords":["js.Draggable.endX"],"title":"endX","description":"The ending x (horizontal) position of the Draggable instance which is calculated as soon as the mouse/touch is released after a drag, meaning you can use it to predict precisely where it'll land after a throwProps flick."},"header":{"content":"<p>[read-only] The ending x (horizontal) position of the Draggable instance which is calculated as soon as the mouse/touch is released after a drag, meaning you can use it to predict precisely where it'll land after a <code>throwProps</code> flick.</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>The ending x (horizontal) position of the Draggable instance. <code>endX</code> gets populated immediately when the mouse (or touch) is released after dragging, even before tweening has completed. This makes it easy to predict exactly where the element will land (useful for <code>throwProps:true</code> Draggables where momentum gets applied). For a Draggable of <code>type:\"x,y\"</code>, <code>endX</code> would pertain to the <code>x</code> transform translation, as in the css <code>transform:translateX(...)</code>. For <code>type:\"top,left\"</code>, the Draggable's <code>x</code> would refer to the css <code>\"left\"</code> value that's applied. This is <b>not</b> the global coordinate - it is the inline css-related value applied to the element.</p>"}},"6151d8080d89dd43":{"meta":{"keywords":["js.Draggable.endY"],"title":"endY","description":"The ending y (vertical) position of the Draggable instance which is calculated as soon as the mouse/touch is released after a drag, meaning you can use it to predict precisely where it'll land after a throwProps flick."},"header":{"content":"<p>[read-only] The ending y (vertical) position of the Draggable instance which is calculated as soon as the mouse/touch is released after a drag, meaning you can use it to predict precisely where it'll land after a <code>throwProps</code> flick.</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>The ending y (vertical) position of the Draggable instance. <code>endY</code> gets populated immediately when the mouse (or touch) is released after dragging, even before tweening has completed. This makes it easy to predict exactly where the element will land (useful for <code>throwProps:true</code> Draggables where momentum gets applied). For a Draggable of <code>type:\"x,y\"</code>, <code>endY</code> would pertain to the <code>y</code> transform translation, as in the css <code>transform:translateY(...)</code>. For <code>type:\"top,left\"</code>, the Draggable's <code>y</code> would refer to the css <code>\"top\"</code> value that's applied. This is <b>not</b> the global coordinate - it is the inline css-related value applied to the element.</p>"}},"37fa5f2f65e863e4":{"meta":{"keywords":["js.Draggable.isThrowing"],"title":"isThrowing","description":"Reports if the target of a Draggable is being thrown using a ThrowPropsPlugin tween."},"header":{"content":"<p>Reports if the target of a Draggable is being thrown using a ThrowPropsPlugin tween.</p>"},"returns":{"type":"Boolean","content":""},"details":{"content":"<p><code>isThrowing</code> will be true if the Draggable's target is currently being animated by a ThrowProps tween.</p>"}},"c6ed6b795d19d3bd":{"meta":{"keywords":["js.Draggable.lockAxis"],"title":"lockAxis","description":"If true, dragging more than 2 pixels in either direction (horizontally or vertically) will lock movement into that axis so that the element can only be dragged that direction (horizontally or vertically, whichever had the most initial movement)."},"header":{"content":"<p>If true, dragging more than 2 pixels in either direction (horizontally or vertically) will lock movement into that axis so that the element can only be dragged that direction (horizontally or vertically, whichever had the most initial movement).</p>"},"returns":{"type":"Boolean","content":""},"details":{"content":"<p>If <code>true</code>, dragging more than 2 pixels in either direction (horizontally or vertically) will lock movement into that axis so that the element can only be dragged that direction (horizontally or vertically, whichever had the most initial movement). No diagonal movement will be allowed. Obviously this is only applicable for <code>type:\"x,y\"</code> and <code>type:\"top,left\"</code> and <code>type:\"scroll\"</code> Draggables. If you only want to allow vertical movement, you should use<code>type:\"y\"</code> or <code>type:\"top\"</code> or <code>type:\"scrollTop\"</code> or if you only want to allow horizontal movement, you should use <code>type:\"x\"</code> or <code>type:\"left\"</code> or<code>type:\"scrollLeft\"</code>.</p>"}},"fcb1bb985e1f73e9":{"meta":{"keywords":["js.Draggable.lockedAxis"],"title":"lockedAxis","description":"The axis along which movement is locked during that particular drag (either \"x\" or \"y\"). For example, if lockAxis is true on a Draggable of type:\"x,y\", and the user starts dragging horizontally, lockedAxis would be \"y\" because vertical movement won't be allowed during that drag."},"header":{"content":"<p>[read-only] The axis along which movement is locked during that particular drag (either <code>\"x\"</code> or <code>\"y\"</code>). For example, if <code>lockAxis</code> is <code>true</code> on a Draggable of <code>type:\"x,y\"</code>, and the user starts dragging horizontally, <code>lockedAxis</code> would be <code>\"y\"</code> because vertical movement won't be allowed during that drag. </p>"},"returns":{"type":"String","content":""},"details":{"content":"<p>[read-only] The axis along which movement is locked (either <code>\"x\"</code> or <code>\"y\"</code>). For example, if <code>lockAxis</code> is <code>true</code> on a Draggable of <code>type:\"x,y\"</code>, and the user starts dragging horizontally, <code>lockedAxis</code> would be <code>\"y\"</code> because vertical movement won't be allowed during that drag. The <code>lockedAxis</code> property isn't set immediately upon press - the Draggable must wait to see which direction the user drags first. You can define a <code>onLockAxis</code> callback if you'd like to be notified when the axis gets locked. </p><p><code>lockedAxis</code> is also populated on touch-enabled devices when you have a Draggable whose <code>type</code> only permits it to drag along one axis (like <code>type:\"x\"</code>, <code>type:\"y\"</code>, <code>type:\"left\"</code>, or <code>type:\"top\"</code>) and the user touch-drags and the Draggable determines the direction, either allowing native touch-scrolling or Draggable-induced dragging. </p><p>Added in Draggable 0.13.0</p><p><b>Example</b><br /></p><pre class='pre-container prettyprint'>Draggable.create(\"#yourID\", {<br />   type:\"x,y\",<br />   lockAxis:true,<br />   onLockAxis:function() {<br />       console.log(\"locked axis: \" + this.lockedAxis);<br />   }<br />});</pre>"}},"b1848b9fa107b520":{"meta":{"keywords":["js.Draggable.maxRotation"],"title":"maxRotation","description":"[read-only] [only applies to type:&quot;rotation&quot;] When bounds are applied, maxRotation refers to the maximum &quot;legal&quot; rotation."},"header":{"content":"<p>[read-only] [only applies to type:\"rotation\"] When bounds are applied, maxRotation refers to the maximum \"legal\" rotation.</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>[only applies to <code>type:\"rotation\"</code>] When <code>bounds</code> are applied, <code>maxRotation</code> refers to the maximum \"legal\" rotation. This makes it easier to run your own custom logic inside the <code>snap</code>, <code>liveSnap</code>, or callback function(s) if you so choose.<br />Implementation<br /><code>    public function get maxRotation():Number</code></p>"}},"8efb834a28d647b3":{"meta":{"keywords":["js.Draggable.maxX"],"title":"maxX","description":"[read-only] When bounds are applied, maxX refers to the maximum &quot;legal&quot; value of the horizontal property (either &quot;x&quot; or &quot;left&quot;, depending on which type the Draggable is)."},"header":{"content":"<p>[read-only] When bounds are applied, maxX refers to the maximum \"legal\" value of the horizontal property (either \"x\" or \"left\", depending on which type the Draggable is).</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>When <code>bounds</code> are applied, <code>maxX</code> refers to the maximum \"legal\" value of the horizontal property (either \"x\" or \"left\", depending on which <code>type</code> the Draggable is). This makes it easier to run your own custom logic inside the <code>snap</code> or callback function(s) if you so choose. So for a Draggable of<code>type:\"x,y\"</code>, <code>maxX</code> would correlate with <code>x</code> transform translation, as in the css <code>transform:translateX(...)</code>. For <code>type:\"top,left\"</code>, the Draggable's<code>maxX</code> would correlate with the css <code>\"left\"</code> value that's applied. This is <b>not</b> the global coordinate - it is the inline css-related value applied to the element.<br />Implementation<br /><code>    public function get maxX():Number</code></p>"}},"0d7cccc5009c65f7":{"meta":{"keywords":["js.Draggable.maxY"],"title":"maxY","description":"[read-only] When bounds are applied, maxY refers to the maximum &quot;legal&quot; value of the vertical property (either &quot;y&quot; or &quot;top&quot;, depending on which type the Draggable is)."},"header":{"content":"<p>[read-only] When bounds are applied, maxY refers to the maximum \"legal\" value of the vertical property (either \"y\" or \"top\", depending on which type the Draggable is).</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>When <code>bounds</code> are applied, <code>maxY</code> refers to the maximum \"legal\" value of the vertical property (either \"y\" or \"top\", depending on which <code>type</code> the Draggable is). This makes it easier to run your own custom logic inside the <code>snap</code> or callback function(s) if you so choose. So for a Draggable of<code>type:\"x,y\"</code>, <code>maxY</code> would correlate with <code>y</code> transform translation, as in the css <code>transform:translateY(...)</code>. For <code>type:\"top,left\"</code>, the Draggable's<code>maxY</code> would correlate with the css <code>\"top\"</code> value that's applied. This is <b>not</b> the global coordinate - it is the inline css-related value applied to the element.<br />Implementation<br /><code>    public function get maxY():Number</code></p>"}},"efaa84c28aa97dc5":{"meta":{"keywords":["js.Draggable.minRotation"],"title":"minRotation","description":"[read-only] [only applies to type:&quot;rotation&quot;] When bounds are applied, minRotation refers to the minimum &quot;legal&quot; rotation."},"header":{"content":"<p>[read-only] [only applies to type:\"rotation\"] When bounds are applied, minRotation refers to the minimum \"legal\" rotation.</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>[only applies to <code>type:\"rotation\"</code>] When <code>bounds</code> are applied, <code>minRotation</code> refers to the minimum \"legal\" rotation. This makes it easier to run your own custom logic inside the <code>snap</code>, <code>liveSnap</code>, or callback function(s) if you so choose.<br />Implementation<br /><code>    public function get minRotation():Number</code></p>"}},"066a1985d52b529c":{"meta":{"keywords":["js.Draggable.minX"],"title":"minX","description":"[read-only] When bounds are applied, minX refers to the minimum &quot;legal&quot; value of the horizontal property (either &quot;x&quot; or &quot;left&quot;, depending on which type the Draggable is).<br />\r\n"},"header":{"content":"<p>[read-only] When bounds are applied, minX refers to the minimum \"legal\" value of the horizontal property (either \"x\" or \"left\", depending on which type the Draggable is).</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>When <code>bounds</code> are applied, <code>minX</code> refers to the minimum \"legal\" value of the horizontal property (either \"x\" or \"left\", depending on which <code>type</code> the Draggable is). This makes it easier to run your own custom logic inside the <code>snap</code> or callback function(s) if you so choose. So for a Draggable of<code>type:\"x,y\"</code>, <code>minX</code> would correlate with <code>x</code> transform translation, as in the css <code>transform:translateX(...)</code>. For <code>type:\"top,left\"</code>, the Draggable's<code>minX</code> would correlate with the css <code>\"left\"</code> value that's applied. This is <b>not</b> the global coordinate - it is the inline css-related value applied to the element.</p>"}},"c9a8ad76c3364ab5":{"meta":{"keywords":["js.Draggable.minY"],"title":"minY","description":"[read-only] When bounds are applied, minY refers to the minimum &quot;legal&quot; value of the vertical property (either &quot;y&quot; or &quot;top&quot;, depending on which type the Draggable is)."},"header":{"content":"<p>[read-only] When bounds are applied, minY refers to the minimum \"legal\" value of the vertical property (either \"y\" or \"top\", depending on which type the Draggable is).</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>When <code>bounds</code> are applied, <code>minY</code> refers to the minimum \"legal\" value of the vertical property (either \"y\" or \"top\", depending on which <code>type</code> the Draggable is). This makes it easier to run your own custom logic inside the <code>snap</code> or callback function(s) if you so choose. So for a Draggable of<code>type:\"x,y\"</code>, <code>minY</code> would correlate with <code>y</code> transform translation, as in the css <code>transform:translateY(...)</code>. For <code>type:\"top,left\"</code>, the Draggable's<code>minY</code> would correlate with the css <code>\"top\"</code> value that's applied. This is <b>not</b> the global coordinate - it is the inline css-related value applied to the element.<br />Implementation<br /><code>    public function get minY():Number</code></p>"}},"83fa31bf259e7bc7":{"meta":{"keywords":["js.Draggable.pointerEvent"],"title":"pointerEvent","description":"[read-only] The last pointer event (either a mouse event or touch event) that affected the Draggable instance."},"header":{"content":"<p>[read-only] The last pointer event (either a mouse event or touch event) that affected the Draggable instance.</p>"},"returns":{"type":"Object","content":""},"details":{"content":"<p>The last pointer event (either a mouse event or touch event) that affected the Draggable instance. This can be useful to, for example, check its pageX or pageY or target or currentTarget, etc.<br />Implementation<br /><code>    public function get pointerEvent():Object</code></p>"}},"4f8bff36fbe23240":{"meta":{"keywords":["js.Draggable.pointerX"],"title":"pointerX","description":"[read-only] The x (horizontal) position of the pointer (mouse or touch) associated with the Draggable&#039;s last event (like event.pageX)."},"header":{"content":"<p>[read-only] The x (horizontal) position of the pointer (mouse or touch) associated with the Draggable's last event (like event.pageX).</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>The x (horizontal) position of the pointer (mouse or touch) associated with the Draggable's last event (like <code>event.pageX</code>).<br />Implementation<br /><code>    public function get pointerX():Number</code></p>"}},"16158325892ff508":{"meta":{"keywords":["js.Draggable.pointerY"],"title":"pointerY","description":"[read-only] The y (vertical) position of the pointer (mouse or touch) associated with the Draggable&#039;s last event (like event.pageY)."},"header":{"content":"<p>[read-only] The y (vertical) position of the pointer (mouse or touch) associated with the Draggable's last event (like event.pageY).</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>The y (vertical) position of the pointer (mouse or touch) associated with the Draggable's last event (like <code>event.pageY</code>).<br />Implementation<br /><code>    public function get pointerY():Number</code></p>"}},"b8156aef40ce441e":{"meta":{"keywords":["js.Draggable.rotation"],"title":"rotation","description":"[read-only] [only applies to type:&quot;rotation&quot;] The current rotation (in degrees) of the Draggable instance."},"header":{"content":"<p>[read-only] [only applies to type:\"rotation\"] The current rotation (in degrees) of the Draggable instance.</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>[only applies to <code>type:\"rotation\"</code>] The current rotation (in degrees) of the Draggable instance. This is the <code>rotation</code> transform, as in the css<code>transform:rotate(...deg)</code>. This value is updated each time the Draggable is dragged interactively and during the momentum-based tween that Draggable applies when the user releases their mouse/touch, but if you manually change (or tween) the element's rotation you can force Draggable to look at the \"real\" value and record it to its own \"x\" property by calling the Draggable's <code>update()</code> method. Basically that re-synchronizes it. Again, this is not necessary unless other code (outside Draggable) alters the target element's position.<br />Implementation<br /><code>    public function get rotation():Number</code></p>"}},"0f6ea912f8ed3cf7":{"meta":{"keywords":["js.Draggable.scrollProxy"],"title":"scrollProxy","description":"[read-only] A special object that gets created for type:&quot;scroll&quot; (or &quot;scrollTop&quot; or &quot;scrollLeft&quot;) Draggables; this object manages the scrolling behavior, applying the necessary transforms or margins to accomplish overscrolling when necessary."},"header":{"content":"<p>[read-only] A special object that gets created for type:\"scroll\" (or \"scrollTop\" or \"scrollLeft\") Draggables; this object manages the scrolling behavior, applying the necessary transforms or margins to accomplish overscrolling when necessary.</p>"},"returns":{"type":"Object","content":""},"details":{"content":"<p>A special object that gets created for <code>type:\"scroll\"</code> (or <code>\"scrollTop\"</code> or <code>\"scrollLeft\"</code>) Draggables; this object manages the scrolling behavior, applying the necessary transforms or margins to accomplish overscrolling when necessary. The <code>scrollProxy</code> object has <code>top()</code> and <code>left()</code>getter/setter methods (and <code>scrollTop()/scrollLeft()</code> which are simply the inverse of <code>top()/left()</code>). If you need to get the scrolling velocity, make sure you've loaded <code>ThrowPropsPlugin</code> and set <code>throwProps:true</code> on the Draggable and then you can use<code>ThrowPropsPlugin.getVelocity(yourDraggable.scrollProxy, \"top\")</code> to get the vertical scrolling velocity (use <code>\"left\"</code> for horizontal).<br />Implementation<br /><code>    public function get scrollProxy():Object</code></p>"}},"78fa71d7884ceae5":{"meta":{"keywords":["js.Draggable.target"],"title":"target","description":"The object that is being dragged."},"header":{"content":"<p>The object that is being dragged.</p>"},"returns":{"type":"Object","content":""},"details":{"content":"<p>The object that is being dragged.</p>"}},"2000fd9279daa4a5":{"meta":{"keywords":["js.Draggable.tween"],"title":"tween","description":"[read-only] The TweenLite instance that gets created as soon as the mouse (or touch) is released (when throwProps is true) - this allows you to check its duration or pause/resume or change its timeScale or whatever you want."},"header":{"content":"<p>[read-only] The TweenLite instance that gets created as soon as the mouse (or touch) is released (when throwProps is true) - this allows you to check its duration or pause/resume or change its timeScale or whatever you want.</p>"},"returns":{"type":"TweenLite","content":""},"details":{"content":"<p>The TweenLite instance that gets created as soon as the mouse (or touch) is released (when <code>throwProps</code> is <code>true</code>) - this allows you to check its duration or pause/resume or change its timeScale or whatever you want. Keep in mind that a new tween is created each time the element is \"thrown\". You can easily get it when the user releases the mouse (or touch) by referencing <code>this.tween</code> inside the <code>onDragEnd</code> callback.<br />Implementation<br /><code>    public function get tween():<a href=\"http://api.greensock.com/js/com/greensock/TweenLite.html\">TweenLite</a></code></p>"}},"f9e5f083d2f0f14a":{"meta":{"keywords":["js.Draggable.vars"],"title":"vars","description":"The vars object passed into the constructor which stores configuration variables like type, bounds, onPress, onDrag, etc."},"header":{"content":"<p>The vars object passed into the constructor which stores configuration variables like type, bounds, onPress, onDrag, etc.</p>"},"returns":{"type":"Object","content":""},"details":{"content":"<p>The vars object passed into the constructor which stores configuration variables like type, bounds, onPress, onDrag, etc.</p>"}},"ec3421d82ab1ddd0":{"meta":{"keywords":["js.Draggable.x"],"title":"x","description":"[read-only] The current x (horizontal) position of the Draggable instance."},"header":{"content":"<p>[read-only] The current x (horizontal) position of the Draggable instance.</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>The current x (horizontal) position of the Draggable instance. For a Draggable of <code>type:\"x,y\"</code>, it would be the <code>x</code> transform translation, as in the css<code>transform:translateX(...)</code>. For <code>type:\"top,left\"</code>, the Draggable's <code>x</code> would refer to the css <code>\"left\"</code> value that's applied. This is <b>not</b> the global coordinate - it is the inline css-related value applied to the element. This value is updated each time the Draggable is dragged interactively and during the momentum-based tween that Draggable applies when the user releases their mouse/touch, but if you manually change (or tween) the element's position you can force Draggable to look at the \"real\" value and record it to its own \"x\" property by calling the Draggable's <code>update()</code> method. Basically that re-synchronizes it. Again, this is not necessary unless other code (outside Draggable) alters the target element's position.<br />Implementation<br /><code>    public function get x():Number</code></p>"}},"eab7ad5c38079651":{"meta":{"keywords":["js.Draggable.y"],"title":"y","description":"[read-only] The current y (vertical) position of the Draggable instance."},"header":{"content":"<p>[read-only] The current y (vertical) position of the Draggable instance.</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>The current y (vertical) position of the Draggable instance. So for a Draggable of <code>type:\"x,y\"</code>, it would be the <code>y</code> transform translation, as in the css<code>transform:translateY(...)</code>. For <code>type:\"top,left\"</code>, the Draggable's <code>y</code> would refer to the css <code>\"top\"</code> value that's applied. This is <b>not</b> the global coordinate - it is the inline css-related value applied to the element. This value is updated each time the Draggable is dragged interactively and during the momentum-based tween that Draggable applies when the user releases their mouse/touch, but if you manually change (or tween) the element's position you can force Draggable to look at the \"real\" value and record it to its own \"y\" property by calling the Draggable's <code>update()</code> method. Basically that re-synchronizes it. Again, this is not necessary unless other code (outside Draggable) alters the target element's position.</p>"}},"7ed7b01bbcfcd77c":{"meta":{"keywords":["js.Draggable.zIndex"],"title":"zIndex","description":"[static] The starting zIndex that gets applied by default when an element is pressed/touched (for positional types, like &quot;x,y&quot;, &quot;top,left&quot;, etc."},"header":{"content":"<p>[static] The starting zIndex that gets applied by default when an element is pressed/touched (for positional types, like \"x,y\", \"top,left\", etc.</p>"},"returns":{"type":"Number = 1000","content":""},"details":{"content":"<p>The starting <code>zIndex</code> that gets applied by default when an element is pressed/touched (for positional types, like <code>\"x,y\"</code>, <code>\"top,left\"</code>, etc. but not<code>\"rotation\"</code> or <code>\"scroll\"</code>) and this number gets incremented and applied to each new element that gets pressed/touched so that the stacking order looks correct (newly pressed objects rise to the top) unless <code>zIndexBoost:false</code> is set in a particular Draggable's <code>vars</code> parameter. You can set this<code>zIndex</code> to whatever you want, but 1000 is the default.</p><pre class='pre-container prettyprint'>Draggable.zIndex = 500;</pre>"}},"e25e10e45b7afcd0":{"meta":{"keywords":["js.Draggable.addEventListener()"],"title":"addEventListener()","description":"Registers a function that should be called each time a particular type of event occurs, like &quot;drag&quot; or &quot;dragEnd&quot;. "},"header":{"content":"<p>Registers a function that should be called each time a particular type of event occurs, like \"drag\" or \"dragEnd\". </p>"},"parameters":[{"name":"event","data_type":"String","description":"<p>The type of event.</p>\n"},{"name":"listener","data_type":"Function","description":"<p>The listener function that processes the event.</p>\n"}],"returns":{"type":"void","content":""},"details":{"content":"<p>Registers a function that should be called each time a particular type of event occurs. Inside the listener function <code>this</code> refers to the target of the Draggable instance that fired the event.</p><h3>Events</h3><ul class=\"compact\"><li>press</li><li>click</li><li>dragstart</li><li>drag</li><li>dragend</li><li>release</li><li>throwcomplete</li><li>throwupdate</li></ul><h2>Usage</h2><pre class='pre-container prettyprint'><br />var myDraggable = Draggable.create(\"#box1\", {<br />  bounds:\"#container\"<br />})[0];<br /><br />myDraggable.addEventListener(\"press\", onPress);<br /><br />function onPress() {<br />  console.log(\"myDraggable was pressed\");<br />  TweenLite.to(this, 0.2, {backgroundColor:\"red\"}); // animate the backgroundColor of the target of the Draggable that was pressed<br />}<br /></pre>"}},"ac73f647a485bd9f":{"meta":{"keywords":["js.Draggable.applyBounds()"],"title":"applyBounds()","description":"Immediately updates and applies bounds, ensuring that the target element is within the bounds (if any were defined)."},"header":{"content":"<p>Immediately updates and applies bounds, ensuring that the target element is within the bounds (if any were defined).</p>"},"parameters":[{"name":"newBounds","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — You may optionally supply a new bounds object (a DOM element, selector text, a generic element defining a rectangle like {top:0, left:10, width:100, height:200} or absolute values like {minX:100, minY:100, maxX:400, maxY:500}). If you&#8217;d simply like the existing bounds applied, you don&#8217;t need to supply any newBounds parameter.</p>\n"}],"returns":{"type":"Draggable","content":"<p>the Draggable instance itself (to make chaining possible)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Immediately updates and applies bounds, ensuring that the target element is within the <code>bounds</code> (if any were defined). As a part of applying the bounds, the Draggable's <code>x</code> and <code>y</code> properties are updated as well so that they reflect the target element's current position (just like <code>update()</code>).</p>"}},"c541ba25c5706fee":{"meta":{"keywords":["js.Draggable.create()"],"title":"create()","description":"[static] Provides a more flexible way to create Draggable instances than the constructor (new Draggable(...)) because the Draggable.create() method can accommodate multiple elements (either as an array of elements or a jQuery object with many results) or even selector text like &quot;.yourClass&quot; which gets fed to whatever TweenLite.selector is (defaults to jQuery if it&#039;s loaded)."},"header":{"content":"<p>[static] Provides a more flexible way to create Draggable instances than the constructor (new Draggable(...)) because the Draggable.create() method can accommodate multiple elements (either as an array of elements or a jQuery object with many results) or even selector text like \".yourClass\" which gets fed to whatever TweenLite.selector is (defaults to jQuery if it's loaded).</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>the element that should be draggable; this can be a regular DOM element or a jQuery object or an array of elements. For example, <code>document.getElementById(\"yourID\")</code> or <code>$(\"#yourID\")</code> or <code>\"#yourID\"</code> or <code>[element1, element2, element3]</code></p>\n"},{"name":"vars","data_type":"Object","description":"<p>an object containing optional configuration data like <code>{type:\"x,y\", throwProps:true, edgeResistance:0.8, onDrag:yourFunction}</code></p>\n","related_configuration_object":"0dc94f7962bb1809"}],"returns":{"type":"Array","content":"<p>an array of <code>Draggable</code> instances (one for each element).</p>\n"},"details":{"content":"<p>Provides a more flexible way to create Draggable instances than the constructor (<code>new Draggable(...)</code>) because the <code>Draggable.create()</code> method can accommodate <b>multiple</b> elements (either as an array of elements or a jQuery object with many results) or even selector text like <code>\".yourClass\"</code>which gets fed to whatever <code>TweenLite.selector</code> is (defaults to jQuery if it's loaded). <code>Draggable.create()</code> always returns an array of <code>Draggable</code>instances, one for each element. Remember an individual <code>Draggable</code> instance can only be associated with a single element - that's why<code>Draggable.create()</code> creates one for each element and spits back an array.</p><p>Any of the following are valid:</p><p><pre class='pre-container prettyprint'>//a regular DOM element Draggable.create(document.getElementById(\"yourID\"), {type:\"x,y\"}); //or a jQuery object Draggable.create( $(\".yourClass\"), {type:\"x,y\"}); //or selector text Draggable.create(\"#yourID\", {type:\"x,y\"}); //or an array of elements Draggable.create([element1, element2, element3], {type:\"x,y\"});</pre></p><p>The second parameter is the <code>vars</code> object that contains any optional configuration data. Any of the following properties can be defined:</p><p>[config id=\"0dc94f7962bb1809\"]</p>"}},"8f3a18936cc397fe":{"meta":{"keywords":["js.Draggable.disable()"],"title":"disable()","description":"Disables the Draggable instance so that it cannot be dragged anymore (unless enable() is called)."},"header":{"content":"<p>Disables the Draggable instance so that it cannot be dragged anymore (unless enable() is called).</p>"},"parameters":[],"returns":{"type":"Draggable","content":"<p>the Draggable instance itself (to make chaining possible)</p>\n"},"details":{"content":"<p>Disables the <code>Draggable</code> instance so that it cannot be dragged anymore (unless <code>enable()</code> is called).</p>"}},"5857a6c52c8e3115":{"meta":{"keywords":["js.Draggable.enable()"],"title":"enable()","description":"Enables the Draggable instance."},"header":{"content":"<p>Enables the Draggable instance.</p>"},"parameters":[],"returns":{"type":"Draggable","content":"<p>the Draggable instance itself (to make chaining possible)</p>\n"},"details":{"content":"<p>Enables the <code>Draggable</code> instance.</p>"}},"688b6ac671dbe69d":{"meta":{"keywords":["js.Draggable.enabled()"],"title":"enabled()","description":"Gets or sets the enabled state. "},"header":{"content":"<p>Gets or sets the enabled state. </p>"},"parameters":[{"name":"value","data_type":"Boolean","description":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"Boolean","content":""},"details":{"content":"<p>Gets or sets the enabled state. Omitting the <code>value</code> parameter returns the current enabled value (getter), whereas defining the parameter sets the enabled value (setter). When a Draggable instance is enabled it responds to mouse events, fires callbacks and can be dragged.</p>"}},"b0b2e6f3a9e49b0a":{"meta":{"keywords":["js.Draggable.endDrag()"],"title":"endDrag()","description":"You may force the Draggable to immediately stop interactively dragging by calling endDrag() and passing it the original mouse or touch event that initiated the stop - this is necessary because Draggable must inspect that event for various information like pageX, pageY, target, etc."},"header":{"content":"<p>You may force the Draggable to immediately stop interactively dragging by calling endDrag() and passing it the original mouse or touch event that initiated the stop - this is necessary because Draggable must inspect that event for various information like pageX, pageY, target, etc.</p>"},"parameters":[{"name":"event","data_type":"Object","description":"<p>a mouse or touch event</p>\n"}],"returns":{"type":"void","content":""},"details":{"content":"<p>You may force the Draggable to immediately stop interactively dragging by calling <code>endDrag()</code> and passing it the original mouse or touch event that initiated the stop - this is necessary because Draggable must inspect that event for various information like pageX, pageY, target, etc. You cannot call<code>endDrag()</code> without passing that original event.</p><p><code>endDrag()</code> is different than <code>disable()</code> in that <code>disable()</code> completely shuts down the Draggable instance so that the user cannot initiate dragging anymore whereas <code>endDrag()</code> simply stops a drag-in-progress, acting like the user released their mouse/touch.</p>"}},"ca2e5cc16169165a":{"meta":{"keywords":["js.Draggable.get()"],"title":"get()","description":"[static] Provides an easy way to get the Draggable instance that&#039;s associated with a particular DOM element."},"header":{"content":"<p>[static] Provides an easy way to get the Draggable instance that's associated with a particular DOM element.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>the target DOM element whose Draggable instance you want to retrieve; this can be either the element itself, or a selector string like <code>\"#myElement\"</code> or a jQuery object.</p>\n"}],"returns":{"type":"Draggable","content":"<p>the Draggable instance that&#8217;s associated with the target element (or <code>undefined</code> if none exists)</p>\n"},"details":{"content":"<p>Provides an easy way to get the Draggable instance that's associated with a particular DOM element. For example, maybe you made all of the elements with the class \".draggable\" draggable by calling <code>Draggable.create(\".draggable\")</code> and then you want to find the individual Draggable instance that's associated with the element with an ID of \"#element1\"; that'd be as simple as:</p><p><pre class='pre-container prettyprint'>var draggable = Draggable.get(\"#element1\"); //or use the element itself instead of a selector string: var myElement = document.getElementById(\"element1\"); var draggable = Draggable.get(myElement);</pre></p>"}},"dfba312d84ede771":{"meta":{"keywords":["js.Draggable.getDirection()"],"title":"getDirection()","description":"Returns the direction (right | left | up | down | left-up | left-down | right-up | right-down) as measured from either where the drag started (the default) or the moment-by-moment velocity, or its proximity to another element that you define. "},"header":{"content":"<p>Returns the direction (right | left | up | down | left-up | left-down | right-up | right-down) as measured from either where the drag started (the default) or the moment-by-moment velocity, or its proximity to another element that you define. </p>"},"parameters":[{"name":"from","data_type":"String | Element","description":"<p>Any of the the following can be used:</p>\n<ul>\n<li><code>\"start\"</code> (the default) &#8211; measures from wherever the drag began.</li>\n<li><code>\"velocity\"</code> (<strong>requires <a href=\"/throwpropsplugin/\">ThrowPropsPlugin</a>!</strong>) &#8211; measures the moment-by-moment direction of the drag. For example, maybe the user dragged really far to the right, but then they start dragging to the left for a brief moment &#8211; it&#8217;s still to the right of the starting position, but it&#8217;s current velocity is moving to the left. That&#8217;s what &#8220;velocity&#8221; measures.</li>\n<li><code>[element]</code> &#8211; if you pass an element, it&#8217;ll return the direction from that element&#8217;s center to the Draggable&#8217;s center.</li>\n</ul>\n"}],"returns":{"type":"String","content":""},"details":{"content":"<p>Sometimes it's useful to know which direction an element is dragged (left | right | up | down | left-up | left-down | right-up | right-down), or maybe you'd like to know which direction it is compared to another element. That's precisely what <code>getDirection()</code> is for. You can pass any of the following as the parameter to control its behavior:</p><ul><li><code>\"start\"</code> (the default) - measures from wherever the drag began.</li><li><code>\"velocity\"</code> (<strong>requires <a href=\"/throwpropsplugin/\">ThrowPropsPlugin</a>!</strong>) - measures the moment-by-moment direction of the drag. For example, maybe the user dragged really far to the right, but then they start dragging to the left for a brief moment - it's still to the right of the starting position, but it's current velocity is moving to the left. That's what \"velocity\" measures.</li><li><code>[element]</code> - if you pass an element, it'll return the direction from that element's center to the Draggable's center.</li></ul><h2>Video</h2><p><iframe src=\"http://www.youtube.com/embed/fZLMuuzJC9k?rel=0&feature=player_detailpage\" width=\"838\" height=\"471\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></p><h2>Demo</h2><p data-height=\"820\" data-theme-id=\"3984\" data-slug-hash=\"myjemR\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/myjemR/'>Draggable with direction sensing</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p>"}},"ffe7905a70b61f73":{"meta":{"keywords":["js.Draggable.hitTest()"],"title":"hitTest()","description":"Provides an easy way to test whether or not the target element overlaps with a particular element (or the mouse position) according to whatever threshold you [optionally] define."},"header":{"content":"<p>Provides an easy way to test whether or not the target element overlaps with a particular element (or the mouse position) according to whatever threshold you [optionally] define.</p>"},"parameters":[{"name":"testObject","data_type":"Object","description":"<p>the object that should be hit tested, which can be any of the following: an element, a mouse/touch event that has <code>pageX </code>and <code>pageY</code> properties, selector text like <code>\"#element2\"</code>, or a generic object defining a rectangle (it should have <code>top, left, right,</code> and <code>bottom </code>properties).</p>\n"},{"name":"threshold","data_type":"*","description":"<p>(default = <code>0</code>)<code></code> — Either a number defining the minimum number of pixels that must be overlapping for a positive hitTest or a string percentage (like <code>\"50%\"</code>) defining the minimum amount of overlapping surface area percentage for a positive hitTest. Zero (0) will check for any overlap at all.</p>\n"}],"returns":{"type":"Boolean","content":"<p><code>true</code> if an overlap is sensed (according to the threshold)</p>\n"},"details":{"content":"<p>Provides an easy way to test whether or not the <code>target</code> element overlaps with a particular element (or the mouse position) according to whatever<code>threshold</code> you [optionally] define. For example:</p><pre class='pre-container prettyprint'>Draggable.create(\"#element1\", {<br />    type:\"x,y\",<br />    onDragEnd:function(e) {<br />        //see if the target overlaps with the element with ID \"element2\"<br />        if (this.hitTest(\"#element2\")) {<br />            //do stuff<br />        }<br />    }<br />});</pre><p>By default, <code>hitTest()</code> returns true if there is any overlap whatsoever, but you can optionally define a <code>threshold</code> parameter to, for example, only return true if at least 20 pixels are overlapping or if 50% of the surface area of either element is overlapping with the other or whatever amount you define:</p><pre class='pre-container prettyprint'>Draggable.create(\"#element1\", {<br />    type:\"x,y\",<br />    onDragEnd:function(e) {<br />        //checks if at least 20 pixels are overlapping:<br />        if (this.hitTest(\"#element2\", 20)) {<br />            //do stuff<br />        }<br />        //checks if at least 50% of the surface area of either element is overlapping:<br />        if (this.hitTest(\"#element3\", \"50%\")) {<br />            //do stuff<br />        }<br />    }<br />});</pre><p>You can use <code>hitTest(window)</code> to detect if an element is visible within the viewport (as of version 0.14.0).</p><p>There is also a static version of this method that allows you to pass both elements/objects to test, like <code>Draggable.hitTest(element1, element2, 20);</code></p><p><strong>IMPORTANT:</strong> There is no way to get pixel-perfect hit testing for non-rectangular shapes in the DOM. <code>hitTest()</code> uses the browser's <code>getBoundingClientRect()</code> method to get the <i>rectangular bounding box</i> that surrounds the entire element, thus if you rotate an element or if it's more of a circular shape, the bounding box may extend further than the visual edges. IE8 (and earlier) is <strong>not supported</strong> because hitTest() requires element.getBoundingClientRect() which is in all modern browsers. </p>"}},"ffc1eae92622a822":{"meta":{"keywords":["js.Draggable.hitTest()"],"title":"hitTest()","description":"Provides an easy way to test whether or not the target element overlaps with a particular element (or the mouse position) according to whatever threshold you [optionally] define."},"header":{"content":"<p>Provides an easy way to test whether or not the target element overlaps with a particular element (or the mouse position) according to whatever threshold you [optionally] define.</p>"},"parameters":[{"name":"testObject","data_type":"Object","description":"<p>the object that should be hit tested, which can be any of the following: an element, a mouse/touch event that has <code>pageX </code>and <code>pageY</code> properties, selector text like <code>\"#element2\"</code>, or a generic object defining a rectangle (it should have <code>top, left, right,</code> and <code>bottom </code>properties).</p>\n"},{"name":"threshold","data_type":"*","description":"<p>(default = <code>0</code>)<code></code> — Either a number defining the minimum number of pixels that must be overlapping for a positive hitTest or a string percentage (like <code>\"50%\"</code>) defining the minimum amount of overlapping surface area percentage for a positive hitTest. Zero (0) will check for any overlap at all.</p>\n"}],"returns":{"type":"Boolean","content":"<p><code>true</code> if an overlap is sensed (according to the threshold)</p>\n"},"details":{"content":"<p>Provides an easy way to test whether or not the <code>target</code> element overlaps with a particular element (or the mouse position) according to whatever<code>threshold</code> you [optionally] define. For example:</p><pre class='pre-container prettyprint'>Draggable.create(\"#element1\", {<br />    type:\"x,y\",<br />    onDragEnd:function(e) {<br />        //see if the target overlaps with the element with ID \"element2\"<br />        if (this.hitTest(\"#element2\")) {<br />            //do stuff<br />        }<br />    }<br />});</pre><p>By default, <code>hitTest()</code> returns true if there is any overlap whatsoever, but you can optionally define a <code>threshold</code> parameter to, for example, only return true if at least 20 pixels are overlapping or if 50% of the surface area of either element is overlapping with the other or whatever amount you define:</p><pre class='pre-container prettyprint'>Draggable.create(\"#element1\", {<br />    type:\"x,y\",<br />    onDragEnd:function(e) {<br />        //checks if at least 20 pixels are overlapping:<br />        if (this.hitTest(\"#element2\", 20)) {<br />            //do stuff<br />        }<br />        //checks if at least 50% of the surface area of either element is overlapping:<br />        if (this.hitTest(\"#element3\", \"50%\")) {<br />            //do stuff<br />        }<br />    }<br />});</pre><p>You can use <code>hitTest(window)</code> to detect if an element is visible within the viewport (as of version 0.14.0).</p><p>There is also a static version of this method that allows you to pass both elements/objects to test, like <code>Draggable.hitTest(element1, element2, 20);</code></p><p><strong>IMPORTANT:</strong> There is no way to get pixel-perfect hit testing for non-rectangular shapes in the DOM. <code>hitTest()</code> uses the browser's <code>getBoundingClientRect()</code> method to get the <i>rectangular bounding box</i> that surrounds the entire element, thus if you rotate an element or if it's more of a circular shape, the bounding box may extend further than the visual edges. IE8 (and earlier) is <strong>not supported</strong> because hitTest() requires element.getBoundingClientRect() which is in all modern browsers. </p>"}},"f8dba22fcae52796":{"meta":{"keywords":["js.Draggable.kill()"],"title":"kill()","description":"Disables the Draggable instance and removes it from the internal lookup table so that it is made eligible for garbage collection and it cannot be dragged anymore (unless enable() is called)."},"header":{"content":"<p>Disables the Draggable instance and removes it from the internal lookup table so that it is made eligible for garbage collection and it cannot be dragged anymore (unless enable() is called).</p>"},"parameters":[],"returns":{"type":"Draggable","content":"<p>the Draggable instance itself (to make chaining possible)</p>\n"},"details":{"content":"<p>Disables the <code>Draggable</code> instance and removes it from the internal lookup table so that it is made eligible for garbage collection and it cannot be dragged anymore (unless <code>enable()</code> is called). <code>kill()</code> is identical to <code>disable()</code> except that the latter doesn't remove it from the internal lookup table, thus you could still use Draggable.get(\"#yourID\") to find the associated Draggable instance after being disabled, but if you kill it, the get() method won't be able to find the Draggable anymore (necessary for garbage collection). If you don't plan to use the Draggable instance anymore, <code>kill()</code> it.</p>"}},"5184540aa5ce91bc":{"meta":{"keywords":["js.Draggable.startDrag()"],"title":"startDrag()","description":"This is rarely used, but you may force the Draggable to begin dragging by calling startDrag() and passing it the original mouse or touch event that initiated things - this is necessary because Draggable must inspect that event for various information like pageX, pageY, target, etc."},"header":{"content":"<p>This is rarely used, but you may force the Draggable to begin dragging by calling startDrag() and passing it the original mouse or touch event that initiated things - this is necessary because Draggable must inspect that event for various information like pageX, pageY, target, etc.</p>"},"parameters":[{"name":"event","data_type":"Object","description":"<p>mouse or touch event</p>\n"}],"returns":{"type":"void","content":""},"details":{"content":"<p>This is rarely used, but you may force the Draggable to begin dragging by calling <code>startDrag()</code> and passing it the original mouse or touch event that initiated things - this is necessary because Draggable must inspect that event for various information like pageX, pageY, target, etc. You cannot call<code>startDrag()</code> without passing that original event.</p><p><code>startDrag()</code> is different than <code>enable()</code> in that <code>enable()</code> activates the Draggable instance so that it responds to user interaction whereas<code>startDrag()</code> actually begins dragging the element, as if the user clicked on it and started dragging.</p>"}},"6254d7797a9f3826":{"meta":{"keywords":["js.Draggable.timeSinceDrag()"],"title":"timeSinceDrag()","description":"Returns the time (in seconds) that has elapsed since the last drag ended - this can be useful in situations where you want to skip certain actions if a drag just occurred."},"header":{"content":"<p>Returns the time (in seconds) that has elapsed since the last drag ended - this can be useful in situations where you want to skip certain actions if a drag just occurred.</p>"},"parameters":[],"returns":{"type":"Number","content":"<p>the time (in seconds) since the last drag ended</p>\n"},"details":{"content":"<p>Returns the time (in seconds) that has elapsed since the last drag ended - this can be useful in situations where you want to skip certain actions if a drag just occurred. For example, imagine a draggable DIV with a bunch of child elements that have <code>onclick</code> handlers - if the user clicks on of those and drags the whole DIV and then releases, you might want to ignore that \"click\" because the user was intending to drag, not click (don't forget to set<code>dragClickables:true</code> in the Draggable):</p><pre class='pre-container prettyprint'>$(\"#myDiv a\").click(function(e) {<br />    if (Draggable.timeSinceDrag() > 0.2) {<br />        //do stuff, but not if the user just dragged within the last 0.2 seconds<br />    }<br />});</pre><p>There is also <code>timeSinceDrag()</code> instance method.</p><pre class='pre-container prettyprint'>myDraggable.timeSinceDrag();</pre>"}},"2c9525d38d4cdb74":{"meta":{"keywords":["js.Draggable.update()"],"title":"update()","description":"Updates the Draggable&#039;s x and y properties so that they reflect the target element&#039;s current position."},"header":{"content":"<p>Updates the Draggable's x and y properties so that they reflect the target element's current position.</p>"},"parameters":[{"name":"applyBounds","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — if <code>true</code>, the Draggable&#8217;s <code>applyBounds()</code> method will be called as well so that bounds are enforced (this takes more processing, though).</p>\n"}],"returns":{"type":"Draggable","content":"<p>the Draggable instance itself (to make chaining possible)</p>\n"},"details":{"content":"<p>Updates the Draggable's <code>x</code> and <code>y</code> properties so that they reflect the target element's current position. This can be useful if, for example, you manually change or tween the element's position, but then you want to make sure the Draggable's <code>x</code> and <code>y</code> reflect those changes. You could even point a tween's<code>onUpdate</code> to the Draggable's <code>update</code> method to ensure things are synchronized throughout a tween.</p>"}},"28124149c0519430":{"meta":{"keywords":["js.MorphSVGPlugin","Plugins"],"title":"MorphSVGPlugin","description":"MorphSVGPlugin provides advanced control over tweens that morph SVG paths. "},"header":{"content":"<p>MorphSVGPlugin provides advanced control over tweens that morph SVG paths. The video below details what you need to know to get up and running fast with MorphSVGPlugin.</p><p><span class=\"fr-video fr-draggable\" contenteditable=\"false\"><iframe src=\"http://www.youtube.com/embed/Uxa9sdaeyKM?rel=0&feature=player_detailpage\" width=\"838\" height=\"471\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></span></p><p>It has never been easier to morph between SVG shapes. First, let&#39;s cover what this new plugin can do:</p><ul><li>Morph &lt;path&gt; data&nbsp;<strong>even if the number (and type) of points is completely different</strong> between the start and end shapes! Most other SVG shape morphing tools require that the number of points matches.</li><li>Morph a &lt;polyline&gt; or &lt;polygon&gt; to a different set of points</li><li>There&#39;s a utility function, MorphSVGPlugin.convertToPath() that can convert primitive shapes like &lt;circle&gt;, &lt;rect&gt;, &lt;ellipse&gt;, &lt;polygon&gt;, &lt;polyline&gt;, and &lt;line&gt; directly into the equivalent &lt;path&gt; that looks identical to the original and is swapped right into the DOM.</li><li>Optionally define a &quot;shapeIndex&quot; that controls how the points get mapped. This affects what the inbetween state looks like during animation.</li><li>Instead of passing in raw path data as text, you can simply feed in selector text or an element and the plugin will grab the data it needs from there, making workflow easier.</li><li>Use <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:MorphSVGPlugin.pathDataToBezier()\"><span data-link-id=\"ce25d7004a81e18d\"></span></span> to seamlessly feed SVG path data into BezierPlugin tweens for motion along a path.</li></ul><h2>How does it work?</h2><p>MorphSVGPlugin does a ton of heavy lifting so that you don&#39;t have to. You can morph a circle into a hippo with a single line of code:</p><pre class=\"pre-container prettyprint\">TweenLite.to(&quot;#circle&quot;, 1, {morphSVG:&quot;#hippo&quot;});</pre><div class=\"cp_embed_wrapper\"><iframe id=\"cp_embed_17c602b0adb07d2b2ad45b31c6c933af\" src=\"http://codepen.io/GreenSock/embed/17c602b0adb07d2b2ad45b31c6c933af?default-tab=result&height=450&slug-hash=17c602b0adb07d2b2ad45b31c6c933af&theme-id=9447&user=GreenSock\" scrolling=\"no\" frameborder=\"0\" height=\"450\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed 4\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"></iframe></div><p><script src=\"http://assets.codepen.io/assets/embed/ei.js\" async=\"\"></script></p><p>MorphSVGPlugin finds the path with the id of &quot;circle&quot; and the path with the id of &quot;hippo&quot; and automatically figures out how to add enough points to the circle and position them properly so that you get a super smooth transition to the hippo shape. It will rip through all that ugly path data, convert everything to cubic beziers, and dynamically subdivide them when necessary, adding points so that the beginning and ending quantities match (but visually it looks the same). It&rsquo;s all seamless under the hood, of course.</p><p>Note: MorphSVGPlugin requires GSAP 1.18.0 (TweenLite or TweenMax)</p><h2>API</h2><p>MorphSVGPlugin needs to know what shape to morph too and optionally which shapeIndex to use.</p><p>When only specifying a shape, MorphSVGPlugin can take a wide range of values.</p><p>Selector string<br></p><pre class=\"pre-container prettyprint\">TweenLite.to(&quot;#circle&quot;, 1, {morphSVG:&quot;#hippo&quot;});</pre><p>An SVG element<br></p><pre class=\"pre-container prettyprint\">var endShape = document.getElementById(&quot;hippo&quot;);\nTweenLite.to(&quot;#circle&quot;, 1, {morphSVG:endShape);</pre><p>Points for &lt;polyline&gt; or &lt;polygon&gt; elements:<br></p><pre class=\"pre-container prettyprint\">TweenLite.to(&ldquo;#polygon&rdquo;, 2, {morphSVG:&quot;240,220 240,70 70,70 70,220&quot;});</pre><p>Strings for &lt;path&gt; elements<br></p><pre class=\"pre-container prettyprint\">TweenLite.to(&ldquo;#path&rdquo;, 2, {morphSVG:&quot;M10 315 L 110 215 A 30 50 0 0 1 162.55 162.45 L 172.55 152.45 A 30 50 -45 0 1 215.1 109.9 L 315 10&quot;});</pre><p><strong>*Note: </strong>if the shape&nbsp;you pass in is a &lt;rect&gt;, &lt;circle&gt;, &lt;ellipse&gt; (or similar), MorphSVGPlugin will internally create path data from those shapes.</p><h2>shapeIndex</h2><p>The <code>shapeIndex</code> property allows you to adjust how the points in the start shape are mapped. In order to prevent points from drifting wildly during the animation MorphSVGPlugin needs to find a point in the start path that is in close proximity to the first point in the end path. Once that point is found it will map the next point in the start path to the second point in the end path (and so on and so on). Due to the complexity of vector art there will be times that you may want to change which point in the start path gets mapped to the first point in the end path. This is where <code>shapeIndex</code> comes in.</p><p>In order to specify the <code>shapeIndex</code> you need to use an object {} with <code>shape</code> and <code>shapeIndex</code> properties.</p><p>The following code will map the third point in the square to the first point in the star.<br></p><pre class=\"pre-container prettyprint\">TweenLite.to(&quot;#square&quot;, 1, {morphSVG:{shape:&quot;#star&quot;, shapeIndex:3}});</pre><h2>findShapeIndex() utility</h2><p>Experimenting with <code>shapeIndex</code> can be a bit of a guessing game. To make things easier we have created a stand-alone utility function called <code>findShapeIndex()</code>. This function provides an interactive user interface to help you visualize where the start point is, change it and preview the animation.</p><p>You can load findShapeIndex() from: <a href=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/16327/findShapeIndex.js\">https://s3-us-west-2.amazonaws.com/s.cdpn.io/16327/findShapeIndex.js</a></p><p>Once its loaded you simply tell it which shapes to use.<br></p><pre class=\"pre-container prettyprint\">findShapeIndex(&quot;#square&quot;, &quot;#star&quot;);</pre><p>Or pass in raw data:<br></p><pre class=\"pre-container prettyprint\">findShapeIndex(&quot;#square&quot;, &quot;M10 315 L 110 215 A 30 50 0 0 1 162.55 162.45 L 172.55 152.45 A 30 50 -45 0 1 215.1 109.9 L 315 10&quot;);</pre><div class=\"cp_embed_wrapper\"><iframe id=\"cp_embed_763b6533f17a795c3cd957c668c33882\" src=\"http://codepen.io/GreenSock/embed/763b6533f17a795c3cd957c668c33882?default-tab=result&height=556&slug-hash=763b6533f17a795c3cd957c668c33882&theme-id=3984&user=GreenSock\" scrolling=\"no\" frameborder=\"0\" height=\"556\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed 3\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"></iframe></div><p>The best way to get started is to drop your SVG into the pen above and alter the IDs to match your svg. Be sure to watch the video above which clearly illustrates how <code>shapeIndex</code> and <code>findShapeIndex()</code> work.</p><p><strong>Additional Notes</strong></p><ul><li>shapeIndex only works on closed paths.</li><li>if you supply a negative shapeIndex the start path will be completely reversed (which can be quite useful).</li></ul><h2>Performance tip #1: define a shapeIndex in advance</h2><p>MorphSVGPlugin&#39;s default <code>shapeIndex:&quot;auto&quot;</code> does a bunch of calculations to reorganize the points so that they match up in a natural way but if you define a numeric shapeIndex (like <code>shapeIndex:5</code>) it skips those calculations. Each segment inside a path needs a <code>shapeIndex</code>, so multiple values are passed in an array like <code>shapeIndex:[5,1,-8,2]</code>. But how would you know what numbers to pass in? The findShapeIndex() tool helps for single-segment paths, what about multi-segment paths? It&#39;s a pretty complex thing to provide a GUI for.</p><p>Typically the default <code>&quot;auto&quot;</code> mode works great but the goal here is to avoid the calculations, so there is a new <code>&quot;log&quot;</code> value that will act just like <code>&quot;auto&quot;</code> but it will <strong>also <code>console.log()</code> the shapeIndex value(s)</strong>. That way, you can run the tween in the browser once and look in your console and see the numbers that <code>&quot;auto&quot;</code> mode would produce. Then it&#39;s simply a matter of copying and pasting that value into your tween where <code>&quot;log&quot;</code> was previously. For example:</p><pre class=\"pre-container prettyprint\">TweenMax.to(&quot;#id&quot;, 1, {morphSVG:{shape:&quot;#otherID&quot;, shapeIndex:&quot;log&quot;}}); //logs a value like &quot;shapeIndex:[3]&quot;\n//now you can grab the value from the console and drop it in...\nTweenMax.to(&quot;#id&quot;, 1, {morphSVG:{shape:&quot;#otherID&quot;, shapeIndex:[3]}});\n</pre><h2>Converting SVG shapes to paths</h2><p><span class=\"fr-video fr-draggable\" contenteditable=\"false\"><iframe src=\"http://www.youtube.com/embed/jcq9kEyJNMM?rel=0&feature=player_detailpage\" width=\"838\" height=\"471\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></span><br>Technically it&rsquo;s only feasible to morph &lt;path&gt; elements or &lt;polyline&gt;/&lt;polygon&gt; elements, but what if you want to morph a &lt;circle&gt; or &lt;rect&gt; or &lt;ellipse&gt; or &lt;line&gt;? No problem - just tap into the utility method and have the plugin do the conversion for you:<br></p><pre class=\"pre-container prettyprint\">MorphSVGPlugin.convertToPath(&quot;#elementID&quot;);</pre><p><br>You can pass in an element or selector text, so you could also have it convert ALL of those elements with one line:<br></p><pre class=\"pre-container prettyprint\">MorphSVGPlugin.convertToPath(&quot;circle, rect, ellipse, line, polygon, polyline&quot;);</pre><p><br>This literally swaps in a for each one directly in the DOM, and it should look absolutely identical. It&rsquo;ll keep the attributes, like the &ldquo;id&rdquo; attribute. So after the conversion, you should be able to target the elements pretty easily, just as you would before.<br></p><pre class=\"pre-container prettyprint\">//An svg  Like this:\n\n//becomes\n</pre><h2>Morph into multiple shapes</h2><p>Since MorphSVGPlugin is so tightly integrated into GSAP, sequencing multiple morphs is a breeze. Watch how easy it is to make that circle morph into a hippo, star, elephant and back to a circle.</p><pre class=\"pre-container prettyprint\">tl.to(circle, 1, {morphSVG:&quot;#hippo&quot;}, &quot;+=1&quot;)\n  .to(circle, 1, {morphSVG:&quot;#star&quot;}, &quot;+=1&quot;)\n  .to(circle, 1, {morphSVG:&quot;#elephant&quot;}, &quot;+=1&quot;)\n  .to(circle, 1, {morphSVG:circle}, &quot;+=1&quot;);</pre><div class=\"cp_embed_wrapper\"><iframe id=\"cp_embed_rOjeRq\" src=\"http://codepen.io/GreenSock/embed/rOjeRq?default-tab=result&height=320&slug-hash=rOjeRq&theme-id=3984&user=GreenSock\" scrolling=\"no\" frameborder=\"0\" height=\"320\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed 2\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"></iframe></div><p><script async=\"\" src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><p>Note: MorphSVG 0.5.0+ stores the original path data on any target of a morph tween so that you can easily tween back to the original shape.</p><pre class=\"pre-container prettyprint\">data-original=&quot;M490.1,280.649c0,44.459-36.041,80....&quot;&gt;</pre><h2>Performance tip #2: precompile</h2><p>The biggest performance improvement comes from <strong>precompiling</strong> which involves having MorphSVGPlugin run <strong>all</strong> of its initial calculations listed above and then spit out an array with the transformed strings, logging them to the console where you can copy and paste them back into your tween. That way, when the tween begins it can just grab all the values directly instead of doing expensive calculations. For example:</p><pre class=\"pre-container prettyprint\">TweenMax.to(&quot;#id&quot;, 1, {morphSVG:{shape:&quot;#otherID&quot;, precompile:&quot;log&quot;}}); //logs a value like precompile:[&quot;M0,0 C100,200 120,500 300,145 34,245 560,46&quot;,&quot;M0,0 C200,300 100,400 230,400 100,456 400,300&quot;]\n//now you can grab the value from the console and drop it in...\nTweenMax.to(&quot;#id&quot;, 1, {morphSVG:{shape:&quot;#otherID&quot;, precompile:[&quot;M0,0 C100,200 120,500 300,145 34,245 560,46&quot;,&quot;M0,0 C200,300 100,400 230,400 100,456 400,300&quot;]}});\n</pre><p>As an example, here&#39;s a really cool codepen by Dave Rupert before it was precompiled: <a href=\"http://codepen.io/davatron5000/pen/meNOqK/\" target=\"_blank\">http://codepen.io/davatron5000/pen/meNOqK/</a>. Notice the <strong>very first</strong> time you click the toggle button, it may seem to jerk a bit because the entire brain is one path with many segments, and it must get matched up with all the letters and figure out the shapeIndex for each (expensive). By contrast, here&#39;s a fork of that pen that has precompile enabled: <a href=\"http://codepen.io/GreenSock/pen/MKevzM\" target=\"_blank\">http://codepen.io/GreenSock/pen/MKevzM</a>. You may noticed that it starts more smoothly.</p><p><strong>Notes</strong></p><ul class=\"compact\"><li><code>precompile</code> was added in MorphSVGPlugin version 0.8.1.</li><li><code>precompile</code> is only available on <code>&lt;path&gt;</code> elements (not polyline/polygon). You can easily convert things using <code>MorphSVGPlugin.convertToPath(&quot;polygon, polyline&quot;);</code></li><li>Precompiling only improves the performance of the <strong>first (most expensive)</strong> render. If your entire morph is janky throughout the tween, it most likely has nothing to do with GSAP; your SVG may be too complex for the browser to render fast enough. In other words, the bottleneck is probably the browser&#39;s graphics rendering routines. Unfortunately, there&#39;s nothing GSAP can do about that and you&#39;ll need to simplify your SVG artwork and/or reduce the size at which it is displayed.</li><li>The precompiled values are inclusive of shapeIndex adjustments. In other words, shapeIndex gets baked in.</li><li>In most cases, you probably don&#39;t need to precompile; it&#39;s intended to be an advanced technique for squeezing every ounce of performance out of a very complex morph.</li><li>If you alter the original start or end shape/artwork, make sure you precomple again so that the values reflect your changes.</li></ul><h2>Controlling segment matching</h2><p>In version 0.8.1, there were several improvements made to the algorithm that matches up corresponding segments in the start and end shapes so that things just look more natural. So even without changing any of your code, loading the latest version may instantly make things match up better.</p><h3>map: &quot;size&quot; | &quot;position&quot; | &quot;complexity&quot;</h3><p>If the sub-segments inside your path aren&#39;t matching up the way you hoped between the start and end shapes, you can use the <code>map</code> special property to tell MorphSVGPlugin which algorithm to prioritize:</p><ul class=\"compact\"><li><code>&quot;size&quot;</code> (the default) - attempts to match segments based on their overall size. If multiple segments are close in size, it&#39;ll use positional data to match them. This mode typically gives the most intuitive morphs.</li><li><code>&quot;position&quot;</code> - matches mostly based on position.</li><li><code>&quot;complexity&quot;</code> - matches purely based on the quantity of anchor points. This is the fastest algorithm and it can be used to &quot;trick&quot; things to match up by manually adding anchors in your SVG authoring tool so that the pieces that you want matched up contain the same number of anchors (though that&#39;s completely optional).</li></ul><pre class=\"pre-container prettyprint\">TweenMax.to(&quot;#id&quot;, 1, {morphSVG:{shape:&quot;#otherID&quot;, map:&quot;complexity&quot;}});\n</pre><p><strong>Notes</strong></p><ul class=\"compact\"><li><code>map</code> is completely optional. Typically the default mode works great.</li><li>If none of the <code>map</code> modes get the segments to match up the way you want, it&#39;s probabaly best to just split your path into multiple paths and morph each one. That way, you get total control.</li></ul><h2>Animate along an SVG path</h2><p>The new <code>MorphSVGPlugin.pathDataToBezier()</code> method converts SVG &lt;path&gt; data into an array of cubic Bezier points that can be fed directly into a <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:BezierPlugin\"><span data-link-id=\"43077a47946db3db\"></span></span>-based tween so that you can essentially use it as a motion guide.</p><h3>Watch the video</h3><p><span class=\"fr-video fr-draggable\" contenteditable=\"false\"><iframe src=\"http://www.youtube.com/embed/nAc9k8sXrUo?rel=0&feature=player_detailpage\" width=\"838\" height=\"471\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></span></p><h3>Demo</h3><div class=\"cp_embed_wrapper\"><iframe id=\"cp_embed_550e4b59c59355eef809658fbce77ee9\" src=\"http://codepen.io/GreenSock/embed/550e4b59c59355eef809658fbce77ee9?default-tab=result&height=550&slug-hash=550e4b59c59355eef809658fbce77ee9&theme-id=9446&user=GreenSock\" scrolling=\"no\" frameborder=\"0\" height=\"550\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed 1\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"></iframe></div><p><script async=\"\" src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><h2>Performance Tips Video</h2><p>The video below shows exactly how to implement the performance tips above regarding <code>shapeIndex:log</code> and <code>precompile:log</code>.</p><p><span class=\"fr-video fr-draggable\" contenteditable=\"false\"><iframe src=\"http://www.youtube.com/embed/n_5tx2onBzE?rel=0&feature=player_detailpage\" width=\"838\" height=\"471\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></span></p><h2>MorphSVGPlugin Examples</h2><ul class=\"compact\"><li><a href=\"http://codepen.io/chrisgannon/pen/8fd1a390fe5c0feeab508427927112d8?editors=001\" target=\"_blank\">SVG Pencil Download</a> by Chris Gannon</li><li><a href=\"http://codepen.io/chrisgannon/pen/85764552746264251a3ec01347b7ad9d?editors=001\" target=\"_blank\">&quot;!?&quot; to GreenSock Logo</a> by Chris Gannon</li><li><a href=\"http://codepen.io/chrisgannon/pen/53771832864228681ccf06c98d8a5ac7/?editors=001\" target=\"_blank\">Send Email Success/Failure</a> by Chris Gannon</li><li><a href=\"http://codepen.io/MAW/pen/8031816520f252c148b1c22d6213ca4d?editors=001\" target=\"_blank\">Father &amp; Son</a> by Diaco</li><li><a href=\"http://codepen.io/chrisgannon/pen/6337d31ca13f51c0bb2bcd5aa3f2c0bf?editors=001\" target=\"_blank\">Count Down &amp; Count Up</a> by Chris Gannon</li><li><a href=\"http://codepen.io/chrisgannon/pen/d1019f573b49e008301db4dc89b48a24?editors=001\" target=\"_blank\">Life is Short</a> by Chris Gannon</li><li><a href=\"http://codepen.io/chrisgannon/pen/a14d7ebbcb90b89c26f1e47689559d79?editors=001\" target=\"_blank\">Bow &amp; Arrow</a> by Chris Gannon</li><li><a href=\"http://codepen.io/GreenSock/pen/7d5643ac2958ead4d70f87304ef70329?editors=001\" target=\"_blank\">Simple Polyline Morphing</a> by Jack</li><li><a href=\"http://codepen.io/chrisgannon/pen/da80768036ff2c9804b6883bf33f752c?editors=001\" target=\"_blank\">Happy/Sad Face</a> (click the face) by Chris Gannon</li><li><a href=\"http://codepen.io/chrisgannon/pen/5f3f653d6e759adfffd85ba32bbf029e?editors=001\" target=\"_blank\">Bad Hair Day</a> (click the face) by Chris Gannon</li><li><a href=\"http://codepen.io/waterfallmedia/pen/ZbOjRO?editors=001\" target=\"_blank\">Floating Duckie</a> by Brad Larson</li><li><a href=\"http://codepen.io/MAW/pen/b28e9e6c8419dff6067629caeb5d5a8e?editors=001\" target=\"_blank\">Power of GSAP</a> (lightening) by Diaco</li><li><a href=\"http://codepen.io/GreenSock/pen/2f7aec980161c8def330b99c85fe8b98?editors=001\" target=\"_blank\">Animal Shapes</a> by Carl Schooff</li></ul><h2>Get your hands on MorphSVGPlugin</h2><p>MorphSVGPlugin is a bonus plugin for <a href=\"/club/\">Club GreenSock</a> members (&quot;Shockingly Green&quot; and higher). It&#39;s our way of saying &quot;Thank you&quot; to those that are fueling innovation at GreenSock. To download MorphSVGPlugin, just log into your <a href=\"/forums/account-dashboard/\">account dashboard</a> and grab the latest version of GSAP.</p><p><strong>Try MorphSVGPlugin for free on Codepen!</strong><br>There&#39;s a special [fully-functional] version of MorphSVGPlugin that we link to in our demos in our <strong><a href=\"http://codepen.io/collection/naMaNQ/\">MorphSVGPlugin Collection on CodePen</a></strong>, so feel free to fork any of them, add your own SVG graphics, and take MorphSVGPlugin for a spin. Codepen is a fantastic way to experiment. We highly recommend it. <em>Note: the special version of the plugin will only work on the Codepen domain.</em></p><p>To find out more about the many benefits of being a Club GreenSock member swing on by the <a href=\"/club/\" target=\"_blank\">club page</a> and be sure to check out the other premium plugins.</p>"}},"b5e39c1c0244c4f9":{"meta":{"keywords":["js.MorphSVGPlugin.convertToPath()"],"title":"convertToPath()","description":"There's a utility function, MorphSVGPlugin.convertToPath() that can convert primitive shapes like <circle>, <rect>, <ellipse>, <polygon>, <polyline>, and <line> directly into the equivalent <path> that looks identical to the original and is swapped right into the DOM"},"header":{"content":"<p>Converts SVG shapes like &lt;circle&gt;, &lt;rect&gt;, &lt;ellipse&gt;, or &lt;line&gt; into &lt;path&gt;</p>"},"parameters":[{"name":"shape","data_type":"*","description":"<p>element or selector string</p>\n"}],"returns":{"type":"Array","content":"<p>returns an Array of all &lt;path&gt; elements that were created.</p>\n"},"details":{"content":"<p><iframe src=\"http://www.youtube.com/embed/jcq9kEyJNMM?rel=0&amp;feature=player_detailpage\" width=\"838\" height=\"471\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></p><p>Technically it’s only feasible to morph &lt;path&gt; elements or &lt;polyline&gt;/&lt;polygon&gt; elements, but there are plenty of times you will want to morph a &lt;circle&gt; or &lt;rect&gt; or &lt;ellipse&gt; or &lt;line&gt;; This method makes that possible by converting those basic shapes into &lt;path&gt; elements.<br /></p><pre class='pre-container prettyprint'>MorphSVGPlugin.convertToPath(\"#elementID\");</pre><p><br />You can pass in an element or selector text, so you could also have it convert ALL of those elements with one line:<br /></p><pre class='pre-container prettyprint'>MorphSVGPlugin.convertToPath(\"circle, rect, ellipse, line, polygon, polyline\");</pre><p><br />This literally swaps in a &lt;path&gt; for each one directly in the DOM, and it should look absolutely identical. It'll keep the attributes like \"id\", etc. intact so that the conversion, you should be able to target the elements just as you would before.<br /></p><pre class='pre-container prettyprint'>//An svg <rect> Like this:<br /><rect id=\"endShape\" width=\"100\" height=\"100\" fill=\"red\"/><br />//becomes<br /><path id=\"endShape\" fill=\"red\" d=\"M100,0 v100 h-100 v-100 h100z\"></path></pre><p>Why not automatically do the conversion? Because that's a bit too intrusive and could cause problems. For example, if you had event listeners applied to the original element(s) or references in your own code to those elements. We feel it's best to make sure the developer is aware of and specifically requests this conversion rather than doing it automatically. </p><p data-height=\"450\" data-theme-id=\"3984\" data-slug-hash=\"gagNeR\" data-default-tab=\"result\" data-user=\"GreenSock\" data-embed-version=\"2\" data-pen-title=\"MorphSVG : convertToPath() End\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/gagNeR/\">MorphSVG : convertToPath() End</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script></p>"}},"ce25d7004a81e18d":{"meta":{"keywords":["js.MorphSVGPlugin.pathDataToBezier()"],"title":"pathDataToBezier()","description":"Converts SVG &amp;lt;path&amp;gt; data into an array of cubic Bezier points that can be fed directly into a BezierPlugin-based tween."},"header":{"content":"<p>Converts SVG &lt;path&gt; data into an array of cubic Bezier points that can be fed directly into a BezierPlugin-based tween.</p>"},"parameters":[{"name":"path","data_type":"*","description":"<p>The SVG path that should be converted. Can be a reference to an SVG &lt;path&gt;, a string selector (<code>\"#myPath\"</code>) or raw path data (<code>\"M238.17,151.6c0,21.1-18.9, ...\"</code>)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>A config object containing optional properties that affect how the Bezier points are plotted.</p>\n","related_configuration_object":"b6285db341c79d60"}],"returns":{"type":"Array","content":"<p>An array of point objects with x and y properties. <code>[{x:0, y:100}, {x:200, y:400}]</code>.</p>\n"},"details":{"content":"<p>Converts SVG &lt;path&gt; data into an array of cubic Bezier points that can be fed directly into a <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:BezierPlugin\"><span data-link-id=\"43077a47946db3db\"></span></span>-based tween.</p><h3>Watch the video</h3><p><iframe src=\"http://www.youtube.com/embed/nAc9k8sXrUo?rel=0&amp;feature=player_detailpage\" width=\"838\" height=\"471\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></p><h3>Selecting the path to be converted</h3><pre class='pre-container prettyprint'><br />//select path via string selector<br />var bezier = MorphSVGPlugin.pathDataToBezier(\"#myPath\");<br /><br />//or select path using DOM reference<br />var myPath = document.getElementById(\"myPath\");<br />MorphSVGPlugin.pathDataToBezier(myPath);<br /><br />//or pass in a path string<br />MorphSVGPlugin.pathDataToBezier(\"M37,17v15H14V17H37z M50,0H0v50h50V0z\");<br /><br /></pre><h3>Adjusting points</h3><p>The optional vars object recognizes a few properties that can adjust all the resulting points in the Bezier array:</p><pre class='pre-container prettyprint'><br />//each x value will be offset by 100 and each y by 200<br />MorphSVGPlugin.pathDataToBezier(myPath, {offsetX:100, offsetY:200});<br /><br />//each value will be adjusted so that the #balloon element will be moved to the path<br />MorphSVGPlugin.pathDataToBezier(myPath, {align:\"#balloon\"});<br /><br />//each point will use relative values which makes it easy to \"move the path\" to an SVG element.<br />MorphSVGPlugin.pathDataToBezier(myPath, {align:\"relative\"});<br />//resulting path will have points like \"{x:\"+=0\", y:\"+=200\"}<br /><br />//transform the path using a matrix (rotate 45 degrees and move to right by 200px)<br />MorphSVGPlugin.pathDataToBezier(myPath, {matrix:[0.7071, 0.7071, -0.7071, 0.7071, 200, 0]});<br /></pre><p>Don't forget to always set <code>type:\"cubic\"</code> on your bezier tween, like:<br /></p><pre class='pre-container prettyprint'><br />TweenLite.to(\"#id\", 3, {bezier:{values:MorphSVGPlugin.pathDataToBezier(\"#path\", {align:\"#id\"}), type:\"cubic\"}});<br /></pre><h3>Demo</h3><p data-height=\"550\" data-theme-id=\"9446\" data-slug-hash=\"550e4b59c59355eef809658fbce77ee9\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/550e4b59c59355eef809658fbce77ee9/'>pathDataToBezier() docs official</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p>"}},"68bbfcd7d4727cb7":{"name":"squash","returns":{"type":"Number","content":"Controls how long the squash should last (the gap between bounces, when it appears \"stuck\"). Typically 2 is a good number, but 4 (as an example) would make the squash longer in relation to the rest of the ease. Default: 0","contentShort":""}},"179fe104eb1574d0":{"name":"squashID","returns":{"type":"String","content":"The ID that should be assigned to the squash ease. The default is whatever the ID of the bounce is plus \"-squash\" appended to the end. For example, CustomBounce.create(\"hop\", {strength:0.6, squash:2}) would default to a squash ease ID of \"hop-squash\".","contentShort":""}},"307e72098e372787":{"name":"strength","returns":{"type":"Number","content":"A number between 0 and 1 that determines how \"bouncy\" the ease is, so 0.9 will have a lot more bounces than 0.3. Default: 0.7","contentShort":""}},"a5cf84fac5674d10":{"name":"endAtStart","returns":{"type":"Boolean","content":"If true, the ease will end back where it started, allowing you to get an effect like an object sitting on the ground, leaping into the air, and bouncing back down to a stop. Default: false\r\n","contentShort":""}},"2b3bb68a78e65fe7":{"meta":{"keywords":["js.TimelineLite","Animation","Sequencing"],"title":"TimelineLite","description":"TimelineLite is a lightweight, intuitive timeline class for building and managing sequences of TweenLite, TweenMax, TimelineLite, and/or TimelineMax instances. You can think of a TimelineLite instance like a container where you place tweens (or other timelines) over the course of time."},"header":{"content":"<p>TimelineLite is a powerful sequencing tool that acts as a container for tweens and other timelines, making it simple to control them as a whole and precisely manage their timing. Without TimelineLite, building complex sequences would be far more cumbersome because you'd need to use the <code>delay</code> special property for every tween, making future edits far more tedious. Here is a basic example of a sequence <b>without</b> using TimelineLite (the tedious way):<br /></p><pre class='pre-container prettyprint'>TweenLite.to(element, 1, {left:100});<br />TweenLite.to(element, 1, {top:50, delay:1});<br />TweenLite.to(element, 1, {opacity:0, delay:2});</pre><p>The above code animates the element's \"left\" css property to 100, then \"top\" to 50, and finally \"opacity\" to 0 (notice the <code>delay</code> in all but the first tween). But imagine if you wanted to increase the duration of the first tween to 1.5 - you'd need to adjust every delay thereafter. And what if you want to <code>pause()</code> the whole sequence or <code>restart()</code> it or <code>reverse()</code> it on-the-fly or jump to a specific point in the whole animation? This becomes quite messy (or flat-out impossible), but TimelineLite makes it incredibly simple:<br /></p><pre class='pre-container prettyprint'>var tl = new TimelineLite();<br />tl.add( TweenLite.to(element, 1, {left:100}) );<br />tl.add( TweenLite.to(element, 1, {top:50}) );<br />tl.add( TweenLite.to(element, 1, {opacity:0}) );<br /> <br />//then later, control the whole thing...<br />tl.pause();<br />tl.resume();<br />tl.seek(1.5);<br />tl.reverse();<br />...</pre><p>Or use the convenient <code>to()</code> method and chaining to make it even more concise:<br /></p><pre class='pre-container prettyprint'>var tl = new TimelineLite();<br />tl.to(element, 1, {left:100}).to(element, 1, {top:50}).to(element, 1, {opacity:0});</pre><p>Now you can feel free to adjust any of the tweens without worrying about trickle-down changes to delays. Increase the duration of that first tween and everything automatically adjusts.</p><p>Here are some other benefits and features of TimelineLite:</p><ul><li>Things can overlap on the timeline as much as you want. You have complete control over where tweens/timelines are placed. Most other animation tools can only do basic one-after-the-other sequencing but can't allow things to overlap. Imagine appending a tween that moves an object and you want it to start fading out 0.5 seconds before the end of that tween? With TimelineLite it's easy.</li><li>Add labels, play(), stop(), seek(), restart(), and even reverse() smoothly anytime.</li><li>Nest timelines within timelines as deeply as you want. This means you can modularize your code and make it far more efficient. Imagine building your app with common animateIn() and animateOut() methods that return a tween or timeline instance, then you can string things together like <code>myTimeline.append( myObject.animateIn() ).append( myObject.animateOut(), \"+=4\").append( myObject2.animateIn(), \"-=0.5\")...</code></li><li>Speed up or slow down the entire timeline with its <code>timeScale()</code> method. You can even tween it to gradually speed up or slow down the animation smoothly.</li><li>Get or set the progress of the timeline using its <code>progress()</code> method. For example, to skip to the halfway point, set <code>myTimeline.progress(0.5);</code></li><li>Tween the <code>time</code> or <code>progress</code> to fastforward/rewind the timeline. You could even attach a slider to one of these properties to give the user the ability to drag forward/backward through the timeline.</li><li>Add <code>onComplete, onStart, onUpdate,</code> and/or <code>onReverseComplete</code> callbacks using the constructor's <code>vars</code> object like <code>var tl = new TimelineLite({onComplete:myFunction});</code></li><li>Kill the tweens of a particular object inside the timeline with <code>kill(null, target)</code> or get the tweens of an object with <code>getTweensOf()</code> or get all the tweens/timelines in the timeline with <code>getChildren()</code></li><li>By passing <code>useFrames:true</code> in the <code>vars</code> parameter, you can base the timing on frames instead of seconds. Please note, however, that the timeline's timing mode dictates its childrens' timing mode as well.</li><li>You can export all the tween/timelines from the root (master) timeline anytime into a TimelineLite instance using <code>TimelineLite.exportRoot()</code> so that you can <code>pause()</code> them all or<code>reverse()</code> or alter their <code>timeScale</code>, etc. without affecting tweens/timelines that you create in the future. Imagine a game that has all its animation driven by the GreenSock Animation Platform and it needs to pause or slow down while a status screen pops up. Very easy.</li><li>If you need even more features like <code>repeat, repeatDelay, yoyo, currentLabel(), getLabelAfter(), getLabelBefore(), addCallback(), removeCallback(), getActive()</code>, and more, check out TimelineMax which extends TimelineLite.</li></ul><p><b>SPECIAL PROPERTIES, EASES and CALLBACKS</b></p><p>You can optionally use the constructor's <code>vars</code> parameter to define any of the special properties below (syntax example: <code>new TimelineLite({onComplete:myFunction, delay:2});</code></p><p>[config id=\"cd30416934de29e1\"]</p><p><code></code><b>Sample code:</b></p><pre class='pre-container prettyprint'>//create the timeline with an onComplete callback that calls myFunction() when the timeline completes<br />var tl = new TimelineLite({onComplete:myFunction});<br />//add a tween<br />tl.add( TweenLite.to(element, 1, {left:200, top:100}) );<br />        <br />//add another tween at the end of the timeline (makes sequencing easy)<br />tl.add( TweenLite.to(element, 0.5, {opacity:0}) );<br /> <br />//append a tween using the convenience method (shorter syntax) and offset it by 0.5 seconds<br />tl.to(element, 1, {rotation:30}, \"+=0.5\");<br />         <br />//reverse anytime<br />tl.reverse();<br />//Add a \"spin\" label 3-seconds into the timeline<br />tl.addLabel(\"spin\", 3);<br />//insert a rotation tween at the \"spin\" label (you could also define the insertion point as the time instead of a label)<br />tl.add( TweenLite.to(element, 2, {rotation:\"+=360\"}), \"spin\");<br />    <br />//go to the \"spin\" label and play the timeline from there<br />tl.play(\"spin\");<br />//nest another TimelineLite inside your timeline...<br />var nested = new TimelineLite();<br />nested.to(element, 1, {left:400}));<br />tl.append(nested);</pre><p><b>How do timelines work? What are the mechanics like?</b></p><p>Every animation (tween and timeline) is placed on a parent timeline (except the 2 root timelines - there's one for normal tweens and another for \"useFrames\" ones). In a sense, they all have their own playheads (that's what its \"time\" refers to, or \"totalTime\" which is identical except that it includes repeats and repeatDelays) but generally they're not independent because they're sitting on a timeline whose playhead moves. When the parent's playhead moves to a new position, it updates the childrens' too.</p><p>When a timeline renders at a particular time, it loops through its children and says \"okay, you should render as if your playhead is at ____\" and if that child is a timeline with children, it does the same to its children, right on down the line.</p><p>The only exception is when the tween/timeline is paused in which case its internal playhead acts like it's \"locked\". So in that case, it's possible (likely in fact) that the child's playhead would <b>not</b>be synced with the parent's. When you unpause it (<code>resume()</code>), it essentially picks it up and moves it so that its internal playhead is synchronized with wherever the parent's playhead is at that moment, thus things play perfectly smoothly. That is, unless the timeline's <code>smoothChildTiming</code> is to <code>false</code> in which case it won't move - its <code>startTime</code> will remain locked to where it was.</p><p>So basically, when <code>smoothChildTiming</code> is <code>true</code>, the engine will rearrange things on the fly to ensure the playheads line up so that playback is seamless and smooth. The same thing happens when you <code>reverse()</code> or alter the <code>timeScale</code>, etc. But sometimes you might not want that behavior - you prefer to have tight control over exactly where your tweens line up in the timeline - that's when <code>smoothChildTiming:false</code> is handy.</p><p>One more example: let's say you've got a 10-second tween that's just sitting on the root timeline and you're 2-seconds into the tween. Let's assume it started at exactly 0 on the root to make this easy, and then when it's at 2-seconds, you do <code>tween.seek(5)</code>. The playhead of the root isn't affected - it keeps going exactly as it always did, but in order to make that tween jump to 5 seconds and play appropriately, the tween's <code>startTime</code> gets changed to -3. That way, the tween's playhead and the root playhead are perfectly aligned.</p>"}},"cc4d1686bf20a1c4":{"meta":{"keywords":["js.TimelineLite.TimelineLite()"],"title":"TimelineLite()","description":"Constructor"},"header":{"content":"<p>Constructor</p>"},"parameters":[{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — optionally pass in special properties like <code>onComplete, onCompleteParams, onUpdate, onUpdateParams, onStart, onStartParams, tweens, align, stagger, delay, useFrames,</code> and/or <code>autoRemoveChildren</code>. Below is a complete list of all special properties:</p>\n","related_configuration_object":"cd30416934de29e1"}],"returns":{},"details":{"content":"<p>Constructor</p>"}},"fb3630bc7fd65dd2":{"meta":{"keywords":["js.TimelineLite.add()"],"title":"add()","description":"[override] Adds a tween, timeline, callback, or label (or an array of them) to the timeline."},"header":{"content":"<p>[override] Adds a tween, timeline, callback, or label (or an array of them) to the timeline.</p>"},"parameters":[{"name":"value","data_type":"*","description":"<p>The tween, timeline, callback, or label (or array of them) to add</p>\n"},{"name":"position","data_type":"*","description":"<p>(default = <code>+=0</code>)<code></code> — Controls the placement of the object in the timeline (by default, it&#8217;s the end of the timeline, like &#8220;+=0&#8221;). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a &#8220;+=&#8221; or &#8220;-=&#8221; prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the object 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the object inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the object 2 seconds after &#8220;myLabel&#8221; or <code>\"myLabel-=3\"</code> to insert it 3 seconds before &#8220;myLabel&#8221;. If you define a label that doesn&#8217;t exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween there which can be quite convenient.</p>\n<p>Be sure to read our tutorial <a title=\"learning.timelinetips.position\" href=\"/position-parameter\">Understanding the Position Parameter</a> which includes interactive timeline visualizations and a video.</p>\n"},{"name":"align","data_type":"String","description":"<p>(default = <code>normal</code>)<code></code> — <b><i>[only relevant when the first parameter, <code>value</code>, is an array]</i></b> Determines how the tweens/timelines/callbacks/labels in the array that is being added will be aligned in relation to each other before getting inserted. Options are: <code>\"sequence\"</code> (aligns them one-after-the-other in a sequence), <code>\"start\"</code> (aligns the start times of all of the objects (ignoring delays)), and <code>\"normal\"</code> (aligns the start times of all the tweens (honoring delays)). The default is <code>\"normal\"</code>.</p>\n"},{"name":"stagger","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — <b><i>[only relevant when the first parameter, <code>value</code>, is an array]</i></b> Staggers the inserted objects from the array the is being added by a set amount of time (in seconds) (or in frames for frames-based timelines). For example, if the stagger value is 0.5 and the <code>\"align\"</code> parameter is set to <code>\"start\"</code>, the second one will start 0.5 seconds after the first one starts, then 0.5 seconds later the third one will start, etc. If the align property is <code>\"sequence\"</code>, there would be 0.5 seconds added between each tween. Default is 0.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Adds a tween, timeline, callback, or label (or an array of them) to the timeline.</p><p>The <code>position</code> parameter gives you complete control over the insertion point. By default, it's at the end of the timeline. Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a \"+=\" or \"-=\" prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the object 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the object inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the object 2 seconds after \"myLabel\" or <code>\"myLabel-=3\"</code> to insert it 3 seconds before \"myLabel\". If you define a label that doesn't exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween which can be quite convenient.<br /></p><pre class='pre-container prettyprint'>//add a tween to the end of the timeline<br /> tl.add( TweenLite.to(element, 2, {left:100}) );<br /> <br /> //add a callback at 1.5 seconds<br /> tl.add(func, 1.5); <br /> <br /> //add a label 2 seconds after the end of the timeline (with a gap of 2 seconds)<br /> tl.add(\"myLabel\", \"+=2\");<br /> <br /> //add another timeline at \"myLabel\"<br /> tl.add(otherTimeline, \"myLabel\"); <br /> <br /> //add an array of tweens 2 seconds after \"myLabel\"<br /> tl.add([tween1, tween2, tween3], \"myLabel+=2\"); <br /> <br /> //add an array of tweens so that they are sequenced one-after-the-other with 0.5 seconds inbetween them, starting 2 seconds after the end of the timeline<br /> tl.add([tween1, tween2, tween3], \"+=2\", \"sequence\", 0.5);</pre><p>Be sure to read our tutorial <a title=\"learning.timelinetips.position\" href=\"/position-parameter\">Understanding the Position Paramater</a> which includes interactive timeline visualizations and a video.</p>"}},"a3d5652d51086bea":{"meta":{"keywords":["js.TimelineLite.addLabel()"],"title":"addLabel()","description":"Adds a label to the timeline, making it easy to mark important positions/times."},"header":{"content":"<p>Adds a label to the timeline, making it easy to mark important positions/times.</p>"},"parameters":[{"name":"label","data_type":"String","description":"<p>The name of the label</p>\n"},{"name":"position","data_type":"*","description":"<p>Controls the placement of the label in the timeline (by default, it&#8217;s the end of the timeline, like &#8220;+=0&#8221;). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a &#8220;+=&#8221; or &#8220;-=&#8221; prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the label 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the label inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the label 2 seconds after &#8220;myLabel&#8221; or <code>\"myLabel-=3\"</code> to insert it 3 seconds before &#8220;myLabel&#8221;. If you define a label that doesn&#8217;t exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the label there which can be quite convenient. Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Adds a label to the timeline, making it easy to mark important positions/times. You can then reference that label in other methods, like <code>seek(\"myLabel\")</code> or <code>add(myTween, \"myLabel\")</code> or <code>reverse(\"myLabel\")</code>. You could also use the <code><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineLite.add()\"><span data-link-id=\"fb3630bc7fd65dd2\"></span></span></code> method to insert a label.</p><div style=\"width: 838px;\"><p class=\"codepen\" data-height=\"799\" data-theme-id=\"5662\" data-slug-hash=\"1091b66cdb9aa9c7fdd029c82c4d8840\" data-default-tab=\"result\" data-user=\"GreenSock\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/1091b66cdb9aa9c7fdd029c82c4d8840/\">Labels</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script src=\"http://codepen.io/assets/embed/ei.js\" async=\"\"></script></p><p class=\"p1\">Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p></div>"}},"b15c1fc9e7c9418c":{"meta":{"keywords":["js.TimelineLite.addPause()"],"title":"addPause()","description":"Inserts a special callback that pauses playback of the timeline at a particular time or label."},"header":{"content":"<p>Inserts a special callback that pauses playback of the timeline at a particular time or label.</p>"},"parameters":[{"name":"position","data_type":"*","description":"<p>(default = <code>+=0</code>)<code></code> — Controls the placement of the pause in the timeline (by default, it&#8217;s the end of the timeline, like &#8220;+=0&#8221;). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a &#8220;+=&#8221; or &#8220;-=&#8221; prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after &#8220;myLabel&#8221; or <code>\"myLabel-=3\"</code> to insert it 3 seconds before &#8220;myLabel&#8221;. If you define a label that doesn&#8217;t exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween there which can be quite convenient.</p>\n<p class=\"p1\">Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p>\n"},{"name":"callback","data_type":"Function","description":"<p>(default = <code>null</code>)<code></code> — An optional callback that should be called immediately after the timeline is paused.</p>\n"},{"name":"params","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — An optional array of parameters to pass the callback.</p>\n"},{"name":"scope","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The scope in which the callback should be called (basically, what &#8220;this&#8221; refers to in the function). NOTE: this parameter only exists in the JavaScript and AS2 versions.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Inserts a special callback that pauses playback of the timeline at a particular time or label. This method is more accurate than using a simple callback of your own because it ensures that even if the virtual playhead had moved slightly beyond the pause position, it'll get moved back to precisely the correct position.</p><p>Remember, the virtual playhead moves to a new position on each tick (frame) of the core timing mechanism, so it is possible, for example for it to be at 0.99 and then the next render happens at 1.01, so if your callback was at exactly 1 second, the playhead would (in this example) move slightly past where you wanted to pause. Then, if you reverse(), it would run into that callback again and get paused almost immediately. However, if you use the <code>addPause()</code> method, it will calibrate things so that when the callback is hit, it'll move the playhead back to <b>EXACTLY</b> where it should be. Thus, if you reverse() it won't run into the same callback again.<br /></p><pre class='pre-container prettyprint'>//insert a pause at exactly 2 seconds into the timeline<br />timeline.addPause(2);<br /> <br />//insert a pause at \"yourLabel\"<br />timeline.addPause(\"yourLabel\");<br /> <br />//insert a pause 3 seconds after \"yourLabel\" and when that pause occurs, call yourFunction<br />timeline.addPause(\"yourLabel+=3\", yourFunction);<br /> <br />//insert a pause at exactly 4 seconds and then call yourFunction and pass it 2 parameters, \"param1\" and \"param2\" and bind the current scope to the callback<br />timeline.addPause(4, yourFunction, [\"param1\", \"param2\"], this);</pre><p>The special callback is just a zero-duration tween that utilizes an onComplete, so technically this callback is just like any other, and it is considered a child of the timeline. To remove a pause that was added via addPause() use <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineMax.removePause()\"><span data-link-id=\"58e2f543b70f3422\"></span></span>.</p><p class=\"p1\">Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p>"}},"d19482f5b1cfd929":{"meta":{"keywords":["js.TimelineLite.call()"],"title":"call()","description":"Adds a callback to the end of the timeline (or elsewhere using the &quot;position&quot; parameter) - this is a convenience method that accomplishes exactly the same thing as add( TweenLite.delayedCall(...) ) but with less code."},"header":{"content":"<p>Adds a callback to the end of the timeline (or elsewhere using the \"position\" parameter) - this is a convenience method that accomplishes exactly the same thing as add( TweenLite.delayedCall(...) ) but with less code.</p>"},"parameters":[{"name":"callback","data_type":"Function","description":"<p>Function to call</p>\n"},{"name":"params","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — An Array of parameters to pass the function.</p>\n"},{"name":"scope","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The scope in which the callback should be called (basically, what &#8220;this&#8221; refers to in the function). NOTE: this parameter only exists in the JavaScript and AS2 versions.</p>\n"},{"name":"position","data_type":"*","description":"<p>(default = <code>+=0</code>)<code></code> — Controls the placement of the callback in the timeline (by default, it&#8217;s the end of the timeline, like &#8220;+=0&#8221;). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a &#8220;+=&#8221; or &#8220;-=&#8221; prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the callback 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the callback inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the callback 2 seconds after &#8220;myLabel&#8221; or <code>\"myLabel-=3\"</code> to insert it 3 seconds before &#8220;myLabel&#8221;. If you define a label that doesn&#8217;t exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the callback there which can be quite convenient. Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Adds a callback to the end of the timeline (or elsewhere using the \"position\" parameter) - this is a convenience method that accomplishes exactly the same thing as <code>add( TweenLite.delayedCall(...) )</code> but with less code. In other words, the following two lines produce identical results:</p><pre class='pre-container prettyprint'>myTimeline.add( TweenLite.delayedCall(0, myFunction, [\"param1\", \"param2\"]) );<br /> myTimeline.call(myFunction, [\"param1\", \"param2\"]);</pre><p>This is different than using the <code>onComplete</code> special property on the TimelineLite itself because once you append the callback, it stays in place whereas an <code>onComplete</code> is always called at the very end of the timeline. For example, if a timeline is populated with a 1-second tween and then you <code>call(myFunction)</code>, it is placed at the 1-second spot. Then if you append another 1-second tween, the timeline's duration will now be 2 seconds but the myFunction callback will still be called at the 1-second spot. An <code>onComplete</code> would be called at the end (2 seconds).</p><p>Keep in mind that you can chain these calls together and use other convenience methods like <code>to(), fromTo(), set(), staggerTo()</code>, etc. to build out sequences very quickly:<br /></p><pre class='pre-container prettyprint'>//create a timeline that calls myFunction() when it completes<br />var tl = new TimelineLite({onComplete:myFunction});<br /> <br />//now we'll use chaining, but break each step onto a different line for readability...<br />tl.to(element, 1, {left:100})    //tween element's left to 100<br />  .call(myCallback)        //then call myCallback()<br />  .set(element, {opacity:0})    //then set element.opacity to 0.5 immediately<br />  .call(otherFunction, [\"param1\", \"param2\"])    //then call otherFunction(\"param1\", \"param2\")<br />  .staggerTo([element1, element2, element3], 1.5, {rotation:45}, 0.25); //finally tween the rotation of element1, element2, and element3 to 45 and stagger the start times by 0.25 seconds</pre><p><br /></p><pre class='pre-container prettyprint'>tl.call(func, [\"param1\"]);  //appends to the end of the timeline<br />tl.call(func, [\"param1\"], this, 2);  //appends it at exactly 2 seconds into the timeline (absolute position)<br />tl.call(func, [\"param1\"], this, \"+=2\");  //appends it 2 seconds after the end (with a gap of 2 seconds)<br />tl.call(func, [\"param1\"], this, \"myLabel\");  //places it at \"myLabel\" (and if \"myLabel\" doesn't exist yet, it's added to the end and then the tween is inserted there)<br />tl.call(func, [\"param1\"], this, \"myLabel+=2\");  //places it 2 seconds after \"myLabel\"</pre><p>The 4th parameter is the <code>position</code> which controls the placement of the tween in the timeline (by default, it's at the end of the timeline). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a \"+=\" or \"-=\" prefix to offset the insertion point relative to the END of the timeline. For example,<code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after \"myLabel\" or <code>\"myLabel-=3\"</code> to insert it 3 seconds before \"myLabel\". If you define a label that doesn't exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween there which can be quite convenient.</p><p class=\"p1\">Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p>"}},"55a9f099bdcda14c":{"meta":{"keywords":["js.TimelineLite.clear()"],"title":"clear()","description":"Empties the timeline of all tweens, timelines, and callbacks (and optionally labels too)."},"header":{"content":"<p>Empties the timeline of all tweens, timelines, and callbacks (and optionally labels too).</p>"},"parameters":[{"name":"labels","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code> (the default), labels will be cleared too.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Empties the timeline of all tweens, timelines, and callbacks (and optionally labels too). Event callbacks (like onComplete, onUpdate, onStart, etc.) are not removed. If you need to remove event callbacks, use the <code>eventCallback()</code> method and set them to null like <code>myTimeline.eventCallback(\"onComplete\", null);</code></p>"}},"e949a7537e48535a":{"meta":{"keywords":["js.TimelineLite.duration()"],"title":"duration()","description":"[override] Gets the timeline&#039;s duration or, if used as a setter, adjusts the timeline&#039;s timeScale to fit it within the specified duration."},"header":{"content":"<p>[override] Gets the timeline's duration or, if used as a setter, adjusts the timeline's timeScale to fit it within the specified duration.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Gets the timeline's <code>duration</code> or, if used as a setter, adjusts the timeline's <code>timeScale</code> to fit it within the specified duration. <code>duration()</code> is identical to <code>totalDuration()</code> except for TimelineMax instances that have a non-zero <code>repeat</code> in which case <code>totalDuration</code> includes repeats and repeatDelays whereas <code>duration</code> doesn't. For example, if a TimelineMax instance has a <code>duration</code> of 2 and a <code>repeat</code> of 3, its <code>totalDuration</code> would be 8 (one standard play plus 3 repeats equals 4 total cycles).</p><p>Due to the fact that a timeline's <code>duration</code> is dictated by its contents, using this method as a setter will simply cause the <code>timeScale</code> to be adjusted to fit the current contents into the specified <code>duration</code>, but the <code>duration</code> value itself will remain unchanged. For example, if there are 20-seconds worth of tweens in the timeline and you do <code>myTimeline.duration(10)</code>, the <code>timeScale</code> would be changed to 2. If you checked the <code>duration</code> again immediately after that, it would still return 20 because technically that is how long all the child tweens/timelines are but upon playback the speed would be doubled because of the <code>timeScale</code>.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myAnimation.duration(2).play(1);</code><br /></p><pre class='pre-container prettyprint'>var currentDuration = myAnimation.duration(); //gets current duration<br /> myAnimation.duration( 10 ); //adjusts the timeScale of myAnimation so that it fits into exactly 10 seconds on its parent timeline</pre>"}},"3ba39b4db90dc9ba":{"meta":{"keywords":["js.TimelineLite.exportRoot()"],"title":"exportRoot()","description":"[static] Seamlessly transfers all tweens, timelines, and [optionally] delayed calls from the root timeline into a new TimelineLite so that you can perform advanced tasks on a seemingly global basis without affecting tweens/timelines that you create after the export."},"header":{"content":"<p>[static] Seamlessly transfers all tweens, timelines, and [optionally] delayed calls from the root timeline into a new TimelineLite so that you can perform advanced tasks on a seemingly global basis without affecting tweens/timelines that you create after the export.</p>"},"parameters":[{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — The <code>vars</code> parameter that&#8217;s passed to the TimelineLite&#8217;s constructor which allows you to define things like onUpdate, onComplete, etc. The<code>useFrames</code> special property determines which root timeline gets exported. There are two distinct root timelines &#8211; one for frames-based animations (<code>useFrames:true</code>) and one for time-based ones. By default, the time-based timeline is exported.</p>\n"},{"name":"omitDelayedCalls","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code> (the default), delayed calls will be left on the root rather than wrapped into the new TimelineLite. That way, if you<code>pause()</code> or alter the <code>timeScale</code>, or <code>reverse()</code>, they won&#8217;t be affected. However, in some situations it might be very useful to have them included.</p>\n"}],"returns":{"type":"TimelineLite","content":"<p>A new TimelineLite instance containing the root tweens/timelines</p>\n"},"details":{"content":"<p>Seamlessly transfers all tweens, timelines, and [optionally] delayed calls from the root timeline into a new TimelineLite so that you can perform advanced tasks on a seemingly global basis without affecting tweens/timelines that you create after the export. For example, imagine a game that uses the GreenSock Animation Platform for all of its animations and at some point during the game, you want to slow everything down to a stop (tweening the <code>timeScale</code>) while at the same time animating a new popup window into place:<br /></p><pre class='pre-container prettyprint'>var tl = TimelineLite.exportRoot();<br />TweenLite.to(tl, 0.5, {timeScale:0});<br /> <br />//this tween isn't affected because it's created after the export.<br />TweenLite.fromTo(myWindow, 1, {scaleX:0, scaleY:0}, {scaleX:1, scaleY:1});</pre><p>You could then re-animate things when you're ready by tweening the <code>timeScale</code> back to 1. Or you could use <code>exportRoot()</code> to collect all the animations and <code>pause()</code> them and then animate the popup screen (or whatever). Then <code>resume()</code> that instance or even <code>reverse()</code>.</p><p>You can <code>exportRoot()</code> as many times as you want; all it does is wrap all the loose tweens/timelines/delayedCalls into a TimelineLite which itself gets placed onto the root, so if you<code>exportRoot()</code> again, that TimelineLite would get wrapped into another one, etc. Things can be nested as deeply as you want.</p><p>Keep in mind, however, that completed tweens/timelines are removed from the root (for automatic garbage collection), so if you <code>exportRoot()</code> after a tween completes, it won't be included in the export. The only way around that is to set <code>autoRemoveChildren</code> property of the <code>Animation._rootTimeline</code> and <code>Animation._rootFramesTimeline</code> to <code>false</code>, but that is <b>NOT</b> recommended because you'd need to manually <code>kill()</code> your tweens/timelines manually to make them eligible for garbage collection.</p>"}},"078881c6d928c5cf":{"meta":{"keywords":["js.TimelineLite.from()"],"title":"from()","description":"Adds a TweenLite.from() tween to the end of the timeline (or elsewhere using the &quot;position&quot; parameter) - this is a convenience method that accomplishes exactly the same thing as add( TweenLite.from(...) ) but with less code."},"header":{"content":"<p>Adds a TweenLite.from() tween to the end of the timeline (or elsewhere using the \"position\" parameter) - this is a convenience method that accomplishes exactly the same thing as add( TweenLite.from(...) ) but with less code.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties should be affected. When animating DOM elements, the target can be: a single element, an array of elements, a jQuery object (or similar), or a CSS selector string like “#feature” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if the timeline is frames-based)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the starting value for each property that should be tweened as well as any special properties like <code>onComplete</code>, <code>ease</code>, etc. For example, to tween element&#8217;s <code>left</code> from 100 and element&#8217;s <code>top</code> from 200 and then call <code>myFunction</code>, do this: <code>myTimeline.from(element, 1, {left:100, top:200, onComplete:myFunction});</code></p>\n"},{"name":"position","data_type":"*","description":"<p>(default = <code>+=0</code>)<code></code> — Controls the placement of the tween in the timeline (by default, it&#8217;s the end of the timeline, like &#8220;+=0&#8221;). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a &#8220;+=&#8221; or &#8220;-=&#8221; prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after &#8220;myLabel&#8221; or <code>\"myLabel-=3\"</code> to insert it 3 seconds before &#8220;myLabel&#8221;. If you define a label that doesn&#8217;t exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween there which can be quite convenient. Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Adds a <code>TweenLite.from()</code> tween to the end of the timeline (or elsewhere using the \"position\" parameter) - this is a convenience method that accomplishes exactly the same thing as<code>add( TweenLite.from(...) )</code> but with less code. In other words, the following two lines produce identical results:<br /></p><pre class='pre-container prettyprint'>myTimeline.add( TweenLite.from(element, 1, {left:100, opacity:0.5}) );<br />myTimeline.from(element, 1, {left:100, opacity:0.5});</pre><p>Keep in mind that you can chain these calls together and use other convenience methods like <code>to(), call(), set(), staggerTo()</code>, etc. to build out sequences very quickly:<br /></p><pre class='pre-container prettyprint'>//create a timeline that calls myFunction() when it completes<br />var tl:TimelineLite = new TimelineLite({onComplete:myFunction});<br /> <br />//now we'll use chaining, but break each step onto a different line for readability...<br />tl.from(element, 1, {left:-100})    //tween element's left from -100<br />  .to(element, 1, {top:50})    //then tween element's \"top\" to 50<br />  .set(element, {opacity:0})    //then set element's opacity to 0.5 immediately<br />  .call(otherFunction)    //then call otherFunction()<br />  .staggerTo([element1, element2, element3], 1.5, {rotation:45}, 0.25); //finally tween the rotation of element1, element2, and element3 to 45 and stagger the start times by 0.25 seconds<br />         </pre><p>If you don't want to append the tween and would rather have precise control of the insertion point, you can use the additional <code>position</code> parameter. Or use a regular <code>add()</code> like<code>tl.add( TweenLite.from(element, 1, {left:100}), 2.75)</code>.</p><p>The 4th parameter is the <code>position</code> which controls the placement of the tween in the timeline (by default, it's at the end of the timeline). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a \"+=\" or \"-=\" prefix to offset the insertion point relative to the END of the timeline. For example,<code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after \"myLabel\" or <code>\"myLabel-=3\"</code> to insert it 3 seconds before \"myLabel\". If you define a label that doesn't exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween which can be quite convenient.<br /></p><pre class='pre-container prettyprint'>tl.from(element, 1, {left:100});  //appends to the end of the timeline<br />tl.from(element, 1, {left:100}, 2);  //appends it at exactly 2 seconds into the timeline (absolute position)<br />tl.from(element, 1, {left:100}, \"+=2\");  //appends it 2 seconds after the end (with a gap of 2 seconds)<br />tl.from(element, 1, {left:100}, \"myLabel\");  //places it at \"myLabel\" (and if \"myLabel\" doesn't exist yet, it's added to the end and then the tween is inserted there)<br />tl.from(element, 1, {left:100}, \"myLabel+=2\");  //places it 2 seconds after \"myLabel\"</pre><p class=\"p1\">Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p><p><b>NOTE:</b> By default, <code>immediateRender</code> is <code>true</code> in <code>from()</code> tweens, meaning that they immediately render their starting state regardless of any delay that is specified. You can override this behavior by passing <code>immediateRender:false</code> in the <code>vars</code> parameter so that it will wait to render until the tween actually begins.</p>"}},"ab22a377935cb849":{"meta":{"keywords":["js.TimelineLite.fromTo()"],"title":"fromTo()","description":"Adds a TweenLite.fromTo() tween to the end of the timeline - this is a convenience method that accomplishes exactly the same thing as add( TweenLite.fromTo(...) ) but with less code."},"header":{"content":"<p>Adds a TweenLite.fromTo() tween to the end of the timeline - this is a convenience method that accomplishes exactly the same thing as add( TweenLite.fromTo(...) ) but with less code.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties should be affected. When animating DOM elements, the target can be: a single element, an array of elements, a jQuery object (or similar), or a CSS selector string like “#feature” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if the timeline is frames-based)</p>\n"},{"name":"fromVars","data_type":"Object","description":"<p>An object defining the starting value for each property that should be tweened. For example, to tween element&#8217;s <code>left</code> from 100 and element&#8217;s <code>top</code> from 200,<code>fromVars</code> would look like this: <code>{left:100, top:200}</code>.</p>\n"},{"name":"toVars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like <code>onComplete</code>, <code>ease</code>, etc. For example, to tween element&#8217;s <code>left</code> from 0 to 100 and element&#8217;s <code>top</code> from 0 to 200 and then call <code>myFunction</code>, do this: <code>myTimeline.fromTo(element, 1, {left:0, top:0}, {left:100, top:200, onComplete:myFunction});</code></p>\n"},{"name":"position","data_type":"*","description":"<p>(default = <code>+=0</code>)<code></code> — Controls the placement of the tween in the timeline (by default, it&#8217;s the end of the timeline, like &#8220;+=0&#8221;). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a &#8220;+=&#8221; or &#8220;-=&#8221; prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after &#8220;myLabel&#8221; or <code>\"myLabel-=3\"</code> to insert it 3 seconds before &#8220;myLabel&#8221;. If you define a label that doesn&#8217;t exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween there which can be quite convenient. Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Adds a TweenLite.fromTo() tween to the end of the timeline - this is a convenience method that accomplishes exactly the same thing as add( TweenLite.fromTo(...) ) but with less code.<br /></p><pre class='pre-container prettyprint'>myTimeline.add( TweenLite.fromTo(element, 1, {left:0, opacity:1}, {left:100, opacity:0.5}) );<br />myTimeline.fromTo(element, 1, {left:0, opacity:1}, {left:100, opacity:0.5});</pre><p>Keep in mind that you can chain these calls together and use other convenience methods like <code>to(), call(), set(), staggerTo()</code>, etc. to build out sequences very quickly:<br /></p><pre class='pre-container prettyprint'>//create a timeline that calls myFunction() when it completes<br />var tl = new TimelineLite({onComplete:myFunction});<br />         <br />//now we'll use chaining, but break each step onto a different line for readability...<br />tl.fromTo(element, 1, {left:0}, {left:-100})    //tween element's left from 0 to -100<br />  .to(element, 1, {top:50}, \"-=0.25\")        //then tween element's top to 50, starting it 0.25 seconds before the previous tween ends<br />  .set(element, {opacity:0})            //then set element.opacity to 0.5 immediately<br />  .call(otherFunction)            //then call otherFunction()<br />  .staggerTo([element1, element2, element3], 1.5, {rotation:45}, 0.25); //finally tween the rotation of element1, element2, and element3 to 45 and stagger the start times by 0.25 seconds</pre><p>If you don't want to append the tween and would rather have precise control of the insertion point, you can use the additional <code>position</code> parameter. Or use a regular <code>add()</code> like<code>tl.add( TweenLite.fromTo(element, 1, {left:0}, {left:100}), 2.75)</code>.</p><p>The 4th parameter is the <code>position</code> which controls the placement of the tween in the timeline (by default, it's at the end of the timeline). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a \"+=\" or \"-=\" prefix to offset the insertion point relative to the END of the timeline. For example,<code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after \"myLabel\" or <code>\"myLabel-=3\"</code> to insert it 3 seconds before \"myLabel\". If you define a label that doesn't exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween which can be quite convenient.<br /></p><pre class='pre-container prettyprint'>tl.fromTo(element, 1, {left:0}, {left:100});  //appends to the end of the timeline<br />tl.fromTo(element, 1, {left:0}, {left:100}, 2);  //appends it at exactly 2 seconds into the timeline (absolute position)<br />tl.fromTo(element, 1, {left:0}, {left:100}, \"+=2\");  //appends it 2 seconds after the end (with a gap of 2 seconds)<br />tl.fromTo(element, 1, {left:0}, {left:100}, \"myLabel\");  //places it at \"myLabel\" (and if \"myLabel\" doesn't exist yet, it's added to the end and then the tween is inserted there)<br />tl.fromTo(element, 1, {left:0}, {left:100}, \"myLabel+=2\");  //places it 2 seconds after \"myLabel\"</pre><p class=\"p1\">Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p><p><b>NOTE:</b> by default, <code>immediateRender</code> is <code>true</code> in <code>fromTo()</code> tweens, meaning that they immediately render their starting state regardless of any delay that is specified. This is done for convenience because it is often the preferred behavior when setting things up on the screen to animate into place, but you can override this behavior by passing<code>immediateRender:false</code> in the <code>fromVars</code> or <code>toVars</code> parameter so that it will wait to render the starting values until the tween actually begins.</p>"}},"5103496262822a61":{"meta":{"keywords":["js.TimelineLite.getChildren()"],"title":"getChildren()","description":"Returns an array containing all the tweens and/or timelines nested in this timeline."},"header":{"content":"<p>Returns an array containing all the tweens and/or timelines nested in this timeline.</p>"},"parameters":[{"name":"nested","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — Determines whether or not tweens and/or timelines that are inside nested timelines should be returned. If you only want the &#8220;top level&#8221; tweens/timelines, set this to <code>false</code>.</p>\n"},{"name":"tweens","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — Determines whether or not tweens (TweenLite and TweenMax instances) should be included in the results</p>\n"},{"name":"timelines","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — Determines whether or not timelines (TimelineLite and TimelineMax instances) should be included in the results</p>\n"},{"name":"ignoreBeforeTime","data_type":"Number","description":"<p><code>Number</code> (default = <code>-9999999999</code>)<code></code> — All children with start times that are less than this value will be ignored.</p>\n"}],"returns":{"type":"Array","content":""},"details":{"content":"<p>Returns an array containing all the tweens and/or timelines nested in this timeline. Callbacks (delayed calls) are considered zero-duration tweens.</p><h3>Example</h3><pre class='pre-container prettyprint'>//first, let's set up a master timeline and nested timeline:<br />var master = new TimelineLite(),<br />    nestedTimeline = new TimelineLite();<br />//drop 2 tweens into the nested timeline<br />nestedTimeline.to(\"#e1\", 1, {x:100})<br />  .to(\"#e2\", 2, {y:200});<br />//drop 3 tweens into the master timeline<br />master.to(\"#e3\", 1, {top:200})<br />     .to(\"#e4\", 1, {left:100})<br />     .to(\"#e5\", 1, {backgroundColor:\"red\"});<br />//nest the timeline:<br />master.add(nestedTimeline);<br /><br />//now let's get only the direct children of the master timeline:<br />var children = master.getChildren(false, true, true, 0);<br />console.log(children.length); //\"3\" (2 tweens and 1 timeline)<br />//get all of the tweens/timelines (including nested ones) that occur AFTER 0.5 seconds<br />children = master.getChildren(true, true, true, 0.5);<br />console.log(children.length); //\"5\" (4 tweens and 1 timeline)<br />//get only tweens (not timelines) of master (including nested tweens):<br />children = master.getChildren(true, true, false, 0);<br />console.log(children.length); //\"5\" (5 tweens)<br /></pre>"}},"6428cc1a8c9024c6":{"meta":{"keywords":["js.TimelineLite.getLabelTime()"],"title":"getLabelTime()","description":"Returns the time associated with a particular label."},"header":{"content":"<p>Returns the time associated with a particular label.</p>"},"parameters":[{"name":"label","data_type":"String","description":"<p>Label name</p>\n"}],"returns":{"type":"Number","content":"<p>Time associated with the label (or -1 if there is no such label)</p>\n"},"details":{"content":"<p>Returns the time associated with a particular label. If the label isn't found, -1 is returned.</p>"}},"708b2590f2979899":{"meta":{"keywords":["js.TimelineLite.getTweensOf()"],"title":"getTweensOf()","description":"Returns the tweens of a particular object that are inside this timeline."},"header":{"content":"<p>Returns the tweens of a particular object that are inside this timeline.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>The target object of the tweens</p>\n"},{"name":"nested","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — Determines whether or not tweens that are inside nested timelines should be returned. If you only want the &#8220;top level&#8221; tweens/timelines, set this to false.</p>\n"}],"returns":{"type":"Array","content":"<p>an Array of TweenLite and/or TweenMax instances</p>\n"},"details":{"content":"<p>Returns the tweens of a particular object that are inside this timeline.</p>"}},"dd5fed4d3955bfea":{"meta":{"keywords":["js.TimelineLite.invalidate()"],"title":"invalidate()","description":"[override] Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values."},"header":{"content":"<p>[override] Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values.</p>"},"parameters":[],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values. When you <code>invalidate()</code> an animation, it will be re-initialized the next time it renders and its <code>vars</code> object will be re-parsed. The timing of the animation (duration, startTime, delay) will not be affected.</p><p>Another example would be if you have a <code>TweenMax(mc, 1, {x:100, y:100})</code> that ran when mc.x and mc.y were initially at 0, but now mc.x and mc.y are 200 and you want them tween to 100 again, you could simply <code>invalidate()</code> the tween and <code>restart()</code> it. Without invalidating first, restarting it would cause the values jump back to 0 immediately (where they started when the tween originally began). When you invalidate a TimelineLite/TimelineMax, it automatically invalidates all of its children.</p>"}},"d4204b8f13ae9009":{"meta":{"keywords":["js.TimelineLite.recent()"],"title":"recent()","description":"Returns the most recently added child tween/timeline/callback regardless of its position in the timeline. "},"header":{"content":"<p>Returns the most recently added child tween/timeline/callback regardless of its position in the timeline. </p>"},"parameters":[],"returns":{"type":"Animation","content":""},"details":{"content":"<p>Returns the most recently added child tween/timeline/callback regardless of its position in the timeline.<br /></p><pre class='pre-container prettyprint'>var tl = new TimelineLite();<br />tl.to(e1, 999, {x:100, repeat:5}) //very long tween<br />  .to(e2, 1, {y:200}, 0.5); //insert this tween at 0.5 seconds (toward the beginning of the timeline)<br />  .to(e3, 1, {scaleX:2}, tl.recent().endTime() + 3);//inserts the new tween 3 seconds after the e2 tween which was added most recently.</pre>"}},"d49e46f2e8270a08":{"meta":{"keywords":["js.TimelineLite.remove()"],"title":"remove()","description":"Removes a tween, timeline, callback, or label (or array of them) from the timeline."},"header":{"content":"<p>Removes a tween, timeline, callback, or label (or array of them) from the timeline.</p>"},"parameters":[{"name":"value","data_type":"*","description":"<p>The tween, timeline, callback, or label that should be removed from the timeline (or an array of them)</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Removes a tween, timeline, callback, or label (or array of them) from the timeline.</p>"}},"e124272392141d4f":{"meta":{"keywords":["js.TimelineLite.removeLabel()"],"title":"removeLabel()","description":"Removes a label from the timeline and returns the time of that label."},"header":{"content":"<p>Removes a label from the timeline and returns the time of that label.</p>"},"parameters":[{"name":"label","data_type":"String","description":"<p>The name of the label to remove</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"*","content":"<p>Time associated with the label that was removed</p>\n"},"details":{"content":"<p>Removes a label from the timeline and returns the time of that label. You could also use the <code>remove()</code> method to accomplish the same task.</p>"}},"0fc1a8aeb91b3bc5":{"meta":{"keywords":["js.TimelineLite.seek()"],"title":"seek()","description":"[override] Jumps to a specific time (or label) without affecting whether or not the instance is paused or reversed."},"header":{"content":"<p>[override] Jumps to a specific time (or label) without affecting whether or not the instance is paused or reversed.</p>"},"parameters":[{"name":"position","data_type":"*","description":"<p>The position to go to, described in any of the following ways: a numeric value indicates an absolute position, like 3 would be exactly 3 seconds from the beginning of the timeline. A string value can be either a label (i.e. &#8220;myLabel&#8221;) or a relative value using the &#8220;+=&#8221; or &#8220;-=&#8221; prefixes like &#8220;-=2&#8221; (2 seconds before the end of the timeline) or a combination like &#8220;myLabel+=2&#8221; to indicate 2 seconds after &#8220;myLabel&#8221;.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code> (the default), no events or callbacks will be triggered when the playhead moves to the new position defined in the <code>time</code>parameter.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Jumps to a specific time (or label) without affecting whether or not the instance is paused or reversed.</p><p>If there are any events/callbacks inbetween where the playhead was and the new time, they will not be triggered because by default <code>suppressEvents</code> (the 2nd parameter) is <code>true</code>. Think of it like picking the needle up on a record player and moving it to a new position before placing it back on the record. If, however, you do not want the events/callbacks suppressed during that initial move, simply set the <code>suppressEvents</code> parameter to <code>false</code>.<br /></p><pre class='pre-container prettyprint'>//jumps to exactly 2 seconds<br />myAnimation.seek(2);<br /> <br />//jumps to exactly 2 seconds but doesn't suppress events during the initial move:<br />myAnimation.seek(2, false);<br /> <br />//jumps to the \"myLabel\" label<br />myAnimation.seek(\"myLabel\");</pre>"}},"fd9dbda283638161":{"meta":{"keywords":["js.TimelineLite.set()"],"title":"set()","description":"Adds a zero-duration tween to the end of the timeline (or elsewhere using the &quot;position&quot; parameter) that sets values immediately (when the virtual playhead reaches that position on the timeline) - this is a convenience method that accomplishes exactly the same thing as add( TweenLite.to(target, 0, {...}) ) but with less code."},"header":{"content":"<p>Adds a zero-duration tween to the end of the timeline (or elsewhere using the \"position\" parameter) that sets values immediately (when the virtual playhead reaches that position on the timeline) - this is a convenience method that accomplishes exactly the same thing as add( TweenLite.to(target, 0, {...}) ) but with less code.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties will be set.</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the value to which each property should be set. For example, to set element&#8217;s <code>left</code> to 100 and element&#8217;s <code>top</code> to 200, do this:<code>myTimeline.set(element, {left:100, top:200});</code></p>\n"},{"name":"position","data_type":"*","description":"<p>(default = <code>+=0</code>)<code></code> — Controls the placement of the zero-duration tween in the timeline (by default, it&#8217;s the end of the timeline, like &#8220;+=0&#8221;). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a &#8220;+=&#8221; or &#8220;-=&#8221; prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like<code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after &#8220;myLabel&#8221; or <code>\"myLabel-=3\"</code> to insert it 3 seconds before &#8220;myLabel&#8221;. If you define a label that doesn&#8217;t exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween there which can be quite convenient.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Adds a zero-duration tween to the end of the timeline (or elsewhere using the \"position\" parameter) that sets values immediately (when the virtual playhead reaches that position on the timeline) - this is a convenience method that accomplishes exactly the same thing as <code>add( TweenLite.to(target, 0, {...}) )</code> but with less code. In other words, the following two lines produce identical results:<br /></p><pre class='pre-container prettyprint'>myTimeline.add( TweenLite.to(element, 0, {left:100, opacity:0.5, immediateRender:false}) );<br /> myTimeline.set(element, {left:100, opacity:0.5});</pre><p>Keep in mind that you can chain these calls together and use other convenience methods like <code>to(), call(), fromTo(), staggerTo()</code>, etc. to build out sequences very quickly:<br /></p><pre class='pre-container prettyprint'>//create a timeline that calls myFunction() when it completes<br />var tl = new TimelineLite({onComplete:myFunction});<br /> <br />//now we'll use chaining, but break each step onto a different line for readability...<br />tl.to(element, 1, {left:100})    //tween element's left to 100<br />  .set(element, {opacity:0})    //then set element.opacity to 0.5 immediately<br />  .to(element, 1, {top:50})    //then tween element's top to 50<br />  .call(otherFunction)    //then call otherFunction()<br />  .staggerTo([element1, element2, element3], 1.5, {rotation:45}, 0.25); //finally tween the rotation of element1, element2, and element3 to 45 and stagger the start times by 0.25 seconds</pre><p>The 3rd parameter is the <code>position</code> which controls the placement of the tween in the timeline (by default, it's at the end of the timeline). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a \"+=\" or \"-=\" prefix to offset the insertion point relative to the END of the timeline. For example,<code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after \"myLabel\" or <code>\"myLabel-=3\"</code> to insert it 3 seconds before \"myLabel\". If you define a label that doesn't exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween there which can be quite convenient.<br /></p><pre class='pre-container prettyprint'>tl.set(element, {left:100});  //appends to the end of the timeline<br />tl.set(element, {left:100}, 2);  //appends it at exactly 2 seconds into the timeline (absolute position)<br />tl.set(element, {left:100}, \"+=2\");  //appends it 2 seconds after the end (with a gap of 2 seconds)<br />tl.set(element, {left:100}, \"myLabel\");  //places it at \"myLabel\" (and if \"myLabel\" doesn't exist yet, it's added to the end and then the tween is inserted there)<br />tl.set(element, {left:100}, \"myLabel+=2\");  //places it 2 seconds after \"myLabel\"<br />         </pre>"}},"021452ff672b0275":{"meta":{"keywords":["js.TimelineLite.shiftChildren()"],"title":"shiftChildren()","description":"Shifts the startTime of the timeline&#039;s children by a certain amount and optionally adjusts labels too."},"header":{"content":"<p>Shifts the startTime of the timeline's children by a certain amount and optionally adjusts labels too.</p>"},"parameters":[{"name":"amount","data_type":"Number","description":"<p>Number of seconds (or frames for frames-based timelines) to move each child.</p>\n"},{"name":"adjustLabels","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, the timing of all labels will be adjusted as well.</p>\n"},{"name":"ignoreBeforeTime","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — All children that begin at or after the <code>startAtTime</code> will be affected by the shift (the default is 0, causing all children to be affected). This provides an easy way to splice children into a certain spot on the timeline, pushing only the children after that point back to make room.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Shifts the startTime of the timeline's children by a certain amount and optionally adjusts labels too. This can be useful when you want to prepend children or splice them into a certain spot, moving existing ones back to make room for the new ones.</p>"}},"c67479a40fbed683":{"meta":{"keywords":["js.TimelineLite.staggerFrom()"],"title":"staggerFrom()","description":"Tweens an array of targets from a common set of destination values (using the current values as the destination), but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code."},"header":{"content":"<p>Tweens an array of targets from a common set of destination values (using the current values as the destination), but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code.</p>"},"parameters":[{"name":"targets","data_type":"Array","description":"<p>An array of objects whose properties should be affected. When animating DOM elements, the targets can be: an array of elements, a jQuery object (or similar), or a CSS selector string like “.myClass” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if the timeline is frames-based)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the beginning value for each property that should be tweened as well as any special properties like <code>ease</code>. For example, to tween <code>left</code> from 100 and <code>top</code> from 200 for element1, element2, and element3, staggering their start time by 0.25 seconds and then call <code>myFunction</code> when they last one has finished, do this:<code>myTimeline.staggerFrom([element1, element2, element3], 1, {left:100, top:200}, 0.25, 0, null, myFunction})</code>.</p>\n","related_configuration_object":"980585c43a98afd0"},{"name":"stagger","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Amount of time in seconds (or frames if the timeline is frames-based) to stagger the start time of each tween. For example, you might want to have 5 objects move down 100 pixels while fading out, and stagger the start times by 0.2 seconds &#8211; you could do: <code>myTimeline.staggerTo([element1, element2, element3, element4, element5], 1, {top:\"+=100\", opacity:0}, 0.2)</code>.</p>\n"},{"name":"position","data_type":"*","description":"<p>(default = <code>+=0</code>)<code></code> — Controls the placement of the first tween in the timeline (by default, it&#8217;s the end of the timeline, like &#8220;+=0&#8221;). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a &#8220;+=&#8221; or &#8220;-=&#8221; prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after &#8220;myLabel&#8221; or <code>\"myLabel-=3\"</code> to insert it 3 seconds before &#8220;myLabel&#8221;. If you define a label that doesn&#8217;t exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween there which can be quite convenient. Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p>\n"},{"name":"onCompleteAll","data_type":"Function","description":"<p>(default = <code>null</code>)<code></code> — A function to call as soon as the entire sequence of tweens has completed</p>\n"},{"name":"onCompleteAllParams","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — An array of parameters to pass the <code>onCompleteAll</code> method.</p>\n"},{"name":"onCompleteScope","data_type":"*","description":"<p>The scope for the onCompleteAll function call (what &#8220;this&#8221; should refer to inside that function)</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Tweens an array of targets from a common set of destination values (using the current values as the destination), but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code. For example, let's say you have an array containing references to a bunch of text fields that you'd like to drop into place while fading in, all in a staggered fashion with 0.2 seconds between each tween's start time:<br /></p><pre class='pre-container prettyprint'><br />var textFields = [tf1, tf2, tf3, tf4, tf5];<br />myTimeline.staggerFrom(textFields, 1, {top:\"+=150\"}, 0.2);</pre><p><code>staggerFrom()</code> simply loops through the <code>targets</code> array and creates a <code>from()</code> tween for each object and then inserts it at the appropriate place on a new TimelineLite instance whose onComplete corresponds to the <code>onCompleteAll</code> (if you define one) and then appends that TimelineLite to the timeline (as a nested child).</p><p>Note that if you define an <code>onComplete</code> (or any callback for that matter) in the <code>vars</code> parameter, it will be called for each tween rather than the whole sequence. This can be very useful, but if you want to call a function after the entire sequence of tweens has completed, use the <code>onCompleteAll</code> parameter (the 6th parameter).</p><p>The 5th parameter is the <code>position</code> which controls the placement of the tweens in the timeline (by default, it's at the end of the timeline). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a \"+=\" or \"-=\" prefix to offset the insertion point relative to the END of the timeline. For example,<code>\"+=2\"</code> would place the first tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the first tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the first tween 2 seconds after \"myLabel\" or <code>\"myLabel-=3\"</code> to insert it 3 seconds before \"myLabel\". If you define a label that doesn't exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tweens which can be quite convenient.<br /></p><pre class='pre-container prettyprint'>tl.staggerFrom(myArray, 1, {left:100}, 0.25);  //appends to the end of the timeline<br /> tl.staggerFrom(myArray, 1, {left:100}, 0.25, 2);  //appends at exactly 2 seconds into the timeline (absolute position)<br /> tl.staggerFrom(myArray, 1, {left:100}, 0.25, \"+=2\");  //appends 2 seconds after the end (with a gap of 2 seconds)<br /> tl.staggerFrom(myArray, 1, {left:100}, 0.25, \"myLabel\");  //places at \"myLabel\" (and if \"myLabel\" doesn't exist yet, it's added to the end and then the tweens are inserted there)<br /> tl.staggerFrom(myArray, 1, {left:100}, 0.25, \"myLabel+=2\");  //places 2 seconds after \"myLabel\"</pre><p class=\"p1\">Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p><p>By default, <code>immediateRender</code> is <code>true</code> in <code>from()</code> tweens, meaning that they immediately render their starting state regardless of any delay that is specified. You can override this behavior by passing <code>immediateRender:false</code> in the <code>vars</code> parameter so that it will wait to render until the tween actually begins.</p><h2>Cycle through multiple values</h2><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/0HhjSPVuRHA?vq=hd720\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><p>Instead of defining a single value (like <code>x:100, rotation:90</code>), you can define an Array of values to cycle through (like <code>cycle:{x:[100,-100], rotation:[30,60,90]}</code>) or even use function-based values (like <code>cycle:{x:function() { return Math.random() * 200; }}</code>). The amount of functionality you can pack into a single line of code is staggering (pun intended).</p><p data-height=\"390\" data-theme-id=\"3984\" data-slug-hash=\"MKKJeB\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/MKKJeB/'>TimelineLite.staggerFrom() with Cycle</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><p>*note TimelineLite.staggerFrom() and TimelineMax.staggerFrom() use identical syntax.</p><h3>Parameters: index, target</h3><p>When defining cycle values with functions the functions are passed two parameters:</p><ol><li><strong>index</strong> <i>(integer)</i> - the target's position in the array of targets. For example, if there are 3 <code>&lt;div&gt;</code> elements with the class \".box\", and you <code>tl.staggerFrom(\".box\", ...)</code>, the function would get called 3 times (once for each target) and the index would be <code>0</code> first, then <code>1</code>, and finally <code>2</code>.</li><li><strong>target</strong> <i>(object)</i> - the target itself (the <code>&lt;div&gt;</code> element in this case)</li></ol><h3>Caveats</h3><ul><li>The <code>cycle</code> property is available only in the <code>staggerTo()</code>, <code>staggerFrom()</code>, and <code>staggerFromTo()</code> methods in TweenMax, TimelineLite and TimelineMax.</li><li>the cycle property is available in GSAP 1.18.0+</li></ul>"}},"f125e9affad597cc":{"meta":{"keywords":["js.TimelineLite.staggerFromTo()"],"title":"staggerFromTo()","description":"Tweens an array of targets from and to a common set of values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code."},"header":{"content":"<p>Tweens an array of targets from and to a common set of values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code.</p>"},"parameters":[{"name":"targets","data_type":"Array","description":"<p>An array of objects whose properties should be affected. When animating DOM elements, the targets can be: an array of elements, a jQuery object (or similar), or a CSS selector string like “.myClass” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if the timeline is frames-based)</p>\n"},{"name":"fromVars","data_type":"Object","description":"<p>An object defining the starting value for each property that should be tweened. For example, to tween <code>left</code> from 100 and <code>top</code> from 200, <code>fromVars</code> would look like this: <code>{left:100, top:200}</code>.</p>\n"},{"name":"toVars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like <code>ease</code>. For example, to tween <code>left</code> from 0 to 100 and <code>top</code> from 0 to 200, staggering the start times by 0.2 seconds and then call <code>myFunction</code> when they all complete, do this: <code>myTimeline.staggerFromTo([element1, element2, element3], 1, {left:0, top:0}, {left:100, top:200}, 0.2, 0, null, myFunction});</code></p>\n","related_configuration_object":"980585c43a98afd0"},{"name":"stagger","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Amount of time in seconds (or frames if the timeline is frames-based) to stagger the start time of each tween. For example, you might want to have 5 objects move down 100 pixels while fading out, and stagger the start times by 0.2 seconds &#8211; you could do: <code>myTimeline.staggerTo([element1, element2, element3, element4, element5], 1, {top:\"+=100\", opacity:0}, 0.2)</code>.</p>\n"},{"name":"position","data_type":"*","description":"<p>(default = <code>+=0</code>)<code></code> — Controls the placement of the first tween in the timeline (by default, it&#8217;s the end of the timeline, like &#8220;+=0&#8221;). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a &#8220;+=&#8221; or &#8220;-=&#8221; prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after &#8220;myLabel&#8221; or <code>\"myLabel-=3\"</code> to insert it 3 seconds before &#8220;myLabel&#8221;. If you define a label that doesn&#8217;t exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween there which can be quite convenient. Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p>\n"},{"name":"onCompleteAll","data_type":"Function","description":"<p>(default = <code>null</code>)<code></code> — A function to call as soon as the entire sequence of tweens has completed</p>\n"},{"name":"onCompleteAllParams","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — An array of parameters to pass the <code>onCompleteAll</code> method.</p>\n"},{"name":"onCompleteScope","data_type":"*","description":"<p>The scope for the onCompleteAll function call (what &#8220;this&#8221; should refer to inside that function)</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Tweens an array of targets from and to a common set of values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code. For example, let's say you have an array containing references to a bunch of text fields that you'd like to fade from opacity:1 to opacity:0 in a staggered fashion with 0.2 seconds between each tween's start time:</p><pre class='pre-container prettyprint'>var textFields = [tf1, tf2, tf3, tf4, tf5];<br />myTimeline.staggerFromTo(textFields, 1, {opacity:1}, {opacity:0}, 0.2);</pre><p><code>staggerFromTo()</code> simply loops through the <code>targets</code> array and creates a <code>fromTo()</code> tween for each object and then inserts it at the appropriate place on a new TimelineLite instance whose onComplete corresponds to the <code>onCompleteAll</code> (if you define one) and then appends that TimelineLite to the timeline (as a nested child).</p><p>Note that if you define an <code>onComplete</code> (or any callback for that matter) in the <code>vars</code> parameter, it will be called for each tween rather than the whole sequence. This can be very useful, but if you want to call a function after the entire sequence of tweens has completed, use the <code>onCompleteAll</code> parameter (the 7th parameter).</p><p>The 6th parameter is the <code>position</code> which controls the placement of the tweens in the timeline (by default, it's at the end of the timeline). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a \"+=\" or \"-=\" prefix to offset the insertion point relative to the END of the timeline. For example,<code>\"+=2\"</code> would place the first tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the first tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the first tween 2 seconds after \"myLabel\" or <code>\"myLabel-=3\"</code> to insert it 3 seconds before \"myLabel\". If you define a label that doesn't exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tweens there which can be quite convenient.<br /></p><pre class='pre-container prettyprint'>tl.staggerFromTo(myArray, 1, {left:0}, {left:100}, 0.25);  //appends to the end of the timeline<br />tl.staggerFromTo(myArray, 1, {left:0}, {left:100}, 0.25, 2);  //appends at exactly 2 seconds into the timeline (absolute position)<br />tl.staggerFromTo(myArray, 1, {left:0}, {left:100}, 0.25, \"+=2\");  //appends 2 seconds after the end (with a gap of 2 seconds)<br />tl.staggerFromTo(myArray, 1, {left:0}, {left:100}, 0.25, \"myLabel\");  //places at \"myLabel\" (and if \"myLabel\" doesn't exist yet, it's added to the end and then the tweens are inserted there)<br />tl.staggerFromTo(myArray, 1, {left:0}, {left:100}, 0.25, \"myLabel+=2\");  //places 2 seconds after \"myLabel\"</pre><p class=\"p1\">Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p><p><b>NOTE:</b> by default, <code>immediateRender</code> is <code>true</code> in <code>staggerFromTo()</code> tweens, meaning that they immediately render their starting state regardless of any delay that is specified. This is done for convenience because it is often the preferred behavior when setting things up on the screen to animate into place, but you can override this behavior by passing<code>immediateRender:false</code> in the <code>fromVars</code> or <code>toVars</code> parameter so that it will wait to render the starting values until the tweens actually begin.</p><h2>Cycle through multiple values</h2><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/0HhjSPVuRHA?vq=hd720\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><p>Instead of defining a single value (like <code>x:100, rotation:90</code>), you can define an Array of values to cycle through (like <code>cycle:{x:[100,-100], rotation:[30,60,90]}</code>) or even use function-based values (like <code>cycle:{x:function() { return Math.random() * 200; }}</code>). The amount of functionality you can pack into a single line of code is staggering (pun intended).</p><p data-height=\"390\" data-theme-id=\"3984\" data-slug-hash=\"QyydjO\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/QyydjO/'>TimelineMax.staggerFromTo() with Cycle</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><p>*note TimelineLite.staggerFromTo() and TimelineMax.staggerFromTo() use identical syntax.</p><h3>Parameters: index, target</h3><p>When defining cycle values with functions the functions are passed two parameters:</p><ol><li><strong>index</strong> <i>(integer)</i> - the target's position in the array of targets. For example, if there are 3 <code>&lt;div&gt;</code> elements with the class \".box\", and you <code>tl.staggerFromTo(\".box\", ...)</code>, the function would get called 3 times (once for each target) and the index would be <code>0</code> first, then <code>1</code>, and finally <code>2</code>.</li><li><strong>target</strong> <i>(object)</i> - the target itself (the <code>&lt;div&gt;</code> element in this case)</li></ol><h3>Caveats</h3><ul><li>The <code>cycle</code> property is available only in the <code>staggerTo()</code>, <code>staggerFrom()</code>, and <code>staggerFromTo()</code> methods in TweenMax, TimelineLite and TimelineMax.</li><li>the cycle property is available in GSAP 1.18.0+</li></ul>"}},"85fd7bd3a68921cd":{"meta":{"keywords":["js.TimelineLite.staggerTo()"],"title":"staggerTo()","description":"Tweens an array of targets to a common set of destination values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code."},"header":{"content":"<p>Tweens an array of targets to a common set of destination values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code.</p>"},"parameters":[{"name":"targets","data_type":"Array","description":"<p>An array of objects whose properties should be affected. When animating DOM elements, the targets can be: an array of elements, a jQuery object (or similar), or a CSS selector string like “.myClass” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if the timeline is frames-based)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like <code>ease</code>. For example, to tween <code>left</code> to 100 and <code>top</code>to 200 for element1, element2, and element3, staggering their start time by 0.25 seconds and then call <code>myFunction</code> when they last one has finished, do this:<code>myTimeline.staggerTo([element1, element2, element3], 1, {left:100, top:200}, 0.25, 0, null, myFunction})</code>.</p>\n","related_configuration_object":"980585c43a98afd0"},{"name":"stagger","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Amount of time in seconds (or frames if the timeline is frames-based) to stagger the start time of each tween. For example, you might want to have 5 objects move down 100 pixels while fading out, and stagger the start times by 0.2 seconds &#8211; you could do: <code>myTimeline.staggerTo([element1, element2, element3, element4, element5], 1, {top:\"+=100\", opacity:0}, 0.2)</code>.</p>\n"},{"name":"position","data_type":"*","description":"<p>(default = <code>+=0</code>)<code></code> — Controls the placement of the first tween in the timeline (by default, it&#8217;s the end of the timeline, like &#8220;+=0&#8221;). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a &#8220;+=&#8221; or &#8220;-=&#8221; prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after &#8220;myLabel&#8221; or <code>\"myLabel-=3\"</code> to insert it 3 seconds before &#8220;myLabel&#8221;. If you define a label that doesn&#8217;t exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween there which can be quite convenient. Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p>\n"},{"name":"onCompleteAll","data_type":"Function","description":"<p>(default = <code>null</code>)<code></code> — A function to call as soon as the entire sequence of tweens has completed</p>\n"},{"name":"onCompleteAllParams","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — An array of parameters to pass the <code>onCompleteAll</code> method.</p>\n"},{"name":"onCompleteScope","data_type":"*","description":"<p>The scope for the onCompleteAll function call (what &#8220;this&#8221; should refer to inside that function)</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Tweens an array of targets to a common set of destination values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code. For example, let's say you have an array containing references to a bunch of text fields that you'd like to fall away and fade out in a staggered fashion with 0.2 seconds between each tween's start time:</p><pre class='pre-container prettyprint'>var textFields = [tf1, tf2, tf3, tf4, tf5];<br />myTimeline.staggerTo(textFields, 1, {top:\"+=150\", ease:CubicIn.ease}, 0.2);</pre><p><code>staggerTo()</code> simply loops through the <code>targets</code> array and creates a <code>to()</code> tween for each object and then inserts it at the appropriate place on a new TimelineLite instance whose onComplete corresponds to the <code>onCompleteAll</code> (if you define one) and then appends that TimelineLite to the timeline (as a nested child).</p><p>Note that if you define an <code>onComplete</code> (or any callback for that matter) in the <code>vars</code> parameter, it will be called for each tween rather than the whole sequence. This can be very useful, but if you want to call a function after the entire sequence of tweens has completed, use the <code>onCompleteAll</code> parameter (the 6th parameter).</p><p>The 5th parameter is the <code>position</code> which controls the placement of the tweens in the timeline (by default, it's at the end of the timeline). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a \"+=\" or \"-=\" prefix to offset the insertion point relative to the END of the timeline. For example,<code>\"+=2\"</code> would place the first tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the first tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the first tween 2 seconds after \"myLabel\" or <code>\"myLabel-=3\"</code> to insert it 3 seconds before \"myLabel\". If you define a label that doesn't exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tweens which can be quite convenient.<br /></p><pre class='pre-container prettyprint'>tl.staggerTo(myArray, 1, {left:100}, 0.25);  //appends to the end of the timeline<br />tl.staggerTo(myArray, 1, {left:100}, 0.25, 2);  //appends at exactly 2 seconds into the timeline (absolute position)<br />tl.staggerTo(myArray, 1, {left:100}, 0.25, \"+=2\");  //appends 2 seconds after the end (with a gap of 2 seconds)<br />tl.staggerTo(myArray, 1, {left:100}, 0.25, \"myLabel\");  //places at \"myLabel\" (and if \"myLabel\" doesn't exist yet, it's added to the end and then the tweens are inserted there)<br />tl.staggerTo(myArray, 1, {left:100}, 0.25, \"myLabel+=2\");  //places 2 seconds after \"myLabel\"</pre><p class=\"p1\">Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p><p class=\"codepen\" data-height=\"260\" data-theme-id=\"3984\" data-slug-hash=\"JwfvL\" data-default-tab=\"result\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/JwfvL/\">TimelineLite.staggerTo()</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script src=\"http://codepen.io/assets/embed/ei.js\" async=\"\"></script></p><h2>Cycle through multiple values</h2><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/0HhjSPVuRHA?vq=hd720\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><p>Instead of defining a single value (like <code>x:100, rotation:90</code>), you can define an Array of values to cycle through (like <code>cycle:{x:[100,-100], rotation:[30,60,90]}</code>) or even use function-based values (like <code>cycle:{x:function() { return Math.random() * 200; }}</code>). The amount of functionality you can pack into a single line of code is staggering (pun intended).</p><p data-height=\"390\" data-theme-id=\"3984\" data-slug-hash=\"wMMgoe\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/wMMgoe/'>TimelineMax.staggerTo() with Cycle</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><p>*note TimelineLite.staggerTo() and TimelineMax.staggerTo() use identical syntax.</p><h3>Parameters: index, target</h3><p>When defining cycle values with functions the functions are passed two parameters:</p><ol><li><strong>index</strong> <i>(integer)</i> - the target's position in the array of targets. For example, if there are 3 <code>&lt;div&gt;</code> elements with the class \".box\", and you <code>tl.staggerTo(\".box\", ...)</code>, the function would get called 3 times (once for each target) and the index would be <code>0</code> first, then <code>1</code>, and finally <code>2</code>.</li><li><strong>target</strong> <i>(object)</i> - the target itself (the <code>&lt;div&gt;</code> element in this case)</li></ol><h3>Caveats</h3><ul><li>The <code>cycle</code> property is available only in the <code>staggerTo()</code>, <code>staggerFrom()</code>, and <code>staggerFromTo()</code> methods in TweenMax, TimelineLite and TimelineMax.</li><li>the cycle property is available in GSAP 1.18.0+</li></ul>"}},"dd5daf294b523c5b":{"meta":{"keywords":["js.TimelineLite.to()"],"title":"to()","description":"Adds a TweenLite.to() tween to the end of the timeline (or elsewhere using the &quot;position&quot; parameter) - this is a convenience method that accomplishes exactly the same thing as add( TweenLite.to(...) ) but with less code."},"header":{"content":"<p>Adds a TweenLite.to() tween to the end of the timeline (or elsewhere using the \"position\" parameter) - this is a convenience method that accomplishes exactly the same thing as add( TweenLite.to(...) ) but with less code.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties should be affected. When animating DOM elements, the target can be: a single element, an array of elements, a jQuery object (or similar), or a CSS selector string like “#feature” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if the timeline is frames-based)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like <code>onComplete</code>, <code>ease</code>, etc. For example, to tween element&#8217;s <code>left</code> to 100 and element&#8217;s <code>top</code> to 200 and then call <code>myFunction</code>, do this: <code>myTimeline.to(element, 1, {left:100, top:200, onComplete:myFunction})</code>.</p>\n"},{"name":"position","data_type":"*","description":"<p>(default = <code>+=0</code>)<code></code> — Controls the placement of the tween in the timeline (by default, it&#8217;s the end of the timeline, like &#8220;+=0&#8221;). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a &#8220;+=&#8221; or &#8220;-=&#8221; prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after &#8220;myLabel&#8221; or <code>\"myLabel-=3\"</code> to insert it 3 seconds before &#8220;myLabel&#8221;. If you define a label that doesn&#8217;t exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween there which can be quite convenient. Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Adds a <code>TweenLite.to()</code> tween to the end of the timeline (or elsewhere using the \"position\" parameter) - this is a convenience method that accomplishes exactly the same thing as <code>add( TweenLite.to(...) )</code> but with less code. In other words, the following two lines produce identical results:</p><pre class='pre-container prettyprint'>myTimeline.add( TweenLite.to(element, 1, {left:100, opacity:0.5}) );<br />myTimeline.to(element, 1, {left:100, opacity:0.5});</pre><p>Keep in mind that you can chain these calls together and use other convenience methods like <code>fromTo(), call(), set(), staggerTo()</code>, etc. to build out sequences very quickly:<br /></p><pre class='pre-container prettyprint'>//create a timeline that calls myFunction() when it completes<br />var tl = new TimelineLite({onComplete:myFunction});<br /> <br />tl.to(element, 1, {left:100})        //tween element's \"left\" property to 100<br />  .to(element, 1, {top:50}, \"-=0.25\")    //then tween element's \"top\" property to 50, starting 0.25 seconds before the previous one ends<br />  .set(element, {opacity:0})        //then set element's opacity to 0.5 immediately<br />  .call(otherFunction)        //then call otherFunction()<br />  .staggerTo([e1, e2, e3], 1.5, {rotation:45}, 0.25); //finally tween the rotation of e1, e2, and e3 to 45 and stagger the start times by 0.25 seconds</pre><p>If you don't want to append the tween and would rather have precise control of the insertion point, you can use the additional <code>position</code> parameter. Or use a regular <code>add()</code> like<code>tl.add( TweenLite.to(element, 1, {left:100}), 2.75)</code>.</p><p>The 4th parameter is the <code>position</code> which controls the placement of the tween in the timeline (by default, it's at the end of the timeline). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a \"+=\" or \"-=\" prefix to offset the insertion point relative to the END of the timeline. For example,<code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after \"myLabel\" or <code>\"myLabel-=3\"</code> to insert it 3 seconds before \"myLabel\". If you define a label that doesn't exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween which can be quite convenient.<br /></p><pre class='pre-container prettyprint'>tl.to(element, 1, {left:100});  //adds to the end of the timeline<br />tl.to(element, 1, {left:100}, 2);  //adds it at exactly 2 seconds into the timeline (absolute position)<br />tl.to(element, 1, {left:100}, \"+=2\");  //adds it 2 seconds after the end (with a gap of 2 seconds)<br />tl.to(element, 1, {left:100}, \"myLabel\");  //places it at \"myLabel\" (and if \"myLabel\" doesn't exist yet, it's added to the end and then the tween is inserted there)<br />tl.to(element, 1, {left:100}, \"myLabel+=2\");  //places it 2 seconds after \"myLabel\"</pre>"}},"e6e77ed616cdbcd0":{"meta":{"keywords":["js.TimelineLite.totalDuration()"],"title":"totalDuration()","description":"[override] Gets the timeline&#039;s total duration or, if used as a setter, adjusts the timeline&#039;s timeScale to fit it within the specified duration."},"header":{"content":"<p>[override] Gets the timeline's total duration or, if used as a setter, adjusts the timeline's timeScale to fit it within the specified duration.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Gets the timeline's <b>total</b> duration or, if used as a setter, adjusts the timeline's <code>timeScale</code> to fit it within the specified duration. For example, if a TimelineMax instance has a <code>duration</code> of 2 and a <code>repeat</code> of 3, its <code>totalDuration</code> would be 8 (one standard play plus 3 repeats equals 4 total cycles).</p><p>Due to the fact that a timeline's <code>totalDuration</code> is dictated by its contents, using this method as a setter will simply cause the <code>timeScale</code> to be adjusted to fit the current contents into the specified <code>totalDuration</code>. For example, if there are 20-seconds worth of tweens in the timeline and you do <code>myTimeline.totalDuration(10)</code>, the <code>timeScale</code> would be changed to 2. If you checked the <code>totalDuration</code> again immediately after that, it would still return 20 because technically that is how long all the child tweens/timelines are but upon playback the speed would be doubled because of the <code>timeScale</code>.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myAnimation.totalDuration(2).play(1);</code><br /></p><pre class='pre-container prettyprint'>var ctd = myAnimation.totalDuration(); //gets current total duration<br />myAnimation.totalDuration( 20 ); //adjusts the timeScale so that myAnimation fits into exactly 20 seconds on its parent timeline</pre>"}},"d3b7ad527e13b7fa":{"meta":{"keywords":["js.TimelineLite.useFrames()"],"title":"useFrames()","description":"[READ-ONLY] If true, the timeline&#039;s timing mode is frames-based instead of seconds."},"header":{"content":"<p>[READ-ONLY] If true, the timeline's timing mode is frames-based instead of seconds.</p>"},"parameters":[],"returns":{"type":"Boolean","content":""},"details":{"content":"<p>[READ-ONLY] If true, the timeline's timing mode is frames-based instead of seconds. This can only be set to true by passing useFrames:true in the vars parameter of the constructor, or by nesting this timeline in another whose timing mode is frames-based. An animation's timing mode is always determined by its parent timeline).</p>"}},"32bc2e8f667c28b7":{"meta":{"keywords":["js.TimelineMax","Animation","Sequencing"],"title":"TimelineMax","description":"TimelineMax extends TimelineLite, offering exactly the same functionality plus useful (but non-essential) features like repeat, repeatDelay, yoyo, currentLabel(), tweenTo(), tweenFromTo(), getLabelAfter(), getLabelBefore(), getActive() and more."},"header":{"content":"<p>TimelineMax extends TimelineLite, offering exactly the same functionality plus useful (but non-essential) features like repeat, repeatDelay, yoyo, currentLabel(), addCallback(), removeCallback(), tweenTo(), tweenFromTo(), getLabelAfter(), getLabelBefore(), getActive() (and probably more in the future). It is the ultimate sequencing tool that acts like a container for tweens and other timelines, making it simple to control them as a whole and precisely manage their timing. Without TimelineMax, building complex sequences would be far more cumbersome because you'd need to use the <code>delay</code> special property for every tween which would make future edits far more tedious. Here is a basic example:<br /></p><pre class='pre-container prettyprint'>TweenLite.to(element, 1, {left:100});<br />TweenLite.to(element, 1, {top:50, delay:1});<br />TweenLite.to(element, 1, {opacity:0, delay:2});</pre><p>The above code animates the element's \"left\" css property to 100, then \"top\" to 50, and finally \"opacity\" to 0 (notice the <code>delay</code> in all but the first tween). But what if you wanted to increase the duration of the first tween to 1.5? You'd need to adjust every delay thereafter. And what if you want to <code>pause()</code> the whole sequence or <code>restart()</code> it or <code>reverse()</code> it on-the-fly or repeat it twice? This becomes quite messy (or flat-out impossible), but TimelineMax makes it incredibly simple:<br /></p><pre class='pre-container prettyprint'>var tl = new TimelineMax({repeat:2, repeatDelay:1});<br />tl.add( TweenLite.to(element, 1, {left:100}) );<br />tl.add( TweenLite.to(element, 1, {top:50}) );<br />tl.add( TweenLite.to(element, 1, {opacity:0}) );<br /> <br />//then later, control the whole thing...<br />tl.pause();<br />tl.resume();<br />tl.seek(1.5);<br />tl.reverse();<br />...</pre><p>Or use the convenient <code>to()</code> method and chaining to make it even shorter:<br /></p><pre class='pre-container prettyprint'>var tl = new TimelineMax();<br />tl.to(element, 1, {left:100}).to(element, 1, {top:50}).to(element, 1, {opacity:0});</pre><p>Now you can feel free to adjust any of the tweens without worrying about trickle-down changes to delays. Increase the duration of that first tween and everything automatically adjusts.</p><p><strong>Here are some other benefits and features of TimelineMax:</strong></p><ul><li>Things can overlap on the timeline as much as you want. You have complete control over where tweens/timelines are placed. Most other animation tools can only do basic one-after-the-other sequencing but can't allow things to overlap. Imagine appending a tween that moves an object and you want it to start fading out 0.5 seconds before the end of that tween? With TimelineMax it's easy.</li><li>Add labels, callbacks, play(), stop(), seek(), restart(), and even reverse() smoothly anytime.</li><li>Nest timelines within timelines as deeply as you want. This means you can modularize your code and make it far more efficient. Imagine building your app with common animateIn() and animateOut() methods that return a tween or timeline instance, then you can string things together like <code>myTimeline.add( myObject.animateIn() ).add( myObject.animateOut(), \"+=4\").add( myObject2.animateIn(), \"-=0.5\")...</code></li><li>Speed up or slow down the entire timeline with its <code>timeScale()</code> method. You can even tween it to gradually speed up or slow down the animation smoothly.</li><li>Get or set the progress of the timeline using its <code>progress()</code> or <code>totalProgress()</code> methods. For example, to skip to the halfway point, set <code>myTimeline.progress(0.5);</code></li><li>Tween the <code>time(), totalTime(), progress(),</code> or <code>totalProgress()</code> to fastforward/rewind the timeline. You could even attach a slider to one of these to give the user the ability to drag forward/backward through the timeline.</li><li>Add <code>onComplete, onStart, onUpdate, onRepeat</code> and/or <code>onReverseComplete</code> callbacks using the constructor's <code>vars</code> object like <code>var tl = new TimelineMax({onComplete:myFunction});</code></li><li>Kill the tweens of a particular object inside the timeline with <code>kill(null, target)</code> or get the tweens of an object with <code>getTweensOf()</code> or get all the tweens/timelines in the timeline with <code>getChildren()</code></li><li>Set the timeline to repeat any number of times or indefinitely. You can even set a delay between each repeat cycle and/or cause the repeat cycles to yoyo, appearing to reverse direction every other cycle.</li><li>get the active tweens in the timeline with getActive().</li><li>By passing <code>useFrames:true</code> in the <code>vars</code> parameter, you can base the timing on frames instead of seconds. Please note, however, that the timeline's timing mode dictates its childrens' timing mode as well.</li><li>Get the <code>currentLabel()</code> or find labels at various positions in the timeline using <code>getLabelAfter()</code> and <code>getLabelBefore()</code></li><li>You can export all the tween/timelines from the root (master) timeline anytime into a TimelineLite instance using <code>TimelineLite.exportRoot()</code> so that you can <code>pause()</code> them all or<code>reverse()</code> or alter their <code>timeScale</code>, etc. without affecting tweens/timelines that you create in the future. Imagine a game that has all its animation driven by the GreenSock Animation Platform and it needs to pause or slow down while a status screen pops up. Very easy.</li></ul><p><b>Special Properties and Callbacks</b></p><p><span style=\"line-height: 1.5em;\">You can optionally use the constructor's </span><code style=\"line-height: 1.5em;\">vars</code><span style=\"line-height: 1.5em;\"> parameter to configure a TimelineMax with a variety of options.</span></p><pre class='pre-container prettyprint'>new TimelineMax({onComplete:myFunction, repeat:2, repeatDelay:1, yoyo:true});</pre><p>All TimelineMax vars' properties are described below.</p><p>[config id=\"7bd7f88198b01fd3\"]</p><p><code></code>Sample code:</p><pre class='pre-container prettyprint'>//create the timeline that repeats 3 times with 1 second between each repeat and then calls myFunction() when it completes<br />var tl = new TimelineMax({repeat:3, repeatDelay:1, onComplete:myFunction});<br />//add a tween<br />tl.add( TweenLite.to(element, 1, {left:200, top:100}) );<br />        <br />//add another tween at the end of the timeline (makes sequencing easy)<br />tl.add( TweenLite.to(element, 0.5, {opacity:0}) );<br /> <br />//append a tween using the convenience method to() (shorter syntax) and offset it by 0.5 seconds<br />tl.to(element, 1, {rotation:30}, \"+=0.5\");<br />         <br />//reverse anytime<br />tl.reverse();<br />//Add a \"spin\" label 3-seconds into the timeline<br />tl.addLabel(\"spin\", 3);<br />//insert a rotation tween at the \"spin\" label (you could also define the insertion point as the time instead of a label)<br />tl.add( new TweenLite(element, 2, {rotation:\"+=360\"}), \"spin\");<br />    <br />//go to the \"spin\" label and play the timeline from there<br />tl.play(\"spin\");<br />//nest another TimelineMax inside your timeline...<br />var nested = new TimelineMax();<br />nested.to(element2, 1, {left:200}));<br />tl.add(nested);</pre><p><b>How do timelines work? What are the mechanics like?</b></p><p>Every animation (tween and timeline) is placed on a parent timeline (except the 2 root timelines - there's one for normal tweens and another for \"useFrames\" ones). In a sense, they all have their own playheads (that's what its \"time\" refers to, or \"totalTime\" which is identical except that it includes repeats and repeatDelays) but generally they're not independent because they're sitting on a timeline whose playhead moves. When the parent's playhead moves to a new position, it updates the childrens' too.</p><p>When a timeline renders at a particular time, it loops through its children and says \"okay, you should render as if your playhead is at ____\" and if that child is a timeline with children, it does the same to its children, right on down the line.</p><p>The only exception is when the tween/timeline is paused in which case its internal playhead acts like it's \"locked\". So in that case, it's possible (likely in fact) that the child's playhead would<b>not</b> be synced with the parent's. When you unpause it (<code>resume()</code>), it essentially picks it up and moves it so that its internal playhead is synchronized with wherever the parent's playhead is at that moment, thus things play perfectly smoothly. That is, unless the timeline's <code>smoothChildTiming</code> is to <code>false</code> in which case it won't move - its <code>startTime</code> will remain locked to where it was.</p><p>So basically, when <code>smoothChildTiming</code> is <code>true</code>, the engine will rearrange things on the fly to ensure the playheads line up so that playback is seamless and smooth. The same thing happens when you <code>reverse()</code> or alter the <code>timeScale</code>, etc. But sometimes you might not want that behavior - you prefer to have tight control over exactly where your tweens line up in the timeline - that's when <code>smoothChildTiming:false</code> is handy.</p><p>One more example: let's say you've got a 10-second tween that's just sitting on the root timeline and you're 2-seconds into the tween. Let's assume it started at exactly 0 on the root to make this easy, and then when it's at 2-seconds, you do <code>tween.seek(5)</code>. The playhead of the root isn't affected - it keeps going exactly as it always did, but in order to make that tween jump to 5 seconds and play appropriately, the tween's <code>startTime</code> gets changed to -3. That way, the tween's playhead and the root playhead are perfectly aligned.</p>"}},"7d83cb2ee0afc5e8":{"meta":{"keywords":["js.TimelineMax.TimelineMax()"],"title":"TimelineMax()","description":"Constructor."},"header":{"content":"<p>Constructor.</p>"},"parameters":[{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — The <code>vars</code> parameter allows you to configure a TimelineMax with a variety of options using the following syntax:</p>\n<p><code>new TimelineMax({repeat:1, onRepeat:repeatHandler, paused:true});</code></p>\n<p>&nbsp;</p>\n","related_configuration_object":"7bd7f88198b01fd3"}],"returns":{},"details":{"content":"<p>Constructor used to instantiate a new TimelineMax instance.</p>"}},"bec60f6cd60ff057":{"meta":{"keywords":["js.TimelineMax.addCallback()"],"title":"addCallback()","description":"Inserts a callback at a particular position."},"header":{"content":"<p>Inserts a callback at a particular position.</p>"},"parameters":[{"name":"callback","data_type":"Function","description":"<p>The function to be called</p>\n"},{"name":"position","data_type":"*","description":"<p>The time in seconds (or frames for frames-based timelines) or label at which the callback should be inserted. For example, <code>myTimeline.addCallback(myFunction, 3)</code> would call myFunction() 3 seconds into the timeline, and <code>myTimeline.addCallback(myFunction, \"myLabel\")</code> would call it at the &#8220;myLabel&#8221; label.<code>myTimeline.addCallback(myFunction, \"+=2\")</code> would insert the callback 2 seconds after the end of the timeline.</p>\n"},{"name":"params","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — An Array of parameters to pass the callback</p>\n"},{"name":"scope","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The scope in which the callback should be called (basically, what &#8220;this&#8221; refers to in the function). NOTE: this parameter only pertains to the JavaScript and AS2 versions; it is omitted in AS3.</p>\n"}],"returns":{"type":"TimelineMax","content":"<p>self (makes chaining easier)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Inserts a callback at a particular position. The callback is technically considered a zero-duration tween, so if you <code>getChildren()</code> there will be a tween returned for each callback. You can discern a callback from other tweens by the fact that its target is a function matching its <code>vars.onComplete</code> and its <code>duration</code> is zero.</p><p>If your goal is to append the callback to the end of the timeline, it would be easier (more concise) to use the <code>call()</code> method. Technically the <code>add()</code> method can accommodate adding a callback too (like <code>myTimeline.add(myFunction, 2)</code> or <code>myTimeline.add(myFunction, \"+=2\")</code>) but <code>add()</code> doesn't accommodate parameters.</p>"}},"6265da364503c653":{"meta":{"keywords":["js.TimelineMax.currentLabel()"],"title":"currentLabel()","description":"Gets the closest label that is at or before the current time, or jumps to a provided label (behavior depends on whether or not you pass a parameter to the method)."},"header":{"content":"<p>Gets the closest label that is at or before the current time, or jumps to a provided label (behavior depends on whether or not you pass a parameter to the method).</p>"},"parameters":[{"name":"value","data_type":"String","description":"<p>(default = <code>null</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Gets the closest label that is at or before the current time, or jumps to a provided label (behavior depends on whether or not you pass a parameter to the method).</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>"}},"10d088592b8a6983":{"meta":{"keywords":["js.TimelineMax.getActive()"],"title":"getActive()","description":"Returns the tweens/timelines that are currently active in the timeline, meaning the timeline&#039;s playhead is positioned on the child tween/timeline and the child isn&#039;t paused."},"header":{"content":"<p>Returns the tweens/timelines that are currently active in the timeline, meaning the timeline's playhead is positioned on the child tween/timeline and the child isn't paused.</p>"},"parameters":[{"name":"nested","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — Determines whether or not tweens and/or timelines that are inside nested timelines should be returned. If you only want the &#8220;top level&#8221; tweens/timelines, set this to <code>false</code>.</p>\n"},{"name":"tweens","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — Determines whether or not tweens (TweenLite and TweenMax instances) should be included in the results</p>\n"},{"name":"timelines","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — Determines whether or not child timelines (TimelineLite and TimelineMax instances) should be included in the results</p>\n"}],"returns":{"type":"Array","content":"<p>an Array of active tweens/timelines</p>\n"},"details":{"content":"<p>Returns the tweens/timelines that are currently active in the timeline, meaning the timeline's playhead is positioned on the child tween/timeline and the child isn't paused.</p>"}},"05f5280e21743f35":{"meta":{"keywords":["js.TimelineMax.getLabelAfter()"],"title":"getLabelAfter()","description":"Returns the next label (if any) that occurs after the time parameter."},"header":{"content":"<p>Returns the next label (if any) that occurs after the time parameter.</p>"},"parameters":[{"name":"time","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Time after which the label is searched for. If you do not pass a time in, the current time will be used.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"String","content":"<p>Name of the label that is after the time passed to getLabelAfter()</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Returns the next label (if any) that occurs <b>after</b> the <code>time</code> parameter. It makes no difference if the timeline is reversed (\"after\" means later in the timeline's local time zone). A label that is positioned exactly at the same time as the <code>time</code> parameter will be ignored.</p><p>You could use <code>getLabelAfter()</code> in conjunction with <code>tweenTo()</code> to make the timeline tween to the next label like this:<br /></p><pre class='pre-container prettyprint'>myTimeline.tweenTo( myTimeline.getLabelAfter() );</pre>"}},"38ba67959f173bc5":{"meta":{"keywords":["js.TimelineMax.getLabelBefore()"],"title":"getLabelBefore()","description":"Returns the previous label (if any) that occurs before the time parameter."},"header":{"content":"<p>Returns the previous label (if any) that occurs before the time parameter.</p>"},"parameters":[{"name":"time","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Time before which the label is searched for. If you do not pass a time in, the current time will be used.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"String","content":"<p>Name of the label that is before the time passed to getLabelBefore()</p>\n"},"details":{"content":"<p>Returns the previous label (if any) that occurs <b>before</b> the <code>time</code> parameter. It makes no difference if the timeline is reversed (\"before\" means earlier in the timeline's local time zone). A label that is positioned exactly at the same time as the <code>time</code> parameter will be ignored.</p><p>You could use <code>getLabelBefore()</code> in conjunction with <code>tweenTo()</code> to make the timeline tween back to the previous label like this:<br /></p><pre class='pre-container prettyprint'>myTimeline.tweenTo( myTimeline.getLabelBefore() );</pre>"}},"22c0e0776a5fa894":{"meta":{"keywords":["js.TimelineMax.getLabelsArray()"],"title":"getLabelsArray()","description":"Returns an Array of label objects, each with a &quot;time&quot; and &quot;name&quot; property, in the order that they occur in the timeline."},"header":{"content":"<p>Returns an Array of label objects, each with a \"time\" and \"name\" property, in the order that they occur in the timeline.</p>"},"parameters":[],"returns":{"type":"Array","content":"<p>An array of generic objects (one for each label) with a &#8220;name&#8221; property and a &#8220;time&#8221; property in the order they occur in the TimelineMax.</p>\n"},"details":{"content":"<p>Returns an Array of label objects, each with a \"time\" and \"name\" property, in the order that they occur in the timeline. For example, to loop through all the labels in order and <code>console.log()</code> them to the screen:</p><div><pre class='pre-container prettyprint'>var labels = myTimeline.getLabelsArray();<br />for (var i = 0; i < labels.length; i++) {<br />    console.log(\"label name: \" + labels[i].name + \", time: \" + labels[i].time);<br />}</pre></div><p>Note: changing the values in this array will have no effect on the actual labels inside the TimelineMax. To add/remove labels, use the corresponding methods (<code>addLabel(), removeLabel()</code>).</p>"}},"7ae217fd46c941b8":{"meta":{"keywords":["js.TimelineMax.invalidate()"],"title":"invalidate()","description":"[override] Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values."},"header":{"content":"<p>[override] Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values.</p>"},"parameters":[],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values. When you <code>invalidate()</code> an animation, it will be re-initialized the next time it renders and its <code>vars</code> object will be re-parsed. The timing of the animation (duration, startTime, delay) will not be affected.</p><p>Another example would be if you have a <code>TweenMax(mc, 1, {x:100, y:100})</code> that ran when mc.x and mc.y were initially at 0, but now mc.x and mc.y are 200 and you want them tween to 100 again, you could simply <code>invalidate()</code> the tween and <code>restart()</code> it. Without invalidating first, restarting it would cause the values jump back to 0 immediately (where they started when the tween originally began). When you invalidate a TimelineLite/TimelineMax, it automatically invalidates all of its children.</p>"}},"e87195ea10d96698":{"meta":{"keywords":["js.TimelineMax.progress()"],"title":"progress()","description":"[override] Gets or sets the timeline&#039;s progress which is a value between 0 and 1 indicating the position of the virtual playhead (excluding repeats) where 0 is at the beginning, 0.5 is halfway complete, and 1 is complete."},"header":{"content":"<p>[override] Gets or sets the timeline's progress which is a value between 0 and 1 indicating the position of the virtual playhead (excluding repeats) where 0 is at the beginning, 0.5 is halfway complete, and 1 is complete.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p><code>Boolean</code> (default = <code>false</code>)<code></code> — If <code>true</code>, no events or callbacks will be triggered when the playhead moves to the new position.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Gets or sets the timeline's progress which is a value between 0 and 1 indicating the position of the virtual playhead (<b>excluding</b> repeats) where 0 is at the beginning, 0.5 is halfway complete, and 1 is complete. If the timeline has a non-zero <code>repeat</code> defined, <code>progress</code> and <code>totalProgress</code> will be different because <code>progress</code> doesn't include any repeats or repeatDelays whereas <code>totalProgress</code> does. For example, if a TimelineMax instance is set to repeat once, at the end of the first cycle <code>totalProgress</code> would only be 0.5 whereas<code>progress</code> would be 1. If you watched both properties over the course of the entire animation, you'd see <code>progress</code> go from 0 to 1 twice (once for each cycle) in the same time it takes the <code>totalProgress</code> to go from 0 to 1 once.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myTimeline.progress(0.5).play();</code><br /></p><pre class='pre-container prettyprint'>var progress = myTimeline.progress(); //gets current progress<br />myTimeline.progress( 0.25 ); //sets progress to one quarter finished</pre>"}},"ba03755004151a9a":{"meta":{"keywords":["js.TimelineMax.removeCallBack()"],"title":"removeCallback()","description":"Removes a callback from a particular position."},"header":{"content":"<p>Removes a callback from a particular position.</p>"},"parameters":[{"name":"callback","data_type":"Function","description":"<p>callback function to be removed</p>\n"},{"name":"timeOrLabel","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — the time in seconds (or frames for frames-based timelines) or label from which the callback should be removed. For example,<code>myTimeline.removeCallback(myFunction, 3)</code> would remove the callback from 3-seconds into the timeline, and <code>myTimeline.removeCallback(myFunction, \"myLabel\")</code>would remove it from the &#8220;myLabel&#8221; label, and <code>myTimeline.removeCallback(myFunction, null)</code> would remove ALL callbacks of that function regardless of where they are on the timeline.</p>\n"}],"returns":{"type":"TimelineMax","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Removes a callback from a particular position. If the <code>timeOrLabel</code> parameter is null, all callbacks of that function are removed from the timeline.</p>"}},"58e2f543b70f3422":{"meta":{"keywords":["js.TimelineMax.removePause()"],"title":"removePause()","description":"Removes pauses that were added to a timeline via TimelineMax.addPause(). "},"header":{"content":"<p>Removes pauses that were added to a timeline via TimelineMax.addPause(). </p>"},"parameters":[{"name":"position","data_type":"*","description":"<p>the time (or label) where the pause should be removed from.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier).</p>\n"},"details":{"content":"<p>Removes pauses that were added to a timeline via <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineMax.addPause()\"><span data-link-id=\"b15c1fc9e7c9418c-inherited-32bc2e8f667c28b7\"></span></span>. </p><pre class='pre-container prettyprint'><br />var tl = new TimelineMax();<br />//insert a pause at exactly 2 seconds into the timeline<br />tl.to(obj, 1, {x:100})<br />  .addPause() //added at time of 1<br />  .to(obj, 1, {opacity:0});<br /> <br />//later on remove the pause<br />tl.removePause(1);<br /></pre><p>*note removePause() is only available in TimelineMax.</p>"}},"01b34bc2697e9225":{"meta":{"keywords":["js.TimelineMax.repeat()"],"title":"repeat()","description":"Gets or sets the number of times that the timeline should repeat after its first iteration."},"header":{"content":"<p>Gets or sets the number of times that the timeline should repeat after its first iteration.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Gets or sets the number of times that the timeline should repeat after its first iteration. For example, if <code>repeat</code> is 1, the timeline will play a total of twice (the initial play plus 1 repeat). To repeat indefinitely, use -1. <code>repeat</code> should always be an integer.</p><p>To cause the repeats to alternate between forward and backward, set <code>yoyo</code> to <code>true</code>. To add a time gap between repeats, use <code>repeatDelay</code>. You can set the initial <code>repeat</code> value via the<code>vars</code> parameter, like:<br /></p><pre class='pre-container prettyprint'>var tl = new TimelineMax({repeat:2});</pre><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myTimeline.repeat(2).yoyo(true).play();</code><br /></p><pre class='pre-container prettyprint'>var repeat = myTimeline.repeat(); //gets current repeat value<br />myTimeline.repeat(2); //sets repeat to 2</pre>"}},"99a791cc5bc34c40":{"meta":{"keywords":["js.TimelineMax.repeatDelay()"],"title":"repeatDelay()","description":"Gets or sets the amount of time in seconds (or frames for frames-based timelines) between repeats.<br />\r\n"},"header":{"content":"<p>Gets or sets the amount of time in seconds (or frames for frames-based timelines) between repeats.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Gets or sets the amount of time in seconds (or frames for frames-based timelines) between repeats. For example, if <code>repeat</code> is 2 and <code>repeatDelay</code> is 1, the timeline will play initially, then wait for 1 second before it repeats, then play again, then wait 1 second again before doing its final repeat. You can set the initial <code>repeatDelay</code> value via the <code>vars</code> parameter, like:<br /></p><pre class='pre-container prettyprint'>var tl = new TimelineMax({repeat:2, repeatDelay:1});</pre><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myTimeline.repeat(2).yoyo(true).repeatDelay(0.5).play();</code><br /></p><pre class='pre-container prettyprint'>var repeatDelay = myTimeline.repeatDelay(); //gets current repeatDelay value<br />myTimeline.repeatDelay(2); //sets repeatDelay to 2</pre>"}},"7b988d27511ca604":{"meta":{"keywords":["js.TimelineMax.time()"],"title":"time()","description":"[override] Gets or sets the local position of the playhead (essentially the current time), not including any repeats or repeatDelays."},"header":{"content":"<p>[override] Gets or sets the local position of the playhead (essentially the current time), not including any repeats or repeatDelays.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining. Negative values will be interpreted from the <b>END</b> of the animation.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, no events or callbacks will be triggered when the playhead moves to the new position defined in the <code>value</code> parameter.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Gets or sets the local position of the playhead (essentially the current time), <b>not</b> including any repeats or repeatDelays. If the timeline has a non-zero <code>repeat</code>, its <code>time</code> goes back to zero upon repeating even though the <code>totalTime</code> continues forward linearly (or if <code>yoyo</code> is <code>true</code>, the <code>time</code> alternates between moving forward and backward). <code>time</code> never exceeds the duration whereas the <code>totalTime</code> reflects the overall time including any repeats and repeatDelays.</p><p>For example, if a TimelineMax instance has a <code>duration</code> of 2 and a repeat of 3, <code>totalTime</code> will go from 0 to 8 during the course of the timeline (plays once then repeats 3 times, making 4 total cycles) whereas <code>time</code> would go from 0 to 2 a total of 4 times.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.<br /></p><pre class='pre-container prettyprint'>var currentTime = myTimeline.time(); //gets current time<br />myTimeline.time(2); //sets time, jumping to new value just like seek().</pre>"}},"60dac61dd3210643":{"meta":{"keywords":["js.TimelineMax.totalDuration()"],"title":"totalDuration()","description":"[override] Gets or sets the total duration of the timeline in seconds (or frames for frames-based timelines) including any repeats or repeatDelays."},"header":{"content":"<p>[override] Gets or sets the total duration of the timeline in seconds (or frames for frames-based timelines) including any repeats or repeatDelays.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining. Negative values will be interpreted from the <b>END</b> of the animation.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the total duration of the timeline in seconds (or frames for frames-based timelines) <b>including</b> any repeats or repeatDelays. <code>duration</code>, by contrast, does <b>NOT</b> include repeats and repeatDelays. For example, if the timeline has a <code>duration</code> of 10, a <code>repeat</code> of 1 and a <code>repeatDelay</code> of 2, the <code>totalDuration</code> would be 22.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.<br /></p><pre class='pre-container prettyprint'>var total = myTimeline.totalDuration(); //gets total duration<br />myTimeline.totalDuration(10); //sets the total duration</pre>"}},"5f4508325a2e0985":{"meta":{"keywords":["js.TimelineMax.totalProgress()"],"title":"totalProgress()","description":"[override] Gets or sets the timeline&#039;s total progress which is a value between 0 and 1 indicating the position of the virtual playhead (including repeats) where 0 is at the beginning, 0.5 is at the halfway point, and 1 is at the end (complete)."},"header":{"content":"<p>[override] Gets or sets the timeline's total progress which is a value between 0 and 1 indicating the position of the virtual playhead (including repeats) where 0 is at the beginning, 0.5 is at the halfway point, and 1 is at the end (complete).</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code>, no events or callbacks will be triggered when the playhead moves to the new position.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the timeline's total progress which is a value between 0 and 1 indicating the position of the virtual playhead (<b>including</b> repeats) where 0 is at the beginning, 0.5 is at the halfway point, and 1 is at the end (complete). If the timeline has a non-zero <code>repeat</code> defined, <code>progress()</code> and <code>totalProgress()</code> will be different because <code>progress()</code> doesn't include the <code>repeat</code> or <code>repeatDelay</code> whereas <code>totalProgress()</code> does. For example, if a TimelineMax instance is set to repeat once, at the end of the first cycle <code>totalProgress()</code> would only be 0.5 whereas <code>progress</code> would be 1. If you watched both properties over the course of the entire animation, you'd see <code>progress</code> go from 0 to 1 twice (once for each cycle) in the same time it takes the <code>totalProgress()</code> to go from 0 to 1 once.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myAnimation.totalProgress(0.5).play();</code><br /></p><pre class='pre-container prettyprint'>var progress = myAnimation.totalProgress(); //gets total progress<br />myAnimation.totalProgress(0.25); //sets total progress to one quarter finished</pre>"}},"a5a0e939a1e15082":{"meta":{"keywords":["js.TimelineMax.tweenFromTo()"],"title":"tweenFromTo()","description":"Creates a linear tween that essentially scrubs the playhead from a particular time or label to another time or label and then stops."},"header":{"content":"<p>Creates a linear tween that essentially scrubs the playhead from a particular time or label to another time or label and then stops.</p>"},"parameters":[{"name":"fromPosition","data_type":"*","description":"<p>The beginning time in seconds (or frame if the timeline is frames-based) or label from which the timeline should play. For example, <code>myTimeline.tweenTo(0, 5)</code> would play from 0 (the beginning) to the 5-second point whereas <code>myTimeline.tweenFromTo(\"myLabel1\", \"myLabel2\")</code> would play from &#8220;myLabel1&#8221; to &#8220;myLabel2&#8221;.</p>\n"},{"name":"toPosition","data_type":"*","description":"<p>The destination time in seconds (or frame if the timeline is frames-based) or label to which the timeline should play. For example, <code>myTimeline.tweenTo(0, 5)</code>would play from 0 (the beginning) to the 5-second point whereas <code>myTimeline.tweenFromTo(\"myLabel1\", \"myLabel2\")</code> would play from &#8220;myLabel1&#8221; to &#8220;myLabel2&#8221;.</p>\n"},{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — An optional vars object that will be passed to the TweenLite instance. This allows you to define an onComplete, ease, delay, or any other TweenLite special property. onInit is the only special property that is not available (<code>tweenFromTo()</code> sets it internally)</p>\n"}],"returns":{"type":"TweenLite","content":"<p>TweenLite instance that handles tweening the timeline between the desired times/labels.</p>\n"},"details":{"content":"<p>Creates a linear tween that essentially scrubs the playhead from a particular time or label to another time or label and then stops. If you plan to sequence multiple playhead tweens one-after-the-other, <code>tweenFromTo()</code> is better to use than <code>tweenTo()</code> because it allows the duration to be determined immediately, ensuring that subsequent tweens that are appended to a sequence are positioned appropriately. For example, to make the TimelineMax play from the label \"myLabel1\" to the \"myLabel2\" label, and then from \"myLabel2\" back to the beginning (a time of 0), simply do:<br /></p><pre class='pre-container prettyprint'>var tl = new TimelineMax(); <br />tl.add( myTimeline.tweenFromTo(\"myLabel1\", \"myLabel2\") );<br />tl.add( myTimeline.tweenFromTo(\"myLabel2\", 0) );</pre><p>If you want advanced control over the tween, like adding an onComplete or changing the ease or adding a delay, just pass in a vars object with the appropriate properties. For example, to tween from the start (0) to the 5-second point on the timeline and then call a function named <code>myFunction</code> and pass in a parameter that references this TimelineMax and use a<code>Strong.easeOut</code> ease, you'd do:<br /></p><pre class='pre-container prettyprint'>myTimeline.tweenFromTo(0, 5, {onComplete:myFunction, onCompleteParams:[myTimeline], ease:Strong.easeOut});</pre><p>Remember, this method simply creates a TweenLite instance that tweens the <code>time()</code> of your timeline. So you can store a reference to that tween if you want, and you can <code>kill()</code> it anytime. Also note that <code>tweenFromTo()</code> does <b>NOT</b> affect the timeline's <code>reversed</code> property. So if your timeline is oriented normally (not reversed) and you tween to a time/label that precedes the current time, it will appear to go backwards but the <code>reversed</code> property will <b>not</b> change to <code>true</code>. Also note that <code>tweenFromTo()</code> pauses the timeline immediately before tweening its <code>time()</code>, and it does not automatically resume after the tween completes. If you need to resume playback, you can always use an onComplete to call the <code>resume()</code> method.</p><p>Like all from-type methods in GSAP, <code>immediateRender</code> is <code>true</code> by default, meaning the timeline will immediately jump to the \"from\" time/label unless you set <code>immediateRender:false</code> (like <code>.tweenFromTo(1, 5, {immediateRender:false})</code>)</p>"}},"7be1802b524c8f27":{"meta":{"keywords":["js.TimelineMax.tweenTo()"],"title":"tweenTo()","description":"Creates a linear tween that essentially scrubs the playhead to a particular time or label and then stops."},"header":{"content":"<p>Creates a linear tween that essentially scrubs the playhead to a particular time or label and then stops.</p>"},"parameters":[{"name":"position","data_type":"*","description":"<p>The destination time in seconds (or frame if the timeline is frames-based) or label to which the timeline should play. For example, <code>myTimeline.tweenTo(5)</code> would play from wherever the timeline is currently to the 5-second point whereas <code>myTimeline.tweenTo(\"myLabel\")</code> would play to wherever &#8220;myLabel&#8221; is on the timeline.</p>\n"},{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — An optional vars object that will be passed to the TweenLite instance. This allows you to define an onComplete, ease, delay, or any other TweenLite special property.</p>\n"}],"returns":{"type":"TweenLite","content":"<p>A TweenLite instance that handles tweening the timeline to the desired time/label.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Creates a linear tween that essentially scrubs the playhead to a particular time or label and then stops. For example, to make the TimelineMax play to the \"myLabel2\" label, simply do:<br /></p><pre class='pre-container prettyprint'>myTimeline.tweenTo(\"myLabel2\");</pre><p>If you want advanced control over the tween, like adding an onComplete or changing the ease or adding a delay, just pass in a <code>vars</code> object with the appropriate properties. For example, to tween to the 5-second point on the timeline and then call a function named <code>myFunction</code> and pass in a parameter that's references this TimelineMax and use a <code>Strong.easeOut</code> ease, you'd do:</p><pre class='pre-container prettyprint'>myTimeline.tweenTo(5, {onComplete:myFunction, onCompleteParams:[myTimeline], ease:Strong.easeOut});</pre><p>Remember, this method simply creates a TweenLite instance that pauses the timeline and then tweens the <code>time()</code> of the timeline. So you can store a reference to that tween if you want, and you can kill() it anytime. Also note that <code>tweenTo()</code> does <b>NOT</b> affect the timeline's <code>reversed</code> state. So if your timeline is oriented normally (not reversed) and you tween to a time/label that precedes the current time, it will appear to go backwards but the <code>reversed</code> state will <b>not</b> change to <code>true</code>. Also note that <code>tweenTo()</code> pauses the timeline immediately before tweening its <code>time()</code>, and it does not automatically resume after the tween completes. If you need to resume playback, you could always use an onComplete to call the timeline's<code>resume()</code> method.</p><p>If you plan to sequence multiple playhead tweens one-after-the-other, it is typically better to use <code>tweenFromTo()</code> so that you can define the starting point and ending point, allowing the duration to be accurately determined immediately.</p>"}},"d2c60e4c72147852":{"meta":{"keywords":["js.TimelineMax.yoyo()"],"title":"yoyo()","description":"Gets or sets the timeline&#039;s yoyo state, where true causes the timeline to go back and forth, alternating backward and forward on each repeat."},"header":{"content":"<p>Gets or sets the timeline's yoyo state, where true causes the timeline to go back and forth, alternating backward and forward on each repeat.</p>"},"parameters":[{"name":"value","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the timeline's <code>yoyo</code> state, where <code>true</code> causes the timeline to go back and forth, alternating backward and forward on each <code>repeat</code>. <code>yoyo</code> works in conjunction with <code>repeat</code>, where <code>repeat</code> controls how many times the timeline repeats, and <code>yoyo</code> controls whether or not each repeat alternates direction. So in order to make a timeline yoyo, you must set its<code>repeat</code> to a non-zero value. Yoyo-ing, has no affect on the timeline's \"<code>reversed</code>\" property. For example, if <code>repeat</code> is 2 and <code>yoyo</code> is <code>false</code>, it will look like: start - 1 - 2 - 3 - 1 - 2 - 3 - 1 - 2 - 3 - end. But if <code>yoyo</code> is <code>true</code>, it will look like: start - 1 - 2 - 3 - 3 - 2 - 1 - 1 - 2 - 3 - end.</p><p>You can set the <code>yoyo</code> property initially by passing <code>yoyo:true</code> in the <code>vars</code> parameter, like: <code>new TimelineMax({repeat:1, yoyo:true});</code></p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myTimeline.yoyo(true).repeat(3).timeScale(2).play(0.5);</code><br /></p><pre class='pre-container prettyprint'>var yoyo = myTimeline.yoyo(); //gets current yoyo state<br />myTimeline.yoyo( true ); //sets yoyo to true</pre>"}},"357645cd3e630097":{"meta":{"keywords":["js.ScrambleTextPlugin","Plugins","Text"],"title":"ScrambleTextPlugin","description":"Scrambles the text in a DOM element with randomized characters, refreshing new randomized characters at regular intervals while gradually revealing your new text over the course of the tween. Great for decryption effects."},"header":{"content":"<p data-height=\"268\" data-theme-id=\"3984\" data-slug-hash=\"dIBbw\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/dIBbw/'>GSAP Scramble Text Plugin - feature plugin page</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://codepen.io/assets/embed/ei.js\"></script></p><p>Scrambles the text in a DOM element with randomized characters (uppercase by default, but you can define lowercase or a set of custom characters), refreshing new randomized characters at regular intervals while gradually revealing your new text over the course of the tween (left to right by default). Visually it looks like a computer decoding a string of text. Great for rollovers.</p><p>You can simply pass a string of text directly as the <code>scrambleText</code> and it'll use the defaults for revealing it, or you can customize the settings by using a generic object with any of the following properties:</p><ul><li><b>text</b> : String - the text that should replace the existing text in the DOM element (required).</li><li><b>chars</b> : String - the characters that should be randomly swapped in to the scrambled portion the text. You can use <code>\"upperCase\"</code>, <code>\"lowerCase\"</code>, <code>\"upperAndLowerCase\"</code>, or a custom string of characters, like <code>\"XO\"</code> or <code>\"TMOWACB\"</code>, or <code>\"jompaWB!^\"</code>, etc. (Default: <code>\"upperCase\"</code>)</li><li><b>tweenLength</b> : Boolean - if the length of the replacement text is different than the original text, the difference will be gradually tweened so that the length doesn't suddenly jump. For example, if the original text is 50 characters and the replacement text is 100 characters, during the tween the number of characters would gradually move from 50 to 100 instead of jumping immediatley to 100. However, if you'd prefer to have it immediately jump, set <code>tweenLength</code> to <code>false</code>. (Default: <code>true</code>)</li><li><b>revealDelay</b> : Number - if you'd like the reveal (unscrambling) of the new text to be delayed for a certain portion of the tween so that the scrambled text is entirely visible for a while, use <code>revealDelay</code> to define the time you'd like to elapse before the reveal begins. For example, if the tween's duration is 3 seconds but you'd like the scrambled text to remain entirely visible for first 1 second of the tween, you'd set <code>revealDelay</code> to <code>1</code>. (Default: <code>0</code>)</li><li><b>newClass</b> : String - if you'd like the <b>new</b> text to have a particular class applied (using a &lt;span&gt; tag wrapped around it), use <code>newClass:\"YOUR_CLASS_NAME\"</code>. This makes it easy to create a distinct look for the new text. (Default: <code>null</code>)</li><li><b>oldClass</b> : String - if you'd like the <b>old</b> (original) text to have a particular class applied (using a &lt;span&gt; tag wrapped around it), use <code>oldClass:\"YOUR_CLASS_NAME\"</code>. This makes it easy to create a distinct look for the old text. (Default: <code>null</code>)</li><li><b>speed</b> : Number - controls how frequently the scrambled characters are refreshed. The default is <code>1</code> but you could slow things down by using <code>0.2</code> for example (or any number). (Default:<code>1</code>)</li><li><b>delimiter</b> : String - by default, each character is replaced one-by-one, but if you'd prefer to have things revealed word-by-word, you could use a delimiter of <code>\" \"</code> (space). (Default: <code>\"\"</code>)</li><li><b>rightToLeft</b> : Boolean (default false) - If true the text will be revealed from right to left.</li></ul><p><b>USAGE:</b><br /></p><pre class='pre-container prettyprint'>//use the defaults<br />TweenLite.to(element, 1, {scrambleText:\"THIS IS NEW TEXT\"}); <br /> <br />//or customize things:<br />TweenLite.to(element, 1, {scrambleText:{text:\"THIS IS NEW TEXT\", chars:\"XO\", revealDelay:0.5, speed:0.3, newClass:\"myClass\"}}); </pre><p><br />ScrambleTextPlugin is a <a href=\"http://www.greensock.com/club/\" target=\"\">Club GreenSock</a> membership benefit. You must have a valid membership to use this class without violating the terms of use. Visit <a href=\"http://www.greensock.com/club/\" target=\"\">http://www.greensock.com/club/</a> to sign up or get more details.</p>"}},"3d0f25beac1906b4":{"meta":{"keywords":["js.CSSRulePlugin","Plugins"],"title":"CSSRulePlugin","description":""},"header":{"content":"Allows TweenLite and TweenMax to animate the raw <b>style sheet rules</b> which affect all objects of a particular selector rather than affecting an individual DOM element's <code>style</code> (that's what the CSSPlugin is for). For example, if you have a CSS class named <code>\".myClass\"</code> that sets <code>background-color</code> to <code>\"#FF0000\"</code>, you could tween that to a different color and ALL of the objects on the page that use <code>\".myClass\"</code> would have their background color change. Typically it is best to use the regular CSSPlugin to animate css-related properties of individual elements so that you can get very precise control over each object, but sometimes it can be useful to tween the global rules themselves instead. For example, pseudo elements (like <code>:after, :before,</code> etc. are impossible to reference directly in JavaScript, but you can animate them using CSSRulePlugin. <b><i>NOTE: CSSRulePlugin requires the CSSPlugin, so please make sure it is loaded too.</i></b><br /><br >The plugin itself actually has a static <b><code>getRule()</code> </b>method that you can use to grab a reference to the style sheet itself based on the selector you used in your CSS. For example, let's say you have CSS like this:<pre class='pre-container prettyprint lang-css'>.myClass {<br />    color:#FF0000;<br />}<br />.myClass:before {<br />    content:\"This content is before.\";<br />    color:#00FF00;<br />}</pre>Now let's say you want to tween the color of the <code>.myClass:before</code> to blue. Make sure you load the CSSRulePlugin and CSSPlugin JavaScript files and then you can do this:<br /><pre class='pre-container prettyprint'>var rule = CSSRulePlugin.getRule(\".myClass:before\"); //get the rule<br />TweenLite.to(rule, 3, {cssRule:{color:\"#0000FF\"}});</pre>And if you want to get <b>ALL</b> of the :before pseudo elements, the <code>getRule()</code> will return an array of them, so I could do this:<br /><pre class='pre-container prettyprint'>TweenLite.to( CSSRulePlugin.getRule(\":before\"), 3, {cssRule:{color:\"#0000CC\"}});</pre>>Keep in mind that it is typically best to tween a property that has already been defined in the specific rule that you're selecting because it cannot perform a calculated style (the combination of styles from other selectors that might pertain to similar elements). For example, if we didn't define any color initially for the <code>.myClass:before</code> and tried to tween its color to blue, it would start transparent and go to blue. One way around this is to simply set your starting values explicitly in the tween by doing a <code>fromTo()</code>. That way there's no having to guess what the starting value should be when it isn't defined previously.<br /><br />Don't forget to wrap the values in a <code>cssRule:{}</code> object.<br /><br />Styles defined inside media queries may not be accessible/tweenable."}},"53a700a8824a8cfc":{"meta":{"keywords":["js.CSSRulePlugin.getRule()"],"title":"getRule()","description":"[static] Provides a simple way to find the style sheet object associated with a particular selector like &quot;.myClass&quot; or &quot;#myID&quot;."},"header":{"content":"<p>[static] Provides a simple way to find the style sheet object associated with a particular selector like \".myClass\" or \"#myID\".</p>"},"parameters":[{"name":"selector","data_type":"String","description":"<p>The name that exactly matches the selector you want to animate (like &#8220;.myClassName&#8221;).</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Object","content":"<p>The style sheet object (or an array of them if you define only a pseudo element selector like :before)</p>\n"},"details":{"content":"Provides a simple way to find the style sheet object associated with a particular selector like \".myClass\" or \"#myID\". You'd use this method to determine the target of your tween. For example, let's say you have CSS like this:<br /><pre class='pre-container prettyprint lang-css'>.myClass {<br />    color:#FF0000;<br />}<br />.myClass:before {<br />    content:\"This content is before.\";<br />    color:#00FF00;<br />}</pre>And you want to tween the color of the <code>.myClass:before</code> to blue. Make sure you load the CSSRulePlugin.js file and then you can do this:<br /><pre class='pre-container prettyprint'>var rule = CSSRulePlugin.getRule(\".myClass:before\"); //get the rule<br />TweenLite.to(rule, 3, {cssRule:{color:\"#0000FF\"}});</pre>Or you can feed the value directly into the tween like this:<br /><pre class='pre-container prettyprint'>TweenLite.to( CSSRulePlugin.getRule(\".myClass:before\"), 3, {cssRule:{color:\"#0000FF\"}});</pre>"}},"3eab3f172dae806f":{"meta":{"keywords":["js.Quart","Easing"],"title":"Quart","description":"Provides an easeIn, easeOut, and easeInOut with a power (or strength) of 3 which is identical to the Power2 ease. The more power, the more exaggerated the easing effect. Using a numeric approach like Power3 instead of Quart makes experimenting easier and the code reads more intuitively."},"header":{"content":"<p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 3 which is identical to the <code>Power2</code> ease. The more power, the more exaggerated the easing effect. Using a numeric approach like Power3 instead of Quart makes experimenting easier and the code reads more intuitively.</p><p>This is one of the eases that is natively accelerated in TweenLite and TweenMax. All of the \"Power\" eases and their counterparts (Linear (0), Quad (1), Cubic (2), Quart (3), Quint (4), and Strong (4)) are accelerated.</p><div class=\"ease-visualizer\" data-ease=\"Power2\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example usage:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Quart.easeOut});</pre>"}},"705ae1ddfe7bf523":{"meta":{"keywords":["js.Quart.easeIn"],"title":"easeIn","description":"[static] Eases in with a power of 3."},"header":{"content":"<p>[static] Eases in with a power of 3.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in with a power of 3.</p>"}},"eeeab17448587b02":{"meta":{"keywords":["js.Quart.easeInOut"],"title":"easeInOut","description":"[static] Eases in and then out with a power of 3."},"header":{"content":"<p>[static] Eases in and then out with a power of 3.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in and then out with a power of 3.</p>"}},"4f68c600370ab277":{"meta":{"keywords":["js.Quart.easeOut"],"title":"easeOut","description":"[static] Eases out with a power of 3."},"header":{"content":"<p>[static] Eases out with a power of 3.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases out with a power of 3.</p>"}},"424d2c8144aca82b":{"meta":{"keywords":["js.Quint","Easing"],"title":"Quint","description":"Provides an easeIn, easeOut, and easeInOut with a power (or strength) of 4 which is identical to the Power4 ease. The more power, the more exaggerated the easing effect. Using a numeric approach like Power4 instead of Quint makes experimenting easier and the code reads more intuitively."},"header":{"content":"<p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 4 which is identical to the <code>Power4</code> ease. The more power, the more exaggerated the easing effect. Using a numeric approach like Power4 instead of Quint makes experimenting easier and the code reads more intuitively.</p><p>This is one of the eases that is natively accelerated in TweenLite and TweenMax. All of the \"Power\" eases and their counterparts (Linear (0), Quad (1), Cubic (2), Quart (3), Quint (4), and Strong (4)) are accelerated.</p><div class=\"ease-visualizer\" data-ease=\"Power4\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example usage:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Quint.easeOut});</pre>"}},"54ae9c54fa1f129c":{"meta":{"keywords":["js.Quint.easeIn"],"title":"easeIn","description":"[static] Eases in with a power of 4."},"header":{"content":"<p>[static] Eases in with a power of 4.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in with a power of 4.</p>"}},"edeb564de2d4abf1":{"meta":{"keywords":["js.Quint.easeInOut"],"title":"easeInOut","description":"[static] Eases in and then out with a power of 4."},"header":{"content":"<p>[static] Eases in and then out with a power of 4.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in and then out with a power of 4.</p>"}},"7824c0e53c911bbe":{"meta":{"keywords":["js.Quint.easeOut"],"title":"easeOut","description":"[static] Eases out with a power of 4."},"header":{"content":"<p>[static] Eases out with a power of 4.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases out with a power of 4.</p>"}},"43077a47946db3db":{"meta":{"keywords":["js.BezierPlugin","Animation","Plugins"],"title":"BezierPlugin","description":"Animate virtually any property (or properties) along a curved Bezier path which you define as an array of points/values."},"header":{"content":"<p><span class=\"inTweenMax\">Included in TweenMax: <span class=\"yes\">YES</span></span></p><p>Animate virtually any property (or properties) along a curved Bezier path which you define as an array of points/values that can be interpreted 4 different ways (described as the Bezier's \"type\", like <code>type:\"soft\"</code>):</p><ul><li><code>\"thru\"</code> (the default) - the plugin figures out how to draw the Bezier naturally through the supplied values using a proprietary algorithm. The values you provide in the array are essentially treated as anchors on the Bezier and the plugin calculates the control points. The target's current/starting values are used as the initial anchor. You can define a <code>curviness</code>special property that allows you to adjust the tension on the Bezier where 0 has no curviness (straight lines), 1 is normal curviness, 2 is twice the normal curviness, etc. Since \"thru\" is the default Bezier type, you don't need to define a <code>type</code> at all if this is the one you want.</li><li><code>\"soft\"</code> - the values that you provide in the array act almost like magnets that attract the curve towards them, but the Bezier doesn't typically travel through them. They are treated as control points on a Quadratic Bezier and the plugin creates the necessary intermediate anchors. The target's current/starting values are used as the initial anchor.</li><li><code>\"quadratic\"</code> - allows you to define standard Quadratic Bezier data (Quadratic Beziers have 1 control point between each anchor). The array should start with the first anchor, then control point, then anchor, control point, etc. for as many iterations as you want, but obviously make sure that it starts and ends with anchors.</li><li><code>\"cubic\"</code> - allows you to define standard Cubic Bezier data (Cubic Beziers have 2 control points between each anchor). The array should start with the first anchor, then 2 control points, then anchor, 2 control points, anchor, etc. for as many iterations as you want, but obviously make sure that it starts and ends with anchors.</li></ul><p>While it is most common to use <code>x</code> and <code>y</code> (or <code>left</code> and <code>top</code>) properties for Bezier tweens, you can use any properties (even ones that are function-based getters/setters).</p><p>Inside the <code>bezier</code> object, you must define at least a <code>values</code> property, and there are several other optional special properties that the BezierPlugin will recognize. Here is a list of them all:</p><ul><li><b>values</b> : Array <i>[REQUIRED]</i> - the array of your Bezier values as generic objects. Each object in the array should have matching property names (like \"x\" and \"y\"). For example, the array might look like: <code>[{x:100, y:250}, {x:300, y:0}, {x:500, y:400}]</code></li><li><b>type</b> : String (default:<code>\"thru\"</code>) - Either <code>\"thru\", \"soft\", \"quadratic\",</code> or <code>\"cubic\"</code> as described above, indicating how the <code>values</code> should be interpreted.</li><li><b>timeResolution</b> : Number (default:6) - due to the nature of Beziers, plotting the progression of an object on the path over time can make it appear to speed up or slow down based on the placement of the control points and the length of each successive segment on the path, so BezierPlugin implements a technique that reduces or eliminates that variance, but it involves breaking the segments down into a certain number of pieces which is what <code>timeResolution</code> controls. The greater the number, the more accurate the time remapping but there is a processing price to pay for greater precision. The default value of 6 is typically fine, but if you notice slight pace changes on the path you can increase the <code>timeResolution</code>value. Or, if you want to prioritize speed you could reduce the number. If you use a <code>timeResolution</code> value of 0, no length measurements will take place internally which delivers maximum processing speed, but you may notice changes in speed during the animation.</li><li><b>curviness</b> : Number (default:1) (only applies to <code>type:\"thru\"</code>) - allows you to adjust the tension on the Bezier where 0 has no curviness (straight lines), 1 is normal curviness, 2 is twice the normal curviness, etc. Use any number, not just integers</li><li><b>autoRotate</b> : Boolean, Number, or Array (default:false) - to automatically rotate the target according to its position on the Bezier path, you can use the <code>autoRotate</code> feature. If your Bezier is affecting the \"x\" and \"y\" (or \"left\" and \"top\") properties of your target and you don't need to offset the rotation by a certain amount more than normal, then you can simply set<code>autoRotate:true</code>. Or if you want to offset the rotation by a certain amount (in degrees), you can define a number like <code>autoRotate:90</code> (adding 90 degrees in this example). Or for more advanced controls, you can define <code>autoRotate</code> as an array. In order to adjust a rotation property accurately, the plugin needs 5 pieces of information:<ol><li>Position property 1 (typically <code>\"x\"</code> or <code>\"left\"</code>)</li><li>Position property 2 (typically <code>\"y\"</code> or <code>\"top\"</code>)</li><li>Rotational property (typically <code>\"rotation\"</code>)</li><li>Number of degrees (or radians) to add to the new rotation (optional - makes it easy to orient your target properly)</li><li>Boolean value indicating whether or not the rotational property should be defined in radians rather than degrees (default is <code>false</code> which results in degrees)</li></ol><p>The <code>autoRotate</code> property should be an Array containing these values, like <code>[\"x\",\"y\",\"rotation\",90*Math.PI/180,true]</code>. And if you need to affect multiple rotational properties (like in 3D tweens where the Bezier is going through x,y,z points which could affect rotationX, rotationY, and rotationZ), you can use an array of arrays, like<code>[[\"x\",\"y\",\"rotationZ\",0,false], [\"z\",\"x\",\"rotationY\",0,false], [\"z\",\"y\",\"rotationX\",0,false]]</code>.</li><li><b>correlate</b> : String (default:\"x,y,z,left,top,right,bottom,marginLeft,marginTop,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom\") (only applies to<code>type:\"thru\"</code>) - a comma-delimited list of property names whose relative distances should be correlated when calculating the Bezier that travels through the points. Since x, y, z, left, top, etc. are all spacial, it is almost always good to correlate them, but properties like scaleX, scaleY, etc. don't typically need to be correlated. It is rarely necessary to alter the default<code>correlate</code> value, so there's typically no need to even define one at all (let the plugin use its defaults).</li></ul><p><b>IMPORTANT:</b> if you are trying to do a bezier tween of css-related properties, make sure you load the CSSPlugin (it's already included inside TweenMax, but if you're using only TweenLite, you'll need to load the CSSPlugin and BezierPlugin separately)</p><p><b>SYNTAX</b><br /></p><pre class='pre-container prettyprint'>//tween the \"left\" and \"top\" css properties through the supplied values (notice we're passing the array directly to the bezier rather than creating an object with \"values\" because we're accepting the defaults)<br />TweenMax.to(document.getElementById(\"myDiv\"), 5, {bezier:[{left:100, top:250}, {left:300, top:0}, {left:500, top:400}], ease:Power1.easeInOut});<br /> <br />//if we want to customize things, like the curviness and setting autoRotate:true, we need to define the bezier as an object instead, and pass our array as the \"values\" property<br />TweenMax.to(document.getElementById(\"myDiv\"), 5, {bezier:{curviness:1.25, values:[{x:100, y:250}, {x:300, y:0}, {x:500, y:400}], autoRotate:true}, backgroundColor:\"#f00\", ease:Power1.easeInOut});<br /> <br />//let's define the type as \"soft\" instead of using the default \"thru\"<br />TweenMax.to(document.getElementById(\"myDiv\"), 5, {bezier:{type:\"soft\", values:[{x:100, y:250}, {x:300, y:0}, {x:500, y:400}], autoRotate:true}, ease:Power1.easeInOut});<br /> <br />//now we'll do a cubic Bezier and make our target auto rotate but add 45 degrees to the rotation<br />TweenMax.to(document.getElementById(\"myDiv\"), 5, {bezier:{type:\"cubic\", values:[{x:100, y:250}, {x:150, y:100}, {x:300, y:500}, {x:500, y:400}], autoRotate:[\"x\",\"y\",\"rotation\",45,false]}, ease:Power1.easeInOut});<br /> <br />//NON-CSS, generic x/y property tween: animate obj through the points in the array (notice we're passing the array directly to the bezier rather than creating an object with \"values\" because we're accepting the defaults)<br />TweenMax.to(obj, 5, {bezier:[{x:100, y:250}, {x:300, y:0}, {x:500, y:400}], ease:Power1.easeInOut});</pre><p>You can tap into BezierPlugin's Bezier drawing algorithm by passing its <code>bezierThrough()</code> method your array of points/objects and it will spit back and object with all the necessary data, either in Cubic Bezier form or in Quadratic Bezier form so that you could, for example, draw the path using the canvas's drawing API. It also has some useful static <code>cubicToQuadratic()</code> and<code>quadraticToCubic()</code> conversion methods.</p>"}},"8226759a93db7a20":{"meta":{"keywords":["js.BezierPlugin.bezierThrough()"],"title":"bezierThrough()","description":"[static] Takes an array that contains objects (could be Points, could be generic objects with any number of properties but they should all match in terms of the names of properties like [{x:0, y:0, scaleX:0.5}, {x:100, y:-200, scaleX:1.2}, {x:300, y:20, scaleX:0.8}]) and plots Bezier segments THROUGH those values and returns an array containing a generic object for each Bezier segment."},"header":{"content":"<p>[static] Takes an array that contains objects (could be Points, could be generic objects with any number of properties but they should all match in terms of the names of properties like [{x:0, y:0, scaleX:0.5}, {x:100, y:-200, scaleX:1.2}, {x:300, y:20, scaleX:0.8}]) and plots Bezier segments THROUGH those values and returns an array containing a generic object for each Bezier segment.</p>"},"parameters":[{"name":"values","data_type":"Array","description":"<p>An array containing generic objects with matching properties (or Point instances) through which the Beziers should be plotted, like <code>[{x:0, y:0, scaleX:0.5}, {x:100, y:-200, scaleX:1.2}, {x:300, y:20, scaleX:0.8}]</code></p>\n"},{"name":"curviness","data_type":"Number","description":"<p>(default = <code>1</code>)<code></code> — A number (default: 1) that controls the strength of the curves that are plotted through the values. A curviness of 0 would be result in straight lines, 1 is normal curviness, and 2 would be extreme curves. Use any value.</p>\n"},{"name":"quadratic","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — if <code>true</code>, quadratic Bezier information will be returned instead of cubic Bezier data, thus each object in the returned array will only contain a, b, and c properties where b is the control point.</p>\n"},{"name":"correlate","data_type":"String","description":"<p>(default =<code>x, y, z, left, top, right, bottom, marginLeft, marginTop, marginRight, marginBottom, paddingLeft, paddingTop, paddingRight, paddingBottom</code>)<code></code> — a comma-delimited list of property names whose relative distances should be correlated with each other when calculating the curvature of the Bezier through the values (the default is<code>\"x, y, z, left, top, right, bottom, marginLeft, marginTop, marginRight, marginBottom, paddingLeft, paddingTop, paddingRight, paddingBottom\"</code> because those are almost always properties that should be correlated).</p>\n"},{"name":"prepend","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — [optional] an object to treat as though it is the first element in the <code>values</code> array (typically only used internally for adding a tween&#8217;s starting values)</p>\n"},{"name":"calcDifs","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — if <code>true</code>, <code>da, ca,</code> and <code>ba</code> properties will be added to each bezier segment indicating (d &#8211; a), (c &#8211; a), and (b &#8211; a) which is typically only useful for improving animation performance slightly by precalculating those values instead of doing it each time the tween updates.</p>\n"}],"returns":{"type":"Object","content":"<p>An object with properties matching those from the objects in the <code>values</code> array, with an array assigned to each property populated with an object for each Bezier. The Bezier objects will contain <code>a, b, c</code> (and <code>d</code> if <code>quadratic</code> is not <code>true</code>) properties for the anchors and control points.</p>\n"},"details":{"content":"<p>Takes an array that contains objects (could be Points, could be generic objects with any number of properties but they should all match in terms of the names of properties like <code>[{x:0, y:0, scaleX:0.5}, {x:100, y:-200, scaleX:1.2}, {x:300, y:20, scaleX:0.8}]</code>) and plots Bezier segments THROUGH those values and returns an array containing a generic object for each Bezier segment. By default Cubic Beziers (which use 2 control points per segment) are used but you can optionally request Quadratic Beziers (1 control point per segment) instead using the <code>quadratic</code> parameter.</p><p>For Cubic Beziers (the default), each segment object will have <code>a, b, c,</code> and <code>d</code> properties:</p><ul><li><b>a</b> - the starting anchor value of the Cubic Bezier segment. For example, <code>bezierThrough([{x:0, y:0, scaleX:0.5}, {x:100, y:-200, scaleX:1.2}, {x:300, y:20, scaleX:0.8}]);</code> would return an object with \"x\", \"y\", and \"scaleX\" properties, each containing an array of objects, one per Bezier segment and you could access the first Bezier's initial anchor values like: <code>myReturnedObject.x[0].a, myReturnedObject.y[0].a</code>, and <code>myReturnedObject.scaleX[0].a</code></li><li><b>b</b> - the first control point value of the Cubic Bezier segment. For example, <code>bezierThrough([{x:0, y:0, scaleX:0.5}, {x:100, y:-200, scaleX:1.2}, {x:300, y:20, scaleX:0.8}]);</code> would return an object with \"x\", \"y\", and \"scaleX\" properties, each containing an array of objects, one per Bezier segment and you could access the first Bezier's first control point values like: <code>myReturnedObject.x[0].b, myReturnedObject.y[0].b</code>, and <code>myReturnedObject.scaleX[0].b</code></li><li><b>c</b> - the second control point value of the Cubic Bezier segment. For example, <code>bezierThrough([{x:0, y:0, scaleX:0.5}, {x:100, y:-200, scaleX:1.2}, {x:300, y:20, scaleX:0.8}]);</code> would return an object with \"x\", \"y\", and \"scaleX\" properties, each containing an array of objects, one per Bezier segment and you could access the first Bezier's second control point values like: <code>myReturnedObject.x[0].c, myReturnedObject.y[0].c</code>, and <code>myReturnedObject.scaleX[0].c</code></li><li><b>d</b> - the final anchor value of the Cubic Bezier segment. For example, <code>bezierThrough([{x:0, y:0, scaleX:0.5}, {x:100, y:-200, scaleX:1.2}, {x:300, y:20, scaleX:0.8}]);</code> would return an object with \"x\", \"y\", and \"scaleX\" properties, each containing an array of objects, one per Bezier segment and you could access the first Bezier's final anchor values like: <code>myReturnedObject.x[0].d, myReturnedObject.y[0].d</code>, and <code>myReturnedObject.scaleX[0].d</code></li></ul><p>If you set the <code>quadratic</code> parameter to <code>true</code>, all of the Bezier segments will contain <code>a, b,</code> and <code>c</code> properties (<b>NOT</b> <code>d</code>) where <code>b</code> is the only control point. This can be very useful because some drawing APIs only understand Quadratic Beziers. There are 4 times as many Quadratic Beziers returned as Cubic Beziers, though, due to the fact that the internal algorithm uses Cubic Beziers to plot the points (they're much more flexible) and then splits each into 4 Quadratic ones.<br /></p><pre class='pre-container prettyprint'>//input:<br /> var beziers = BezierPlugin.bezierThrough([{x:0, y:0}, {x:250, y:400}, {x:500, y:0}]);<br /> <br /> //output:<br /> {<br />     x:[{a:0, b:0, c:125, d:250}, {a:250, b:375, c:500, d:500}],<br />     y:[{a:0, b:0, c:400, d:400}, {a:400, b:400, c:0, d:0}]<br /> }</pre><p><br /></p><pre class='pre-container prettyprint'>//get quadratic beziers so that we can use the canvas's drawing API...<br /> var beziers = BezierPlugin.bezierThrough([{x:0, y:0}, {x:250, y:400}, {x:500, y:0}], 1, true);<br /> <br /> var bx = beziers.x; //the \"x\" Beziers<br /> var by = beziers.y; //the \"y\" Beziers</pre>"}},"6928377908c249d2":{"meta":{"keywords":["js.BezierPlugin.cubicToQuadratic()"],"title":"cubicToQuadratic()","description":"[static] Using the fixed midpoint approach, we return an array of 4 quadratic Beziers that closely approximates the cubic Bezier data provided."},"header":{"content":"<p>[static] Using the fixed midpoint approach, we return an array of 4 quadratic Beziers that closely approximates the cubic Bezier data provided.</p>"},"parameters":[{"name":"a","data_type":"Number","description":"<p>starting anchor of the cubic Bezier</p>\n"},{"name":"b","data_type":"Number","description":"<p>first control point of the cubic Bezier</p>\n"},{"name":"c","data_type":"Number","description":"<p>second control point of the cubic Bezier</p>\n"},{"name":"d","data_type":"Number","description":"<p>final anchor of the cubic Bezier</p>\n"}],"returns":{"type":"Array","content":"<p> an array of 4 objects, one for each quadratic Bezier with a, b, and c properties</p>\n"},"details":{"content":"<p>Using the fixed midpoint approach, we return an array of 4 quadratic Beziers that closely approximates the cubic Bezier data provided. Each quadratic Bezier object contains <code>a, b,</code> and <code>c </code>properties where <code>a</code> is the starting anchor value, <code>b</code> is the control point, and <code>c</code> is the ending anchor value.</p>"}},"da3bf77d4e5fdbda":{"meta":{"keywords":["js.BezierPlugin.quadraticToCubic()"],"title":"quadraticToCubic()","description":"[static] Returns the Cubic equivalent of a Quadratic Bezier."},"header":{"content":"<p>[static] Returns the Cubic equivalent of a Quadratic Bezier.</p>"},"parameters":[{"name":"a","data_type":"Number","description":"<p>The starting anchor value</p>\n"},{"name":"b","data_type":"Number","description":"<p>The control point value</p>\n"},{"name":"c","data_type":"Number","description":"<p>The ending anchor value</p>\n"}],"returns":{"type":"Object","content":"<p>An object with a, b, c, and d properties representing the starting anchor value (a), first control point (b), second control point (c), and ending anchor value (d) of a Cubic Bezier matching the Quadratic Bezier data passed in.</p>\n"},"details":{"content":"<p>Returns the Cubic equivalent of a Quadratic Bezier. This method returns an object with a, b, c, and d properties representing the starting anchor value (a), first control point (b), second control point (c), and ending anchor value (d) of a Cubic Bezier matching the Quadratic Bezier data passed in.</p>"}},"447e2b0a637eb56f":{"meta":{"keywords":["js.PhysicsPropsPlugin","Plugins"],"title":"PhysicsPropsPlugin","description":""},"header":{"content":"<p>Sometimes it's useful to tween a value at a particular velocity and/or acceleration without a specific end value in mind. PhysicsPropsPlugin allows you to tween <b>any</b> numeric property of <b>any</b>object based on these concepts. Keep in mind that any easing equation you define for your tween will be completely ignored for these properties. Instead, the physics parameters will determine the movement/easing. These parameters, by the way, are not intended to be dynamically updateable, but one unique convenience is that everything is reverseable. So if you create several physics-based tweens, for example, and throw them into a TimelineLite, you could simply call <code>reverse()</code> on the timeline to watch the objects retrace their steps right back to the beginning. Here are the parameters you can define (note that <code>friction</code> and <code>acceleration</code> are both completely optional):</p><ul><li><b>velocity</b> : Number - the initial velocity of the object measured in units per second (or for tweens where <code>useFrames</code> is <code>true</code>, it would be measured per frame). (Default: <code>0</code>)</li><li><b>acceleration</b> : Number - the amount of acceleration applied to the object, measured in units per second (or for tweens where <code>useFrames</code> is <code>true</code>, it would be measured per frame). (Default: 0)</li><li><b>friction</b> : Number - a value between 0 and 1 where 0 is no friction, 0.08 is a small amount of friction, and 1 will completely prevent any movement. This is not meant to be precise or scientific in any way, but it serves as an easy way to apply a friction-like physics effect to your tween. Generally it is best to experiment with this number a bit, starting at a very low value like 0.02. Also note that friction requires more processing than physics tweens without any friction. (Default: <code>0</code>)</li></ul><p><b>USAGE:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(mc, 2, {physicsProps:{<br />                                    x:{velocity:100, acceleration:200},<br />                                    y:{velocity:-200, friction:0.1}<br />                                }<br />                        });</pre><p>PhysicsPropsPlugin is a <a href=\"http://www.greensock.com/club/\" target=\"external\">Club GreenSock</a> membership benefit. You must have a valid membership to use this class without violating the terms of use. Visit <a href=\"http://www.greensock.com/club/\" target=\"external\">http://www.greensock.com/club/</a> to sign up or get more details.</p>"}},"4c5618b6dde74bd2":{"meta":{"keywords":["js.EaselPlugin","Plugins"],"title":"EaselPlugin","description":""},"header":{"content":"<p>Tweens special EaselJS-related properties for things like saturation, contrast, tint, colorize, brightness, exposure, and hue which leverage EaselJS's ColorFilter and ColorMatrixFilter (see<a href=\"http://www.createjs.com/#!/EaselJS\" target=\"external\">http://www.createjs.com/#!/EaselJS</a> for more information about EaselJS). Of course you don't need the plugin to tween normal numeric properties of EaselJS objects (like <code>x</code> and <code>y</code>), but some filters or effects require special manipulation which is what EaselPlugin is for. Currently it only handles special properties related to ColorFilter and ColorMatrixFilter, and it can tween the \"frame\" property of a MovieClip.</p><p>GreenSock's EaselPlugin exposes convenient properties that aren't a part of EaselJS's API like <code>\"tint\", \"tintAmount\", \"exposure\",</code> and <code>\"brightness\"</code> for ColorFilter, as well as<code>\"saturation\", \"hue\", \"contrast\", \"colorize\",</code> and <code>\"colorizeAmount\"</code> for ColorMatrixFilter. Simply wrap the values that you'd like to tween in an \"easel\" object. Here are some examples:</p><pre class='pre-container prettyprint'>//setup stage and create a Shape into which we'll draw a circle later...<br />var canvas = document.getElementById('myCanvas'), <br />    stage = new createjs.Stage(canvas),<br />    circle = new createjs.Shape(),<br />    g = circle.graphics;<br />//draw a red circle in the Shape<br />g.beginFill(createjs.Graphics.getRGB(255, 0, 0));<br />g.drawCircle(0, 0, 100);<br />g.endFill();<br />//in order for the ColorFilter to work, we must cache() the circle<br />circle.cache(-100, -100, 200, 200);<br />//place the circle at 200,200<br />circle.x = 200;<br />circle.y = 200;<br />//add the circle to the stage<br />stage.addChild(circle);<br />//setup a \"tick\" event listener so that the EaselJS stage gets updated on every frame/tick<br />TweenLite.ticker.addEventListener(\"tick\", stage.update, stage);<br />stage.update();<br />//tween the tint of the circle to green and scale it to half-size<br />TweenLite.to(circle, 2, {scaleX:.5, scaleY:.5, easel:{tint:0x00FF00}});<br />//tween to a different tint that is only 50% (mixing with half of the original color) and animate the scale, position, and rotation simultaneously.<br />TweenLite.to(circle, 3, {scaleX:1.5, scaleY:0.8, x:250, y:150, rotation:180, easel:{tint:\"#0000FF\", tintAmount:0.5}, delay:3, ease:Elastic.easeOut});<br />//then animate the saturation down to 0<br />TweenLite.to(circle, 2, {easel:{saturation:0}, delay:6});</pre><p>You can also tween any individual properties of the ColorFilter object like this:</p><pre class='pre-container prettyprint'>TweenLite.to(circle, 3, {easel:{colorFilter:{redMultiplier:0.5, blueMultiplier:0.8, greenOffset:100}}});</pre><p>Or you can tween things like the \"exposure\" of an image which is a value from 0-2 where 1 is normal exposure, 2 is completely overexposed (white) and 0 is completely underexposed (black). Or define a \"brightness\" value which uses the same concept: a value from 0-2. These effects can be very useful for images in particular.</p><p><b>Note:</b> a common mistake is to forget to wrap EaselJS-related properties in an <code>easel</code> object which is essential for specifying your intent. You also must load the EaselJS's ColorFilter and/or ColorMatrixFilter JavaScript files to enable the filters to actually work.</p>"}},"5190c7bdac5c1b1c":{"meta":{"keywords":"","description":"","imagePath":""},"content":"<div class=\"package-feature\"><h1>Easing</h1><img style=\"width: 93%;\" src=\"https://greensock.com/wp-content/themes/greensock/images/divider.png\" class=\"fr-fic fr-dii\"><p><br></p><div class=\"ease-visualizer ease_visualizer enabled\" style=\"padding: 70px 20px 20px; border-radius: 10px; color: rgb(153, 153, 153); background-color: rgb(34, 34, 34);\"><style> \t.custom_edit_bg { \t\tfill:#303030; \t} \t#custom_edit_container { \t\ttop:0; \t\tleft:0; \t\toverflow:visible; \t\tz-index:1001; \t} .ease-instructions { \tposition: absolute; \ttop:38px; \tright: 13px; \twidth: 245px; \tcolor: #777; \tborder-bottom: 1px solid #444; \tpadding-bottom: 10px; \tpointer-events: none; \topacity: 0; \tvisibility: hidden; } .ease-instructions p { \tfont-size: 13px; \tmargin: 0; \tpadding: 2px 0; \tline-height: 16px; } .ease-visualizer .ease-instructions h2 { \tfont-size: 17px; \tcolor: #aaa; \tmargin:0; \tpadding: 2px 0; \tposition: static; }  .ease_visualizer, .ease_visualizer * { \t-webkit-box-sizing: border-box; \t-moz-box-sizing: border-box; \tbox-sizing: border-box; }  .ease-visualizer .custom-warning, .ease-visualizer .custom-warning a { \tcolor: #999; \tfont-size: 12px; \tline-height: 14px; } .ease-visualizer .command .custom-warning { \tdisplay: none; !important; \tpadding: 6px 12px; \tmargin: 8px 0 0 0; \tbackground-color: #333; \tborder-radius: 6px; } .ease_visualizer textarea:focus, .ease_visualizer input:focus, .ease_visualizer button:focus, .ease_visualizer select:focus { \toutline: 0; } .ease_menu { \tposition: absolute; \ttop: 70px; \tright: 20px; \twidth:244px; \tfont-size: 1.5em; \tcolor: #626262; \tz-index:500; \tdisplay: inline-block; } .ease_visualizer h2 { \tposition: absolute; \ttop: 24px; \tfont-size:36px; \tcolor: #999; \tfont-weight: 400; \tpadding: 0; \tmargin: 0; } .ease_menu .ease_class:hover { \tcolor: #888;  background-color: #333; } .ease_menu .ease_class { \tposition: relative; \tpadding: 2px 6px;  border-radius: 4px;  float: left;  clear: both;  cursor: pointer; } .ease_menu .ease_type { \tposition: absolute; \tdisplay: none; } .ease_menu .ease_type_quick_label {  color: #ddd; } .ease_menu .ease_type_section { \tborder-top: 1px solid #444; \tpadding: 6px;  clear:both;  position: relative;  top: 10px; } .ease_visualizer { \twidth: 100%; \tmax-width: 840px; \tpadding: 0; \tpadding-top: 70px; \tmargin-left: auto; \tmargin-right: auto; \tcolor: #999999; \tfont-size: 13px; \tfont-family: \"Signika Negative\", sans-serif; \tposition: relative; }  .ease_visualizer { \tvisibility: hidden; } .ease_visualizer.enabled { \tvisibility: visible; }  .ease_visualizer a { \tcolor: #61AC27; }  .ease_visualizer .go { \twidth: 244px; \tz-index: 5; } .ease_visualizer .command { \tposition: relative; \tpadding: 14px; \tmargin-top: 30px; \tfont-size: 18px; \tline-height: 26px; \tfont-family: consolas, menlo, monaco, \"courier new\", monospace; \tz-index: 2; \tbackground-color: rgba(255,255,255,0.025); \tcolor: #F1F2F3; \tborder-radius: 6px; } .ease_visualizer.light .command { \tbackground-color: rgba(0,0,0,0.855); }  .ease_visualizer .command pre { \tdisplay: inline; }  @media screen and (min-width: 950px) { \t.ease_visualizer .command div { \t\tdisplay: inline; \t} \t.ease_visualizer .command pre { \t\tdisplay: none; \t} }  .ease_visualizer .command .easetype_rough .rough_easeclass, .ease_visualizer .command .easetype_rough .rough_easetype { \tdisplay: inline; }  .ease_visualizer .command .number, .ease_visualizer .command .number + .display { \tcolor: #FACD22; } .ease_visualizer .command .class, .ease_visualizer .command .class + .display, .ease_visualizer .command .main_ease_class_label, .ease_visualizer .command .rough_ease_class_label { \tcolor: #72a5d8; } .ease_visualizer .command .string, .ease_visualizer .command .string + .display, .ease_visualizer .command .rough_taper_label { \tcolor: #EC7600; } .ease_visualizer .command .comment { \tcolor: #999999; \tdisplay: block !important; \tline-height: 24px; \tmargin: 5px 0; } .ease_visualizer .command .comment div { \tdisplay: block; } .ease_visualizer .command .comment .clubgreensock { \tcolor: #F1F2F3; \tpadding: 14px 6px 6px 6px; \tmargin-top: 14px; \tborder-top: 1px solid #61AC27; } .ease_visualizer .command .comment .clubgreensock:before { \tcontent: \"\"; \tfloat: left; \twidth: 62px; \theight: 74px; \tmargin-top: -8px; \tmargin-left: -6px; \tmargin-right: 14px; \tbackground: url(https://www.greensock.com/forums/uploads/packages-0558826001407339622.png) 0 0 no-repeat; \tbackground-size: 62px; } .ease_visualizer .command .keyword, .ease_visualizer .command .slowmo_yoyo_label, .ease_visualizer .command .rough_randomize_label, .ease_visualizer .command .rough_clamp_label { \tcolor: #93C763; }  .ease_visualizer label { \tposition: relative; \ttext-decoration: underline; \tcursor: pointer; } .ease_visualizer label.locked { \ttext-decoration: none; \tcursor: auto; }  .ease_visualizer label input, .ease_visualizer label select { \tposition: absolute; \tleft: 0; \ttop: 0; \tz-index: 1; \tfont: inherit; \tfont-size: inherit; \tline-height: inherit; \theight: 100%; \twidth: 100%; \tcolor: #000000 !important; \topacity: 0; \tbackground: none; \tborder: none; \tpadding: 0; \tmargin: 0; \t-webkit-appearance: none; \t-moz-appearance: none; \tappearance: none; \tcursor: pointer; } .ease_visualizer label input + .display { \tposition: relative; \tz-index: 2; } .ease_visualizer label input:focus + .display, .ease_visualizer label select:focus + .display { \t-webkit-box-shadow: 0 0 0 2px #222222, 0 0 1px 3px #FFFFFF; \t-moz-box-shadow: 0 0 0 2px #222222, 0 0 1px 3px #FFFFFF; \tbox-shadow: 0 0 0 2px #222222, 0 0 1px 3px #FFFFFF; \toutline: none; }  .ease_visualizer span[contenteditable] { \ttext-decoration: underline; \tcursor: pointer; } .ease_visualizer span[contenteditable]:focus { \t-webkit-box-shadow: 0 0 0 2px #222222, 0 0 1px 3px #FFFFFF; \t-moz-box-shadow: 0 0 0 2px #222222, 0 0 1px 3px #FFFFFF; \tbox-shadow: 0 0 0 2px #222222, 0 0 1px 3px #FFFFFF; \toutline: none; } .ease_visualizer .easeclass { \tdirection: rtl; }   .ease_visualizer .controls { \t/* margin: 10px 0; */ \tposition: relative; \tz-index: 5; } @media screen and (min-width: 720px) { \t.ease_visualizer .controls { \t\t/* margin-top: -16px; */ \t} } .ease_visualizer .controls button { \tborder: none; \tmargin: -40px 0 0 0; \tpadding: 0 24px; \tcursor: pointer; \tdisplay: inline-block; \tline-height: 44px; \tfont-size:18px; \tborder-radius: 6px; \ttext-transform: uppercase; \tfloat: right; \tposition:relative; \tcolor: #F1F2F3; \tbackground-color: #414141; \tbackground-image: -webkit-linear-gradient(top, #575757, #414141); \tbackground-image: -moz-linear-gradient(top, #575757, #414141); \tbackground-image: -ms-linear-gradient(top, #575757, #414141); \tbackground-image: -o-linear-gradient(top, #575757, #414141); \tbackground-image: linear-gradient(to bottom, #575757, #414141); \ttext-shadow: 0px 1px 0px #414141; \t-webkit-box-shadow: 0px 1px 0px #414141; \t-moz-box-shadow: 0px 1px 0px #414141; \tbox-shadow: 0px 1px 0px #414141; \t-webkit-user-select: none; \t-moz-user-select: none; \tuser-select: none; } .ease_visualizer .controls button:hover { \tbackground-color: #57a818; \tbackground-image: -webkit-linear-gradient(top, #57a818, #4d9916); \tbackground-image: -moz-linear-gradient(top, #57a818, #4d9916); \tbackground-image: -ms-linear-gradient(top, #57a818, #4d9916); \tbackground-image: -o-linear-gradient(top, #57a818, #4d9916); \tbackground-image: linear-gradient(to bottom, #57a818, #4d9916); \ttext-shadow: 0px 1px 0px #32610e; \t-webkit-box-shadow: 0px 1px 0px #32610e; \t-moz-box-shadow: 0px 1px 0px #32610e; \tbox-shadow: 0px 1px 0px #32610e; }  .ease_visualizer .visualization { \tmax-width: 100%; \theight: auto; \t/* margin-left: auto; */ \t/* margin-right: auto; */ \tz-index: 100; }  .ease_visualizer .fluidwrap { \theight: 0; \twidth: 100%; \tpadding-bottom: 100%; }  .ease_visualizer .graph { \tposition: relative; \twidth: 100%; \tmax-width: 530px; \t-webkit-user-select: none; \t-moz-user-select: none; \tuser-select: none; } .ease_visualizer.editMode.mousedown .graph { \tz-index: 100; } .ease_visualizer .graph .graphwrap { \tposition: absolute; \ttop: 0; \tright: 5.660377358490566%; \tbottom: 5.660377358490566%; \tleft: 0; } \t.ease_visualizer .graph .graph_wrap_inner { \t\tpointer-events: none; \t\toverflow:visible; \t}  .ease_visualizer .graph .svg { \tposition: absolute; \tz-index: 1; \twidth: 100%; \theight: 100%; \tcursor: default; } .ease_visualizer .graph .svg svg { \toverflow: visible; } .ease_visualizer .graph .svg .graph_bg { \tfill: #303030; } .ease_visualizer.light .graph .svg .graph_bg { \tfill: #DDDDDD; } .ease_visualizer .graph .svg .graph_linear { \tfill: none; \tstroke: #1d1d1d; \tstroke-width: 1.5px; } .ease_visualizer.light .graph .svg .graph_linear { \tstroke: #EDEDED; } .ease_visualizer .graph .svg .graph_line { \tfill: none; \tstroke: rgba(255,255,255,0.07); \tstroke-width: 1.5px; } .ease_visualizer.light .graph .svg .graph_line { \tstroke: rgba(0,0,0,0.1); } .ease_visualizer .graph .svg .graph_path, .ease_visualizer .graph .svg .ease_template { \tfill: none; \tstroke: #666666; \tstroke-width: 2px; \tstroke-linecap: round; \tstroke-linejoin: round; } .ease_visualizer .graph .svg .ease_template { \tstroke: #F1F2F3; } .ease_visualizer .graph .svg .ease_template_bg { \tfill: transparent; }  .ease_visualizer.light .graph .svg .graph_path, .ease_visualizer.light .graph .svg .ease_template { \tstroke: #AAAAAA; } .ease_visualizer.light .graph .svg .ease_template { \tstroke: #CCC; } .ease_visualizer .graph .svg .graph_path_reveal { \tfill: none; \tstroke: #F1F2F3; \tstroke-width: 0.4px; \tstroke-linecap: round; \tstroke-linejoin: round; } .ease_visualizer.light .graph .svg .graph_path_reveal { \tstroke: #3C3C3C; }  .ease_visualizer .graph .svg .control, .ease_visualizer .graph .svg .point { \tcursor: pointer; } .ease_visualizer .graph .svg .point, .ease_visualizer .graph .svg .control { \tfill: #61AC27; \tstroke: transparent; \tstroke-width: 2px; } .ease_visualizer .graph .svg .point { \tfill: #61AC27; } .ease_visualizer .graph .svg .line { \tstroke: #61AC27; \tstroke-width: 0.3px; \tstroke-dasharray: 1,0.6; } .ease_visualizer .graph .svg .outside .point, .ease_visualizer .graph .svg .outside .control { \tfill: #E81146; } .ease_visualizer .graph .svg .outside .line { \tstroke: #E81146; } .ease_visualizer .graph .svg .mouse_catch { \tfill: transparent; } .ease_visualizer .graph .custom_edit { \tvisibility: hidden; } .ease_visualizer.editMode .graph .custom_edit { \tvisibility: visible; } .ease_visualizer .graph .progress { \tposition: absolute; \theight: 100%; \twidth: 100%; \tz-index: 0; } .ease_visualizer .graph .progress_bar .label { \tposition: absolute; \tline-height: 30px; } .ease_visualizer .graph .progress_bar.horizontal .label { \tbottom: 1px; \twidth: 100%; \ttext-align: center; } .ease_visualizer .graph .progress_bar.vertical .label { \ttop: 50%; \tleft: 2px; \tmargin-left: -50%; \ttransform-origin: top left; \t-webkit-transform: matrix(0, 1, -1, 0, 0, 0); \t-moz-transform: matrix(0, 1, -1, 0, 0, 0); \ttransform: matrix(0, 1, -1, 0, 0, 0); } .ease_visualizer .graph .progress_bar { \tposition: absolute; \tbackground-color: #2f2f2f; } .ease_visualizer.light .graph .progress_bar { \tbackground-color: #DDDDDD; } .ease_visualizer .graph .progress_bar.horizontal { \theight: 2px; \twidth: auto; \ttop: auto; \tbottom: 0; \tleft: 0; \tright: 5.660377358490566%; } .ease_visualizer .graph .progress_bar.vertical { \twidth: 2px; \ttop: 0; \tbottom: 5.660377358490566%; \tleft: auto; \tright: 0; } .ease_visualizer .graph .progress_fill { \theight: 100%; \twidth: 100%; \tbackground-color: #999999; } .ease_visualizer.light .graph .progress_fill { \tbackground-color: #777777; } .ease_visualizer .graph .progress_bar.vertical .progress_fill { \tbackground-color: #61AC27; } .ease_visualizer .graph .progress_bar.vertical .progress_joint { \tposition: absolute; \twidth: 10px; \theight: 10px; \tmargin-left: -4px; \tmargin-top: -5px; \tborder-radius: 50%; \tbackground-color: rgb(136, 206, 2); } @media screen and (min-width: 560px) { \t.ease_visualizer .graph .progress_bar.vertical .progress_joint { \t\twidth: 25px; \t\theight: 25px; \t\tmargin-left: -11px; \t\tmargin-top: -12px; \t} } .ease_visualizer .graph .progress_number { \tposition: absolute; \tbottom: 0; \tright: -9px; \tline-height: 0.35em; \ttext-align: right; }  @media screen and (max-width: 430px) { \t.ease_visualizer .graph .progress_bar .label { \t\tdisplay: none; \t} \t.ease_visualizer .graph .progress_number { \t\tdisplay: none; \t} }   .ease_visualizer .clock { \tposition: relative; \twidth: 100%; \tmax-width: 530px; \tborder-radius: 50%;  \tbackground-color: #303030; } .ease_visualizer.light .clock { \tbackground-color: #DDDDDD; } .ease_visualizer .clock_ease, .ease_visualizer .clock_linear, .ease_visualizer .clock_guide { \tposition: absolute; \tleft: 50%; \twidth: 2px; \tmargin-left: -1px; } .ease_visualizer .clock_linear { \ttop: 15%; \theight: 35%; \twidth: 2px; \tmargin-left: -1px; \tborder-radius: 2px 2px 0 0; \tbackground-color: #999999; } .ease_visualizer.light .clock_linear { \tbackground-color: #3C3C3C; } .ease_visualizer .clock_ease { \theight: 50%; \tborder-radius: 2px 2px 0 0; \tbackground-color: #61AC27; } .ease_visualizer .clock_guide { \ttop: 0; \theight: 50%; \tbackground-color: #1d1d1d; \twidth: 1px; \tmargin-left: -0.5px; } .ease_visualizer.light .clock_guide { \tbackground-color: #EDEDED; } .ease_visualizer .clock_joint, .ease_visualizer .clock_ease .clock_joint{ \tposition: absolute; \twidth: 10px; \theight: 10px; \ttop: 50%; \tleft: 50%; \tmargin-left: -5px; \tmargin-top: -5px; \tborder-radius: 50%; \tbackground-color: #999999; } .ease_visualizer.light .clock_joint { \tbackground-color: #3C3C3C; } .ease_visualizer .clock_ease .clock_joint { \ttop: -1px; \tbackground-color: #61AC27; } @media screen and (min-width: 560px) { \t.ease_visualizer .clock_ease .clock_joint { \t\twidth: 16px; \t\theight: 16px; \t\tmargin-left: -8px; \t\tmargin-top: -8px; \t} }   .ease_visualizer .box { \tposition: relative; \twidth: 100%; \tmax-width: 530px; \tbackground-color: #303030; } .ease_visualizer.light .box { \tbackground-color: #DDDDDD; } .ease_visualizer .box .boxwrap { \tposition: absolute; \ttop: 0; \tright: 0; \tbottom: 0; \tleft: 0; } .ease_visualizer .boxbox { \tposition: relative; \twidth: 20%; \twhite-space: pre; \ttext-align: center; \tmargin-bottom: .8%; \tborder-radius: 6px; \theight: 16%; \tpadding: 0 0.5em; \tcolor: #ccc; \tbackground-color: #666666;  font-size: 16px;  line-height: 80px; } .ease_visualizer .boxbox.box_custom { \tbackground-color: rgb(136, 206, 2); }   .ease_visualizer .ease_selector { \tposition: absolute; \ttop: 0; \tbottom: 0; \tleft: 0; \tright: 0; \tz-index: 6; \tbackground-color: #222; \toverflow: auto; \tpadding: 4px; } .ease_visualizer .ease_selector .ease_selector_wrap { \twidth: 100%; \theight: auto; \tmargin-left: auto; \tmargin-right: auto; \t-webkit-user-select: none; \t-moz-user-select: none; \tuser-select: none; \tbackground-color: #222222; } .ease_visualizer .ease_selector .ease_class { \toverflow: hidden; \tfloat: left; \twidth: 49.5%; \tmargin: 0 1% 0 0; \tposition: relative; } .ease_visualizer .ease_selector .ease_class:nth-child(even) { \tmargin: 0; } .ease_visualizer.light .ease_selector .ease_class { \tborder-color: #DDDDDD; } @media screen and (max-width: 500px) { \t.ease_visualizer .ease_selector .ease_class { \t\tclear: left; \t\twidth: 100%; \t\tmargin-right: 0; \t} } .ease_visualizer .ease_selector input { \tdisplay: none; } .ease_visualizer .ease_selector .ease_type, .ease_visualizer .ease_selector button { \tfont-family: consolas, menlo, monaco, \"courier new\", monospace; \tfont-weight: normal; \tfont-size: 12px; \ttext-align: center; \tcolor: #FFFFFF; } .ease_visualizer .ease_selector .ease_type { \tposition: absolute; \tz-index: 2; \twidth: 100%; \tfont-size: 22px; \tline-height: 34px; \tcolor: #fff; } .ease_visualizer .ease_selector button { \tborder: none; \tmargin: 1px 0 0 0; \tpadding: 0; \tbackground: url(https://greensock.com/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer-dark.gif) 0 0 no-repeat; \tbackground-size: 700%; \tfont-weight: bold; \tcolor: #3C3C3C; \tfloat: left; \theight: 0; \twidth: 33.33333%; \tpadding-bottom: 33.33333%; \tpadding-top: 28px; \tposition: relative; } .ease_visualizer .ease_selector button span { \tcolor: #999; \tbackground-color: #111; } .ease_visualizer .ease_selector .other button { \twidth: 25%; } .ease_visualizer .ease_selector button:hover { \t-webkit-box-shadow: 0 0 5px #4298ED inset; \t-moz-box-shadow: 0 0 5px #4298ED inset; \tbox-shadow: 0 0 5px #4298ED inset; } .ease_visualizer .ease_selector button:focus, .ease_visualizer .ease_selector button:active { \toutline: 0; \t-webkit-box-shadow: 0 0 8px #4298ED inset; \t-moz-box-shadow: 0 0 8px #4298ED inset; \tbox-shadow: 0 0 8px #4298ED inset; } .ease_visualizer .ease_selector button.Back.easeOut { \tbackground-position: 0% 0%; } .ease_visualizer .ease_selector button.Back.easeInOut { \tbackground-position: 16.6% 0%; } .ease_visualizer .ease_selector button.Back.easeIn { \tbackground-position: 33.3% 0%; }  .ease_visualizer .ease_selector button.Bounce.easeOut { \tbackground-position: 50% 0%; } .ease_visualizer .ease_selector button.Bounce.easeInOut { \tbackground-position: 66.6% 0%; } .ease_visualizer .ease_selector button.Bounce.easeIn { \tbackground-position: 83.3% 0%; }  .ease_visualizer .ease_selector button.Circ.easeOut { \tbackground-position: 100% 0%; } .ease_visualizer .ease_selector button.Circ.easeInOut { \tbackground-position: 0% 24.1%; } .ease_visualizer .ease_selector button.Circ.easeIn { \tbackground-position: 16.6% 24.1%; }  .ease_visualizer .ease_selector button.Elastic.easeOut { \tbackground-position: 33.3% 24.1%; } .ease_visualizer .ease_selector button.Elastic.easeInOut { \tbackground-position: 50% 24.1%; } .ease_visualizer .ease_selector button.Elastic.easeIn { \tbackground-position: 66.6% 24.1%; }  .ease_visualizer .ease_selector button.Expo.easeOut { \tbackground-position: 83.3% 24.1%; } .ease_visualizer .ease_selector button.Expo.easeInOut { \tbackground-position: 100% 24.1%; } .ease_visualizer .ease_selector button.Expo.easeIn { \tbackground-position: 0% 48.2%; }  .ease_visualizer .ease_selector button.Power0.easeOut { \tbackground-position: 16.6% 48.2%; } .ease_visualizer .ease_selector button.Power0.easeInOut { \tbackground-position: 16.6% 48.2%; } .ease_visualizer .ease_selector button.Power0.easeIn { \tbackground-position: 16.6% 48.2%; }  .ease_visualizer .ease_selector button.Power1.easeOut { \tbackground-position: 33.3% 48.2%; } .ease_visualizer .ease_selector button.Power1.easeInOut { \tbackground-position: 50% 48.2%; } .ease_visualizer .ease_selector button.Power1.easeIn { \tbackground-position: 66.6% 48.2%; }  .ease_visualizer .ease_selector button.Power2.easeOut { \tbackground-position: 83.3% 48.2%; } .ease_visualizer .ease_selector button.Power2.easeInOut { \tbackground-position: 100% 48.2%; } .ease_visualizer .ease_selector button.Power2.easeIn { \tbackground-position: 0% 72.4%; }  .ease_visualizer .ease_selector button.Power3.easeOut { \tbackground-position: 16.6% 72.4%; } .ease_visualizer .ease_selector button.Power3.easeInOut { \tbackground-position: 33.3% 72.4%; } .ease_visualizer .ease_selector button.Power3.easeIn { \tbackground-position: 50% 72.4%; }  .ease_visualizer .ease_selector button.Power4.easeOut { \tbackground-position: 66.6% 72.4%; } .ease_visualizer .ease_selector button.Power4.easeInOut { \tbackground-position: 83.3% 72.4%; } .ease_visualizer .ease_selector button.Power4.easeIn { \tbackground-position: 100% 72.4%; }  .ease_visualizer .ease_selector button.Sine.easeOut { \tbackground-position: 0% 96.5%; } .ease_visualizer .ease_selector button.Sine.easeInOut { \tbackground-position: 16.6% 96.5%; } .ease_visualizer .ease_selector button.Sine.easeIn { \tbackground-position: 33.3% 96.5%; }  .ease_visualizer .ease_selector button.CustomEase { \tbackground-position: 50% 96.5%; } .ease_visualizer .ease_selector .other button.CustomEase { \tbackground-position: 50% 99%; } .ease_visualizer .ease_selector button.RoughEase { \tbackground-position: 66.6% 96.5%; } .ease_visualizer .ease_selector .other button.RoughEase { \tbackground-position: 66.6% 99%; } .ease_visualizer .ease_selector button.SlowMo { \tbackground-position: 83.3% 96.5%; } .ease_visualizer .ease_selector .other button.SlowMo { \tbackground-position: 83.3% 99%; } .ease_visualizer .ease_selector button.SteppedEase { \tbackground-position: 100% 96.5%; } .ease_visualizer .ease_selector .other button.SteppedEase { \tbackground-position: 100% 99%; } </style><h2>GreenSock Ease Visualizer</h2><div class=\"ease-instructions\"><h2>Hints</h2><p>Add point: ALT-CLICK on line</p><p>Toggle smooth/corner: ALT-CLICK anchor</p><p>Get handle from corner anchor: ALT-DRAG</p><p>Toggle select: SHIFT-CLICK anchor</p><p>Delete anchor: press DELETE key</p><p>Undo: CTRL-Z</p></div><div class=\"ease_selector\" style=\"display: none; opacity: 0;\"><div class=\"ease_selector_wrap\"><div class=\"ease_class\"><div class=\"ease_type\">Power0 (Linear)</div><button class=\"Power0 easeOut\"><span>easeNone</span></button>\n<button class=\"Power0 easeInOut\"><span>easeNone</span></button>\n<button class=\"Power0 easeIn\"><span>easeNone</span></button></div><div class=\"ease_class\"><div class=\"ease_type\">Power1</div><button class=\"Power1 easeOut\"><span>easeOut</span></button>\n<button class=\"Power1 easeInOut\"><span>easeInOut</span></button>\n<button class=\"Power1 easeIn\"><span>easeIn</span></button></div><div class=\"ease_class\"><div class=\"ease_type\">Power2</div><button class=\"Power2 easeOut\"><span>easeOut</span></button>\n<button class=\"Power2 easeInOut\"><span>easeInOut</span></button>\n<button class=\"Power2 easeIn\"><span>easeIn</span></button></div><div class=\"ease_class\"><div class=\"ease_type\">Power3</div><button class=\"Power3 easeOut\"><span>easeOut</span></button>\n<button class=\"Power3 easeInOut\"><span>easeInOut</span></button>\n<button class=\"Power3 easeIn\"><span>easeIn</span></button></div><div class=\"ease_class\"><div class=\"ease_type\">Power4</div><button class=\"Power4 easeOut\"><span>easeOut</span></button>\n<button class=\"Power4 easeInOut\"><span>easeInOut</span></button>\n<button class=\"Power4 easeIn\"><span>easeIn</span></button></div><div class=\"ease_class\"><div class=\"ease_type\">Back</div><button class=\"Back easeOut tall\"><span>easeOut</span></button>\n<button class=\"Back easeInOut tall\"><span>easeInOut</span></button>\n<button class=\"Back easeIn tall\"><span>easeIn</span></button></div><div class=\"ease_class\"><div class=\"ease_type\">Elastic</div><button class=\"Elastic easeOut tall\"><span>easeOut</span></button>\n<button class=\"Elastic easeInOut tall\"><span>easeInOut</span></button>\n<button class=\"Elastic easeIn tall\"><span>easeIn</span></button></div><div class=\"ease_class\"><div class=\"ease_type\">Bounce</div><button class=\"Bounce easeOut\"><span>easeOut</span></button>\n<button class=\"Bounce easeInOut\"><span>easeInOut</span></button>\n<button class=\"Bounce easeIn\"><span>easeIn</span></button></div><div class=\"ease_class\"><div class=\"ease_type\">Other</div><button class=\"RoughEase\"><span>RoughEase</span></button>\n<button class=\"SlowMo\"><span>SlowMo</span></button>\n<button class=\"SteppedEase\"><span>SteppedEase</span></button></div><div class=\"ease_class\"><div class=\"ease_type\">Circ</div><button class=\"Circ easeOut\"><span>easeOut</span></button>\n<button class=\"Circ easeInOut\"><span>easeInOut</span></button>\n<button class=\"Circ easeIn\"><span>easeIn</span></button></div><div class=\"ease_class\"><div class=\"ease_type\">Expo</div><button class=\"Expo easeOut\"><span>easeOut</span></button>\n<button class=\"Expo easeInOut\"><span>easeInOut</span></button>\n<button class=\"Expo easeIn\"><span>easeIn</span></button></div><div class=\"ease_class\"><div class=\"ease_type\">Sine</div><button class=\"Sine easeOut\"><span>easeOut</span></button>\n<button class=\"Sine easeInOut\"><span>easeInOut</span></button>\n<button class=\"Sine easeIn\"><span>easeIn</span></button></div></div></div><div class=\"visualization graph\"><div class=\"fluidwrap\"><div class=\"graphwrap\"><br></div><div class=\"progress\"><div class=\"progress_bar horizontal\"><div class=\"progress_fill\" style=\"transform-origin: left center 0px; transform: matrix(1, 0, 0, 1, 0, 0);\"><br></div><div class=\"label\">progress</div></div><div class=\"progress_bar vertical\"><div class=\"progress_fill\" style=\"transform-origin: left bottom 0px; transform: matrix(1, 0, 0, 1, 0, 0);\"><br></div><div class=\"progress_joint\" style=\"top: 0%;\"><br></div><div class=\"label\">value</div></div><div class=\"progress_number\">1.00</div></div></div></div><div class=\"visualization clock\" style=\"display: none;\"><div class=\"fluidwrap\"><div class=\"clock_guide\"><br></div><div class=\"clock_linear\"><br></div><div class=\"clock_ease\"><div class=\"clock_joint\"><br></div></div><div class=\"clock_joint\"><br></div></div></div><div class=\"visualization box\" style=\"display: none;\"><div class=\"fluidwrap\"><div class=\"boxwrap\"><div class=\"boxbox box_power0\">Power0</div><div class=\"boxbox box_power1\">Power1</div><div class=\"boxbox box_power2\">Power2</div><div class=\"boxbox box_power3\">Power3</div><div class=\"boxbox box_power4\">Power4</div><div class=\"boxbox box_custom\"><br></div></div></div></div><div class=\"ease_menu\" style=\"color: rgb(98, 98, 98); width: 233px;\"><div class=\"ease_class\">Power0</div><div class=\"ease_class\">Power1</div><div class=\"ease_class\" style=\"color: rgb(0, 0, 0); background-color: rgb(136, 206, 2);\">Power2</div><div class=\"ease_class\">Power3</div><div class=\"ease_class\">Power4</div><div class=\"ease_class\">Back</div><div class=\"ease_class\">Elastic</div><div class=\"ease_class\">Bounce</div><div class=\"ease_class\">Rough</div><div class=\"ease_class\">SlowMo</div><div class=\"ease_class\">Stepped</div><div class=\"ease_class\">Circ</div><div class=\"ease_class\">Expo</div><div class=\"ease_class\">Sine</div><div class=\"ease_class\" style=\"color:#72a5d8;\">Custom</div><div class=\"ease_type_section\" style=\"visibility: visible;\">Type: <label class=\"ease_type_quick_label\"><select class=\"ease_type_quick_select editable\" data-type=\"ease_type_quick\" tabindex=\"-1\"><option value=\"easeIn\">easeIn</option><option value=\"easeInOut\">easeInOut</option><option selected=\"selected\" value=\"easeOut\">easeOut</option></select><span class=\"display\" contenteditable=\"true\" spellcheck=\"true\">easeOut</span></label></div></div><div class=\"controls\"><button class=\"go\" style=\"width: 233px;\">Run</button></div><div class=\"command\"><div class=\"comment\">// click and modify the underlined values</div><div><span class=\"class\">TweenLite</span>.to(<label class=\"target_label\"><select class=\"target_select\" data-type=\"target\"><option selected=\"selected\" value=\"graph\">graph</option><option value=\"clock\">clock</option><option value=\"box\">box</option></select><span class=\"display\">graph</span></label>, <label class=\"duration_label\"><select class=\"number duration editable\" data-type=\"duration\" tabindex=\"-1\"><option value=\"0.5\">0.5    </option><option value=\"1\">1</option><option selected=\"selected\" value=\"2.5\">2.5</option><option value=\"5\">5</option><option value=\"10\">10</option></select><span class=\"display\" contenteditable=\"true\" spellcheck=\"true\">2.5</span></label>, {</div><div><!-- easeline --><pre>  </pre>ease: <label class=\"main_ease_class_label\"><select class=\"main_ease_class_select\" data-type=\"main_ease_class\" style=\"visibility: hidden;\"><option value=\"Back\">Back</option><option value=\"Bounce\">Bounce</option><option value=\"Circ\">Circ</option><option value=\"Elastic\">Elastic</option><option value=\"Expo\">Expo</option><option value=\"Power0\">Linear/Power0</option><option value=\"Power1\">Quad/Power1</option><option selected=\"selected\" value=\"Power2\">Cubic/Power2</option><option value=\"Power3\">Quart/Power3</option><option value=\"Power4\">Strong/Quint/Power4</option><option value=\"Sine\">Sine</option><option value=\"RoughEase\">RoughEase</option><option value=\"SlowMo\">SlowMo</option><option value=\"SteppedEase\">SteppedEase</option><option value=\"CustomEase\">Custom</option></select><span class=\"display\">Power2</span></label>.<!-- start basic --><span class=\"main_ease_type basic_ease elastic_ease back_ease\"><label class=\"main_basic_ease_type_label\"><select class=\"basic_ease_type_select elastic_ease back_ease\" data-type=\"main_basic_ease_type\"><option value=\"easeIn\">easeIn</option><option value=\"easeInOut\">easeInOut</option><option selected=\"selected\" value=\"easeOut\">easeOut</option></select><span class=\"display\">easeOut</span></label><span class=\"main_ease_type basic_ease\">,</span></span><!-- start linear --><span class=\"main_ease_type linear_ease\" style=\"display: none;\">easeNone,</span><!-- start rough --><span class=\"main_ease_type rough_ease\" style=\"display: none;\">ease.config({ <div><pre>    </pre>template: <label class=\"rough_ease_class_label\"><select class=\"rough_ease_class_select\" data-type=\"rough_ease_class\"><option value=\"Back\">Back</option><option value=\"Bounce\">Bounce</option><option value=\"Circ\">Circ</option><option value=\"Elastic\">Elastic</option><option value=\"Expo\">Expo</option><option selected=\"selected\" value=\"Power0\">Linear/Power0</option><option value=\"Power1\">Quad/Power1</option><option value=\"Power2\">Cubic/Power2</option><option value=\"Power3\">Quart/Power3</option><option value=\"Power4\">Strong/Quint/Power4</option><option value=\"Sine\">Sine</option></select><span class=\"display\">Power0</span></label>.<span class=\"rough_ease_type rough_basic_ease\" style=\"display: none;\"><label class=\"rough_basic_ease_type_label\"><select class=\"rough_ease_type_select\" data-type=\"rough_basic_ease_type\"><option value=\"easeIn\">easeIn</option><option value=\"easeInOut\">easeInOut</option><option selected=\"selected\" value=\"easeOut\">easeOut</option></select><span class=\"display\">easeOut</span></label></span><span class=\"rough_ease_type rough_linear_ease\">easeNone</span>,</div><div><pre>    </pre>strength: <label class=\"rough_strength_label\"><select class=\"number rough_strength editable\" data-type=\"rough_strength\" tabindex=\"-1\"><option value=\"0.2\">0.2    </option><option value=\"0.5\">0.5</option><option selected=\"selected\" value=\"1\">1</option><option value=\"1.5\">1.5</option><option value=\"2\">2</option></select><span class=\"display\" contenteditable=\"true\" spellcheck=\"true\">1</span></label>,</div><div><pre>    </pre>points: <label class=\"rough_points_label\"><select class=\"number rough_points editable\" data-type=\"rough_points\" tabindex=\"-1\"><option value=\"10\">10    </option><option selected=\"selected\" value=\"20\">20</option><option value=\"50\">50</option><option value=\"100\">100</option><option value=\"200\">200</option></select><span class=\"display\" contenteditable=\"true\" spellcheck=\"true\">20</span></label>,</div><div><pre>    </pre>taper: <label class=\"rough_taper_label\"><select class=\"rough_taper_select\" data-type=\"rough_taper\"><option selected=\"selected\" value='\"none\"'>none</option><option value='\"in\"'>in</option><option value='\"out\"'>out</option><option value='\"both\"'>both</option></select><span class=\"display\">\"none\"</span></label>,</div><div><pre>    </pre>randomize: <label class=\"rough_randomize_label\"><input type=\"checkbox\" checked=\"checked\" class=\"rough_randomize_checkbox\" data-type=\"rough_randomize\"><span class=\"display\">true</span></label>,</div><div><pre>    </pre>clamp: <label class=\"rough_clamp_label\"><input type=\"checkbox\" class=\"rough_clamp_checkbox\" data-type=\"rough_clamp\"><span class=\"display\">false</span></label></div><div><pre>  </pre>}),</div></span><!-- start slowmo --><span class=\"main_ease_type slowmo_ease\" style=\"display: none;\">ease.config(<label class=\"slowmo_ratio_label\"><select class=\"number slowmo_ratio editable\" data-type=\"slowmo_ratio\" tabindex=\"-1\"><option value=\"0.1\">0.1    </option><option value=\"0.3\">0.3</option><option value=\"0.5\">0.5</option><option selected=\"selected\" value=\"0.7\">0.7</option><option value=\"0.9\">0.9</option></select><span class=\"display\" contenteditable=\"true\" spellcheck=\"true\">0.7</span></label>, <label class=\"slowmo_power_label\"><select class=\"number slowmo_power editable\" data-type=\"slowmo_power\" tabindex=\"-1\"><option value=\"0.1\">0.1    </option><option value=\"0.4\">0.4</option><option selected=\"selected\" value=\"0.7\">0.7</option><option value=\"1\">1</option><option value=\"2\">2</option></select><span class=\"display\" contenteditable=\"true\" spellcheck=\"true\">0.7</span></label>, <label class=\"slowmo_yoyo_label\"><input type=\"checkbox\" class=\"slowmo_yoyo_checkbox\" data-type=\"slowmo_yoyo\"><span class=\"display\">false</span></label>),</span><!-- start stepped --><span class=\"main_ease_type stepped_ease\" style=\"display: none;\">config(<label class=\"stepped_steps_label\"><select class=\"number stepped_steps editable\" data-type=\"stepped_steps\" tabindex=\"-1\"><option value=\"2\">2     </option><option value=\"6\">6</option><option selected=\"selected\" value=\"12\">12</option><option value=\"20\">20</option><option value=\"40\">40</option></select><span class=\"display\" contenteditable=\"true\" spellcheck=\"true\">12</span></label>),</span><!-- start Elastic --><span class=\"main_ease_type elastic_ease\" style=\"display: none;\">.config(<label class=\"elastic_amplitude_label\"><select class=\"number elastic_amplitude editable\" data-type=\"elastic_amplitude\" tabindex=\"-1\"><option selected=\"selected\" value=\"1\">1    </option><option value=\"1.2\">1.2</option><option value=\"1.5\">1.5</option><option value=\"1.75\">1.75</option><option value=\"2\">2</option><option value=\"2.5\">2.5</option></select><span class=\"display\" contenteditable=\"true\" spellcheck=\"true\">1</span></label>, <label class=\"elastic_period_label\"><select class=\"number elastic_period editable\" data-type=\"elastic_period\" tabindex=\"-1\"><option value=\"0.1\">0.1    </option><option value=\"0.2\">0.2</option><option selected=\"selected\" value=\"0.3\">0.3</option><option value=\"0.4\">0.4</option><option value=\"0.5\">0.5</option><option value=\"0.75\">0.75</option><option value=\"1\">1</option></select><span class=\"display\" contenteditable=\"true\" spellcheck=\"true\">0.3</span></label>),</span><!-- start Back --><span class=\"main_ease_type back_ease\" style=\"display: none;\">.config(<label class=\"back_amount_label\"><select class=\"number back_amount editable\" data-type=\"back_amount\" tabindex=\"-1\"><option value=\"1\">1    </option><option value=\"1.4\">1.4</option><option selected=\"selected\" value=\"1.7\">1.7</option><option value=\"2\">2</option><option value=\"3\">3</option><option value=\"4\">4</option></select><span class=\"display\" contenteditable=\"true\" spellcheck=\"true\">1.7</span></label>),</span><!-- start custom --><span class=\"main_ease_type custom_ease\" style=\"display: none;\">create(\"custom\", \"<span class=\"string custom_path\" contenteditable=\"true\" spellcheck=\"true\">M0,0,C0.126,0.382,0.282,0.674,0.44,0.822,0.632,1.002,0.818,1.001,1,1</span>\"),</span>\n<!-- close ease line --></div><div class=\"prop prop_graph\"><pre>  </pre>y: <span class=\"number\">-500</span></div><div class=\"prop prop_clock\" style=\"display: none;\"><pre>  </pre>rotation: <span class=\"number\">360</span></div><div class=\"prop prop_box\" style=\"display: none;\"><pre>  </pre>x: <span class=\"string\">\"400%\"</span></div><div>});</div><div class=\"custom-warning\">// *Requires CustomEase which can be downloaded at <a href=\"http://greensock.com/customease/\">greensock.com/customease</a> (not the CDN or github).</div></div><script src=\"/js/src/plugins/MorphSVGPlugin.min.js\"></script>\n<script src=\"/js/src/utils/PathEditor.min.js\"></script>\n<script src=\"/js/src/easing/CustomEase.min.js\"></script></div><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script><p><br></p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/CustomBounce\"><span data-link-id=\"19160c04837df0bb\"></span></span></h1></div><p>Configure your own bounce ease with squash and stretch</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/CustomWiggle\"><span data-link-id=\"681f9501cd7f99b3\"></span></span></h1></div><p>Creates highly configurable wiggle eases.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/CustomEase\"><span data-link-id=\"1315d24279922963\"></span></span></h1></div><p>Allows you to create literally **ANY** ease by simply drawing it in the Ease Visualizer or by copying/pasting an SVG path. Unlimited control points.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/SteppedEase\"><span data-link-id=\"0879a53eb4051ccf\"></span></span></h1></div><p>Most easing equations give a smooth, gradual transition between the start and end values, but SteppedEase provides an easy way to define a specific number of steps that the transition should take.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/SlowMo\"><span data-link-id=\"830525841e3dd3cb\"></span></span></h1></div><p>SlowMo is a configurable ease that produces a slow-motion effect that decelerates initially, then moves linearly for a certain portion of the ease (which you can choose) and then accelerates again at the end; it's great for effects like zooming text onto the screen, smoothly moving it long enough for people to read it, and then zooming it off the screen</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/RoughEase\"><span data-link-id=\"57d33bbbf0c4c2c2\"></span></span></h1></div><p>Most easing equations give a smooth, gradual transition between the start and end values, but RoughEase provides an easy way to get a rough, jagged effect instead, or you can also get an evenly-spaced back-and-forth movement if you prefer.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Strong\"><span data-link-id=\"c2327a2ee1c89b0c\"></span></span></h1></div><p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 4 which is identical to the <code>Power4</code> ease.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Sine\"><span data-link-id=\"07392828b060a423\"></span></span></h1></div><p>Eases with a relatively low power either at the beginning (easeIn), the end (easeOut), or both (easeInOut).</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Quint\"><span data-link-id=\"424d2c8144aca82b\"></span></span></h1></div><p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 4 which is identical to the <code>Power4</code> ease.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Quart\"><span data-link-id=\"3eab3f172dae806f\"></span></span></h1></div><p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 3 which is identical to the <code>Power2</code> ease.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Quad\"><span data-link-id=\"91943bd05ded63bb\"></span></span></h1></div><p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 1 which is identical to the <code>Power1</code> ease.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Power4\"><span data-link-id=\"c5344f5dcfcf49a3\"></span></span></h1></div><p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 4 which is identical to <code>Quint</code> and <code>Strong</code> but with a more intuitive name.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Power3\"><span data-link-id=\"f8a990bb64a897ea\"></span></span></h1></div><p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 3 which is identical to <code>Quart</code> but with a more intuitive name.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Power2\"><span data-link-id=\"059d5eab36bbdd55\"></span></span></h1></div><p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 2 which is identical to <code>Cubic</code> but with a more intuitive name.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Power1\"><span data-link-id=\"22c860af2d1dbbcb\"></span></span></h1></div><p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 1 which is identical to <code>Quad</code> but with a more intuitive name.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Power0\"><span data-link-id=\"d3b047e7bd016acd\"></span></span></h1></div><p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 0 which is identical to <code>Linear</code> but with a more intuitive name.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Linear\"><span data-link-id=\"0c466d8095583e88\"></span></span></h1></div><p>Linear ease with no acceleration or deceleration. Linear is identical to <code>Power0</code>.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Expo\"><span data-link-id=\"fe7727d7fa29b16b\"></span></span></h1></div><p>Eases in a strong fashion either at the beginning (easeIn), the end (easeOut), or both (easeInOut).</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Elastic\"><span data-link-id=\"f7f7759fe81fd22f\"></span></span></h1></div><p>Eases with an elastic effect either at the beginning (easeIn), the end (easeOut), or both (easeInOut).</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/EaseLookup\"><span data-link-id=\"09af4edb7491fd9e\"></span></span></h1></div><p>EaseLookup enables you to find the easing function associated with a particular name (String), like \"strongEaseOut\" which can be useful when loading in XML data that comes in as Strings but needs to be translated to native function references.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Ease\"><span data-link-id=\"18e2a901c1ec4b19\"></span></span></h1></div><p><br></p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Cubic\"><span data-link-id=\"cb31e7d72b0e7b00\"></span></span></h1></div><p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 2 which is identical to the <code>Power2</code> ease.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Bounce\"><span data-link-id=\"aa9969ee39687902\"></span></span></h1></div><p>Eases, bouncing either at the beginning (easeIn), the end (easeOut), or both (easeInOut).</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Circ\"><span data-link-id=\"723964a4fd3ac4af\"></span></span></h1></div><p>Eases with an abrupt change in velocity either at the beginning (easeIn), the end (easeOut), or both (easeInOut).</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Back\"><span data-link-id=\"ea91e06b445f4ac7\"></span></span></h1></div><p>Eases with an overshoot either at the beginning (easeIn), the end (easeOut), or both (easeInOut).</p></div>"},"52db442320b34fc1":{"meta":{"keywords":["js.TweenLite","Animation"],"title":"TweenLite","description":"TweenLite is an extremely fast, lightweight, and flexible animation tool that serves as the foundation of the GreenSock Animation Platform (GSAP). A TweenLite instance handles tweening one or more properties of any object (or array of objects) over time."},"header":{"content":"<p>TweenLite is an extremely fast, lightweight, and flexible animation tool that serves as the foundation of the GreenSock Animation Platform (GSAP). A TweenLite instance handles tweening one or more properties of <b>any object</b> (or array of objects) over time. TweenLite can be used on its own to accomplish most animation chores with minimal file size or it can be used in conjunction with advanced sequencing tools like <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineLite\"><span data-link-id=\"2b3bb68a78e65fe7\"></span></span> or <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineMax\"><span data-link-id=\"32bc2e8f667c28b7\"></span></span> to make complex tasks much simpler. With scores of other animation frameworks to choose from, why consider the GSAP?:</p><ul><li><b>SPEED </b>- The platform has been highly optimized for maximum performance. See some speed comparisons yourself at <a href=\"http://greensock.com/js/speed.html\" target=\"\">http://greensock.com/js/speed.html</a></li><li><b>Freakishly robust feature set </b>- In addition to tweening any numeric property of any object, TweenLite has plugins that give it the ability to tween hex colors, beziers, CSS, SVG, do morphing, plus <b>LOTS</b> more. It can round values, use relative values, smoothly <code>reverse()</code> on the fly, automatically detect and accommodate getter/setter functions, employ virtually any easing equation, <code>pause()/resume()</code> anytime, and intelligently manage conflicting tweens of the same object with various overwrite modes. <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenMax\"><span data-link-id=\"7eebd4b20adcaecc\"></span></span> extends TweenLite and adds even more capabilities like repeat, yoyo, repeatDelay, and more.</li><li><b>Sequencing, grouping, and management features </b>- <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineLite\"><span data-link-id=\"2b3bb68a78e65fe7\"></span></span> and <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineMax\"><span data-link-id=\"32bc2e8f667c28b7\"></span></span> make it surprisingly simple to create complex sequences or groups of tweens that you can control as a whole. <code>play()</code>, <code>pause()</code>, <code>restart()</code>, or <code>reverse()</code>. You can even tween a timeline's <code>time()</code> or <code>progress()</code> to fastforward or rewind the entire timeline. Add labels, change the timeline's <code>timeScale()</code>, nest timelines within timelines, and much more. This can revolutionize your animation workflow, making it more modular and concise.</li><li><b>Ease of use </b>- Designers and Developers alike rave about how intuitive the platform is.</li><li><b>Support and reliability </b>- With frequent updates, <a href=\"http://greensock.com/forums/\">dedicated forums</a>, committed authorship, a solid track record, a proven funding mechanism, and a thriving community of users, the platform is a safe long-term bet (unlike many open source projects).</li><li><b>Expandability </b>- With its plugin architecture, you can activate as many (or as few) extra features as your project requires. Write your own plugin to handle particular special properties in custom ways. Minimize bloat and maximize performance.</li></ul><h3>Usage</h3><p><i>To get up and running quickly, check out the <a href=\"http://greensock.com/jump-start-js/\">Jump Start tour</a> which covers the basics in a fun, interactive way.</i></p><p>The most common type of tween is a <code><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenLite.to()\"><span data-link-id=\"6c797b009a65972a\"></span></span></code> tween which allows you to define the destination values:</p><pre class='pre-container prettyprint'>var photo = document.getElementById(\"photo\");<br />TweenLite.to(photo, 2, {width:\"200px\", height:\"150px\"});</pre><p>The above code will tween the width and height properties of the &lt;img&gt; DOM element with an id of \"photo\" from whatever the current values are to 200 and 150 respectively over the course of 2 seconds. Notice the width and height values are defined inside a generic object (between curly braces). Put as many properties there as you want. To animate css properties, you'll need to use the CSSPlugin. The <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:CSSPlugin\"><span data-link-id=\"be137a434f5b4e08\"></span></span> contains special code for deciphering css-related properties and handling them in unique ways, like recognizing colors, transforms, etc. and managing the necessary suffixes (\"px\", \"%\", etc.).</p><p>If you pass a string (text) into a tween as the target (like <code>TweenLite.to(\"#myID\", 1, {left:\"100px\"})</code>) TweenLite will use a selector engine (jQuery if present, or <code>document.querySelectorAll()</code> or lastly, <code>document.getElementById()</code> (automatically removing the \"#\" prefix if it's there)).</p><p>So once TweenLite and <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:CSSPlugin\"><span data-link-id=\"be137a434f5b4e08\"></span></span> are loaded, you can easily animate things like this:</p><pre class='pre-container prettyprint'>//tween the element with ID of \"myID\"<br />TweenLite.to(\"#myID\", 2, {backgroundColor:\"#ff0000\", width:\"50%\", top:\"100px\", ease:Power2.easeInOut});<br /> <br />//or if jQuery is loaded, you can do more advanced selecting like all the elements with the class \"myClass\" like this: <br />TweenLite.to(\".myClass\", 2, {boxShadow:\"0px 0px 20px red\", color:\"#FC0\"});</pre><p data-height=\"135\" data-theme-id=\"3984\" data-slug-hash=\"wsxjv\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/wsxjv/'>Animate Multiple Properties</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://codepen.io/assets/embed/ei.js\"></script></p><p>By default, tweens begin immediately, although you can delay them using the <code>delay</code> special property or pause them initially using the <code>paused</code> special property (see below).</p><p>The <code>target</code> can also be an array of objects. For example, the following tween will tween the <code>opacity</code> css property to 0.5 and the rotation transform property to 45 for obj1, obj2, and obj3:</p><pre class='pre-container prettyprint'>TweenLite.to([obj1, obj2, obj3], 1, {opacity:0.5, rotation:45});</pre><p>Normally, css-specific properties would need to be wrapped in their own object and passed in like <code>TweenLite.to(element, 1, {css:{left:\"100px\", top:\"50px\"}});</code> so that the engine knows that those properties belong to the <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:CSSPlugin\"><span data-link-id=\"be137a434f5b4e08\"></span></span>, but because animating DOM elements in the browser with CSSPlugin is so common, TweenLite automatically checks to see if the target is a DOM element and if it is (and you haven't defined a \"css\" object in the vars), TweenLite creates that css object for you and shifts any properties that aren't already defined directly on the element or reserved (like <code>onComplete, ease, delay</code>, etc. or plugins) into that css object when the tween renders for the first time. </p><p>You can also use a <code><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenLite.from()\"><span data-link-id=\"0f1a0aaf90af74b1\"></span></span></code> tween if you want to define the <b>starting</b> values instead of the ending values so that the target tweens <i>from</i> the defined values to wherever they currently are. Or a <code><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenLite.fromTo()\"><span data-link-id=\"ed553a5b6c412a65\"></span></span></code> lets you define both starting and ending values.</p><p>Although the <code>to()</code>, <code>from()</code>, and <code>fromTo()</code> static methods are popular because they're quick and can avoid some garbage collection hassles, you can also use the more object-oriented syntax like this:</p><pre class='pre-container prettyprint'>var tween = new TweenLite(element, 2, {width:200, height:150});</pre><p>or even:</p><pre class='pre-container prettyprint'>var tween = TweenLite.to(element, 2, {width:200, height:150});</pre><h3>Special properties, eases and callbacks (no plugins required):</h3><p>Typically the <code>vars</code> parameter is used to define ending values for tweening properties of the <code>target</code> (or beginning values for <code>from()</code> tweens) like <code>{left:\"100px\", top:\"200px\", opacity:0}</code>, but the following optional special properties serve other purposes:</p><p>[config id=\"c273be21a6d5d359\"]</p><h3>Plugins:</h3><p>Think of plugins like special properties that are dynamically added, delivering extra abilities without forcing them to be baked into the core engine, keeping it relatively lean and mean. Each plugin is associated with a property name and it takes responsibility for handling that property. For example, the CSSPlugin is associated with the \"css\" property name so if it is activated it will intercept the \"css\" property in the following tween and manage it in a special way so that the tweens affect the element's style object (for manipulating DOM elements):</p><pre class='pre-container prettyprint'>TweenLite.to(element, 1, {css:{top:\"100px\", left:\"50px\", backgroundColor:\"#ff0000\", fontSize:\"12px\"}, delay:0.5});</pre><p>But again, CSSPlugin is a special case where TweenLite (as of version 1.8.0) doesn't require wrapping css-specific properties in a css object (although you can if you want maximum performance).</p><p>If the CSSPlugin wasn't loaded, TweenLite would act as though you were trying to literally tween the <code>element.css</code> property (and there is no such thing).</p><h3>Function-based values</h3><p>Instead of a number (<code>x:100</code>) or string (<code>width:\"300px\"</code>) or relative value (<code>y:\"+=50\"</code>), you can now define most values as a <strong>function</strong> that'll get called once for each target the first time the tween renders, and whatever is returned by that function will be used as the value. This can be very useful for randomizing things or applying conditional logic. See it in action in the demos below.</p><p data-height=\"300\" data-theme-id=\"3984\" data-slug-hash=\"BzmGba\" data-default-tab=\"js,result\" data-user=\"GreenSock\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/BzmGba/\">BzmGba</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><p><strong>Parameters: index, target</strong><br />The function is passed two parameters: </p><ol><li><strong>index</strong> <i>(integer)</i> - the target's position in the array of targets. For example, if there are 3 <code>&lt;div&gt;</code> elements with the class \".box\", and you <code>TweenLite.to(\".box\", ...)</code>, the function would get called 3 times (once for each target) and the index would be <code>0</code> first, then <code>1</code>, and finally <code>2</code>.</li><li><strong>target</strong> <i>(object)</i> - the target itself (the <code>&lt;div&gt;</code> element in this case)</li></ol><p>Using the index parameter makes it easy to increment the value accordingly. There are lots of ways to get creative. The demo below uses the index parameter to tween each element's x value in increments of 100.</p><p data-height=\"300\" data-theme-id=\"3984\" data-slug-hash=\"vKpRWA\" data-default-tab=\"js,result\" data-user=\"GreenSock\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/BzmGba/\">BzmGba</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><h3>Examples:</h3><p>Please see <a href=\"http://greensock.com/gsap-js/\" target=\"\">http://greensock.com/gsap-js/</a> for more examples, tutorials, and interactive demos.</p><h3>Notes / tips:</h3><ul><li>Passing values as Strings and a preceding <code>\"+=\"</code> or <code>\"-=\"</code> will make the tween relative to the current value. For example, if you do <code>TweenLite.to(element, 2, {left:\"-=20px\"});</code> it'll tween <code>left</code> to 20 pixels less than whatever it is when the tween starts. <code>{x:\"+=20\"}</code> would add 20.</li><li>You can change the <code>TweenLite.defaultEase</code> if you prefer something other than <code>Power1.easeOut</code>.</li><li>Kill all tweens of a particular object anytime with <code>TweenLite.killTweensOf(yourObject);</code>. You can also use selector text like <code>TweenLite.killTweensOf(\"#myID\");</code></li><li>You can kill all delayedCalls to a particular function using <code>TweenLite.killDelayedCallsTo(myFunction);</code> or <code>TweenLite.killTweensOf(myFunction);</code></li><li>If you find this class useful, please consider joining <a href=\"http://greensock.com/club/\">Club GreenSock</a> which not only helps to sustain ongoing development, but also gets you bonus plugins, classes and other benefits that are ONLY available to members. Learn more at <a href=\"http://greensock.com/club/\">http://greensock.com/club/</a></li></ul>"}},"7142cfd298705364":{"meta":{"keywords":["js.TweenLite.TweenLite()"],"title":"TweenLite()","description":"TweenLite Constructor creates a tween."},"header":{"content":"<p>TweenLite Constructor creates a tween.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties should be affected. When animating DOM elements, the target can be: a single element, an array of elements, a jQuery object (or similar), or a CSS selector string like “#feature” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if <code>useFrames:true</code> is set in the <code>vars</code> parameter)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like <code>onComplete</code>, <code>ease</code>, etc. For example, to tween <code>mc.x</code> to 100 and <code>mc.y</code> to 200 and then call<code>myFunction</code>, do this:</p>\n<p><code>new TweenLite(mc, 1, {x:100, y:200, onComplete:myFunction})</code>.</p>\n<p>Learn more about the properties that can be passed into the <code>vars</code> object below.</p>\n","related_configuration_object":"c273be21a6d5d359"}],"returns":{},"details":{"content":"<p>TweenLite is an extremely fast, lightweight, and flexible animation tool that serves as the foundation of the GreenSock Animation Platform (GSAP), available in JavaScript, AS2, AS3. A TweenLite instance handles tweening one or more properties of <b>any object</b> (or array of objects) over time. TweenLite can be used on its own to accomplish most animation chores with minimal file size or it can be use in conjuction with advanced sequencing tools like TimelineLite or TimelineMax to make complex tasks much simpler. With scores of other animation frameworks to choose from, why consider the GSAP?</p>"}},"4dd34ae7cc4df452":{"meta":{"keywords":["js.TweenLite.defaultEase"],"title":"defaultEase","description":"[static] Provides An easy way to change the default easing equation."},"header":{"content":"<p>[static] Provides An easy way to change the default easing equation.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Provides An easy way to change the default easing equation. Choose from any of the GreenSock eases in the com.greensock.easing package.</p><p>The default value is <code>Power1.easeOut</code>.</p>"}},"e7f6ebafb382a8cc":{"meta":{"keywords":["js.TweenLite.defaultOverwrite"],"title":"defaultOverwrite","description":"[static] Provides An easy way to change the default overwrite mode."},"header":{"content":"<p>[static] Provides An easy way to change the default overwrite mode.</p>"},"returns":{"type":"String = \"auto\"","content":""},"details":{"content":"<p>Provides An easy way to change the default overwrite mode. Choose from any of the following: <code>\"auto\", \"all\", \"none\", \"allOnStart\", \"concurrent\", \"preexisting\"</code>.</p><p>The default value is <code>\"auto\"</code>.</p>"}},"b030a6a5f8623c77":{"meta":{"keywords":["js.TweenLite.onOverwrite"],"title":"onOverwrite","description":"[static] A function that should be called when any tween gets overwritten by another tween (great for debugging). "},"header":{"content":"<p>[static] A function that should be called when any tween gets overwritten by another tween (great for debugging). </p>"},"returns":{"type":"Function","content":""},"details":{"content":"<p>[static] A function that should be called when any tween gets overwritten by another tween (great for debugging). The following parameters will be passed to that function:</p>\n\n<ol>\n\t<li><strong>overwrittenTween</strong> : Animation - the tween that was just overwritten</li>\n\t<li><strong>overwritingTween</strong> : Animation - the tween did the overwriting</li>\n\t<li><strong>target</strong> : Object [only passed if the overwrite mode was <code>&quot;auto&quot;</code> because that&#39;s the only case when portions of a tween can be overwritten rather than the entire thing] - the target object whose properties were overwritten. This is usually the same as <code>overwrittenTween.target</code> unless that&#39;s an array and the overwriting targeted a sub-element of that array. For example, <code>TweenLite.to([obj1, obj2], 1, {x:100})</code> and then <code>TweenLite.to(obj2, 1, {x:50})</code>, the <code>target</code> would be <code>obj2</code>.</li>\n\t<li><strong>overwrittenProperties</strong> : Array [only passed if the overwrite mode was <code>&quot;auto&quot;</code> because that&#39;s the only case when portions of a tween can be overwritten rather than the entire thing] - an array of property names that were overwritten, like <code>[&quot;x&quot;,&quot;y&quot;,&quot;opacity&quot;]</code>.</li>\n</ol>\n\n<p>Note: there is also an <code>onOverwrite</code> special property that you can apply on a tween-by-tween basis like <code>TweenLite.to(... {x:100, onOverwrite:yourFunction}).</code></p><code> <h3>See it in action</h3> <p>Run this <a href=\"https://codepen.io/GreenSock/pen/VaGZJz\">TweenLite.onOverwrite demo</a> with the browser console open to see the info that gets reported when an overwrite occurs.</p> </code>\n"}},"00b17703b89cfb4b":{"meta":{"keywords":["js.TweenLite.selector"],"title":"selector","description":"[static] The selector engine (like jQuery) that should be used when a tween receives a string as its target, like TweenLite.to(&quot;#myID&quot;, 1, {x:&quot;100px&quot;})."},"header":{"content":"<p>[static] The selector engine (like jQuery) that should be used when a tween receives a string as its target, like TweenLite.to(\"#myID\", 1, {x:\"100px\"}).</p>"},"returns":{"type":"* = document.getElementById()","content":""},"details":{"content":"<p>The selector engine (like jQuery) that should be used when a tween receives a string as its target, like <code>TweenLite.to(\"#myID\", 1, {x:\"100px\"})</code>. By default, TweenLite will look for <code>window.$</code> and then <code>window.jQuery</code> and if neither is found, it will default to <code>document.getElementById()</code> (in which case it will also strip out any leading \"#\" in any IDs it receives). Feel free to use any selector you want: jQuery, Zepto, Sizzle, or your own. Set it like this:<br /></p><pre class='pre-container prettyprint'>TweenLite.selector = YOUR_SELECTOR_ENGINE;</pre><p>If jQuery is loaded (or anything that's defined as the industry standard window.$), you don't need to do anything - TweenLite will automatically sense (and use) it. But TweenLite does <b>NOT</b> have any dependencies on jQuery or any specific selector engine. If you don't load any, TweenLite will use document.getElementById() which will at least allow you to define things with IDs.<br /></p><pre class='pre-container prettyprint'>//tween the element with ID of \"myID\"<br />TweenLite.to(\"#myID\", 2, {backgroundColor:\"#ff0000\", width:\"50%\", top:\"100px\", ease:Power2.easeInOut});<br /><br />//or if jQuery is loaded, you can do more advanced selecting like all the elements with the class \"myClass\" like this: <br />TweenLite.to(\".myClass\", 2, {boxShadow:\"0px 0px 20px red\", color:\"#FC0\"});</pre><p><br />For maximum performance it is typically best to store the results of a selector in a variable if you need to reference the same set multiple times:<br /></p><pre class='pre-container prettyprint'>//slightly slower because the selector engine needs to find the same elements twice:<br />TweenLite.to(\".myClass\", 2, {left:\"100px\"});<br />TweenLite.to(\".myClass\", 2, {top:\"200px\", delay:2});<br /><br />//it's a bit faster to store it in a variable that you reuse like this instead:<br />var target = $(\".myClass\");<br />TweenLite.to(target, 2, {left:\"100px\"});<br />TweenLite.to(target, 2, {top:\"200px\", delay:2});</pre><p><br />The only requirements for the selector engine is that it must have an <b>\"each()\"</b> method that iterates through each element in the results and \"this\" inside the function refers to the DOM element, and it must make the DOM elements accessible via index notation like <code>selectorResults[0], selectorResults[1]</code>, etc. This is pretty standard among selector engines.</p>"}},"d502fa3af383145d":{"meta":{"keywords":["js.TweenLite.target"],"title":"target","description":"[READ-ONLY] Target object (or array of objects) whose properties the tween affects."},"header":{"content":"<p>[READ-ONLY] Target object (or array of objects) whose properties the tween affects.</p>"},"returns":{"type":"Object","content":""},"details":{"content":"<p>[READ-ONLY] Target object (or array of objects) whose properties the tween affects.</p>"}},"823bbb81bdf15585":{"meta":{"keywords":["js.TweenLite.ticker"],"title":"ticker","description":"[static] The object that dispatches a &quot;tick&quot; event each time the engine updates, making it easy for you to add your own listener(s) to run custom logic after each update (great for game developers)."},"header":{"content":"<p>[static] The object that dispatches a \"tick\" event each time the engine updates, making it easy for you to add your own listener(s) to run custom logic after each update (great for game developers).</p>"},"returns":{"type":"Object","content":""},"details":{"content":"<p>The object that dispatches a <code>\"tick\"</code> event each time the engine updates, making it easy for you to add your own listener(s) to run custom logic after each update (great for game developers). Add as many listeners as you want.</p><h3>Basic example:</h3><pre class='pre-container prettyprint'>//add listener<br />TweenLite.ticker.addEventListener(\"tick\", myFunction);<br /> <br />function myFunction(event) {<br />    //executes on every tick after the core engine updates<br />}<br /> <br />//to remove the listener later...<br />TweenLite.ticker.removeEventListener(\"tick\", myFunction);</pre><p>The ticker is driven by <code>requestAnimationFrame</code> events in modern browsers so that the updates are perfectly synchronized with the browser's rendering cycle. It also means that when the user switches to a different tab in the browser, the ticker's updates get throttled back significantly in order to conserve battery power and reduce load on the CPU (this happens because the browser itself throttles back <code>requestAnimationFrame</code> event dispatching). Typically <code>requestAnimationFrame</code> events occur around 60 times per second, but that's up to the browser and depends on system performance as well. If <code>requestAnimationFrame</code> isn't supported, the ticker automatically falls back to using a regular <code>setTimeout()</code> loop which is supported in all browsers.</p><h3>Customizing the ticker</h3><p>To force the ticker to use <code>setTimout()</code> instead of <code>requestAnimationFrame</code>, you can use the ticker's <code>useRAF()</code> method:</p><pre class='pre-container prettyprint'>//turn off requestAnimationFrame, causing ticker to use setTimeout() instead<br />TweenLite.ticker.useRAF(false);]</pre><p>And if you'd like to set a particular frame rate, you can use the <code>fps()</code> method like this:<br /></p><pre class='pre-container prettyprint'>//throttle back the frames-per-second to 30<br />TweenLite.ticker.fps(30);</pre><p>When using <code>requestAnimationFrame</code> (the default), the <code>fps()</code> setting acts like a throttle. Since you cannot tell the browser to crank out<code>requestAnimationFrames</code> at a higher rate than 60fps, you can't do something like <code>TweenLite.ticker.fps(100)</code> (well, you can but it'll still run at around 60fps). You could, however, do <code>TweenLite.ticker.fps(30)</code> and the engine will skip beats when necessary in order to get you as close as possible to 30fps (or whatever fps you set below 60). If you need an fps greater than 60fps (which generally isn't recommended), you should turn off requestAnimationFrame using <code>TweenLite.ticker.useRAF(false)</code> and then set the <code>fps()</code> to whatever you want, like<code>TweenLite.ticker.fps(100)</code></p><h3>Advanced listeners</h3><p>If you need to define the scope (what <code>\"this\"</code> refers to inside the function) or define a particular priority so that the handlers are called in a particular order, you can use the advanced syntax with extra parameters as follows:</p><pre class='pre-container prettyprint'>addEventListener(type, callback, scope, useParam, priority)</pre><h3>Parameters:</h3><ol><li><b>type</b> <i>: String</i> - type of listener, should always be <code>\"tick\"</code></li><li><b>callback</b> <i>: Function</i> - the function to call when the event occurs</li><li><b>scope</b> <i>: Object</i> - binds the scope to a particular object (scope is basically what \"<code>this</code>\" refers to in your function). This can be very useful in JavaScript because scope isn't generally maintained.</li><li><b>useParam</b> <i>: Boolean</i> - if <code>true</code>, an event object will be generated and fed to the callback each time the event occurs. The event is a generic object and has two properties: <code>type</code> (always <code>\"tick\"</code>) and <code>target</code> which refers to the ticker instance. The default for <code>useParam</code> is <code>false</code>because it improves performance.</li><li><b>priority</b> <i>: Integer</i> - influences the order in which the listeners are called. Listeners with lower priorities are called after ones with higher priorities.</li></ol><h3>Advanced Example</h3><pre class='pre-container prettyprint'> //add listener that requests an event object parameter, binds scope to the current scope (this), and sets priority to 1 so that it is called before any other listeners that had a priority lower than 1...<br /> TweenLite.ticker.addEventListener(\"tick\", myFunction, this, true, 1);<br /> <br /> function myFunction(event) {<br />     //executes on every tick after the core engine updates<br /> }<br /> <br /> //to remove the listener later...<br /> TweenLite.ticker.removeEventListener(\"tick\", myFunction);</pre>"}},"6cbc76eab73a1780":{"meta":{"keywords":["js.TweenLite.delayedCall()"],"title":"delayedCall()","description":"[static] Provides a simple way to call a function after a set amount of time (or frames)."},"header":{"content":"<p>[static] Provides a simple way to call a function after a set amount of time (or frames).</p>"},"parameters":[{"name":"delay","data_type":"Number","description":"<p>Delay in seconds (or frames if <code>useFrames</code> is <code>true</code>) before the function should be called</p>\n"},{"name":"callback","data_type":"Function","description":"<p>Function to call</p>\n"},{"name":"params","data_type":"Array ","description":"<p>(default = <code>null</code>)<code></code> — An Array of parameters to pass the function (optional).</p>\n"},{"name":"scope","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The scope in which the callback should be called (basically, what &#8220;this&#8221; refers to in the function).</p>\n"},{"name":"useFrames","data_type":"Boolean","description":"<p>(default = <code>false</code>) — If the delay should be measured in frames instead of seconds, set<code>useFrames</code> to <code>true</code> (default is <code>false</code>)</p>\n"}],"returns":{"type":"TweenLite","content":""},"details":{"content":"<p>Provides a simple way to call a function after a set amount of time (or frames). You can optionally pass any number of parameters to the function too. </p><pre class='pre-container prettyprint'>//calls myFunction after 1 second and passes 2 parameters: <br />TweenLite.delayedCall(1, myFunction, [\"param1\", 2]); <br /><br />function myFunction(param1, param2) { <br />    //do stuff<br />}</pre>"}},"0f1a0aaf90af74b1":{"meta":{"keywords":["js.TweenLite.from()"],"title":"from()","description":"[static] Static method for creating a TweenLite instance that tweens backwards - you define the BEGINNING values and the current values are used as the destination values which is great for doing things like animating objects onto the screen because you can set them up initially the way you want them to look at the end of the tween and then animate in from elsewhere."},"header":{"content":"<p>[static] Static method for creating a TweenLite instance that tweens backwards - you define the BEGINNING values and the current values are used as the destination values which is great for doing things like animating objects onto the screen because you can set them up initially the way you want them to look at the end of the tween and then animate in from elsewhere.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties should be affected. When animating DOM elements, the target can be: a single element, an array of elements, a jQuery object (or similar), or a CSS selector string like “#feature” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if <code>useFrames:true</code> is set in the <code>vars</code> parameter)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the starting value for each property that should be tweened as well as any special properties like <code>onComplete</code>, <code>ease</code>, etc. For example, to tween <code>obj.x</code> from 100 and <code>obj.y</code> from 200 and then call <code>myFunction</code>, do this: <code>TweenLite.from(obj, 1, {x:100, y:200, onComplete:myFunction});</code></p>\n","related_configuration_object":"c273be21a6d5d359"}],"returns":{"type":"TweenLite","content":"<p>TweenLite instance</p>\n"},"details":{"content":"<p>Static method for creating a TweenLite instance that tweens backwards - you define the <b>BEGINNING</b> values and the current values are used as the destination values which is great for doing things like animating objects onto the screen because you can set them up initially the way you want them to look at the end of the tween and then animate in from elsewhere.</p><p><b>NOTE:</b> By default, <code>immediateRender</code> is <code>true</code> in <code>from()</code> tweens, meaning that they immediately render their starting state regardless of any delay that is specified. You can override this behavior by passing <code>immediateRender:false</code> in the <code>vars</code> parameter so that it will wait to render until the tween actually begins (often the desired behavior when inserting into TimelineLite or TimelineMax instances). To illustrate the default behavior, the following code will immediately set the <code>opacity</code> of <code>obj</code> to 0 and then wait 2 seconds before tweening the <code>opacity</code> back to 1 over the course of 1.5 seconds:<br /></p><pre class='pre-container prettyprint'>TweenLite.from(obj, 1.5, {opacity:0, delay:2});</pre><p><br />Since the <code>target</code> parameter can also be an array of objects, the following code will tween the opacity property of obj1, obj2, and obj3 from a value of 0 simultaneously:<br /></p><pre class='pre-container prettyprint'>TweenLite.from([obj1, obj2, obj3], 1.5, {opacity:0});</pre><p><br />Even though 3 objects are animating, there is still only one tween created. In order to stagger or offset the start times of each object animating, please see the <code>staggerFrom()</code> method of TimelineLite or TweenMax.</p><p>For simple sequencing, you can use the <code>delay</code> special property (like <code>TweenLite.from(mc, 1, {opacity:0, delay:0.5})</code>), but it is highly recommended that you consider using TimelineLite (or TimelineMax) for all but the simplest sequencing tasks. It has an identical <code>from()</code> method that allows you to append tweens one-after-the-other and then control the entire sequence as a whole. You can even have the tweens overlap as much as you want.</p><div data-height=\"268\" data-theme-id=\"3984\" data-slug-hash=\"Dqgwn\" class='codepen'><pre><code>/*external jshttp://cdnjs.cloudflare.com/ajax/libs/gsap/latest/TweenLite.min.jshttp://cdnjs.cloudflare.com/ajax/libs/gsap/latest/plugins/CSSPlugin.min.js*/window.onload = function() {  var logo = document.getElementById(&quot;logo&quot;);  TweenLite.from(logo, 2, {opacity:0, left:&quot;300px&quot;});}//run//PC ctnrl-0//MAC cmd-0</code></pre><p>See the Pen <a href='http://codepen.io/GreenSock/pen/Dqgwn/'>From Tweens</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p></div><p><script async src=\"http://codepen.io/assets/embed/ei.js\"></script></p>"}},"ed553a5b6c412a65":{"meta":{"keywords":["js.TweenLite.fromTo()"],"title":"fromTo()","description":"[static] Static method for creating a TweenLite instance that allows you to define both the starting and ending values (as opposed to to() and from() tweens which are based on the target&#039;s current values at one end or the other)."},"header":{"content":"<p>[static] Static method for creating a TweenLite instance that allows you to define both the starting and ending values (as opposed to to() and from() tweens which are based on the target's current values at one end or the other).</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties should be affected. When animating DOM elements, the target can be: a single element, an array of elements, a jQuery object (or similar), or a CSS selector string like “#feature” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if <code>useFrames:true</code> is set in the <code>vars</code> parameter)</p>\n"},{"name":"fromVars","data_type":"Object","description":"<p>An object defining the starting value for each property that should be tweened. For example, to tween <code>mc.x</code> from 100 and <code>mc.y</code> from 200, <code>fromVars</code> would look like this: <code>{x:100, y:200}</code>.</p>\n"},{"name":"toVars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like<code>onComplete</code>, <code>ease</code>, etc. For example, to tween <code>mc.x</code> from 0 to 100 and <code>mc.y</code> from 0 to 200 and then call <code>myFunction</code>, do this:<code>TweenLite.fromTo(mc, 1, {x:0, y:0}, {x:100, y:200, onComplete:myFunction});</code></p>\n","related_configuration_object":"c273be21a6d5d359"}],"returns":{"type":"TweenLite","content":"<p>TweenLite instance</p>\n"},"details":{"content":"<p>Static method for creating a TweenLite instance that allows you to define both the starting and ending values (as opposed to <code>to()</code> and <code>from()</code>tweens which are based on the target's current values at one end or the other).</p><p><b>NOTE</b>: Only put starting values in the <code>fromVars</code> parameter - all special properties for the tween (like onComplete, onUpdate, delay, etc.) belong in the <code>toVars</code> parameter.</p><p>By default, <code>immediateRender</code> is <code>true</code> in <code>fromTo()</code> tweens, meaning that they immediately render their starting state regardless of any delay that is specified. This is done for convenience because it is often the preferred behavior when setting things up on the screen to animate into place, but you can override this behavior by passing <code>immediateRender:false</code> in the <code>fromVars</code> or <code>toVars</code> parameter so that it will wait to render the starting values until the tween actually begins (often the desired behavior when inserting into TimelineLite or TimelineMax instances).</p><p>Since the <code>target</code> parameter can also be an array of objects, the following code will tween the x property of mc1, mc2, and mc3 from 0 to 100 simultaneously:</p><pre class='pre-container prettyprint'>TweenLite.fromTo([mc1, mc2, mc3], 1, {x:0}, {x:100});</pre><p>Even though 3 objects are animating, there is still only one tween created. In order to stagger or offset the start times of each object animating, please see the <code>staggerFromTo()</code> method of TimelineLite or TweenMax.</p><p>For simple sequencing, you can use the <code>delay</code> special property (like <code>TweenLite.fromTo(mc, 1, {x:0}, {x:100, delay:0.5})</code>), but it is highly recommended that you consider using TimelineLite (or TimelineMax) for all but the simplest sequencing tasks. It has an identical <code>fromTo()</code>method that allows you to append tweens one-after-the-other and then control the entire sequence as a whole. You can even have the tweens overlap as much as you want.</p>"}},"2732aa6fd1292931":{"meta":{"keywords":["js.TweenLite.getTweensOf()"],"title":"getTweensOf()","description":"[static] Returns an array containing all the tweens of a particular target (or group of targets) that have not been released for garbage collection yet which typically happens within a few seconds after the tween completes."},"header":{"content":"<p>[static] Returns an array containing all the tweens of a particular target (or group of targets) that have not been released for garbage collection yet which typically happens within a few seconds after the tween completes.</p>"},"parameters":[{"name":"target","data_type":"*","description":"<p>The target whose tweens should be returned, or an array of such targets</p>\n"},{"name":"onlyActive","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, only tweens that are currently active will be returned (a tween is considered &#8220;active&#8221; if the virtual playhead is actively moving across the tween and it is not paused, nor are any of its ancestor timelines paused).</p>\n"}],"returns":{"type":"Array","content":"<p>An array of tweens</p>\n"},"details":{"content":"<p>Returns an array containing all the tweens of a particular target (or group of targets) that have not been released for garbage collection yet which typically happens within a few seconds after the tween completes. For example, <code>TweenLite.getTweensOf(myObject)</code> returns an array of all tweens of <code>myObject</code>, even tweens that haven't begun yet. <code>TweenLite.getTweensOf([myObject1, myObject2]);</code> will return a condensed array of the tweens of <code>myObject1</code> plus all the tweens of <code>myObject2</code> combined into one array with duplicates removed.</p><p>Since the method only finds tweens that haven't been released for garbage collection, if you create a tween and then let it finish and then a while later try to find it with <code>getTweensOf()</code>, it may not be found because it was released by the engine for garbage collection. Remember, one of the best parts of GSAP is that it saves you from the headache of managing gc. Otherwise, you'd need to manually dispose each tween you create, making things much more cumbersome.</p><pre class='pre-container prettyprint'>TweenLite.to(myObject1, 1, {x:100});<br />TweenLite.to(myObject2, 1, {x:100});<br />TweenLite.to([myObject1, myObject2], 1, {alpha:0});<br /> <br />var a1 = TweenLite.getTweensOf(myObject1); //finds 2 tweens<br />var a2 = TweenLite.getTweensOf([myObject1, myObject2]); //finds 3 tweens</pre>"}},"0c45afba50900d5a":{"meta":{"keywords":["js.TweenLite.invalidate()"],"title":"invalidate()","description":"[override] Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values."},"header":{"content":"<p>[override] Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values.</p>"},"parameters":[],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values. When you<code>invalidate()</code> an animation, it will be re-initialized the next time it renders and its <code>vars</code> object will be re-parsed. The timing of the animation (duration, startTime, delay) will not be affected.</p><p>Another example would be if you have a <code>TweenMax(mc, 1, {x:100, y:100})</code> that ran when mc.x and mc.y were initially at 0, but now mc.x and mc.y are 200 and you want them tween to 100 again, you could simply <code>invalidate()</code> the tween and <code>restart()</code> it. Without invalidating first, restarting it would cause the values jump back to 0 immediately (where they started when the tween originally began). When you invalidate a TimelineLite/TimelineMax, it automatically invalidates all of its children.</p>"}},"64346e163a42da5f":{"meta":{"keywords":["js.TweenLite.killDelayedCallsTo()"],"title":"killDelayedCallsTo()","description":"[static] Immediately kills all of the delayedCalls to a particular function."},"header":{"content":"<p>[static] Immediately kills all of the delayedCalls to a particular function.</p>"},"parameters":[{"name":"func","data_type":"Function","description":"<p>The function for which all delayedCalls should be killed/cancelled.</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Immediately kills all of the delayedCalls to a particular function. If, for example, you want to kill all delayedCalls to <code>myFunction</code>, you'd do this:<br /></p><pre class='pre-container prettyprint'>TweenLite.killDelayedCallsTo(myFunction);</pre><p>Since a delayedCall is just a tween that uses the function/callback as both its <code>target</code> and its <code>onComplete</code>, <code>TweenLite.killTweensOf(myFunction)</code> produces exactly the same result as <code>TweenLite.killDelayedCallsTo(myFunction)</code>.</p><p>This method affects all delayedCalls that were created using <code>TweenLite.delayedCall()</code> or <code>TweenMax.delayedCall()</code> or the <code>call()</code> or <code>addCallback()</code> methods of TimelineLite or TimelineMax. Basically, any tween whose target is the function you supply will be killed.</p>"}},"e4776d5c407778cf":{"meta":{"keywords":["js.TweenLite.killTweensOf()"],"title":"killTweensOf()","description":"[static] Kills all the tweens (or specific tweening properties) of a particular object or delayedCalls to a particular function."},"header":{"content":"<p>[static] Kills all the tweens (or specific tweening properties) of a particular object or delayedCalls to a particular function.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Object whose tweens should be killed immediately or selector text to feed the selector engine to find the target(s).</p>\n"},{"name":"onlyActive","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, only tweens that are currently active will be killed (a tween is considered &#8220;active&#8221; if the virtual playhead is actively moving across the tween and it is not paused, nor are any of its ancestor timelines paused).</p>\n"},{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — To kill only specific properties, use a generic object containing enumerable properties corresponding to the ones that should be killed like <code>{x:true, y:true}</code>. The values assigned to each property of the object don&#8217;t matter &#8211; the sole purpose of the object is for iteration over the named properties (in this case, <code>x</code> and <code>y</code>). If no object (or <code>null</code>) is defined, all matched tweens will be killed in their entirety.</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Kills all the tweens (or specific tweening properties) of a particular object or delayedCalls to a particular function. If, for example, you want to kill all tweens of <code>myObject</code>, you'd do this:</p><pre class='pre-container prettyprint'>TweenLite.killTweensOf(myObject);</pre><p>To kill only active (currently animating) tweens of <code>myObject</code>, you'd do this:</p><pre class='pre-container prettyprint'>TweenLite.killTweensOf(myObject, true);</pre><p>To kill only particular tweening properties of the object, use the third parameter. For example, if you only want to kill all the tweens of<code>myObject.opacity</code> and <code>myObject.x</code>, you'd do this:</p><pre class='pre-container prettyprint'>TweenLite.killTweensOf(myObject, false, {opacity:true, x:true});</pre><p>To kill all the delayedCalls that were created like <code>TweenLite.delayedCall(5, myFunction);</code>, you can simply call<code>TweenLite.killTweensOf(myFunction);</code> because delayedCalls are simply tweens that have their <code>target</code> and <code>onComplete</code> set to the same function (as well as a <code>delay</code> of course).</p><p>As of version 1.8.0, you can also pass in a string that defines selector text, like \"#myID\" to kill the tweens of the element with an ID of \"myID\". If you load jQuery, you can do more complex things like \".myClass\" or \"tagname\", etc.</p><p><code>killTweensOf()</code> affects tweens that haven't begun yet too. If, for example, a tween of <code>myObject</code> has a <code>delay</code> of 5 seconds and<code>TweenLite.killTweensOf(mc)</code> is called 2 seconds after the tween was created, it will still be killed even though it hasn't started yet.</p>"}},"01cb3301c2555b06":{"meta":{"keywords":["js.TweenLite.lagSmoothing()"],"title":"lagSmoothing()","description":"Permits you to control what happens when too much time elapses between two ticks (updates) of the engine, adjusting the core timing mechanism to compensate and avoid &quot;jumps&quot;. "},"header":{"content":"<p>Permits you to control what happens when too much time elapses between two ticks (updates) of the engine, adjusting the core timing mechanism to compensate and avoid \"jumps\". </p>"},"parameters":[{"name":"threshold","data_type":"Number","description":"<p>Amount of lag (in millisecond) after which the engine will adjust the internal clock to act like the <code>adjustedLag</code> elapsed instead. The lower the number, the more likely (and frequently) lagSmoothing() will be triggered. For example, if the <code>threshold</code> is 500 and the <code>adjustedLag</code> is 33 (those are the defaults), the only time an adjustment will occur is when <strong>more than</strong> 500ms elapses between two ticks in which case it will act as though only 33ms elapsed. So if the CPU bogs down for 2 full seconds (yikes!), your animations will move 33ms worth of time on the next render instead of jumping a full 2-seconds. <i>Note: this has no affect on the device’s performance or true frame rate – this merely affects how GSAP reacts when the browser drops frames.</i></p>\n"},{"name":"adjustedLag","data_type":"Number","description":"<p>The new (adjusted) amount of time (in milliseconds) from the previous tick. Typically it is best to set this to at least 16 because that&#8217;s the normal amount of time between ticks when the engine is running at 60 frames per second. It is more common to set it to at least 33 (which is 2 normal &#8220;ticks&#8221;). If you set the threshold and the adjustedLag too low, your animations can appear to slow down under heavy pressure. The higher the adjustedLag, the more of a &#8220;jump&#8221; you&#8217;ll see when lagSmoothing kicks in.</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p><iframe width=\"830\" height=\"467\" src=\"http://www.youtube.com/embed/5t6H_x7C2Sc?vq=hd720\" frameborder=\"0\" allowfullscreen=\"\"></iframe></p><p>What happens when the CPU gets bogged down and there's a lag between renders? For example, imagine a 2-second tween that should start right away, but the CPU is busy for a full second before it can render that tween for the first time. Most other animation engines (including CSS animations in some browsers) slide the start time forward to compensate but there's a <strong>major</strong> drawback to that approach: it sacrifices synchronization and can mangle delays so that when you try to neatly stagger animations, they <a href=\"http://codepen.io/GreenSock/full/e3ac33404937de0eb77c789323367da8/\">spew out in clumps/groups</a>. That's no good.</p><p>GSAP has always used a strict timing model that prioritizes perfect synchronization, meaning in the example above, the tween would render as if it's halfway done after the initial 1-second lag. Basically, every animation engine has to pay the lag tax one way or the other - either maintain strict timing and synchronization, or slide the starting times around and lose sync.</p><p>The new <code>TweenLite.lagSmoothing()</code> feature gives you the best of both worlds because when the CPU gets bogged down, it adjusts the core timing mechanism on the next tick which affects <strong>all</strong> animations, thus everything remains <strong>perfectly synchronized</strong>. You can set the threshold (in millisecond) so that whenever there's a lag <strong>greater than</strong> that threshold, the engine will adjust the internal clock to act like the <code>adjustedLag</code> elapsed instead. Even though you call the static method on TweenLite, this one adjustment affects everything in GSAP (tweens, timelines, and delayedCalls because they're all driven by a single timing mechanism at the heart of TweenLite).</p><p>For example, if the <code>threshold</code> is 500 and the <code>adjustedLag</code> is 33 (those are the defaults), the only time an adjustment will occur is when more than 500ms elapses between two ticks in which case it will act as though only 33ms elapsed. So if the CPU bogs down for 2 full seconds (yikes!), your animations will move 33ms worth of time on the next render instead of jumping a full 2-seconds. <i>Note: this has no affect on the device's performance or true frame rate - this merely affects how GSAP reacts when the browser drops frames.</i></p><p>This feature is <strong>already activated by default</strong>, using a <code>threshold</code> of 500ms and a <code>adjustedLag</code> of 33ms, but if you want to change the settings you can do so like this:</p><pre class='pre-container prettyprint'>//compensate only when 1000ms or more elapses between 2 ticks,<br />//and then make it act like only 16ms elapsed:<br />TweenLite.lagSmoothing(1000, 16);</pre><p>Why not set the values super low, like to 10 for both? Because doing so wouldn't allow much breathing room, and it would naturally make your tweens look like they're running more slowly (because technically they are if the time is getting nudged forward on almost every render). Also note that if you've got any delayedCalls, those will be affected as well. That's a good thing - it ensures that you can rely on those to be perfectly synchronized with the rest of the engine, but if the browser is under heavy pressure and is only rendering a few frames per second, it'd seem as if time is literally slowing down and a 2-second tween (or delayedCall) might actually take 8 seconds to complete.</p><p>In most real-world scenarios, the defaults of 500 and 33 are ideal because they protect against significant hiccups in the browser/CPU while allowing minor variations in the frame rate without slowing things down unnecessarily.</p><p>If you're using TweenMax, you can access the lagSmoothing() method via <code>TweenMax.lagSmoothing()</code> too.</p><p>If you'd like to disable lag smoothing, you can simply set it to 0 like <code>TweenLite.lagSmoothing(0)</code> which is the same as setting the threshold to a super large value so that it never kicks in.</p><p style=\"margin-top:30px;\" data-height=\"950\" data-theme-id=\"3984\" data-slug-hash=\"e3ac33404937de0eb77c789323367da8\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/e3ac33404937de0eb77c789323367da8/' target=\"_blank\">Animation Engine Timing Comparison</a> on <a href='http://codepen.io'>CodePen</a>.</p>"}},"a03b81c2162c5416":{"meta":{"keywords":["js.TweenLite.render()"],"title":"render()","description":"Forces a render of all active tweens which can be useful if, for example, you set up a bunch of from() tweens and then you need to force an immediate render (even of \"lazy\" tweens) to avoid a brief delay before things render on the very next tick."},"header":{"content":"<p>Forces a render of all active tweens which can be useful if, for example, you set up a bunch of <code>from()</code> tweens and then you need to force an immediate render (even of \"lazy\" tweens) to avoid a brief delay before things render on the very next tick.</p>"},"parameters":[],"returns":{"type":"","content":""},"details":{"content":"<p>Forces a render of all active tweens which can be useful if, for example, you set up a bunch of <code>from()</code> tweens and then you need to force an immediate render (even of \"lazy\" tweens) to avoid a brief delay before things render on the very next tick.</p>"}},"f9978ca8a660abe5":{"meta":{"keywords":["js.TweenLite.set()"],"title":"set()","description":"[static] Immediately sets properties of the target accordingly - essentially a zero-duration to() tween with a more intuitive name."},"header":{"content":"<p>[static] Immediately sets properties of the target accordingly - essentially a zero-duration to() tween with a more intuitive name.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects or selector text) whose properties will be affected.</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the value for each property that should be set. For example, to set <code>mc.x</code> to 100 and <code>mc.y</code> to 200, do this: <code>TweenLite.set(mc, {x:100, y:200}); </code> You may also define any of the special properties baked into GSAP like delay, onComplete, etc.</p>\n","related_configuration_object":"c273be21a6d5d359"}],"returns":{"type":"TweenLite","content":"<p>A TweenLite instance (with a duration of 0) which can optionally be inserted into a TimelineLite/Max instance (although it&#8217;s typically more concise to just use the timeline&#8217;s <code>set()</code> method).</p>\n"},"details":{"content":"<p>Immediately sets properties of the target accordingly - essentially a zero-duration to() tween with a more intuitive name. So the following lines produce identical results:</p><pre class='pre-container prettyprint'>TweenLite.set(element, {x:100, y:50, opacity:0});<br />TweenLite.to(element, 0, {x:100, y:50, opacity:0});</pre><p>And of course you can use an array to set the properties of multiple targets at the same time, like:</p><pre class='pre-container prettyprint'>TweenLite.set([obj1, obj2, obj3], {x:100, y:50, opacity:0});</pre><p>Or use selector text to target DOM elements that match that criteria. </p>"}},"6c797b009a65972a":{"meta":{"keywords":["js.TweenLite.to()"],"title":"to()","description":"[static] Static method for creating a TweenLite instance that animates to the specified destination values (from the current values)."},"header":{"content":"<p>[static] Static method for creating a TweenLite instance that animates to the specified destination values (from the current values).</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties should be affected. When animating DOM elements, the target can be: a single element, an array of elements, a jQuery object (or similar), or a CSS selector string like “#feature” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if useFrames:true is set in the vars parameter)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like onComplete, ease, etc. For example, to tween mc.x to 100 and mc.y to 200 and then call myFunction, do this: TweenMax.to(mc, 1, {x:100, y:200, onComplete:myFunction});</p>\n<p>Below is a full list of special properties.</p>\n","related_configuration_object":"c273be21a6d5d359"}],"returns":{"type":"TweenLite","content":"<p>TweenLite instance</p>\n"},"details":{"content":"<p>Static method for creating a TweenLite instance that animates to the specified destination values (from the current values). The following lines of code all produce identical results:<br /></p><pre class='pre-container prettyprint'>//all produce the same result:<br />TweenLite.to(element, 1, {x:100});<br />var myTween = new TweenLite(element, 1, {x:100});<br />var myTween = TweenLite.to(element, 1, {x:100});</pre><p>Each line above will tween the <code>\"x\"</code> property of the <code>element</code> object to a value of 100 over the coarse of 1 second. They each use a slightly different syntax, all of which are valid. If you don't need to store a reference of the tween, just use the static <code>TweenLite.to( )</code> call.</p><p>Since the <code>target</code> parameter can also be an array of objects, the following code will tween the x property of mc1, mc2, and mc3 to a value of 100 simultaneously:<br /></p><pre class='pre-container prettyprint'>TweenLite.to([mc1, mc2, mc3], 1, {x:100});</pre><p>Even though 3 objects are animating, there is still only one tween created. In order to stagger or offset the start times of each object animating, please see the <code>staggerTo()</code> method of TimelineLite or TweenMax.</p><p>For simple sequencing, you can use the <code>delay</code> special property (like <code>TweenLite.to(element, 1, {x:100, delay:0.5})</code>), but it is highly recommended that you consider using TimelineLite (or TimelineMax) for all but the simplest sequencing tasks. It has an identical <code>to()</code> method that allows you to append tweens one-after-the-other and then control the entire sequence as a whole. You can even have the tweens overlap as much as you want.</p><h3>Example</h3><div data-height=\"300\" data-theme-id=\"5663\" data-slug-hash=\"dgmia\" data-default-tab=\"js\" class='codepen'><pre><code>/*external jshttp://cdnjs.cloudflare.com/ajax/libs/gsap/latest/TweenLite.min.jshttp://cdnjs.cloudflare.com/ajax/libs/gsap/latest/plugins/CSSPlugin.min.js*/window.onload = function(){  var logo = document.getElementById(&quot;logo&quot;);  TweenLite.to(logo, 1, {left:&quot;632px&quot;});}//run//PC ctnrl-0//MAC cmd-0</code></pre><p>See the Pen <a href='http://codepen.io/GreenSock/pen/dgmia/'>Basic Tween</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p></div><p><script async src=\"http://codepen.io/assets/embed/ei.js\"></script></p><p data-height=\"100\" data-theme-id=\"5662\" data-slug-hash=\"dgmia\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/dgmia/'>Basic Tween</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://codepen.io/assets/embed/ei.js\"></script></p>"}},"b047280f767c4b7b":{"name":"type","returns":{"type":"String","content":"a comma-delimited list of the split type(s) which can be any of the following: <b>chars, words,</b> or <b>lines</b>. This indicates the type of components you'd like split apart into distinct &lt;div&gt; elements. For example, to split apart the characters <b>and</b> words (not lines), you'd use <code>type:\"chars,words\"</code> or to only split apart lines, you'd do <code>type:\"lines\"</code>. In order to avoid odd line breaks, it is best to <b>not</b> split by <code>chars</code> alone (always include <code>words</code> or <code>lines</code> too if you're splitting by characters). Note: spaces are not considered characters. <i>[default: \"chars,words,lines\"]</i>","contentShort":""}},"484a9cd6847057ea":{"name":"charsClass","returns":{"type":"String","content":"a css class to apply to each character's &lt;div&gt;, making it easy to select. If you add <code>\"++\"</code> to the end of the class name, SplitText will append an incremented number to each character's &lt;div&gt;, starting at 1. For example, if charsClass is <code>\"char++\"</code>, the div's class for the first character would be <code>\"char1\"</code>, the next would be <code>\"char2\"</code>, then <code>\"char3\"</code>, etc.<i>[default: undefined]</i>","contentShort":""}},"99dd4e1976eda5e5":{"name":"linesClass","returns":{"type":"String","content":"a css class to apply to each line's &lt;div&gt;, making it easy to select. If you add <code>\"++\"</code> to the end of the class name, SplitText will append an incremented number to each line's &lt;div&gt;, starting at 1. For example, if linesClass is <code>\"line++\"</code>, the div's class for the first line would be <code>\"line1\"</code>, the next would be <code>\"line2\"</code>, then <code>\"line3\"</code>, etc. <i>[default: undefined]</i>","contentShort":""}},"435f9b9c59d62464":{"name":"position","returns":{"type":"String","content":"if <code>\"absolute\"</code>, the <code>position</code> css style for all of the resulting &lt;div&gt; elements will be <code>\"absolute\"</code> and their <code>\"top\", \"left\", \"width\",</code> and <code>\"height\"</code> css properties will be calculated and applied inline which can be useful for certain effects. In IE8 and earlier, this provides better support for 2D transforms like rotation, scale, etc. It costs a bit more to split initially performance-wise, but it can improve performance during animation because the browser doesn't have to do as many reflow calculations (in most cases). Keep in mind that once you split things using <code>position:\"absolute\"</code>, if the containing element is resized, the split text chunks won't reflow. And if position is not specifically set to<code>\"absolute\"</code>, it will be <code>\"relative\"</code> <i>[default: \"relative\"]</i>","contentShort":""}},"601ce401aa4b786e":{"name":"wordDelimiter","returns":{"type":"String","content":"normally words are split at every space character. The wordDelimiter property allows you to specify your own delimiter. If you want to split a hashtag like #IReallyLoveGSAP into words you could format the text like: #I*Really*Love*GSAP and set <code>wordDelimiter:\"*\"</code> in the SplitText config object. ","contentShort":""}},"f1164c1177ade869":{"name":"wordsClass","returns":{"type":"String","content":"a css class to apply to each word's &lt;div&gt;, making it easy to select. If you add <code>\"++\"</code> to the end of the class name, SplitText will append an incremented number to each word's &lt;div&gt;, starting at 1. For example, if wordsClass is <code>\"word++\"</code>, the div's class for the first word would be <code>\"word1\"</code>, the next would be <code>\"word2\"</code>, then <code>\"word3\"</code>, etc. <i>[default: undefined]</i>","contentShort":""}},"54a27bdcea66a8b2":{"meta":{"keywords":"","description":"","imagePath":""},"content":"<div class=\"package-feature\">\n\n\t<h1>Utilities</h1><img style=\"width: 93%;\" src=\"https://greensock.com/wp-content/themes/greensock/images/divider.png\" class=\"fr-fic fr-dii\">\n\n\t<p>Summary for Utilities</p>\n</div>\n<div class=\"class-item\">\n\t<div class=\"top\">\n\n\t\t<h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Utilities/VelocityTracker\"><span data-link-id=\"eb1821730d324359\"></span></span>\n\t\t</h1>\n\t</div>\n<p></p>\n</div>\n<div class=\"class-item\">\n\t<div class=\"top\">\n\n\t\t<h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Utilities/SplitText\"><span data-link-id=\"9927ce1237a8b0b1\"></span></span>\n\t\t</h1>\n\t</div>\n\n\t<p>SplitText makes it easy to break apart the text in an HTML element so that each character, word, and/or line is in its own &lt;div&gt;, making complex animation simple.</p>\n</div>\n<div class=\"class-item\">\n\t<div class=\"top\">\n\n\t\t<h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Utilities/Draggable\"><span data-link-id=\"27ffcb75af705686\"></span></span>\n\t\t</h1>\n\t</div>\n\n\t<p>Draggable provides a surprisingly simple way to make virtually any DOM element draggable, spinnable, tossable, and even flick-scrollable using mouse and/or touch events, plus Draggable integrates beautifully (and optionally) withThrowPropsPlugin so that the user can flick and have the motion decelerate smoothly based on momentum.</p>\n</div>\n"},"57d33bbbf0c4c2c2":{"meta":{"keywords":["js.RoughEase","Easing"],"title":"RoughEase","description":"Most easing equations give a smooth, gradual transition between the start and end values, but RoughEase provides an easy way to get a rough, jagged effect instead, or you can also get an evenly-spaced back-and-forth movement if you prefer."},"header":{"content":"<p>Most easing equations give a smooth, gradual transition between the start and end values, but RoughEase provides an easy way to get a rough, jagged effect instead, or you can also get an evenly-spaced back-and-forth movement if you prefer. Configure the RoughEase by passing an object to the constructor or <code>config()</code> method with any of the following properties (all are optional):</p><p>[config id=\"ea05af7191454490\"]</p><div class=\"ease-visualizer\" data-ease=\"RoughEase\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example code</b><br /></p><pre class='pre-container prettyprint'>//use the default values<br />TweenLite.from(element, 1, {opacity:0, ease:RoughEase.ease});<br /> <br />//or customize the configuration<br />TweenLite.to(element, 3, {y:300, ease:RoughEase.ease.config({strength:3, points:50, template:Strong.easeInOut, taper:\"both\", randomize:false}) });<br /> <br />//or create a RoughEase that we can pass in to multiple tweens later<br />var rough = new RoughEase({strength:3, points:50, template:Strong.easeInOut, taper:\"both\", randomize:false});<br />TweenLite.to(element1, 3, {y:300, ease:rough});<br />TweenLite.to(element2, 5, {x:500, ease:rough});</pre>"}},"10948e3702698b9c":{"meta":{"keywords":["js.RoughEase.RoughEase()"],"title":"RoughEase()","description":"Constructor"},"header":{"content":"<p>Constructor</p>"},"parameters":[{"name":"vars","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — a generic object with any of the following properties (all are completely optional):</p>\n","related_configuration_object":"ea05af7191454490"}],"returns":{},"details":{"content":"<p>Constructor</p>"}},"cca5b92a93c91acc":{"meta":{"keywords":["js.RoughEase.ease"],"title":"ease","description":"[static] The default ease instance which can be reused many times in various tweens in order to conserve memory and improve performance slightly compared to creating a new instance each time."},"header":{"content":"<p>[static] The default ease instance which can be reused many times in various tweens in order to conserve memory and improve performance slightly compared to creating a new instance each time.</p>"},"returns":{"type":"RoughEase","content":""},"details":{"content":"<p>The default ease instance which can be reused many times in various tweens in order to conserve memory and improve performance slightly compared to creating a new instance each time.</p>"}},"677955a5f3bdfcb4":{"meta":{"keywords":["js.RoughEase.config()"],"title":"config()","description":"Permits customization of the ease with various parameters."},"header":{"content":"<p>Permits customization of the ease with various parameters.</p>"},"parameters":[{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — a generic object with any of the following properties (all are completely optional):</p>\n","related_configuration_object":"ea05af7191454490"}],"returns":{"type":"RoughEase","content":"<p>new RoughEase instance that is configured according to the parameters provided</p>\n"},"details":{"content":"<p>Permits customization of the ease with various parameters.</p>"}},"4c00a0ea1a2df967":{"meta":{"keywords":["js.RoughEase.getRatio()"],"title":"getRatio()","description":"[override] Translates the tween&#039;s progress ratio into the corresponding ease ratio."},"header":{"content":"<p>[override] Translates the tween's progress ratio into the corresponding ease ratio.</p>"},"parameters":[{"name":"p","data_type":"Number","description":"<p>progress ratio (a value between 0 and 1 indicating the progress of the tween/ease)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Number","content":"<p>translated number</p>\n"},"details":{"content":"<p>Translates the tween's progress ratio into the corresponding ease ratio. This is the heart of the Ease, where it does all its work.</p>"}},"5b09c1a25bf1df7e":{"meta":{"keywords":["js.RaphaelPlugin","Plugins"],"title":"RaphaelPlugin","description":""},"header":{"content":"<p>Enables TweenLite and TweenMax to animate properties of Raphael JavaScript objects (see <a href=\"http://www.raphaeljs.com/\" target=\"external\">http://www.raphaeljs.com/</a>). Raphael is a JavaScript framework that simplifies work with vector graphics on the web. For example:</p><pre class='pre-container prettyprint'>// creates canvas 550 × 400 at 10, 50<br />var paper = Raphael(10, 50, 550, 400);<br />// creates rectangle at x = 50, y = 40, with a width of 200 and height of 100<br />var rect = paper.rect(50, 40, 200, 100);<br />// sets the fill attribute of the rectangle to red (#f00)<br />rect.attr(\"fill\", \"#f00\");<br />// tween the fill to blue (#00f) and x to 100, y to 100, width to 100 and height to 50 over the course of 3 seconds using an ease of Power1.easeInOut<br />TweenLite.to(rect, 3, {raphael:{fill:\"#00f\", x:100, y:100, width:100, height:50}, ease:Power1.easeInOut});</pre><p><i><b>Note:</b> a common mistake is to forget to wrap Raphael-related properties in a \"raphael\" object which is essential for helping TweenLite/Max understand your intent.</i></p><p>You can tween any of the properties that you would normally set using raphael's <code>attr()</code> method as well as the following transformation properties: <code>rotation, scaleX, scaleY, skewX, skewY, tx and ty</code> and even <code>shortRotation</code> which will rotate in the shortest direction to the destination value. <code>tx</code> and <code>ty</code> refer to the translation x and y properties (<code>e</code> and <code>f</code> from the element's matrix). This gives you a lot of control, even beyond what's easily accomplished through Raphael's own methods.</p><p><b>globalPivot or localPivot</b> - You can define a custom pivot point around which transforms will be made (rotation, skewX, skewY, scaleX, scaleY, tx, and ty) using either <code>globalPivot</code> or<code>localPivot</code>. The difference between the two is that <code>localPivot</code> uses coordinates according to the object's local coordinate system which is always the same regardless of its scale/rotation/position. Think of it like a point \"inside\" the object. <code>globalPivot</code>, on the other hand, uses global coordinates according to the Raphael object that contains the tween's target. You can define the pivot point either as an object with x and y properties like: <code>globalPivot:{x:50, y:25}</code> or a comma-delimited string like <code>globalPivot:\"50,25\"</code>.</p><pre class='pre-container prettyprint'>// tween the rotation to 270 degrees and scaleX to 0.5 using a global pivot point of x:120, y:80 over the course of 3 seconds using an ease of Power1.easeInOut<br />TweenLite.to(rect, 3, {raphael:{rotation:270, scaleX:0.5, globalPivot:{x:120, y:80}}, ease:Power1.easeInOut});</pre><p>Note that <code>tx</code> and <code>ty</code> are automatically adjusted to accommodate any rotation or skew during the tween. So, for example, if you tween the rotation and tx and ty, it will work fine but at the end, tx and ty may be slightly different than what you defined for the tween because they had to be adjusted to prevent the object's rotation from throwing off the visual position.</p><p>RaphaelPlugin doesn't support tweening Raphael <b>\"sets\"</b> (which are basically like groups of Raphael objects). To tween a set, you should loop through its elements and create a tween for each one.</p>"}},"681f9501cd7f99b3":{"meta":{"keywords":["js.CustomWiggle","Easing"],"title":"CustomWiggle","description":"Creates highly configurable wiggle eases."},"header":{"content":"<p><span class=\"inTweenMax\">Included in TweenMax: <span class=\"no\">NO</span></span></p><p>CustomWiggle extends <a href=\"/customease/\">CustomEase</a> (think of it like a wrapper that creates a CustomEase under the hood based on the variables you pass in), allowing you to not only set the number of wiggles, but also the <code>type</code> of wiggle (there are 5 types; see demo below). Advanced users can even alter the plotting of the wiggle curves along either axis using <code>amplitudeEase</code> and <code>timingEase</code> special properties. </p><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/5lk5sLTd6N4?rel=0&feature=player_detailpage?rel=0\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><h3>Demo: CustomWiggle Types</h3><p data-height=\"450\" data-theme-id=\"9446\" data-slug-hash=\"GrggOL\" data-default-tab=\"result\" data-user=\"GreenSock\" data-embed-version=\"2\" data-pen-title=\"CustomWiggle Demo : resized\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/GrggOL/\">CustomWiggle Demo : resized</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script></p><h3>Options</h3><ul><li><strong><code>wiggles</code></strong> (Integer) - number of oscillations back and forth. Default: 10</li><li><strong><code>type</code></strong> (String) \"easeOut\" | \"easeInOut\" | \"anticipate\" | \"uniform\" | \"random\" - the type (or style) of wiggle (see demo above). Default: \"easeOut\"</li><li><strong><code>amplitudeEase</code></strong> (Ease) - provides advanced control over the shape of the amplitude (y-axis in the <a href=\"/ease-visualizer\">ease visualizer</a>). You define an ease that controls the amplitude's progress from 1 toward 0 over the course of the tween. Defining an amplitudeEase (or timingEase) will override the \"type\" (think of the 5 \"types\" as convenient presets for amplitudeEase and timingEase combinations). See the <a href=\"http://codepen.io/GreenSock/pen/a8a7bc33cf80a74165dd966244a6cc00?editors=0010\">example codepen</a> to play around and visualize how it works.</li><li><strong><code>timingEase</code></strong> (Ease) - provides advanced control over how the waves are plotted over time (x-axis in the <a href=\"/ease-visualizer\">ease visualizer</a>). Defining an timingEase (or amplitudeEase) will override the \"type\" (think of the 5 \"types\" as convenient presets for amplitudeEase and timingEase combinations). See the <a href=\"http://codepen.io/GreenSock/pen/a8a7bc33cf80a74165dd966244a6cc00?editors=0010\">example codepen</a> to play around and visualize how it works.</li></ul><p>How do you control the strength of the wiggle (or how far it goes)? Simply by setting the tween property values themselves. For example, a wiggle to rotation:30 would be stronger than rotation:10. Remember, and ease just controls the ratio of movement toward whatever value you supply for each property in your tween. </p><h3>Sample code</h3><pre class='pre-container prettyprint'>//Create a wiggle with 6 oscillations (default type:\"easeOut\")<br />CustomWiggle.create(\"myWiggle\", {wiggles:6});<br />//now use it in an ease. \"rotation\" will wiggle to 30 and back just as much in the opposite direction, ending where it began. <br />TweenMax.to(\".class\", 2, {rotation:30, ease:\"myWiggle\"});<br /><br />//Create a 10-wiggle anticipation ease:<br />CustomWiggle.create(\"funWiggle\", {wiggles:10, type:\"anticipate\"});<br />TweenMax.to(\".class\", 2, {rotation:30, ease:\"funWiggle\"}); </pre><p>Wiggling isn't just for \"rotation\"; you can use it for any property. For example, you could create a swarm effect by using just 2 randomized wiggle tweens on \"x\" and \"y\", as <a href=\"http://codepen.io/GreenSock/pen/wzkBYZ\">demonstrated here</a>.</p>"}},"54ddb48cbc201e21":{"meta":{"keywords":["js.CustomWiggle.create()"],"title":"create()","description":"Create a wiggle ease by just adjusting a few parameters.<br />\r\n<br />\r\n"},"header":{"content":"<p>Create a wiggle ease by just adjusting a few parameters.</p>"},"parameters":[{"name":"ID","data_type":"String","description":"<p>An ID (name) that can be used to identify this CustomWiggle instance, like <code>\"shake\".</code></p>\n"},{"name":"vars","data_type":"Object","description":"<p>A config object containing properties that affect how the ease is rendered (number of wiggles, distribution of wiggles).</p>\n","related_configuration_object":"c06d77ded54b7881"}],"returns":{"type":"CustomWiggle","content":"<p>Returns a new CustomWiggle instance</p>\n"},"details":{"content":"<p>It's easy to create the perfect wiggle by just tweaking a few parameters. You control the strength of the wiggle (or how far it goes) by setting the tween property values themselves. For example, a wiggle to rotation:30 would be stronger than rotation:10. Remember, an ease just controls the ratio of movement toward whatever value you supply for each property in your tween. </p><h3>Sample code</h3><pre class='pre-container prettyprint'>//Create a wiggle with 6 oscillations (default type:\"easeOut\")<br />CustomWiggle.create(\"myWiggle\", {wiggles:6});<br />//now use it in an ease. \"rotation\" will wiggle to 30 and back just as much in the opposite direction, ending where it began. <br />TweenMax.to(\".class\", 2, {rotation:30, ease:\"myWiggle\"});<br /><br />//Create a 10-wiggle anticipation ease:<br />CustomWiggle.create(\"funWiggle\", {wiggles:10, type:\"anticipate\"});<br />TweenMax.to(\".class\", 2, {rotation:30, ease:\"funWiggle\"}); </pre><h3>Wiggle types</h3><p data-height=\"450\" data-theme-id=\"9446\" data-slug-hash=\"GrggOL\" data-default-tab=\"result\" data-user=\"GreenSock\" data-embed-version=\"2\" data-pen-title=\"CustomWiggle Demo : resized\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/GrggOL/\">CustomWiggle Demo : resized</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script></p><h3>CustomWiggle Playground</h3><p>Edit the wiggles, type, amplitudeEase and timingEase values below:</p><p data-height=\"300\" data-theme-id=\"3984\" data-slug-hash=\"rjaOEe\" data-default-tab=\"js,result\" data-user=\"GreenSock\" data-embed-version=\"2\" data-pen-title=\"CustomWiggle Graph Playground (embed in docs)\" data-editable=\"true\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/rjaOEe/\">CustomWiggle Graph Playground (embed in docs)</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script></p>"}},"723964a4fd3ac4af":{"meta":{"keywords":["js.Circ","Easing"],"title":"Circ","description":"Eases with an abrupt change in velocity either at the beginning (easeIn), the end (easeOut), or both (easeInOut)."},"header":{"content":"<p>Eases with an abrupt change in velocity either at the beginning (easeIn), the end (easeOut), or both (easeInOut). <code>Circ</code> is a convenience class that congregates the 3 types of Circ eases (CircIn, CircOut, and CircInOut) as static properties so that they can be referenced using the standard synatax, like <code>Circ.easeIn</code>, <code>Circ.easeOut</code>, and <code>Circ.easeInOut</code>.</p><div class=\"ease-visualizer\" data-ease=\"Circ\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p>"}},"f4af2f5c548d7079":{"meta":{"keywords":["js.Circ.easeIn"],"title":"easeIn","description":"[static] Eases in with an abrupt change in velocity."},"header":{"content":"<p>[static] Eases in with an abrupt change in velocity.</p>"},"returns":{"type":"CircIn","content":""},"details":{"content":"<p>Eases in with an abrupt change in velocity.</p>"}},"fc5f2508dcf8e967":{"meta":{"keywords":["js.Circ.easeInOut"],"title":"easeInOut","description":"[static] Eases in and out with an abrupt change in velocity."},"header":{"content":"<p>[static] Eases in and out with an abrupt change in velocity.</p>"},"returns":{"type":"CircInOut","content":""},"details":{"content":"<p>Eases in and out with an abrupt change in velocity.</p>"}},"81c4e914fdcf1d68":{"meta":{"keywords":["js.Circ.easeOut"],"title":"easeOut","description":"[static] Eases out with an abrupt change in velocity."},"header":{"content":"<p>[static] Eases out with an abrupt change in velocity.</p>"},"returns":{"type":"CircOut","content":""},"details":{"content":"<p>Eases out with an abrupt change in velocity.</p>"}},"8f60177180297349":{"name":"width","returns":{"type":"Number","content":"The width of the area in which the SVG <code>&lt;path&gt;</code> should be drawn. Default: 100","contentShort":""}},"a8f8b61a98efe26d":{"name":"height","returns":{"type":"Number","content":"The height of the area in which the SVG <code>&lt;path&gt;</code> should be drawn. Default: 100","contentShort":""}},"778cf2b0b9ce7ce9":{"name":"x","returns":{"type":"Number","content":"The x position at which the SVG <code>&lt;path&gt;</code> should start. Default: 0","contentShort":""}},"45862563ed327e51":{"name":"y","returns":{"type":"Number","content":"The y position at which the SVG <code>&lt;path&gt;</code> should start. Default: 0","contentShort":""}},"bf3cb25451cdb408":{"name":"path","returns":{"type":"Number","content":"The SVG <code>&lt;path&gt;</code> instance that should be populated resulting data. This can be a selector string like <code>\"#ease\"</code> or the path element itself. If defined, its <code>\"d\"</code> attribute will be populated with the resulting data (a convenience so that you don't need to take the results from <code>getSVGData()</code> and feed it into that attribute manually).","contentShort":""}},"7913694fbfa93c13":{"meta":{"keywords":["js.Physics2DPlugin","Plugins"],"title":"Physics2DPlugin","description":"Apply physics properties to your animations. "},"header":{"content":"<p>Provides simple physics functionality for tweening an Object's x and y coordinates (or \"left\" and \"top\") based on a combination of velocity, angle, gravity, acceleration, accelerationAngle, and/or friction. It is not intended to replace a full-blown physics engine and does not offer collision detection, but serves as a way to easily create interesting physics-based effects with the GreenSock animation platform. Parameters are not intended to be dynamically updateable, but one unique convenience is that everything is reverseable. So if you spawn a bunch of particle tweens, for example, and throw them into a TimelineLite, you could simply call <code>reverse()</code> on the timeline to watch the particles retrace their steps right back to the beginning. Keep in mind that any easing equation you define for your tween will be completely ignored for these properties.</p><ul><li><b>velocity</b> : Number - the initial velocity of the object measured in pixels per time unit (usually seconds, but for tweens where useFrames is true, it would be measured in frames). (Default:<code>0</code>)</li><li><b>angle</b> : Number - the initial angle (in degrees) at which the object should travel. This only matters when a <code>velocity</code> is defined. For example, if the object should start out traveling at -60 degrees (towards the upper right), the <code>angle</code> would be -60. (Default: <code>0</code>)</li><li><b>gravity</b> : Number - the amount of downward acceleration applied to the object, typically measured in pixels per second (or for tweens where <code>useFrames</code> is <code>true</code>, it would be measured per frame). You can <b>either</b> use <code>gravity</code> <b>or</b> <code>acceleration</code>, not both because gravity is the same thing as acceleration applied at an <code>accelerationAngle</code> of 90. Think of <code>gravity</code> as a convenience property that automatically sets the <code>accelerationAngle</code> for you. (Default: <code>null</code>)</li><li><b>acceleration</b> : Number - the amount of acceleration applied to the object, typically measured in pixels per second (or for tweens where <code>useFrames</code> is <code>true</code>, it would be measured per frame). To apply the acceleration in a specific direction that is different than the <code>angle</code>, use the <code>accelerationAngle</code> property. You can <b>either</b> use <code>gravity</code> <b>or</b> <code>acceleration</code>, not both because gravity is the same thing as acceleration applied at an <code>accelerationAngle</code> of 90. (Default: <code>null</code>)</li><li><b>accelerationAngle</b> : Number - the angle at which acceleration is applied (if any), measured in degrees. So if, for example, you want the object to accelerate towards the left side of the screen, you'd use an <code>accelerationAngle</code> of 180. If you define a <code>gravity</code> value, it will automatically set the <code>accelerationAngle</code> to 90 (downward). (Default: <code>null</code>)</li><li><b>friction</b> : Number - a value between 0 and 1 where 0 is no friction, 0.08 is a small amount of friction, and 1 will completely prevent any movement. This is not meant to be precise or scientific in any way, but it serves as an easy way to apply a friction-like physics effect to your tween. Generally it is best to experiment with this number a bit - start with very small values like 0.02. Also note that friction requires more processing than physics tweens without any friction. (Default: <code>0</code>)</li><li><b>xProp</b> : String - By default, the <code>\"x\"</code> property of the target object is used to control x-axis movement, but if you'd prefer to use a different property name, use <code>xProp</code> like<code>xProp:\"left\"</code>. (Default: <code>\"x\"</code>)</li><li><b>yProp</b> : String - By default, the <code>\"y\"</code> property of the target object is used to control y-axis movement, but if you'd prefer to use a different property name, use <code>yProp</code> like <code>yProp:\"top\"</code>. (Default: <code>\"y\"</code>)</li></ul><p><b>USAGE:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(element, 2, {physics2D:{velocity:300, angle:-60, gravity:400}});<br /> <br />//--OR--<br /> <br />TweenLite.to(element, 2, {physics2D:{velocity:300, angle:-60, friction:0.1}}); <br /> <br />//--OR--<br /> <br />TweenLite.to(element, 2, {physics2D:{velocity:300, angle:-60, acceleration:50, accelerationAngle:180}}); </pre><p data-height=\"345\" data-theme-id=\"9446\" data-slug-hash=\"emjgxw\" data-default-tab=\"result\" data-user=\"GreenSock\" data-embed-version=\"2\" data-pen-title=\"Physics2D Demo\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/emjgxw/\">Physics2D Demo</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script></p><p>Physics2DPlugin is a <a href=\"http://www.greensock.com/club/\" target=\"external\">Club GreenSock</a> membership benefit. You must have a valid membership to use this class without violating the terms of use. Visit <a href=\"http://www.greensock.com/club/\" target=\"external\">http://www.greensock.com/club/</a> to sign up or get more details.</p>"}},"7bc5a8cd3cf25890":{"meta":{"keywords":["js.TextPlugin","Plugins","Text"],"title":"TextPlugin","description":""},"header":{"content":"<p>Tweens the text content of a DOM element, replacing it one character at a time (or one word at a time if you set the <code>delimiter</code> to \" \" (a space) or you can even use a custom delimiter). So when the tween is finished, the DOM element's text has been completely replaced. This also means that if you rewind/restart the tween, the text will be reverted.</p><p>Here is a simple example of replacing the text in <code>yourElement</code>:<br /></p><pre class='pre-container prettyprint'>//replaces yourElement's text with \"This is the new text\" over the course of 2 seconds<br />TweenLite.to(yourElement, 2, {text:\"This is the new text\", ease:Linear.easeNone});</pre><p>If you'd like to use a different delimiter so that instead of replacing character-by-character, it gets replaced word-by-word, just pass an object with configuration properties like this:<br /></p><pre class='pre-container prettyprint'>//replaces word-by-word because the delimiter is \" \" (a space)<br />TweenLite.to(yourElement, 2, {text:{value:\"This is the new text\", delimiter:\" \"}, ease:Linear.easeNone});</pre><p>Sometimes it's useful to have the new text differentiated visually from the old text, so TextPlugin allows you to define a css class to the new and/or old content, like this:<br /></p><pre class='pre-container prettyprint'>//wraps the old text in <span class=\"class1\"></span> and the new text in a <span class=\"class2\"></span><br />TweenLite.to(yourElement, 2, {text:{value:\"This is the new text\", newClass:\"class2\", oldClass:\"class1\"}, ease:Power2.easeIn});</pre><p>As indicated, defining a <code>newClass</code> and/or <code>oldClass</code> will result in wrapping a &lt;span&gt; tag around the associated text.</p><p>The <code>delimiter</code>, <code>newClass</code>, and <code>oldClass</code> special properties are all completely optional. If you use them, make sure you put them inside their own object, not inside the main vars object, like this:<br /></p><pre class='pre-container prettyprint'>//GOOD:<br />TweenLite.to(yourElement, 1, {text:{value:\"Your new text\", oldClass:\"class1\", newClass:\"class2\", delimiter:\" \"}});<br /> <br />//BAD:<br />TweenLite.to(yourElement, 1, {text:\"Your new text\", oldClass:\"class1\", newClass:\"class2\", delimiter:\" \"});</pre><p>If the new text is shorter than the old text, it can sometimes be useful to pad the trailing space with non-breaking space HTML characters so that the old text doesn't collapse. If that's the effect you want, set the <code>padSpace</code> to <code>true</code> inside the text object like this:<br /></p><pre class='pre-container prettyprint'>TweenLite.to(yourElement, 1, {text:{value:\"shorter new text\", padSpace:true}});</pre>"}},"c0ab38e528d80db5":{"name":"delay","returns":{"type":"Number","content":"Amount of delay in seconds (or frames for frames-based tweens) before the animation should begin.","contentShort":""}},"4c4c055e0d1b3ef4":{"name":"paused","returns":{"type":"Boolean","content":"If <code>true</code>, the animation will pause itself immediately upon creation.","contentShort":""}},"6fb092df021a71b8":{"name":"onComplete","returns":{"type":"Function ","content":"A function that should be called when the animation has completed.","contentShort":""}},"1bc824ce6dc34487":{"name":"onCompleteScope","returns":{"type":"Object ","content":"Defines the scope of the onComplete function (what <code>\"this\"</code> refers to inside that function).","contentShort":""}},"4502dc942c2f6ad3":{"name":"useFrames","returns":{"type":"Boolean","content":"If <code>useFrames</code> is <code>true</code>, the tweens's timing will be based on frames instead of seconds because it is intially added to the root frames-based timeline. This causes both its <code>duration</code> and <code>delay</code> to be based on frames. An animations's timing mode is always determined by its parent <code>timeline</code>.","contentShort":"If <code>useFrames</code> is <code>true</code>, the animation's timing will be based on frames instead of seconds because it is initially added to the root frames-based timeline."}},"197338cafda956a7":{"name":"tweens","returns":{"type":"Array","content":"To immediately insert several tweens into the timeline, use the tweens special property to pass in an Array of TweenLite/TweenMax/TimelineLite/TimelineMax instances. You can use this in conjunction with the align and stagger special properties to set up complex sequences with minimal code. These values simply get passed to the add() method.","contentShort":"To immediately insert several tweens into the timeline, use the tweens special property to pass in an Array of TweenLite/TweenMax/TimelineLite/TimelineMax instances."}},"2df6109eebc75958":{"name":"stagger","returns":{"type":"Number","content":"Only used in conjunction with the tweens special property when multiple tweens are to be inserted immediately. It staggers the tweens by a set amount of time in seconds (or in frames if useFrames is true). For example, if the stagger value is 0.5 and the \"align\" property is set to \"start\", the second tween will start 0.5 seconds after the first one starts, then 0.5 seconds later the third one will start, etc. If the align property is \"sequence\", there would be 0.5 seconds added between each tween. This value simply gets passed to the add() method. Default is 0.","contentShort":"When the <code>tweens</code> special property is used in a timeline's constructor the <code>stagger</code> is the amount of time between the start times of those tweens."}},"91440e0dbaa1e01d":{"name":"align","returns":{"type":"String","content":"Only used in conjunction with the tweens special property when multiple tweens are to be inserted immediately. The value simply gets passed to the add() method. The default is \"normal\". Options are:\r\n<ul>\r\n\t<li>\"sequence\" : aligns the tweens one-after-the-other in a sequence</li>\r\n\t<li>\"start\" : aligns the start times of all of the tweens (ignores delays)</li>\r\n\t<li>\"normal\" : aligns the start times of all the tweens (honors delays)</li>\r\n</ul>\r\nThe align special property does not force all child tweens/timelines to maintain relative positioning, so for example, if you use \"sequence\" and then later change the duration of one of the nested tweens, it does not force all subsequent timelines to change their position. The align special property only affects the alignment of the tweens that are initially placed into the timeline through the tweens special property of the vars object.","contentShort":"When the <code>tweens</code> special property is used in a timeline's constructor align allows you to configure the spacing of those tweens."}},"b415f9c3aaa120c7":{"name":"onStart","returns":{"type":"Function ","content":"A function that should be called when the animation begins (when its <code>time</code> changes from 0 to some other value which can happen more than once if the tween is restarted multiple times).","contentShort":""}},"67683f3825ed6254":{"name":"onStartScope","returns":{"type":"Object","content":"Defines the scope of the onStart function (what <code>\"this\"</code> refers to inside that function).","contentShort":""}},"1d0471f0541e51f6":{"name":"onUpdate","returns":{"type":"Function","content":"A function that should be called every time the animation updates (on every frame while the animation is active).","contentShort":""}},"0671715f6c9c297a":{"name":"onUpdateScope","returns":{"type":"Object","content":"Defines the scope of the onUpdate function (what <code>\"this\"</code> refers to inside that function).","contentShort":""}},"634ca2f9b61c71ba":{"name":"onRepeat","returns":{"type":"Function","content":"A function that should be called each time the animation repeats.","contentShort":""}},"14f7b2ab2306d25d":{"name":"onRepeatScope","returns":{"type":"Object","content":"Defines the scope of the onRepeat function (what \"<code>this</code>\" refers to inside that function).","contentShort":""}},"710eec28580f52cc":{"name":"onReverseComplete","returns":{"type":"Function","content":"A function that should be called when the animation has reached its beginning again from the reverse direction. For example, if <code>reverse()</code> is called the tween will move back towards its beginning and when its<code>time</code> reaches 0, <code>onReverseComplete</code> will be called. This can also happen if the animation is placed in a TimelineLite or TimelineMax instance that gets reversed and plays the animation backwards to (or past) the beginning.","contentShort":"A function that should be called when the animation has reached its beginning again from the reverse direction."}},"31d511c03f29c247":{"name":"onReverseCompleteScope","returns":{"type":"Object","content":"Defines the scope of the onReverseComplete function (what <code>\"this\"</code> refers to inside that function).","contentShort":""}},"35d0319919c01f84":{"name":"autoRemoveChildren","returns":{"type":"Boolean","content":"If autoRemoveChildren is set to true, as soon as child tweens/timelines complete, they will automatically get killed/removed. This is normally undesireable because it prevents going backwards in time (like if you want to reverse() or set the progress lower, etc.). It can, however, improve speed and memory management. The root timelines use autoRemoveChildren:true.","contentShort":"Automatically removes child tweens / timelines from a timeline upon completion."}},"22750cc8867b561e":{"name":"smoothChildTiming","returns":{"type":"Boolean","content":"Controls whether or not child tweens/timelines are repositioned automatically (changing their startTime) in order to maintain smooth playback when properties are changed on-the-fly. For example, imagine that the timeline's playhead is on a child tween that is 75% complete, moving element's left from 0 to 100 and then that tween's reverse() method is called. If smoothChildTiming is false (the default except for the root timelines), the tween would flip in place, keeping its startTime consistent. Therefore the playhead of the timeline would now be at the tween's 25% completion point instead of 75%. Remember, the timeline's playhead position and direction are unaffected by child tween/timeline changes. element's left would jump from 75 to 25, but the tween's position in the timeline would remain consistent. However, if smoothChildTiming is true, that child tween's startTime would be adjusted so that the timeline's playhead intersects with the same spot on the tween (75% complete) as it had immediately before reverse() was called, thus playback appears perfectly smooth. element's left would still be 75 and it would continue from there as the playhead moves on, but since the tween is reversed now element's left will travel back towards 0 instead of 100. Ultimately it's a decision between prioritizing smooth on-the-fly playback (true) or consistent position(s) of child tweens/timelines (false). Some examples of on-the-fly changes to child tweens/timelines that could cause their startTime to change when smoothChildTiming is true are: reversed, timeScale, progress, totalProgress, time, totalTime, delay, pause, resume, duration, and totalDuration.","contentShort":"Controls whether or not child tweens/timelines are repositioned automatically (changing their startTime) in order to maintain smooth playback when properties are changed on-the-fly."}},"c0912704078628d1":{"name":"repeat","returns":{"type":"Number","content":"Number of times that the animation should repeat after its first iteration. For example, if <code>repeat</code> is 1, the animation will play a total of twice (the initial play plus 1 repeat). To repeat indefinitely, use -1. <code>repeat</code> should always be an integer.","contentShort":"Number of times that the animation should repeat after its first iteration."}},"ce8ef82d428fb818":{"name":"repeatDelay","returns":{"type":"Number","content":"<i>Number</i> - Amount of time in seconds (or frames for frames-based tweens) between repeats. For example, if <code>repeat</code> is 2 and <code>repeatDelay</code> is 1, the animation will play initially, then wait for 1 second before it repeats, then play again, then wait 1 second again before doing its final repeat.","contentShort":"<i>Number</i> - Amount of time in seconds (or frames for frames-based tweens) between repeats."}},"0e1883e99856fe87":{"name":"yoyo","returns":{"type":"Boolean","content":"If <code>true</code>, every other <code>repeat</code> cycle will run in the opposite direction so that the tween appears to go back and forth (forward then backward). This has no affect on the \"<code>reversed</code>\" property though. So if <code>repeat</code> is 2 and <code>yoyo</code> is<code>false</code>, it will look like: start - 1 - 2 - 3 - 1 - 2 - 3 - 1 - 2 - 3 - end. But if <code>yoyo</code> is <code>true</code>, it will look like: start - 1 - 2 - 3 - 3 - 2 - 1 - 1 - 2 - 3 - end.","contentShort":"If <code>true</code>, every other <code>repeat</code> cycle will run in the opposite direction so that the tween appears to go back and forth (forward then backward)."}},"515611f1e4226fa9":{"name":"onCompleteParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onComplete</code> function. For example, <code>new TimelineMax({onComplete:myFunction, onCompleteParams:[\"param1\", \"param2\"]});</code> To self-reference the timeline instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onCompleteParams:[\"{self}\", \"param2\"]</code>","contentShort":"An Array of parameters to pass the <code>onComplete</code> function."}},"7463e08533f9efec":{"name":"onReverseCompleteParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onReverseComplete</code> function. For example, <code>new TimelineMax({onReverseComplete:myFunction, onReverseCompleteParams:[\"param1\", \"param2\"]});</code> To self-reference the timeline instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onReverseCompleteParams:[\"{self}\", \"param2\"]</code>","contentShort":"An Array of parameters to pass the <code>onReverseComplete</code> function"}},"71e998538c325aca":{"returns":{"type":"Array","contentShort":"An Array of parameters to pass the <code>onRepeat</code> function.","content":"An Array of parameters to pass the <code>onRepeat</code> function. For example, <code>new TimelineMax({onRepeat:myFunction, onRepeatParams:[\"param1\", \"param2\"]});</code> To self-reference the timeline instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onRepeatParams:[\"{self}\", \"param2\"]</code>"}},"34877b494cd68df3":{"name":"onStartParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onStart</code> function. For example, <code>new TimelineMax({onStart:myFunction, onStartParams:[\"param1\", \"param2\"]});</code> To self-reference the timeline instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onStartParams:[\"{self}\", \"param2\"]</code>","contentShort":"An Array of parameters to pass the <code>onStart</code> function."}},"6c2a5ea7a2235260":{"name":"onUpdateParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onUpdate</code> function. For example, <code>new TimelineMax({onUpdate:myFunction, onUpdateParams:[\"param1\", \"param2\"]});</code> To self-reference the timeline instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onUpdateParams:[\"{self}\", \"param2\"]</code>","contentShort":"An Array of parameters to pass the <code>onUpdate</code> function."}},"47f712d4a2ca9bd6":{"name":"callbackScope","returns":{"type":"Object","content":"The scope to be used for all of the callbacks (onStart, onUpdate, onComplete, etc.). The scope is what \"this\" refers to inside any of the callbacks. The older callback-specific scope properties (onStartScope, onUpdateScope, onCompleteScope, onReverseComplete, etc.) are deprecated but still work.","contentShort":"The scope to be used for all of the callbacks (onStart, onUpdate, onComplete, etc.)."}},"7eebd4b20adcaecc":{"meta":{"keywords":["js.TweenMax","Animation"],"title":"TweenMax","description":"TweenMax extends TweenLite, adding many useful (but non-essential) features like repeat(), repeatDelay(), yoyo(), updateTo(), and more. It also includes many extra plugins by default, making it extremely full-featured. Any of the plugins can work with TweenLite too, but TweenMax saves you the step of loading the common ones like CSSPlugin, RoundPropsPlugin, BezierPlugin, AttrPlugin, DirectionalRotationPlugin as well as EasePack, TimelineLite, and TimelineMax."},"header":{"content":"<p>TweenMax extends <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenLite\"><span data-link-id=\"52db442320b34fc1\"></span></span>, adding many useful (but non-essential) features like <code>repeat()</code>, <code>repeatDelay()</code>, <code>yoyo()</code>, and more. It also includes many extra plugins by default, making it extremely full-featured. Any of the plugins can work with <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenLite\"><span data-link-id=\"52db442320b34fc1\"></span></span> too, but TweenMax saves you the step of loading the common ones like <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:CSSPlugin\"><span data-link-id=\"be137a434f5b4e08\"></span></span>, <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:RoundPropsPlugin\"><span data-link-id=\"bac828fc726d4d82\"></span></span>, <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:BezierPlugin\"><span data-link-id=\"43077a47946db3db\"></span></span>, <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:AttrPlugin\"><span data-link-id=\"27db5e20e8bbb9ae\"></span></span>, <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:DirectionalRotationPlugin\"><span data-link-id=\"0a6e62faf0a53059\"></span></span> as well as EasePack, <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineLite\"><span data-link-id=\"2b3bb68a78e65fe7\"></span></span>, and <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineMax\"><span data-link-id=\"32bc2e8f667c28b7\"></span></span>. Since TweenMax extends TweenLite, it can do&nbsp;<strong>ANYTHING</strong>&nbsp;TweenLite can do plus more. The syntax is identical. You can mix and match TweenLite and TweenMax in your project as you please, but if file size is a concern it is best to stick with TweenLite unless you need a particular TweenMax-only feature.</p><p>Like TweenLite, a TweenMax instance handles tweening one or more properties of&nbsp;<strong>any object</strong>&nbsp;(or array of objects) over time. TweenMax can be used on its own or in conjunction with advanced sequencing tools like TimelineLite or TimelineMax to make complex tasks much simpler. With scores of other animation frameworks to choose from, why consider the GreenSock Animation Platform?:</p><ul><li><strong>SPEED&nbsp;</strong>- The platform has been highly optimized for maximum performance. See some speed comparisons yourself at&nbsp;<a href=\"http://www.greensock.com/js/speed.html\" target=\"\">http://greensock.com/js/speed.html</a></li><li><strong>Freakishly robust feature set&nbsp;</strong>- In addition to tweening any numeric property of any object, plugins can be activated to tween hex colors, beziers, css, plus&nbsp;<strong>LOTS</strong>&nbsp;more. It can round values, use relative values, smoothly <code>reverse()</code> on the fly, automatically detect and accommodate getter/setter functions, employ virtually any easing equation,&nbsp;<code>pause()/resume()</code>anytime, and intelligently manage conflicting tweens of the same object with various overwrite modes.</li><li><strong>Sequencing, grouping, and management features&nbsp;</strong>- TimelineLite and TimelineMax make it surprisingly simple to create complex sequences or groups of tweens that you can control as a whole. <code>play()</code>, <code>pause()</code>, <code>restart()</code>, or <code>reverse()</code>. You can even tween a timeline&#39;s&nbsp;<code>time()</code>&nbsp;or&nbsp;<code>progress()</code>&nbsp;to fastforward or rewind the entire timeline. Add labels, change the timeline&#39;s timeScale, nest timelines within timelines, and much more. This can revolutionize your animation workflow, making it more modular and concise.</li><li><strong>Ease of use&nbsp;</strong>- Designers and developers alike rave about how intuitive the platform is.</li><li><strong>Support and reliability&nbsp;</strong>- With frequent updates,&nbsp;<a href=\"http://greensock.com/forums/\" target=\"\">dedicated forums</a>, committed authorship, a solid track record, a proven funding mechanism, and a thriving community of users, the platform is a safe long-term bet (unlike many open source projects).</li><li><strong>Expandability&nbsp;</strong>- With its plugin architecture, you can activate as many (or as few) extra features as your project requires. Write your own plugin to handle particular special properties in custom ways. Minimize bloat and maximize performance.</li></ul><h3>Getting started</h3><p><span class=\"fr-video fr-draggable\" contenteditable=\"false\"><iframe width=\"828\" height=\"465\" src=\"http://www.youtube.com/embed/tMP1PCErrmE?vq=hd720\" frameborder=\"0\" allowfullscreen=\"\"></iframe></span></p><h3>Usage</h3><p>The most common type of tween is a&nbsp;<code><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenMax.to()\"><span data-link-id=\"a52aa2ad91d4ef68\"></span></span></code>&nbsp;tween which allows you to define the destination values:<br></p><pre class=\"pre-container prettyprint\">var photo = document.getElementById(&quot;photo&quot;);\nTweenMax.to(photo, 2, {width:&quot;200px&quot;, height:&quot;150px&quot;});</pre><p>The above code will tween the width and height properties of the &lt;img&gt; DOM element with an id of &quot;photo&quot; from whatever the current values are to 200 and 150 respectively over the course of 2 seconds. Notice the width and height values are defined inside a generic object (between curly braces). Put as many properties there as you want.</p><p>If you pass a string (text) into a tween as the target (like&nbsp;<code>TweenMax.to(&quot;#myID&quot;, 1, {left:&quot;100px&quot;})</code>) TweenMax will use a selector engine (jQuery if present, or <code>document.querySelectorAll()</code> or lastly, <code>document.getElementById()</code>&nbsp;(automatically removing the &quot;#&quot; prefix if it&#39;s there)).</p><p>So once TweenMax is loaded, you can easily animate things like this:<br></p><pre class=\"pre-container prettyprint\">//tween the element with ID of &quot;myID&quot;\nTweenMax.to(&quot;#myID&quot;, 2, {backgroundColor:&quot;#ff0000&quot;, width:&quot;50%&quot;, top:&quot;100px&quot;, ease:Power2.easeInOut});\n \n//or you can do more advanced selecting like all the elements with the class &quot;myClass&quot; like this: \nTweenMax.to(&quot;.myClass&quot;, 2, {boxShadow:&quot;0px 0px 20px red&quot;, color:&quot;#FC0&quot;});</pre><p>By default, tweens begin immediately, although you can delay them using the&nbsp;<code>delay</code>&nbsp;special property or pause them initially using the&nbsp;<code>paused</code>&nbsp;special property (see below).</p><p>The&nbsp;<code>target</code>&nbsp;can also be an array of objects. For example, the following tween will tween the&nbsp;<code>opacity</code>&nbsp;css property to 0.5 and the rotation transform property to 45 for obj1, obj2, and obj3:</p><pre class=\"pre-container prettyprint\">TweenMax.to([obj1, obj2, obj3], 1, {opacity:0.5, rotation:45});</pre><p>Normally, css-specific properties would need to be wrapped in their own object and passed in like&nbsp;<code>TweenMax.to(element, 1, {css:{left:&quot;100px&quot;, top:&quot;50px&quot;}});</code>&nbsp;so that the engine knows that those properties belong to the <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:CSSPlugin\"><span data-link-id=\"be137a434f5b4e08\"></span></span>, but because animating DOM elements in the browser with CSSPlugin is so common, TweenMax automatically checks to see if the target is a DOM element and if it is (and you haven&#39;t defined a &quot;css&quot; object in the vars), TweenMax creates that css object for you and shifts any properties that aren&#39;t directly defined on the element or reserved (like&nbsp;<code>onComplete, ease, delay</code>, etc. or plugins) into that css object when the tween renders for the first time.</p><p>You can also use a&nbsp;<code><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenMax.from()\"><span data-link-id=\"0d0b160bf173886b\"></span></span></code>&nbsp;tween if you want to define the&nbsp;<strong>starting</strong>&nbsp;values instead of the ending values so that the target tweens&nbsp;<em>from</em>&nbsp;the defined values to wherever they currently are. Or a <code><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenMax.fromTo()\"><span data-link-id=\"8ecc7c0172b03069\"></span></span></code>&nbsp;lets you define both starting and ending values.</p><p>Although the&nbsp;<code>to()</code>,&nbsp;<code>from()</code>, and&nbsp;<code>fromTo()</code>&nbsp;static methods are popular because they&#39;re quick and can avoid some garbage collection hassles, you can also use the more object-oriented syntax like this:</p><pre class=\"pre-container prettyprint\">var tween = new TweenMax(myObject, 2, {width:200, height:150});</pre><p>or even:</p><pre class=\"pre-container prettyprint\">var tween = TweenMax.to(myObject, 2, {width:200, height:150});</pre><h3>Special Properties, callbacks and eases</h3><p>In addition to handling the destination values of a tween, the vars object allows you to configure your tween with a variety of options.</p><pre class=\"pre-container prettyprint\">TweenMax.to(element, 1, {opacity:0, onComplete:completeHandler, ease:Back.easeOut, useFrames:true});</pre><p>All TweenMax vars&#39; properties are described below.</p><p>[config id=&quot;bf3441936fcd04fd&quot;]</p><h3>Plugins</h3><p>Think of plugins like special properties that are dynamically added, delivering extra abilities without forcing them to be baked into the core engine, keeping it relatively lean and mean. Each plugin is associated with a property name and it takes responsibility for handling that property. For example, the CSSPlugin is associated with the &quot;css&quot; property name so if it is activated it will intercept the &quot;css&quot; property in the following tween and manage it in a special way so that the tweens affect the element&#39;s style object (for manipulating DOM elements):</p><pre class=\"pre-container prettyprint\">TweenMax.to(element, 1, {css:{top:&quot;100px&quot;, left:&quot;50px&quot;, backgroundColor:&quot;#ff0000&quot;, fontSize:&quot;12px&quot;}, delay:0.5});</pre><p>But again, CSSPlugin is a special case where TweenMax (as of version 1.8.0) doesn&#39;t require wrapping css-specific properties in a css object (although you can if you want maximum performance).</p><p>If the CSSPlugin wasn&#39;t loaded, TweenMax would act as though you were trying to literally tween the&nbsp;<code>element.css</code>&nbsp;property (and there is no such thing).</p><p>The following plugins are automatically activated by TweenMax:</p><ul><li><strong>css&nbsp;</strong>:<em>&nbsp;Object</em>&nbsp;- handles tweening almost any css-related value including backgroundColor, width, height, fontSize, color, top, left, marginTop, etc. Plus it can do transformations like rotation, scaleX, scaleY, skewX, skewY, x, y, xPercent, yPercent and even directionalRotation and autoAlpha. It recognizes transformOrigin and backgroundPosition too. Transformations work in IE7 and later (although those browsers are rather slow at rendering transformations).&nbsp;<code>TweenMax.to(myElement, 1, {width:&quot;50%&quot;, height:&quot;300px&quot;, backgroundColor:&quot;#ff0000&quot;, delay:1});</code></li><li><strong>roundProps&nbsp;</strong>:<em>&nbsp;String</em>&nbsp;- A comma-delimited list of property names whose value should be rounded to the nearest integer anytime they are updated during the tween. For example, if you&#39;re tweening the x, y, and opacity properties of mc and you want to round the x and y values (not opacity) every time the tween is rendered, do:&nbsp;<code>TweenMax.to(mc, 2, {x:300, y:200, opacity:0.5, roundProps:&quot;x,y&quot;});</code></li><li><strong>bezier&nbsp;</strong><em>Object&nbsp;</em>- Allows you to animate along a Bezier curve/path. It will even draw a Bezier curve through a set of values that you provide, ensuring that it is smooth. Control the &quot;curviness&quot; too. Or define the Bezier as cubic or quadratic values. This plugin is extremely flexible. It even distributes motion across the Bezier proportionally so that it doesn&#39;t suffer from the common problem in most Bezier animation systems where things speed up or slow down at various spots along the path. See the docs for the BezierPlugin for specifics about the syntax and example code.</li></ul><h3>Function-based values</h3><p>Instead of a number (<code>x:100</code>) or string (<code>width:&quot;300px&quot;</code>) or relative value (<code>y:&quot;+=50&quot;</code>), you can now define most values as a <strong>function</strong> that&#39;ll get called once for each target the first time the tween renders, and whatever is returned by that function will be used as the value. This can be very useful for randomizing things or applying conditional logic. See it in action in the demos below.</p><div class=\"cp_embed_wrapper\"><iframe id=\"cp_embed_QEQXrY\" src=\"http://codepen.io/GreenSock/embed/QEQXrY?default-tab=js%2Cresult&embed-version=2&height=300&slug-hash=QEQXrY&theme-id=3984&user=GreenSock\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed 2\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"></iframe></div><p><script async=\"\" src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><p><strong>Parameters: index, target</strong><br>The function is passed two parameters:</p><ol><li><strong>index</strong>\n<em>(integer)</em> - the target&#39;s position in the array of targets. For example, if there are 3 <code>&lt;div&gt;</code> elements with the class &quot;.box&quot;, and you <code>TweenMax.to(&quot;.box&quot;, ...)</code>, the function would get called 3 times (once for each target) and the index would be <code>0</code> first, then <code>1</code>, and finally <code>2</code>.</li><li><strong>target</strong>\n<em>(object)</em> - the target itself (the <code>&lt;div&gt;</code> element in this case)</li></ol><p>Using the index parameter makes it easy to increment the value accordingly. There are lots of ways to get creative. The demo below uses the index parameter to tween each element&#39;s x value in increments of 100.</p><div class=\"cp_embed_wrapper\"><iframe id=\"cp_embed_akqgLN\" src=\"http://codepen.io/GreenSock/embed/akqgLN?default-tab=js%2Cresult&embed-version=2&height=300&slug-hash=akqgLN&theme-id=3984&user=GreenSock\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed 1\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"></iframe></div><p><script async=\"\" src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><h3>Examples</h3><p>Please see&nbsp;<a href=\"http://greensock.com/gsap-js/\" target=\"\">http://greensock.com/gsap-js/</a>&nbsp;for examples, tutorials, and interactive demos.</p><h3>Notes / Tips</h3><ul><li>Passing values as Strings and a preceding <code>&quot;+=&quot;</code> or <code>&quot;-=&quot;</code> will make the tween relative to the current value. For example, if you do&nbsp;<code>TweenMax.to(element, 2, {left:&quot;-=20px&quot;});</code>&nbsp;it&#39;ll tween&nbsp;<code>left</code>&nbsp;to 20 pixels less than whatever it is when the tween starts.&nbsp;<code>{x:&quot;+=20&quot;}</code>&nbsp;would add 20.</li><li>You can change the default ease by setting the&nbsp;<code>TweenLite.defaultEase</code>&nbsp;static property. The default is&nbsp;<code>Power1.easeOut</code>.</li><li>You can kill all tweens of a particular object anytime with&nbsp;<code>TweenMax.killTweensOf(yourObject);&nbsp;</code>You can also use selector text like&nbsp;<code>TweenMax.killTweensOf(&quot;#someID&quot;);</code></li><li>You can kill all delayedCalls to a particular function with&nbsp;<code>TweenMax.killDelayedCallsTo(myFunction)</code>&nbsp;or&nbsp;<code>TweenMax.killTweensOf(myFunction);</code></li><li>If you find this class useful, please consider joining&nbsp;<a href=\"http://greensock.com/club/\" target=\"\">Club GreenSock</a>&nbsp;which not only helps to sustain ongoing development, but also gets you bonus plugins, classes and other benefits that are ONLY available to members. Learn more at&nbsp;<a href=\"http://greensock.com/club/\" target=\"\">http://greensock.com/club/</a></li></ul>"}},"0443695353538039":{"meta":{"keywords":["js.TweenMax.TweenMax()"],"title":"TweenMax()","description":" Constructor"},"header":{"content":"<p> Constructor</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties should be affected. When animating DOM elements, the target can be: a single element, an array of elements, a jQuery object (or similar), or a CSS selector string like “#feature” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if <code>useFrames:true</code> is set in the <code>vars</code> parameter)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like<code>onComplete</code>, <code>ease</code>, etc. For example, to tween <code>mc.x</code> to 100 and <code>mc.y</code> to 200 and then call <code>myFunction</code>, do this: <code>new TweenMax(mc, 1, {x:100, y:200, onComplete:myFunction})</code>. Below is a list of all special properties.</p>\n","related_configuration_object":"bf3441936fcd04fd"}],"returns":{},"details":{"content":"<p>Constructor</p>"}},"0840452593dd9b59":{"meta":{"keywords":["js.TweenMax.ticker"],"title":"ticker","description":"[static] The object that dispatches a &quot;tick&quot; event each time the engine updates, making it easy for you to add your own listener(s) to run custom logic after each update (great for game developers)."},"header":{"content":"<p>[static] The object that dispatches a \"tick\" event each time the engine updates, making it easy for you to add your own listener(s) to run custom logic after each update (great for game developers).</p>"},"returns":{"type":"Object","content":""},"details":{"content":"<p>The object that dispatches a <code>\"tick\"</code> event each time the engine updates, making it easy for you to add your own listener(s) to run custom logic after each update (great for game developers). Add as many listeners as you want.</p><h3>Basic example</h3><pre class='pre-container prettyprint'>//add listener<br />TweenMax.ticker.addEventListener(\"tick\", myFunction);<br /><br />function myFunction(event) {<br />//executes on every tick after the core engine updates<br />}<br /><br />//to remove the listener later...<br />TweenMax.ticker.removeEventListener(\"tick\", myFunction);</pre><p>The ticker is driven by <code>requestAnimationFrame</code> events in modern browsers so that the updates are perfectly synchronized with the browser's rendering cycle. It also means that when the user switches to a different tab in the browser, the ticker's updates get throttled back significantly in order to conserve battery power and reduce load on the CPU (this happens because the browser itself throttles back <code>requestAnimationFrame</code> event dispatching). Typically <code>requestAnimationFrame</code> events occur around 60 times per second, but that's up to the browser and depends on system performance as well. If <code>requestAnimationFrame</code> isn't supported, the ticker automatically falls back to using a regular <code>setTimeout()</code> loop which is supported in all browsers.</p><h3>Customizing the ticker</h3><p>To force the ticker to use <code>setTimout()</code> instead of <code>requestAnimationFrame</code>, you can use the ticker's <code>useRAF()</code> method:</p><pre class='pre-container prettyprint'>//turn off requestAnimationFrame, causing ticker to use setTimeout() instead<br />TweenMax.ticker.useRAF(false);]</pre><p>And if you'd like to set a particular frame rate, you can use the <code>fps()</code> method like this:<br /></p><pre class='pre-container prettyprint'>//throttle back the frames-per-second to 30<br />TweenMax.ticker.fps(30);</pre><p>When using <code>requestAnimationFrame</code> (the default), the <code>fps()</code> setting acts like a throttle. Since you cannot tell the browser to crank out<code>requestAnimationFrames</code> at a higher rate than 60fps, you can't do something like <code>TweenMax.ticker.fps(100)</code> (well, you can but it'll still run at around 60fps). You could, however, do <code>TweenMax.ticker.fps(30)</code> and the engine will skip beats when necessary in order to get you as close as possible to 30fps (or whatever fps you set below 60). If you need an fps greater than 60fps (which generally isn't recommended), you should turn off requestAnimationFrame using <code>TweenMax.ticker.useRAF(false)</code> and then set the <code>fps()</code> to whatever you want, like<code>TweenMax.ticker.fps(100)</code></p><h3>Advanced listeners</h3><p>If you need to define the scope (what <code>\"this\"</code> refers to inside the function) or define a particular priority so that the handlers are called in a particular order, you can use the advanced syntax with extra parameters as follows:</p><pre class='pre-container prettyprint'>addEventListener(type, callback, scope, useParam, priority)</pre><h3>Parameters:</h3><ol><li><b>type</b> <i>: String</i> - type of listener, should always be <code>\"tick\"</code></li><li><b>callback</b> <i>: Function</i> - the function to call when the event occurs</li><li><b>scope</b> <i>: Object</i> - binds the scope to a particular object (scope is basically what \"<code>this</code>\" refers to in your function). This can be very useful in JavaScript because scope isn't generally maintained.</li><li><b>useParam</b> <i>: Boolean</i> - if <code>true</code>, an event object will be generated and fed to the callback each time the event occurs. The event is a generic object and has two properties: <code>type</code> (always <code>\"tick\"</code>) and <code>target</code> which refers to the ticker instance. The default for <code>useParam</code> is <code>false</code>because it improves performance.</li><li><b>priority</b> <i>: Integer</i> - influences the order in which the listeners are called. Listeners with lower priorities are called after ones with higher priorities.</li></ol><h3>Advanced Example</h3><pre class='pre-container prettyprint'> //add listener that requests an event object parameter, binds scope to the current scope (this), and sets priority to 1 so that it is called before any other listeners that had a priority lower than 1...<br /> TweenMax.ticker.addEventListener(\"tick\", myFunction, this, true, 1);<br /> <br /> function myFunction(event) {<br />     //executes on every tick after the core engine updates<br /> }<br /> <br /> //to remove the listener later...<br /> TweenMax.ticker.removeEventListener(\"tick\", myFunction);</pre>"}},"6f77f2839c53472f":{"meta":{"keywords":["js.TweenMax.delayedCall()"],"title":"delayedCall()","description":"[static] Provides a simple way to call a function after a set amount of time (or frames)."},"header":{"content":"<p>[static] Provides a simple way to call a function after a set amount of time (or frames).</p>"},"parameters":[{"name":"delay","data_type":"Number","description":"<p>Delay in seconds (or frames if <code>useFrames</code> is <code>true</code>) before the function should be called</p>\n"},{"name":"callback","data_type":"Function","description":"<p>Function to call</p>\n"},{"name":"params","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — An Array of parameters to pass the function (optional).</p>\n"},{"name":"scope","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The scope in which the callback should be called (basically, what &#8220;this&#8221; refers to in the function). NOTE: this parameter only pertains to the JavaScript and AS2 versions; it is omitted in AS3.</p>\n"},{"name":"useFrames","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If the delay should be measured in frames instead of seconds, set <code>useFrames</code> to <code>true</code></p>\n"}],"returns":{"type":"TweenMax","content":"<p>TweenMax instance</p>\n"},"details":{"content":"<p>Provides a simple way to call a function after a set amount of time (or frames). You can optionally pass any number of parameters to the function too.</p><p><b>Note:</b> - Due to the way JavaScript doesn't maintain scope (what \"<code>this</code>\" refers to, or the context) in function calls, it can be useful to define the scope specifically. Therefore, the 4th parameter allows you to define the <code>scope</code>.</p><pre class='pre-container prettyprint'>//calls myFunction after 1 second and passes 2 parameters:<br />TweenMax.delayedCall(1, myFunction, [\"param1\", \"param2\"]);<br /><br />function myFunction(param1, param2) {<br />    //do stuff<br />}</pre>"}},"0d0b160bf173886b":{"meta":{"keywords":["js.TweenMax.from()"],"title":"from()","description":"[static] Static method for creating a TweenMax instance that tweens backwards - you define the BEGINNING values and the current values are used as the destination values which is great for doing things like animating objects onto the screen because you can set them up initially the way you want them to look at the end of the tween and then animate in from elsewhere."},"header":{"content":"<p>[static] Static method for creating a TweenMax instance that tweens backwards - you define the BEGINNING values and the current values are used as the destination values which is great for doing things like animating objects onto the screen because you can set them up initially the way you want them to look at the end of the tween and then animate in from elsewhere.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties should be affected. When animating DOM elements, the target can be: a single element, an array of elements, a jQuery object (or similar), or a CSS selector string like “#feature” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if <code>useFrames:true</code> is set in the <code>vars</code> parameter)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the starting value for each property that should be tweened as well as any special properties like <code>onComplete</code>, <code>ease</code>, etc. For example, to tween <code>mc.x</code> from 100 and <code>mc.y</code> from 200 and then call <code>myFunction</code>, do this:<code>TweenMax.from(mc, 1, {x:100, y:200, onComplete:myFunction});</code></p>\n","related_configuration_object":"bf3441936fcd04fd"}],"returns":{"type":"TweenMax","content":"<p>TweenMax instance</p>\n"},"details":{"content":"<p>Static method for creating a TweenMax instance that tweens backwards - you define the <b>BEGINNING</b> values and the current values are used as the destination values which is great for doing things like animating objects onto the screen because you can set them up initially the way you want them to look at the end of the tween and then animate in from elsewhere.</p><p><b>NOTE:</b> By default, <code>immediateRender</code> is <code>true</code> in <code>from()</code> tweens, meaning that they immediately render their starting state regardless of any delay that is specified. You can override this behavior by passing <code>immediateRender:false</code> in the <code>vars</code> parameter so that it will wait to render until the tween actually begins (often the desired behavior when inserting into TimelineLite or TimelineMax instances). To illustrate the default behavior, the following code will immediately set the <code>opacity</code> of <code>mc</code> to 0 and then wait 2 seconds before tweening the <code>opacity</code> back to 1 over the course of 1.5 seconds:</p><p><pre class='pre-container prettyprint'>TweenMax.from(mc, 1.5, {opacity:0, delay:2});</pre></p><p>Since the <code>target</code> parameter can also be an array of objects, the following code will tween the opacity property of mc1, mc2, and mc3 from a value of 0 simultaneously:</p><pre class='pre-container prettyprint'>TweenMax.from([mc1, mc2, mc3], 1.5, {opacity:0});</pre><p>Even though 3 objects are animating, there is still only one tween that is created. In order to stagger or offset the start times of each object animating, please see the <code>staggerFrom()</code> method (TimelineLite has one too).</p><p>For simple sequencing, you can use the <code>delay</code> special property (like <code>TweenMax.from(mc, 1, {opacity:0, delay:0.5})</code>), but it is highly recommended that you consider using TimelineLite (or TimelineMax) for all but the simplest sequencing tasks. It has an identical <code>from()</code> method that allows you to append tweens one-after-the-other and then control the entire sequence as a whole. You can even have the tweens overlap as much as you want.</p>"}},"8ecc7c0172b03069":{"meta":{"keywords":["js.TweenMax.fromTo()"],"title":"fromTo()","description":"[static] Static method for creating a TweenMax instance that allows you to define both the starting and ending values (as opposed to to() and from() tweens which are based on the target&#039;s current values at one end or the other)."},"header":{"content":"<p>[static] Static method for creating a TweenMax instance that allows you to define both the starting and ending values (as opposed to to() and from() tweens which are based on the target's current values at one end or the other).</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties should be affected. When animating DOM elements, the target can be: a single element, an array of elements, a jQuery object (or similar), or a CSS selector string like “#feature” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if <code>useFrames:true</code> is set in the <code>vars</code> parameter)</p>\n"},{"name":"fromVars","data_type":"Object","description":"<p>An object defining the starting value for each property that should be tweened. For example, to tween <code>mc.x</code>from 100 and <code>mc.y</code> from 200, <code>fromVars</code> would look like this: <code>{x:100, y:200}</code>.</p>\n"},{"name":"toVars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like<code>onComplete</code>, <code>ease</code>, etc. For example, to tween <code>mc.x</code> from 0 to 100 and <code>mc.y</code> from 0 to 200 and then call <code>myFunction</code>, do this:<code>TweenMax.fromTo(mc, 1, {x:0, y:0}, {x:100, y:200, onComplete:myFunction});</code></p>\n","related_configuration_object":"bf3441936fcd04fd"}],"returns":{"type":"TweenMax","content":"<p>TweenMax instance</p>\n"},"details":{"content":"<p>Static method for creating a TweenMax instance that allows you to define both the starting and ending values (as opposed to <code>to()</code>and <code>from()</code> tweens which are based on the target's current values at one end or the other).</p><p><b>NOTE</b>: Only put starting values in the <code>fromVars</code> parameter - all special properties for the tween (like onComplete, onUpdate, delay, etc.) belong in the <code>toVars</code> parameter.</p><p>By default, <code>immediateRender</code> is <code>true</code> in <code>fromTo()</code> tweens, meaning that they immediately render their starting state regardless of any delay that is specified. This is done for convenience because it is often the preferred behavior when setting things up on the screen to animate into place, but you can override this behavior by passing <code>immediateRender:false</code> in the <code>fromVars</code> or <code>toVars</code>parameter so that it will wait to render the starting values until the tween actually begins (often the desired behavior when inserting into TimelineLite or TimelineMax instances).</p><p>Since the <code>target</code> parameter can also be an array of objects, the following code will tween the x property of element1 and element2 from 0 to 100 simultaneously:</p><pre class='pre-container prettyprint'>TweenMax.fromTo([element1, element2], 1, {x:0}, {x:100});</pre><p>Even though 2 objects are animating, there is still only one tween created. In order to stagger or offset the start times of each object animating, please see the <code><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenMax.staggerFromTo()\"><span data-link-id=\"edb1ee784263b5b1\"></span></span></code> method (TimelineLite has one too).</p><p>For simple sequencing, you can use the <code>delay</code> special property (like <code>TweenMax.fromTo(element, 1, {x:0}, {x:100, delay:0.5})</code>), but it is highly recommended that you consider using TimelineLite (or TimelineMax) for all but the simplest sequencing tasks. It has an identical <code>fromTo()</code> method that allows you to append tweens one-after-the-other and then control the entire sequence as a whole. You can even have the tweens overlap as much as you want.</p>"}},"c799d800af33aa6a":{"meta":{"keywords":["js.TweenMax.getAllTweens()"],"title":"getAllTweens()","description":"[static] Returns an array containing all tweens (and optionally timelines too, excluding the root timelines)."},"header":{"content":"<p>[static] Returns an array containing all tweens (and optionally timelines too, excluding the root timelines).</p>"},"parameters":[{"name":"includeTimelines","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, TimelineLite and TimelineMax instances will also be included.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Array","content":"<p>Array of tweens/timelines</p>\n"},"details":{"content":"<p>Returns an array containing all tweens (and optionally timelines too, excluding the root timelines). If your goal is to affect all of the tweens/timelines/delayedCalls (like to <code>pause()</code> them or <code>reverse()</code> or alter their <code>timeScale</code>), you might want to consider using the static <code>TimelineLite.exportRoot()</code> method instead because it provides a single instance that you can use to control everything.</p>"}},"c100119126b4d17b":{"meta":{"keywords":["js.TweenMax.getTweensOf()"],"title":"getTweensOf()","description":"[static] Returns an array containing all the tweens of a particular target (or group of targets) that have not been released for garbage collection yet which typically happens within a few seconds after the tween completes."},"header":{"content":"<p>[static] Returns an array containing all the tweens of a particular target (or group of targets) that have not been released for garbage collection yet which typically happens within a few seconds after the tween completes.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>The target whose tweens should be returned, or an array of such targets</p>\n"},{"name":"onlyActive","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, only tweens that are currently active will be returned (a tween is considered &#8220;active&#8221; if the virtual playhead is actively moving across the tween and it is not paused, nor are any of its ancestor timelines paused).</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Returns an array containing all the tweens of a particular target (or group of targets) that have not been released for garbage collection yet which typically happens within a few seconds after the tween completes. For example,<code>TweenMax.getTweensOf(myObject)</code> returns an array of all tweens of <code>myObject</code>, even tweens that haven't begun yet.<code>TweenMax.getTweensOf([myObject1, myObject2]);</code> will return a condensed array of the tweens of <code>myObject1</code> plus all the tweens of <code>myObject2</code> combined into one array with duplicates removed.</p><p>Since the method only finds tweens that haven't been released for garbage collection, if you create a tween and then let it finish and then a while later try to find it with <code>getTweensOf()</code>, it may not be found because it was released by the engine for garbage collection. Remember, one of the best parts of GSAP is that it saves you from the headache of managing gc. Otherwise, you'd need to manually dispose each tween you create, making things much more cumbersome.</p><pre class='pre-container prettyprint'>TweenMax.to(myObject1, 1, {x:100});<br />TweenMax.to(myObject2, 1, {x:100});<br />TweenMax.to([myObject1, myObject2], 1, {opacity:0});<br /><br />var a1 = TweenMax.getTweensOf(myObject1); //finds 2 tweens<br />var a2 = TweenMax.getTweensOf([myObject1, myObject2]); //finds 3 tweens</pre>"}},"9e2dfbcd4b851bdb":{"meta":{"keywords":["js.TweenMax.globalTimeScale()"],"title":"globalTimeScale()","description":"Gets or sets the global timeScale which is a multiplier that affects ALL animations equally. This is a great way to globally speed up or slow down all animations at once."},"header":{"content":"<p>[static] Gets or sets the global timeScale which is a multiplier that affects <strong>ALL</strong> animations equally.  This is a great way to globally speed up or slow down all animations at once.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>A multiplier that affects all animations, so 1 is normal speed, 0.5 is half-speed, 2 is double-speed, etc. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter).</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Gets or sets the global timeScale which is a multiplier that affects <strong>ALL</strong> animations equally. This doesn't actually set the <code>timeScale()</code> of each individual tween/timeline, but rather it affects the rate at which the root timeline plays (that timeline contains all other animations). This is a great way to globally speed up or slow down all animations at once. For example:</p><pre class='pre-container prettyprint'>TweenMax.globalTimeScale(0.5); //plays at half-speed<br />TweenMax.globalTimeScale(2); //plays twice the normal speed<br />var currentTimeScale = TweenMax.globalTimeScale(); //returns the current global timeScale</pre>"}},"14102df5f069df3e":{"meta":{"keywords":["js.TweenMax.invalidate()"],"title":"invalidate()","description":"[override] Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values."},"header":{"content":"<p>[override] Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values.</p>"},"parameters":[],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values. When you <code>invalidate()</code> an animation, it will be re-initialized the next time it renders and its <code>vars</code> object will be re-parsed. The timing of the animation (duration, startTime, delay) will not be affected.</p><p>Another example would be if you have a <code>TweenMax(mc, 1, {x:100, y:100})</code> that ran when mc.x and mc.y were initially at 0, but now mc.x and mc.y are 200 and you want them tween to 100 again, you could simply <code>invalidate()</code> the tween and <code>restart()</code> it. Without invalidating first, restarting it would cause the values jump back to 0 immediately (where they started when the tween originally began). When you invalidate a TimelineLite/TimelineMax, it automatically invalidates all of its children.</p>"}},"748acc1d9c528534":{"meta":{"keywords":["js.TweenMax.isTweening()"],"title":"isTweening","description":"[static] Reports whether or not a particular object is actively tweening."},"header":{"content":"<p>[static] Reports whether or not a particular object is actively tweening.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object whose tweens you&#8217;re checking</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Boolean","content":"<p>Value indicating whether or not any active tweens were found</p>\n"},"details":{"content":"<p>Reports whether or not a particular object is actively tweening. If a tween is paused, is completed, or hasn't started yet, it isn't considered active.</p>"}},"e191a597bfccb4b6":{"meta":{"keywords":["js.TweenMax.killAll()"],"title":"killAll()","description":"[static] Kills all tweens and/or delayedCalls/callbacks, and/or timelines, optionally forcing them to completion first."},"header":{"content":"<p>[static] Kills all tweens and/or delayedCalls/callbacks, and/or timelines, optionally forcing them to completion first.</p>"},"parameters":[{"name":"complete","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — Determines whether or not the tweens/delayedCalls/timelines should be forced to completion before being killed.</p>\n"},{"name":"tweens","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code>, all tweens will be killed (TweenLite and TweenMax instances)</p>\n"},{"name":"delayedCalls","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code>, all delayedCalls will be killed. TimelineMax callbacks are treated the same as delayedCalls.</p>\n"},{"name":"timelines","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code>, all delayedCalls will be killed. TimelineMax callbacks are treated the same as delayedCalls.</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Kills all tweens and/or delayedCalls/callbacks, and/or timelines, optionally forcing them to completion first. The various parameters provide a way to specify exactly which types you want to kill</p><pre class='pre-container prettyprint'>//kill everything<br />TweenMax.killAll();<br />//kill only tweens, but not delayedCalls or timelines<br />TweenMax.killAll(false, true, false, false);<br />//kill only delayedCalls<br />TweenMax.killAll(false, false, true, false);</pre>"}},"109ea284ffe68190":{"meta":{"keywords":["js.TweenMax.killChildTweensOf()"],"title":"killChildTweensOf()","description":"[static] Kills all tweens of the children of a particular DOM element, optionally forcing them to completion first."},"header":{"content":"<p>[static] Kills all tweens of the children of a particular DOM element, optionally forcing them to completion first.</p>"},"parameters":[{"name":"parent","data_type":"Object","description":"<p>The parent DOM element whose children&#8217;s tweens should be killed. Or selector text that gets passed to TweenLite.selector. For example, if &#8220;.myClass&#8221; is used (and jQuery or similar is used as TweenLite.selector), tweens of the children of any elements with the &#8220;myClass&#8221; class applied would be killed.</p>\n"},{"name":"complete","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, the tweens will be forced to completion before being killed.</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"Kills all tweens of the children of a particular DOM element, optionally forcing them to completion first. For example, if you have the following HTML:<pre class='pre-container prettyprint lang-html'></pre>And then let's say you create a tween of each of the elements (d1, d2, image, and d3) and then later you want to kill only the tweens of DOM elements that are children of d1 (which would be d2 and image in this example), you'd call <code>TweenMax.killChildTweensOf( document.getElementById(\"d1\") )</code>.<br /><br /><pre class='pre-container prettyprint'>TweenMax.to( document.getElementById(\"d2\"), 1, {css:{left:100}});TweenMax.to( document.getElementById(\"image\"), 1, {css:{left:100}});TweenMax.to( document.getElementById(\"d3\"), 1, {css:{left:100}});//only kills the first 2 tweens because those targets are child elements of the \"d1\" DOM element.TweenMax.killChildTweensOf( document.getElementById(\"d1\") ); </pre>"}},"0b7f1e0ec646b3a7":{"meta":{"keywords":["js.TweenMax.killDelayedCallsTo()"],"title":"killDelayedCallsTo()","description":"[static] Immediately kills all of the delayedCalls to a particular function."},"header":{"content":"<p>[static] Immediately kills all of the delayedCalls to a particular function.</p>"},"parameters":[{"name":"function","data_type":"Function","description":"<p>The function for which all delayedCalls should be killed/cancelled.</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Immediately kills all of the delayedCalls to a particular function. If, for example, you want to kill all delayedCalls to myFunction, you'd do this:</p><pre class='pre-container prettyprint'>TweenMax.killDelayedCallsTo(myFunction);</pre><p>Since a delayedCall is just a tween that uses the function/callback as both its <code>target</code> and its <code>onComplete</code>, <code>TweenMax.killTweensOf(myFunction)</code> produces exactly the same result as <code>TweenMax.killDelayedCallsTo(myFunction)</code>.</p><p>This method affects all delayedCalls that were created using <code>TweenLite.delayedCall()</code> or <code>TweenMax.delayedCall()</code> or the <code>call()</code> or <code>addCallback()</code> methods of TimelineLite or TimelineMax. Basically, any tween whose target is the function you supply will be killed.</p>"}},"5520cb7c254b2de6":{"meta":{"keywords":["js.TweenMax.killTweensOf()"],"title":"killTweensOf()","description":"[static] Kills all the tweens (or specific tweening properties) of a particular object or the delayedCalls to a particular function."},"header":{"content":"<p>[static] Kills all the tweens (or specific tweening properties) of a particular object or the delayedCalls to a particular function.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Object whose tweens should be killed immediately or selector text to feed the selector engine to find the target(s). You may also pass in an array of targets.</p>\n"},{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — To kill only specific properties, use a generic object containing enumerable properties corresponding to the ones that should be killed like <code>{x:true, y:true}</code>. The values assigned to each property don&#8217;t matter &#8211; the sole purpose of the object is for iteration over the named properties (in this case, <code>x</code> and <code>y</code>). If no object (or <code>null</code>) is defined, all matched tweens will be killed in their entirety.</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Kills all the tweens (or specific tweening properties) of a particular object or the delayedCalls to a particular function. If, for example, you want to kill all tweens of <code>myObject</code>, you'd do this:</p><p><pre class='pre-container prettyprint'>TweenMax.killTweensOf(myObject);</pre></p><p>To kill only particular tweening properties of the object, use the second parameter. For example, if you only want to kill all the tweens of <code>myObject.opacity</code> and <code>myObject.x</code>, you'd do this:</p><p><pre class='pre-container prettyprint'>TweenMax.killTweensOf(myObject, {opacity:true, x:true});</pre></p><p>To kill all the delayedCalls (like ones created using <code>TweenMax.delayedCall(5, myFunction);</code>), you can simply call<code>TweenMax.killTweensOf(myFunction);</code> because delayedCalls are simply tweens that have their <code>target</code> and <code>onComplete</code> set to the same function (as well as a <code>delay</code> of course).</p><p>As of version 1.8.0, you can also pass in a string that defines selector text, like \"#myID\" to kill the tweens of the element with an ID of \"myID\". You may also pass in an array of targets.</p><p><code>killTweensOf()</code> affects tweens that haven't begun yet too. If, for example, a tween of <code>myObject</code> has a <code>delay</code> of 5 seconds and<code>TweenLite.killTweensOf(mc)</code> is called 2 seconds after the tween was created, it will still be killed even though it hasn't started yet.</p>"}},"3d2718e5d3fe06be":{"meta":{"keywords":["js.TweenMax.pauseAll()"],"title":"pauseAll()","description":"[static] [deprecated] Pauses all tweens and/or delayedCalls/callbacks and/or timelines."},"header":{"content":"<p>[static] [deprecated] Pauses all tweens and/or delayedCalls/callbacks and/or timelines.</p>"},"parameters":[{"name":"tweens","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code>, all tweens will be paused.</p>\n"},{"name":"delayedCalls","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code>, all delayedCalls will be paused. timeline callbacks are treated the same as delayedCalls.</p>\n"},{"name":"timelines","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code>, all TimelineLite and TimelineMax instances will be paused (at least the ones who haven&#8217;t finished and been removed from their parent timeline)</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>[deprecated] Pauses all tweens and/or delayedCalls/callbacks and/or timelines. This literally changes the <code>paused</code> state of all affected tweens/delayedCalls/timelines, but a more flexible way to globally control things is to use the <code>TimelineLite.exportRoot()</code> method which essentially wraps all of the tweens/timelines/delayedCalls on the root timeline into a TimelineLite instance so that you can <code>pause(), resume()</code>, or even <code>reverse()</code> or alter the <code>timeScale</code> without affecting animations that you create after the export. This also avoids having to alter the <code>paused</code>state of every individual tween/delayedCall/timeline - controlling the TimelineLite that contains the exported animations delivers the same effect visually, but does so in a more elegant and flexible way.</p>"}},"9555ceafd00d82bd":{"meta":{"keywords":["js.TweenMax.progress()"],"title":"progress()","description":"[override] Gets or sets the tween&#039;s progress which is a value between 0 and 1 indicating the position of the virtual playhead (excluding repeats) where 0 is at the beginning, 0.5 is halfway complete, and 1 is complete."},"header":{"content":"<p>[override] Gets or sets the tween's progress which is a value between 0 and 1 indicating the position of the virtual playhead (excluding repeats) where 0 is at the beginning, 0.5 is halfway complete, and 1 is complete.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, no events or callbacks will be triggered when the playhead moves to the new position.</p>\n"}],"returns":{"type":"*","content":"<p> Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the tween's progress which is a value between 0 and 1 indicating the position of the virtual playhead (excluding repeats) where 0 is at the beginning, 0.5 is halfway complete, and 1 is complete. If the tween has a non-zero <code>repeat</code> defined, <code>progress</code> and<code>totalProgress</code> will be different because <code>progress</code> doesn't include any repeats or repeatDelays whereas <code>totalProgress</code> does. For example, if a TweenMax instance is set to repeat once, at the end of the first cycle <code>totalProgress</code> would only be 0.5 whereas<code>progress</code> would be 1. If you watched both properties over the course of the entire animation, you'd see <code>progress</code> go from 0 to 1 twice (once for each cycle) in the same time it takes the <code>totalProgress</code> to go from 0 to 1 once.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myTween.progress(0.5).play();</code></p><pre class='pre-container prettyprint'>var progress = myTween.progress(); //gets current progress<br />myTween.progress( 0.25 ); //sets progress to one quarter finished</pre>"}},"1b0dafbb2fcc15bd":{"meta":{"keywords":["js.TweenMax.repeat()"],"title":"repeat()","description":"Gets or sets the number of times that the tween should repeat after its first iteration."},"header":{"content":"<p>Gets or sets the number of times that the tween should repeat after its first iteration.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p> Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the number of times that the tween should repeat after its first iteration. For example, if <code>repeat</code> is 1, the tween will play a total of twice (the initial play plus 1 repeat). To repeat indefinitely, use -1. <code>repeat</code> should always be an integer.</p><p>To cause the repeats to alternate between forward and backward, set <code>yoyo</code> to <code>true</code>. To add a time gap between repeats, use<code>repeatDelay</code>. You can set the initial <code>repeat</code> value via the <code>vars</code> parameter, like:</p><p><code>TweenMax.to(mc, 1, {x:100, repeat:2});</code></p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myTween.repeat(2).yoyo(true).play();</code></p><p><pre class='pre-container prettyprint'>var repeat = myTween.repeat(); //gets current repeat value<br /><br />myTween.repeat(2); //sets repeat to 2</pre></p>"}},"86085ac31cb14a44":{"meta":{"keywords":["js.TweenMax.repeatDelay()"],"title":"repeatDelay()","description":"Gets or sets the amount of time in seconds (or frames for frames-based tweens) between repeats."},"header":{"content":"<p>Gets or sets the amount of time in seconds (or frames for frames-based tweens) between repeats.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p> Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the amount of time in seconds (or frames for frames-based tweens) between repeats. For example, if <code>repeat</code> is 2 and<code>repeatDelay</code> is 1, the tween will play initially, then wait for 1 second before it repeats, then play again, then wait 1 second again before doing its final repeat. You can set the initial <code>repeatDelay</code> value via the <code>vars</code> parameter, like:</p><p><code>TweenMax.to(mc, 1, {x:100, repeat:2, repeatDelay:1});</code></p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like<code>myTween.repeat(2).yoyo(true).repeatDelay(0.5).play();</code></p><pre class='pre-container prettyprint'>var repeatDelay = myTween.repeatDelay(); //gets current repeatDelay value<br />myTween.repeatDelay(2); //sets repeatDelay to 2</pre>"}},"1989613671fc0074":{"meta":{"keywords":["js.TweenMax.resumeAll()"],"title":"resumeAll()","description":"[static] [deprecated] Resumes all paused tweens and/or delayedCalls/callbacks and/or timelines."},"header":{"content":"<p>[static] [deprecated] Resumes all paused tweens and/or delayedCalls/callbacks and/or timelines.</p>"},"parameters":[{"name":"tweens","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code>, all tweens will be resumed.</p>\n"},{"name":"delayedCalls","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code>, all delayedCalls will be resumed. timeline callbacks are treated the same as delayedCalls.</p>\n"},{"name":"timelines","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code>, all TimelineLite and TimelineMax instances will be resumed (at least the ones who haven&#8217;t finished and been removed from their parent timeline)</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>[deprecated] Resumes all paused tweens and/or delayedCalls/callbacks and/or timelines. This literally changes the <code>paused</code> state of all affected tweens/delayedCalls/timelines, but a more flexible way to globally control things is to use the <code>TimelineLite.exportRoot()</code>method which essentially wraps all of the tweens/timelines/delayedCalls on the root timeline into a TimelineLite instance so that you can <code>pause(), resume()</code>, or even <code>reverse()</code> or alter the <code>timeScale</code> without affecting animations that you create after the export. This also avoids having to alter the <code>paused</code> state of every individual tween/delayedCall/timeline - controlling the TimelineLite that contains the exported animations delivers the same effect visually, but does so in a more elegant and flexible way.</p>"}},"04a1993cebf0c4d6":{"meta":{"keywords":["js.TweenMax.set()"],"title":"set()","description":"[static] Immediately sets properties of the target accordingly - essentially a zero-duration to() tween with a more intuitive name."},"header":{"content":"<p>[static] Immediately sets properties of the target accordingly - essentially a zero-duration to() tween with a more intuitive name.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects or selector text) whose properties will be affected.</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the value for each property that should be set. For example, to set <code>mc.x</code> to 100 and <code>mc.y</code> to 200, do this: <code>TweenMax.set(mc, {x:100, y:200});</code> You may also define any of the special properties baked into GSAP like delay, onComplete, etc.</p>\n","related_configuration_object":"bf3441936fcd04fd"}],"returns":{"type":"TweenMax","content":"<p>A TweenMax instance (with a duration of 0) which can optionally be inserted into a TimelineLite/Max instance (although it&#8217;s typically more concise to just use the timeline&#8217;s <code>set()</code> method).</p>\n"},"details":{"content":"<p>Immediately sets properties of the target accordingly - essentially a zero-duration <code>to()</code> tween with a more intuitive name. So the following lines produce identical results:</p><pre class='pre-container prettyprint'>TweenMax.set(myObject, {x:100, y:50, opacity:0});<br />TweenMax.to(myObject, 0, {x:100, y:50, opacity:0});</pre><p>And of course you can use an array to set the properties of multiple targets at the same time, like:</p><pre class='pre-container prettyprint'>TweenMax.set([obj1, obj2, obj3], {x:100, y:50, opacity:0});</pre><p>You can also use selector text to target DOM elements that match that criteria.</p>"}},"7e006fa58303b1cc":{"meta":{"keywords":["js.TweenMax.staggerFrom()"],"title":"staggerFrom()","description":"[static] Tweens an array of targets from a common set of destination values (using the current values as the destination), but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code."},"header":{"content":"<p>[static] Tweens an array of targets from a common set of destination values (using the current values as the destination), but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code.</p>"},"parameters":[{"name":"targets","data_type":"Array","description":"<p>An array of objects whose properties should be affected. When animating DOM elements, the targets can be: an array of elements, a jQuery object (or similar), or a CSS selector string like “.myClass” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if <code>useFrames:true</code> is defined in the <code>vars</code> parameter)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like<code>ease</code>. For example, to tween <code>x</code> to 100 and <code>y</code> to 200 for mc1, mc2, and mc3, staggering their start time by 0.25 seconds and then call <code>myFunction</code> when they last one has finished, do this: <code>TweenMax.staggerTo([mc1, mc2, mc3], 1, {x:100, y:200}, 0.25, myFunction})</code>.</p>\n","related_configuration_object":"980585c43a98afd0"},{"name":"stagger","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Amount of time in seconds (or frames for frames-based tweens) to stagger the start time of each tween. For example, you might want to have 5 objects move down 100 pixels while fading out, and stagger the start times by 0.2 seconds &#8211; you could do: <code>TweenMax.staggerTo([mc1, mc2, mc3, mc4, mc5], 1, {y:\"+=100\", opacity:0}, 0.2)</code>.</p>\n"},{"name":"onCompleteAll","data_type":"Function","description":"<p>(default = <code>null</code>)<code></code> — A function to call as soon as the entire sequence of tweens has completed</p>\n"},{"name":"onCompleteAllParams","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — An array of parameters to pass the <code>onCompleteAll</code> method.</p>\n"},{"name":"onCompleteAllScope","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The scope in which the onCompleteAll callback should be called (basically, what &#8220;this&#8221; refers to in the function). NOTE: this parameter only pertains to the JavaScript and AS2 versions; it is omitted in AS3.</p>\n"}],"returns":{"type":"Array","content":"<p>An array of TweenMax instances (one for each object in the targets array)</p>\n"},"details":{"content":"<p>Tweens an array of targets from a common set of destination values (using the current values as the destination), but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code. For example, let's say you have an array containing references to a bunch of objects that you'd like to drop into place while fading in, all in a staggered fashion with 0.2 seconds between each tween's start time:</p><pre class='pre-container prettyprint'>var objects = [obj1, obj2, obj3, obj4, obj5];<br />TweenMax.staggerFrom(objects, 1, {y:\"+=150\"}, 0.2);</pre><p><code>staggerFrom()</code> simply loops through the <code>targets</code> array and creates a <code>from()</code> tween for each object and then returns an array containing all of the resulting tweens (one for each object).</p><p>If you can afford the slight increase in file size, it is usually better to use TimelineLite's <code>staggerFrom()</code> method because it wraps the tweens in a TimelineLite instead of an array which makes controlling the group as a whole much easier. That way you could pause(), resume(), reverse(), restart() or change the timeScale of everything at once.</p><p>Note that if you define an <code>onComplete</code> (or any callback for that matter) in the <code>vars</code> parameter, it will be called for each tween rather than the whole sequence. This can be very useful, but if you want to call a function after the entire sequence of tweens has completed, use the <code>onCompleteAll</code> parameter (the 5th parameter).</p><p>By default, <code>immediateRender</code> is <code>true</code> in <code>from()</code> tweens, meaning that they immediately render their starting state regardless of any delay that is specified. You can override this behavior by passing <code>immediateRender:false</code> in the <code>vars</code> parameter so that it will wait to render until the tween actually begins.</p><h2>Cycle through multiple values</h2><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/0HhjSPVuRHA?vq=hd720\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><p>Instead of defining a single value (like <code>x:100, rotation:90</code>), you can define an Array of values to cycle through (like <code>cycle:{x:[100,-100], rotation:[30,60,90]}</code>) or even use function-based values (like <code>cycle:{x:function() { return Math.random() * 200; }}</code>). The amount of functionality you can pack into a single line of code is staggering (pun intended).</p><p data-height=\"390\" data-theme-id=\"3984\" data-slug-hash=\"KVVNjy\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/KVVNjy/'>TweenMax.staggerFrom() with Cycle</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><h3>Parameters: index, target</h3><p>When defining cycle values with functions the functions are passed two parameters:</p><ol><li><strong>index</strong> <i>(integer)</i> - the target's position in the array of targets. For example, if there are 3 <code>&lt;div&gt;</code> elements with the class \".box\", and you <code>TweenMax.staggerFrom(\".box\", ...)</code>, the function would get called 3 times (once for each target) and the index would be <code>0</code> first, then <code>1</code>, and finally <code>2</code>.</li><li><strong>target</strong> <i>(object)</i> - the target itself (the <code>&lt;div&gt;</code> element in this case)</li></ol><h3>Caveats</h3><ul><li>The <code>cycle</code> property is available only in the <code>staggerTo()</code>, <code>staggerFrom()</code>, and <code>staggerFromTo()</code> methods in TweenMax, TimelineLite and TimelineMax.</li><li>the cycle property is available in GSAP 1.18.0+</li></ul>"}},"edb1ee784263b5b1":{"meta":{"keywords":["js.TweenMax.staggerFromTo()"],"title":"staggerFromTo()","description":"[static] Tweens an array of targets from a common set of destination values to a common set of destination values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code."},"header":{"content":"<p>[static] Tweens an array of targets from a common set of destination values to a common set of destination values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code.</p>"},"parameters":[{"name":"targets","data_type":"Array","description":"<p>An array of objects whose properties should be affected. When animating DOM elements, the targets can be: an array of elements, a jQuery object (or similar), or a CSS selector string like “.myClass” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll(</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if <code>useFrames:true</code> is defined in the <code>vars</code> parameter)</p>\n"},{"name":"fromVars","data_type":"Object","description":"<p>An object defining the starting value for each property that should be tweened. For example, to tween <code>x</code>from 100 and <code>y</code> from 200, <code>fromVars</code> would look like this: <code>{x:100, y:200}</code>.</p>\n"},{"name":"toVars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like<code>ease</code>. For example, to tween <code>x</code> to 100 and <code>y</code> to 200 for mc1, mc2, and mc3, staggering their start time by 0.25 seconds and then call <code>myFunction</code> when they last one has finished, do this: <code>TweenMax.staggerTo([mc1, mc2, mc3], 1, {x:100, y:200}, 0.25, myFunction})</code>.</p>\n","related_configuration_object":"980585c43a98afd0"},{"name":"stagger","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Amount of time in seconds (or frames for frames-based tweens) to stagger the start time of each tween. For example, you might want to have 5 objects move down 100 pixels while fading out, and stagger the start times by 0.2 seconds &#8211; you could do: <code>TweenMax.staggerTo([mc1, mc2, mc3, mc4, mc5], 1, {y:\"+=100\", opacity:0}, 0.2)</code>.</p>\n"},{"name":"onCompleteAll","data_type":"Function","description":"<p>(default = <code>null</code>)<code></code> — A function to call as soon as the entire sequence of tweens has completed</p>\n"},{"name":"onCompleteAllParams","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — An array of parameters to pass the <code>onCompleteAll</code> method.</p>\n"},{"name":"onCompleteAllScope","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The scope in which the onCompleteAll callback should be called (basically, what &#8220;this&#8221; refers to in the function). NOTE: this parameter only pertains to the JavaScript and AS2 versions; it is omitted in AS3.</p>\n"}],"returns":{"type":"Array","content":"<p>An array of TweenMax instances (one for each object in the targets array)</p>\n"},"details":{"content":"<p>Tweens an array of targets from and to a common set of values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code. For example, let's say you have an array containing references to a bunch of objects that you'd like to fade from opacity:1 to opacity:0 in a staggered fashion with 0.2 seconds between each tween's start time:</p><pre class='pre-container prettyprint'>var objects = [obj1, obj2, obj3, obj4, obj5];<br />TweenMax.staggerFromTo(objects, 1, {opacity:1}, {opacity:0}, 0.2);</pre><p><code>staggerFromTo()</code> simply loops through the <code>targets</code> array and creates a <code>fromTo()</code> tween for each object and then returns an array containing all of the resulting tweens (one for each object).</p><p>If you can afford the slight increase in file size, it is usually better to use TimelineLite's <code>staggerFromTo()</code> method because it wraps the tweens in a TimelineLite instead of an array which makes controlling the group as a whole much easier. That way you could pause(), resume(), reverse(), restart() or change the timeScale of everything at once.</p><p>Note that if you define an <code>onComplete</code> (or any callback for that matter) in the <code>vars</code> parameter, it will be called for each tween rather than the whole sequence. This can be very useful, but if you want to call a function after the entire sequence of tweens has completed, use the <code>onCompleteAll</code> parameter (the 6th parameter).</p><p>By default, <code>immediateRender</code> is <code>true</code> in <code>staggerFromTo()</code> tweens, meaning that they immediately render their starting state regardless of any delay that is specified. This is done for convenience because it is often the preferred behavior when setting things up on the screen to animate into place, but you can override this behavior by passing <code>immediateRender:false</code> in the <code>fromVars</code> or<code>toVars</code> parameter so that it will wait to render the starting values until the tweens actually begin (often the desired behavior when inserting into TimelineLite or TimelineMax instances).</p><p><b>JavaScript and AS2 note:</b> - Due to the way JavaScript and AS2 don't maintain scope (what \"<code>this</code>\" refers to, or the context) in function calls, it can be useful to define the scope specifically. Therefore, in the JavaScript and AS2 versions accept an 8th parameter for<code>onCompleteAllScope</code>, but that parameter is omitted in the AS3 version.</p><h2>Cycle through multiple values</h2><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/0HhjSPVuRHA?vq=hd720\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><p>Instead of defining a single value (like <code>x:100, rotation:90</code>), you can define an Array of values to cycle through (like <code>cycle:{x:[100,-100], rotation:[30,60,90]}</code>) or even use function-based values (like <code>cycle:{x:function() { return Math.random() * 200; }}</code>). The amount of functionality you can pack into a single line of code is staggering (pun intended).</p><p data-height=\"390\" data-theme-id=\"3984\" data-slug-hash=\"QyydLM\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/KVVNjy/'>TweenMax.staggerFromTo() with Cycle</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><h3>Parameters: index, target</h3><p>When defining cycle values with functions the functions are passed two parameters:</p><ol><li><strong>index</strong> <i>(integer)</i> - the target's position in the array of targets. For example, if there are 3 <code>&lt;div&gt;</code> elements with the class \".box\", and you <code>TweenMax.staggerFromTo(\".box\", ...)</code>, the function would get called 3 times (once for each target) and the index would be <code>0</code> first, then <code>1</code>, and finally <code>2</code>.</li><li><strong>target</strong> <i>(object)</i> - the target itself (the <code>&lt;div&gt;</code> element in this case)</li></ol><h3>Caveats</h3><ul><li>The <code>cycle</code> property is available only in the <code>staggerTo()</code>, <code>staggerFrom()</code>, and <code>staggerFromTo()</code> methods in TweenMax, TimelineLite and TimelineMax.</li><li>the cycle property is available in GSAP 1.18.0+</li></ul>"}},"65d8dcc6c6cabcbd":{"meta":{"keywords":["js.TweenMax.staggerTo()"],"title":"staggerTo()","description":"[static] Tweens an array of targets to a common set of destination values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code."},"header":{"content":"<p>[static] Tweens an array of targets to a common set of destination values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code.</p>"},"parameters":[{"name":"targets","data_type":"Array","description":"<p>An array of objects whose properties should be affected. When animating DOM elements, the targets can be: an array of elements, a jQuery object (or similar), or a CSS selector string like “.myClass” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll(</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if <code>useFrames:true</code> is defined in the <code>vars</code> parameter)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like<code>ease</code>. For example, to tween <code>x</code> to 100 and <code>y</code> to 200 for mc1, mc2, and mc3, staggering their start time by 0.25 seconds and then call <code>myFunction</code> when they last one has finished, do this: <code>TweenMax.staggerTo([mc1, mc2, mc3], 1, {x:100, y:200}, 0.25, myFunction})</code>.</p>\n","related_configuration_object":"980585c43a98afd0"},{"name":"stagger","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Amount of time in seconds (or frames for frames-based tweens) to stagger the start time of each tween. For example, you might want to have 5 objects move down 100 pixels while fading out, and stagger the start times by 0.2 seconds &#8211; you could do: <code>TweenMax.staggerTo([mc1, mc2, mc3, mc4, mc5], 1, {y:\"+=100\", opacity:0}, 0.2)</code>.</p>\n"},{"name":"onCompleteAll","data_type":"Function","description":"<p>(default = <code>null</code>)<code></code> — A function to call as soon as the entire sequence of tweens has completed</p>\n"},{"name":"onCompleteAllParams","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — An array of parameters to pass the <code>onCompleteAll</code> method.</p>\n"},{"name":"onCompleteAllScope","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The scope in which the onCompleteAll callback should be called (basically, what &#8220;this&#8221; refers to in the function). NOTE: this parameter only pertains to the JavaScript and AS2 versions; it is omitted in AS3.</p>\n"}],"returns":{"type":"Array","content":"<p>An array of TweenMax instances (one for each object in the targets array)</p>\n"},"details":{"content":"<p>Tweens an array of targets to a common set of destination values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code. For example, let's say you have an array containing references to a bunch of objects that you'd like to fall away and fade out in a staggered fashion with 0.2 seconds between each tween's start time:</p><pre class='pre-container prettyprint'>var objects = [obj1, obj2, obj3, obj4, obj5];<br />TweenMax.staggerTo(objects, 1, {y:\"+=150\", opacity:0}, 0.2);</pre><p><code>staggerTo()</code> simply loops through the <code>targets</code> array and creates a <code>to()</code> tween for each object and then returns an array containing all of the resulting tweens (one for each object).</p><p><code>staggerTo()</code> can also work on a jQuery collection as shown below:</p><p data-height=\"320\" data-theme-id=\"3984\" data-slug-hash=\"HxzEl\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/HxzEl/'>TweenMax.staggerTo()</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://codepen.io/assets/embed/ei.js\"></script></p><p>If you can afford the slight increase in file size, it is usually better to use TimelineLite's <code>staggerTo()</code> method because it wraps the tweens in a TimelineLite instead of an array which makes controlling the group as a whole much easier. That way you could pause(), resume(), reverse(), restart() or change the timeScale of everything at once.</p><p>Note that if you define an <code>onComplete</code> (or any callback for that matter) in the <code>vars</code> parameter, it will be called for each tween rather than the whole sequence. This can be very useful, but if you want to call a function after the entire sequence of tweens has completed, use the <code>onCompleteAll</code> parameter (the 5th parameter).</p><p data-height=\"400\" data-theme-id=\"3984\" data-slug-hash=\"Eoedn\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/Eoedn/'>TweenMax.staggerTo() with callbacks</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://codepen.io/assets/embed/ei.js\"></script></p><p>Due to the way JavaScript doesn't maintain scope (what \"<code>this</code>\" refers to, or the context) in function calls, it can be useful to define the scope specifically, using the 7th parameter, <code>onCompleteAllScope</code>.</p><h2>Cycle through multiple values</h2><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/0HhjSPVuRHA?vq=hd720\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><p>Instead of defining a single value (like <code>x:100, rotation:90</code>), you can define an Array of values to cycle through (like <code>cycle:{x:[100,-100], rotation:[30,60,90]}</code>) or even use function-based values (like <code>cycle:{x:function() { return Math.random() * 200; }}</code>). The amount of functionality you can pack into a single line of code is staggering (pun intended).</p><p data-height=\"390\" data-theme-id=\"3984\" data-slug-hash=\"LpGLYQ\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/LpGLYQ/'>TweenMax.staggerTo() with Cycle</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><h3>Parameters: index, target</h3><p>When defining cycle values with functions the functions are passed two parameters:</p><ol><li><strong>index</strong> <i>(integer)</i> - the target's position in the array of targets. For example, if there are 3 <code>&lt;div&gt;</code> elements with the class \".box\", and you <code>TweenMax.staggerTo(\".box\", ...)</code>, the function would get called 3 times (once for each target) and the index would be <code>0</code> first, then <code>1</code>, and finally <code>2</code>.</li><li><strong>target</strong> <i>(object)</i> - the target itself (the <code>&lt;div&gt;</code> element in this case)</li></ol><h3>Caveats</h3><ul><li>The <code>cycle</code> property is available only in the <code>staggerTo()</code>, <code>staggerFrom()</code>, and <code>staggerFromTo()</code> methods in TweenMax, TimelineLite and TimelineMax.</li><li>the cycle property is available in GSAP 1.18.0+</li></ul>"}},"22d710f5e23c3b66":{"meta":{"keywords":["js.TweenMax.time()"],"title":"time()","description":"[override] Gets or sets the local position of the playhead (essentially the current time), not including any repeats or repeatDelays."},"header":{"content":"<p>[override] Gets or sets the local position of the playhead (essentially the current time), not including any repeats or repeatDelays.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining. Negative values will be interpreted from the <b>END</b> of the animation.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, no events or callbacks will be triggered when the playhead moves to the new position defined in the <code>value</code> parameter.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the local position of the playhead (essentially the current time), <b>not</b> including any repeats or repeatDelays. If the tween has a non-zero <code>repeat</code>, its <code>time</code> goes back to zero upon repeating even though the <code>totalTime</code> continues forward linearly (or if <code>yoyo</code>is <code>true</code>, the <code>time</code> alternates between moving forward and backward). <code>time</code> never exceeds the duration whereas the <code>totalTime</code>reflects the overall time including any repeats and repeatDelays.</p><p>For example, if a TweenMax instance has a <code>duration</code> of 2 and a repeat of 3, <code>totalTime</code> will go from 0 to 8 during the course of the tween (plays once then repeats 3 times, making 4 total cycles) whereas <code>time</code> would go from 0 to 2 a total of 4 times.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p><pre class='pre-container prettyprint'>var currentTime = myTween.time(); //gets current time<br />myTween.time(2);<br />//sets time, jumping to new value just like seek().</pre>"}},"a52aa2ad91d4ef68":{"meta":{"keywords":["js.TweenMax.to()"],"title":"to()","description":"[static] Static method for creating a TweenMax instance that animates to the specified destination values (from the current values)."},"header":{"content":"<p>[static] Static method for creating a TweenMax instance that animates to the specified destination values (from the current values).</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties should be affected. When animating DOM elements, the target can be: a single element, an array of elements, a jQuery object (or similar), or a CSS selector string like “#feature” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if <code>useFrames:true</code> is set in the <code>vars</code> parameter)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like<code>onComplete</code>, <code>ease</code>, etc. For example, to tween obj<code>.x</code> to 100 and obj<code>.y</code> to 200 and then call <code>myFunction</code>, do this:<code>TweenMax.to(obj, 1, {x:100, y:200, onComplete:myFunction});</code></p>\n","related_configuration_object":"bf3441936fcd04fd"}],"returns":{"type":"TweenMax","content":"<p>TweenMax instance</p>\n"},"details":{"content":"<p>Static method for creating a TweenMax instance that animates to the specified destination values (from the current values). This static method can be more intuitive for some developers and shields them from potential garbage collection issues that could arise when assigning a tween instance to a persistent variable. The following lines of code produce identical results:</p><pre class='pre-container prettyprint'>TweenMax.to(obj, 1, {x:100}); <br />var myTween = new TweenMax(obj, 1, {x:100}); <br />var myTween = TweenMax.to(obj, 1, {x:100});</pre><p>Each line above will tween the <code>\"x\"</code> property of the <code>mc</code> object to a value of 100 over the coarse of 1 second. They each use a slightly different syntax, all of which are valid. If you don't need to store a reference of the tween, just use the static <code>TweenMax.to( )</code> call.</p><p>Since the <code>target</code> parameter can also be an array of objects, the following code will tween the x property of obj1, obj2, and obj3 to a value of 100 simultaneously:</p><pre class='pre-container prettyprint'>TweenMax.to([obj1, obj2, obj3], 1, {x:100});</pre><p>Even though 3 objects are animating, there is still only one tween created. In order to stagger or offset the start times of each object animating, please see the <code><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenMax.staggerTo()\"><span data-link-id=\"65d8dcc6c6cabcbd\"></span></span></code> method (TimelineLite has one too).</p><p>For simple sequencing, you can use the <code>delay</code> special property (like <code>TweenMax.to(obj, 1, {x:100, delay:0.5})</code>), but it is highly recommended that you consider using TimelineLite (or TimelineMax) for all but the simplest sequencing tasks. It has an identical <code>to()</code>method that allows you to append tweens one-after-the-other and then control the entire sequence as a whole. You can even have the tweens overlap as much as you want.</p>"}},"8b14bde95693efa6":{"meta":{"keywords":["js.TweenMax.totalDuration()"],"title":"totalDuration()","description":"[override] Gets or sets the total duration of the tween in seconds (or frames for frames-based tweens) including any repeats or repeatDelays."},"header":{"content":"<p>[override] Gets or sets the total duration of the tween in seconds (or frames for frames-based tweens) including any repeats or repeatDelays.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining. Negative values will be interpreted from the <b>END</b> of the animation.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the total duration of the tween in seconds (or frames for frames-based tweens) <b>including</b> any repeats or repeatDelays.<code>duration</code>, by contrast, does <b>NOT</b> include repeats and repeatDelays. For example, if the tween has a <code>duration</code> of 10, a <code>repeat</code> of 1 and a <code>repeatDelay</code> of 2, the <code>totalDuration</code> would be 22.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p><pre class='pre-container prettyprint'>var total = myTween.totalDuration(); //gets total duration <br />myTween.totalDuration(10); //sets the total duration</pre>"}},"3783d0a065069766":{"meta":{"keywords":["js.TweenMax.totalProgress()"],"title":"totalProgress()","description":"totalProgress()"},"header":{"content":"<p>totalProgress()</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, no events or callbacks will be triggered when the playhead moves to the new position.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>[override] Gets or sets the tween's totalProgress which is a value between 0 and 1 indicating the position of the virtual playhead (including repeats) where 0 is at the beginning, 0.5 is halfway complete, and 1 is complete.</p>"}},"149cf67b4ca81773":{"meta":{"keywords":["js.TweenMax.updateTo()"],"title":"updateTo()","description":"Updates tweening values on the fly so that they appear to seamlessly change course even if the tween is in-progress."},"header":{"content":"<p>Updates tweening values on the fly so that they appear to seamlessly change course even if the tween is in-progress.</p>"},"parameters":[{"name":"vars","data_type":"object","description":"<p>Object containing properties with the destination values that should be udpated. You do <b>NOT</b> need to redefine all of the original <code>vars</code> values &#8211; only the ones that should be updated (although if you change a plugin value, you will need to fully define it). For example, to update the destination <code>x</code> value to 300 and the destination <code>y</code> value to 500, pass: <code>{x:300, y:500}</code>.</p>\n"},{"name":"resetDuration","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If the tween has already started (or finished) and <code>resetDuration</code> is <code>true</code>, the tween will restart. If <code>resetDuration</code> is <code>false</code>, the tween&#8217;s timing will be honored (no restart) and each tweening property&#8217;s starting value will be adjusted so that it appears to seamlessly redirect to the new destination value.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Updates tweening values on the fly so that they appear to seamlessly change course even if the tween is in-progress. Think of it like dynamically updating the <code>vars</code> object that was passed in to the tween when it was originally created. You do <b>NOT</b> need to redefine all of the <code>vars</code> properties/values - only the ones that you want to update. You can even define new properties that you didn't define in the original <code>vars</code> object.</p><p>If the <code>resetDuration</code> parameter is <code>true</code> and the tween has already started (or finished), <code>updateTo()</code> will restart the tween. Otherwise, the tween's timing will be honored. And if <code>resetDuration</code> is <code>false</code> and the tween is in-progress, the starting values of each property will be adjusted so that the tween appears to seamlessly redirect to the new destination values. This is typically not advisable if you plan to reverse the tween later on or jump to a previous point because the starting values would have been adjusted.</p><p><code>updateTo()</code> is only meant for non-plugin values. It's much more complicated to dynamically update values that are being handled inside plugins - that is not what this method is intended to do.</p><pre class='pre-container prettyprint'>//a generic JavaScript object (not a DOM element)<br />var obj = {x:0, y:0, age:18, weight:180}<br /><br />//create a tween that modifies properties of obj<br />var tween = new TweenMax(obj, 2, {x:100, y:200, age:40, weight:250});<br />//then later, update the destination x and y values, restarting the tween <br />tween.updateTo({x:300, y:0}, true);<br />//or to update the values mid-tween without restarting, do this:<br />tween.updateTo({x:300, y:0}, false);</pre>"}},"2810d7a52bbf48a8":{"meta":{"keywords":["js.TweenMax.yoyo()"],"title":"yoyo()","description":"Gets or sets the tween&#039;s yoyo state, where true causes the tween to go back and forth, alternating backward and forward on each repeat."},"header":{"content":"<p>Gets or sets the tween's yoyo state, where true causes the tween to go back and forth, alternating backward and forward on each repeat.</p>"},"parameters":[{"name":"value","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the tween's <code>yoyo</code> state, where <code>true</code> causes the tween to go back and forth, alternating backward and forward on each<code>repeat</code>. <code>yoyo</code> works in conjunction with <code>repeat</code>, where <code>repeat</code> controls how many times the tween repeats, and <code>yoyo</code> controls whether or not each repeat alternates direction. So in order to make a tween yoyo, you must set its <code>repeat</code> to a non-zero value. Yoyo-ing, has no affect on the tween's \"<code>reversed</code>\" property. For example, if <code>repeat</code> is 2 and <code>yoyo</code> is <code>false</code>, it will look like: start - 1 - 2 - 3 - 1 - 2 - 3 - 1 - 2 - 3 - end. But if <code>yoyo</code> is <code>true</code>, it will look like: start - 1 - 2 - 3 - 3 - 2 - 1 - 1 - 2 - 3 - end.</p><p>You can set the <code>yoyo</code> property initially by passing <code>yoyo:true</code> in the <code>vars</code> parameter, like: <code>TweenMax.to(mc, 1, {x:100, repeat:1, yoyo:true});</code></p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like<code>myAnimation.yoyo(true).repeat(3).timeScale(2).play(0.5);</code></p><pre class='pre-container prettyprint'>var yoyo = myAnimation.yoyo(); //gets current yoyo state<br><br />myAnimation.yoyo( true ); //sets yoyo to true</pre>"}},"82b95bb606c34e2f":{"meta":{"keywords":["js.ModifiersPlugin","Plugins"],"title":"ModifiersPlugin","description":"ModifiersPlugin intercepts values that GSAP would normally apply on each update (&quot;tick&quot;), passes them to your function which can run custom logic and return a new value (great for snapping, clamping, wrapping, or other dynamic effects)."},"header":{"content":"<p><span class=\"inTweenMax\">Included in TweenMax: <span class=\"no\">NO</span></span></p><p>You can define a \"modifier\" function for almost any property; this modifier intercepts the value that GSAP would normally apply on each update (\"tick\"), feeds it to your function as the first parameter and lets you run custom logic, returning a new value that GSAP should then apply. This is perfect for tasks like snapping, clamping, wrapping, or other dynamic effects. It's completely up to you!</p><h3>Parameters: value, target</h3><p>The modifier functions are passed two parameters: </p><ol><li><strong>value</strong> <i>(number | string)</i> - the about-to-be-applied value from the regular tween. This is often a number, but could be a string based on whatever the property requires. For example if you're animating the <code>x</code> property, it would be a number, but if you're animating the <code>left</code> property it could be something like <code>\"212px\"</code>, or for the <code>boxShadow</code> property it could be <code>\"10px 5px 10px rgb(255,0,0)\"</code>. </li><li><strong>target</strong> <i>(object)</i> - the target itself</li></ol><p>For example, change the x of one object based on the y of another object or change rotation based on the direction it is moving. Below are some examples that will help you get familiarized with the syntax.</p><h3>Snap rotation</h3><p>The tween below animates 360 degrees but the modifier function forces the value to jump to the closest 45-degree increment. Take note how the modifier function gets passed the value of the property that is being modified, in this case a <code>rotation</code> number. </p><p data-height=\"300\" data-theme-id=\"3984\" data-slug-hash=\"BzJxBB\" data-default-tab=\"js,result\" data-user=\"GreenSock\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/BzmGba/\">BzJxBB</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><h3>Clamp with Modulus</h3><p>The tween below animates <code>x</code> to 500 but the modifier function forces the value to wrap so that it's always between 0 and 100. </p><p data-height=\"300\" data-theme-id=\"3984\" data-slug-hash=\"rLJmOv\" data-default-tab=\"js,result\" data-user=\"GreenSock\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/BzmGba/\">BzJxBB</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><h3>Carousel Wrap</h3><p>Have you ever built a carousel and wrestled with making it loop seamlessly? Perhaps you duplicated each asset or wrote some code that moved each item back to the beginning when it reached the end. With ModifiersPlugin you can get a seamless repeating carousel with <strong>a single <code>staggerTo()</code>!</strong> The example below tweens each box to a relative x position of <code>\"+=500\"</code>. Click the \"show overflow\" button to see each box get reset to x:0 when it goes beyond 500...</p><p data-height=\"300\" data-theme-id=\"3984\" data-slug-hash=\"QEdpLe\" data-default-tab=\"result\" data-user=\"GreenSock\" data-embed-version=\"2\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/QEdpLe/\">QEdpLe</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><h3>Advanced demos</h3><p><a href=\"http://codepen.io/collection/AWxOyk/2/\" rel=\"attachment wp-att-7342\"><img src=\"http://greensock.com/wp-content/uploads/2016/07/blake-collection-modifiersplugin.jpg\" alt=\"blake-collection-modifiersplugin\" width=\"840\" height=\"167\" class=\"alignleft size-full wp-image-7342\" /></a></p><p>We've only scratched the surface of what ModifiersPlugin can do. Our moderator <a href=\"http://codepen.io/osublake/\">Blake Bowen</a> has been putting this new plugin to the test and has an <a href=\"http://codepen.io/osublake/pen/vKdGAy?editors=0010\">impressive collection of demos</a> that will surely inspire you. </p><p><strong>Caveats:</strong></p><ul class=\"compact\"><li><i>ModifiersPlugin requires TweenLite or TweenMax version 1.19.0 or later.</i></li><li><i>ModifiersPlugin is <strong>not</strong> included inside of TweenMax; you need to load it separately for it to work.</i></li><li><i>RoundPropsPlugin taps into the same mechanism internally as ModifiersPlugin (to maximize efficiency, minimize memory, and keep kb down). Think of a <code>roundProps</code> tween as just a shortcut that creates a modifier that applies <code>Math.round()</code>, thus you cannot do <strong>BOTH</strong> roundProps and a modifier on the same property. It's easy to get that functionality, though, by just doing Math.round() inside the modifier function.</i></li></ul>"}},"830525841e3dd3cb":{"meta":{"keywords":["js.SlowMo","Easing"],"title":"SlowMo","description":"SlowMo is a configurable ease that produces a slow-motion effect that decelerates initially, then moves linearly for a certain portion of the ease (which you can choose) and then accelerates again at the end; it&#039;s great for effects like zooming text onto the screen, smoothly moving it long enough for people to read it, and then zooming it off the screen"},"header":{"content":"<p>SlowMo is a configurable ease that produces a slow-motion effect that decelerates initially, then moves linearly for a certain portion of the ease (which you can choose) and then accelerates again at the end; it's great for effects like zooming text onto the screen, smoothly moving it long enough for people to read it, and then zooming it off the screen. Without SlowMo, animators would often try to get the same effect by sequencing 3 tweens, one with an easeOut, then another with a Linear.easeNone, and finally an easeIn but the problem was that the eases didn't smoothly transition into one another, so you'd see sudden shifts in velocity at the joints. SlowMo solves this problem and gives you complete control over how strong the eases are on each end and what portion of the movement in the middle is linear.</p><div class=\"ease-visualizer\" data-ease=\"SlowMo\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p>The first parameter, <code>linearRatio</code>, determines the proportion of the ease during which the rate of change will be linear (steady pace). This should be a number between 0 and 1. For example, 0.5 would be half, so the first 25% of the ease would be easing out (decelerating), then 50% would be linear, then the final 25% would be easing in (accelerating). If you choose 0.8, that would mean 80% of the ease would be linear, leaving 10% on each end to ease. The default is 0.7.</p><p>The second parameter, <code>power</code>, determines the strength of the ease at each end. If you define a value greater than 1, it will actually reverse the linear portion in the middle which can create interesting effects. The default is 0.7.</p><p>The third parameter, <code>yoyoMode</code>, provides an easy way to create companion tweens that sync with normal SlowMo tweens. For example, let's say you have a SlowMo tween that is zooming some text onto the screen and moving it linearly for a while and then zooming off, but you want to tween that alpha of the text at the beginning and end of the positional tween. Normally, you'd need to create 2 separate alpha tweens, 1 for the fade-in at the beginning and 1 for the fade-out at the end and you'd need to calculate their durations manually to ensure that they finish fading in by the time the linear motion begins and then they start fading out at the end right when the linear motion completes. But to make this whole process much easier, all you'd need to do is create a separate tween for the alpha and use the same duration but a SlowMo ease that has its <code>yoyoMode</code> parameter set to <code>true</code>.<br /></p><pre class='pre-container prettyprint'>//use the default SlowMo ease (linearRatio of 0.7 and power of 0.7)<br />TweenLite.to(myText, 5, {x:600, ease:SlowMo.ease});<br /> <br />//use a new SlowMo ease with 50% of the tween being linear (2.5 seconds) and a power of 0.8<br />TweenLite.to(myText, 5, {x:600, ease:new SlowMo(0.5, 0.8)});<br /> <br />//this gives the exact same effect as the line above, but uses a different syntax<br />TweenLite.to(myText, 5, {x:600, ease:SlowMo.ease.config(0.5, 0.8)});<br /> <br />//now let's create an opacity tween that syncs with the above positional tween, fading it in at the beginning and out at the end<br />TweenLite.from(myText, 5, {opacity:0, ease:SlowMo.ease.config(0.5, 0.8, true)});</pre>"}},"ed459aa1a80c9521":{"meta":{"keywords":["js.SlowMo.SlowMo()"],"title":"SlowMo()","description":"Constructor"},"header":{"content":"<p>Constructor</p>"},"parameters":[{"name":"linearRatio","data_type":"Number","description":"<p>(default = <code>0.7</code>)<code></code> — the proportion of the ease during which the rate of change will be linear (steady pace). This should be a number between 0 and 1. For example, 0.5 would be half, so the first 25% of the ease would be easing out (decelerating), then 50% would be linear, then the final 25% would be easing in (accelerating). If you choose 0.8, that would mean 80% of the ease would be linear, leaving 10% on each end to ease. The default is 0.7.</p>\n"},{"name":"power","data_type":"Number","description":"<p>(default = <code>0.7</code>)<code></code> — The strength of the ease at each end. If you define a value above 1, it will actually reverse the linear portion in the middle which can create interesting effects. The default is 0.7.</p>\n"},{"name":"yoyoMode","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, the ease will reach its destination value mid-tween and maintain it during the entire linear mode and then go back to the original value at the end (like a yoyo of sorts). This can be very useful if, for example, you want the alpha (or some other property) of some text to fade at the front end of a SlowMo positional ease and then back down again at the end of that positional SlowMo tween. Otherwise you would need to create separate tweens for the beginning and ending fades that match up with that positional tween. Example: <code>TweenLite.to(myText, 5, {x:600, ease:SlowMo.ease.config(0.7, 0.7, false)}); TweenLite.from(myText, 5, {alpha:0, ease:SlowMo.ease.config(0.7, 0.7, true)});</code></p>\n"}],"returns":{},"details":{"content":"<p>Constructor</p>"}},"ba16ab89ebee23c0":{"meta":{"keywords":["js.SlowMo.ease"],"title":"ease","description":"[static] The default ease instance which can be reused many times in various tweens in order to conserve memory and improve performance slightly compared to creating a new instance each time."},"header":{"content":"<p>[static] The default ease instance which can be reused many times in various tweens in order to conserve memory and improve performance slightly compared to creating a new instance each time.</p>"},"returns":{"type":"SlowMo","content":""},"details":{"content":"<p>The default ease instance which can be reused many times in various tweens in order to conserve memory and improve performance slightly compared to creating a new instance each time.</p>"}},"4e307cf9f4bf2f9f":{"meta":{"keywords":["js.SlowMo.config()"],"title":"config()","description":"Permits customization of the ease with various parameters."},"header":{"content":"<p>Permits customization of the ease with various parameters.</p>"},"parameters":[{"name":"linearRatio","data_type":"Number","description":"<p>(default = <code>0.7</code>)<code></code> — the proportion of the ease during which the rate of change will be linear (steady pace). This should be a number between 0 and 1. For example, 0.5 would be half, so the first 25% of the ease would be easing out (decelerating), then 50% would be linear, then the final 25% would be easing in (accelerating). If you choose 0.8, that would mean 80% of the ease would be linear, leaving 10% on each end to ease. The default is 0.7.</p>\n"},{"name":"power","data_type":"Number","description":"<p>(default = <code>0.7</code>)<code></code> — The strength of the ease at each end. If you define a value above 1, it will actually reverse the linear portion in the middle which can create interesting effects. The default is 0.7.</p>\n"},{"name":"yoyoMode","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, the ease will reach its destination value mid-tween and maintain it during the entire linear mode and then go back to the original value at the end (like a yoyo of sorts). This can be very useful if, for example, you want the alpha (or some other property) of some text to fade at the front end of a SlowMo positional ease and then back down again at the end of that positional SlowMo tween. Otherwise you would need to create separate tweens for the beginning and ending fades that match up with that positional tween. Example: <code>TweenLite.to(myText, 5, {x:600, ease:SlowMo.ease.config(0.7, 0.7, false)}); TweenLite.from(myText, 5, {alpha:0, ease:SlowMo.ease.config(0.7, 0.7, true)});</code></p>\n"}],"returns":{"type":"SlowMo","content":"<p>new SlowMo instance that is configured according to the parameters provided</p>\n"},"details":{"content":"<p>Permits customization of the ease with various parameters.</p>"}},"7fa11166b5591c60":{"meta":{"keywords":["js.SlowMo.getRatio()"],"title":"getRatio()","description":"[override] Translates the tween&#039;s progress ratio into the corresponding ease ratio."},"header":{"content":"<p>[override] Translates the tween's progress ratio into the corresponding ease ratio.</p>"},"parameters":[{"name":"p","data_type":"Number","description":"<p>progress ratio (a value between 0 and 1 indicating the progress of the tween/ease)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Number","content":"<p>translated number</p>\n"},"details":{"content":"<p>Translates the tween's progress ratio into the corresponding ease ratio. This is the heart of the Ease, where it does all its work.</p>"}},"8510bec84f8f5ab3":{"meta":{"keywords":"","description":"","imagePath":""},"content":"<div class=\"package-feature\"><h1>Core</h1><img style=\"width: 93%;\" src=\"https://greensock.com/wp-content/themes/greensock/images/divider.png\" class=\"fr-fic fr-dii\"><p>Package Summary.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Core/SimpleTimeline\"><span data-link-id=\"211a71fb195b2819\"></span></span></h1></div><p><br></p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Core/Animation\"><span data-link-id=\"11f92408d2609969\"></span></span></h1></div><p><br></p></div>"},"91943bd05ded63bb":{"meta":{"keywords":["js.Quad","Easing"],"title":"Quad","description":"Provides an easeIn, easeOut, and easeInOut with a power (or strength) of 1 which is identical to the Power1 ease. The more power, the more exaggerated the easing effect. Using a numeric approach like Power1 instead of Quad makes experimenting easier and the code reads more intuitively."},"header":{"content":"<p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 1 which is identical to the <code>Power1</code> ease. The more power, the more exaggerated the easing effect. Using a numeric approach like Power1 instead of Quad makes experimenting easier and the code reads more intuitively.</p><p>This is one of the eases that is natively accelerated in TweenLite and TweenMax. All of the \"Power\" eases and their counterparts (Linear (0), Quad (1), Cubic (2), Quart (3), Quint (4), and Strong (4)) are accelerated.</p><div class=\"ease-visualizer\" data-ease=\"Power1\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example usage:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Quad.easeOut});</pre>"}},"6c323162f3657de1":{"meta":{"keywords":["js.Quad.easeIn"],"title":"easeIn","description":"[static] Eases in with a power of 1."},"header":{"content":"<p>[static] Eases in with a power of 1.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in with a power of 1.</p>"}},"f878aae254cc6211":{"meta":{"keywords":["js.Quad.easeInOut"],"title":"easeInOut","description":"[static] Eases in and then out with a power of 1."},"header":{"content":"<p>[static] Eases in and then out with a power of 1.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in and then out with a power of 1.</p>"}},"c9e6d8a4b4e56614":{"meta":{"keywords":["js.Quad.easeOut"],"title":"easeOut","description":"[static] Eases out with a power of 1."},"header":{"content":"<p>[static] Eases out with a power of 1.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases out with a power of 1.</p>"}},"0516dafc90c83002":{"name":"cycle","returns":{"type":"*","content":"Instead of defining a single value (like <code>x:100, rotation:90</code>), you can define an Array of values to cycle through (like <code>cycle:{x:[100,-100], rotation:[30,60,90]}</code>) or even use function-based values (like <code>cycle:{x:function() { return Math.random() * 200; }}</code>).","contentShort":""}},"5362451ab9c301de":{"name":"ease","returns":{"type":"Ease (or Function or String)","content":"You can choose from various eases to control the rate of change during the animation, giving it a specific \"feel\". For example, <code>Elastic.easeOut</code> or <code>Strong.easeInOut</code>. For best performance, use one of the GreenSock eases (<code>Linear, Power0, Power1, Power2, Power3, Power4, Quad, Cubic, Quart, Quint</code>, and <code>Strong</code>, each with their <code>.easeIn, .easeOut</code>, and <code>.easeInOut</code> variants are included in the TweenLite, and you can load EasePack to get extras like <code>Elastic, Back, Bounce, SlowMo, SteppedEase, Circ, Expo</code>, and <code>Sine</code>). For linear animation, use the GreenSock <code>Linear.easeNone</code> ease. You can also define an ease by name (string) like \"<code>Strong.easeOut</code>\" or reverse style (like jQuery uses) <code>\"easeOutStrong\"</code>. The default is <code>Quad.easeOut</code>.","contentShort":"You can choose from various eases to control the rate of change during the animation, giving it a specific \"feel\"."}},"12bc54ae2abf7f69":{"name":"overwrite","returns":{"type":"String (or integer) ","content":"Controls how (and if) other tweens of the same target are overwritten. There are several modes to choose from, but <code>\"auto\"</code> is the default (although you can change the default mode using the<code>TweenLite.defaultOverwrite</code> property):\r\n<ul>\r\n\t<li><code>\"none\"</code> (0) (or <code>false</code>) - no overwriting will occur.</li>\r\n\t<li><code>\"all\"</code> (1) (or <code>true</code>) - immediately overwrites all existing tweens of the same target even if they haven't started yet or don't have conflicting properties.</li>\r\n\t<li><code>\"auto\"</code> (2) - when the tween renders for the first time, it will analyze tweens of the same target that are currently active/running and only overwrite individual tweening properties that overlap/conflict. Tweens that haven't begun yet are ignored. For example, if another active tween is found that is tweening 3 properties, only 1 of which it shares in common with the new tween, the other 2 properties will be left alone. Only the conflicting property gets overwritten/killed. This is the default mode and typically the most intuitive for developers.</li>\r\n\t<li><code>\"concurrent\"</code> (3) - when the tween renders for the first time, it kills only the active (in-progress) tweens of the same target regardless of whether or not they contain conflicting properties. Like a mix of <code>\"all\"</code> and <code>\"auto\"</code>. Good for situations where you only want one tween controling the target at a time.</li>\r\n\t<li><code>\"allOnStart\"</code> (4) - Identical to <code>\"all\"</code> but waits to run the overwrite logic until the tween begins (after any delay). Kills tweens of the same target even if they don't contain conflicting properties or haven't started yet.</li>\r\n\t<li><code>\"preexisting\"</code> (5) - when the tween renders for the first time, it kills only the tweens of the same target that existed BEFORE this tween was created regardless of their scheduled start times. So, for example, if you create a tween with a delay of 10 and then a tween with a delay of 1 and then a tween with a delay of 2 (all of the same target), the 2nd tween would overwrite the first but not the second even though scheduling might seem to dictate otherwise. <code>\"preexisting\"</code> only cares about the order in which the instances were actually created. This can be useful when the order in which your code runs plays a critical role.</li>\r\n</ul>","contentShort":"Controls how (and if) other tweens of the same target are overwritten. There are several modes to choose from."}},"c0b2819eb45d22fa":{"name":"immediateRender","returns":{"type":"Boolean","content":"Normally when you create a tween, it begins rendering on the very next frame (update cycle) unless you specify a <code>delay</code>. However, if you prefer to force the tween to render immediately when it is created, set<code>immediateRender</code> to <code>true</code>. Or to prevent a <code>from()</code> from rendering immediately, set <code>immediateRender</code> to <code>false</code>. By default, <code>from()</code> tweens set <code>immediateRender</code> to <code>true</code>.","contentShort":"Normally when you create a tween, it begins rendering on the very next frame (update cycle) unless you specify a <code>delay</code>. However, if you prefer to force the tween to render immediately when it is created, set<code>immediateRender</code> to <code>true</code>."}},"3858c3c0e131d9f9":{"name":"onCompleteParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onComplete</code> function. For example,<code>TweenLite.to(element, 1, {left:\"100px\", onComplete:myFunction, onCompleteParams:[element, \"param2\"]});</code> To self-reference the tween instance itself in one of the parameters, use <code>\"{self}\"</code>, like:<code>onCompleteParams:[\"{self}\", \"param2\"]</code>","contentShort":"An Array of parameters to pass the <code>onComplete</code> function."}},"001be8077e6e9763":{"name":"onRepeatParams","returns":{"type":"Array","content":"An Array of parameters to pass the onRepeat function. For example, <code>TweenMax.to(mc, 1, {x:100, onRepeat:myFunction, onRepeatParams:[mc, \"param2\"]});</code> To self-reference the tween instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onRepeatParams:[\"{self}\", \"param2\"]</code>","contentShort":"An Array of parameters to pass the onRepeat function."}},"cb1dfa66a7a72a20":{"name":"onReverseCompleteParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onReverseComplete</code> function. For example,<code>TweenLite.to(element, 1, {left:\"100px\", onReverseComplete:myFunction, onReverseCompleteParams:[mc, \"param2\"]});</code> To self-reference the tween instance itself in one of the parameters, use <code>\"{self}\"</code>, like:<code>onReverseCompleteParams:[\"{self}\", \"param2\"].</code>","contentShort":"An Array of parameters to pass the <code>onReverseComplete</code> function."}},"5831c58b3d824f56":{"name":"onStartParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onStart</code> function. For example, <code>TweenLite.to(element, 1, {left:\"100px\", delay:1, onStart:myFunction, onStartParams:[mc, \"param2\"]});</code> To self-reference the tween instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onStartParams:[\"{self}\", \"param2\"].</code>","contentShort":"An Array of parameters to pass the <code>onStart</code> function."}},"08db63c99851dad9":{"name":"onUpdateParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onUpdate</code> function. For example, <code>TweenLite.to(element, 1, {left:\"100px\", onUpdate:myFunction, onUpdateParams:[mc, \"param2\"]});</code> To self-reference the tween instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onUpdateParams:[\"{self}\", \"param2\"].</code>","contentShort":"An Array of parameters to pass the <code>onUpdate</code> function."}},"7f77859ab3515047":{"name":"startAt","returns":{"type":"Object","content":"Allows you to define the starting values for tweening properties. Typically, TweenMax uses the current value (whatever it happens to be at the time the tween begins) as the starting value, but <code>startAt</code> allows you to override that behavior. Simply pass an object in with whatever properties you'd like to set just before the tween begins. For example, if <code>mc.x</code> is currently 100, and you'd like to tween it from 0 to 500, do <code>TweenMax.to(mc, 2, {x:500, startAt:{x:0}});</code>","contentShort":"Allows you to define the starting values for tweening properties."}},"b11dc6cdb0b25ad4":{"name":"lazy","returns":{"type":"Boolean","content":"When a tween renders for the very first time and reads its starting values, GSAP will automatically \"lazy render\" that particular tick by default, meaning it will try to delay the rendering (writing of values) until the very end of the \"tick\" cycle which can improve performance because it avoids the read/write/read/write layout thrashing that <a href=\"http://codepen.io/GreenSock/pen/16438623257ec198107d561a9456e95d?editors=001\">some browsers do</a>. If you would like to disable lazy rendering for a particular tween, you can set <code>lazy:false</code>. Or, since zero-duration tweens do <b>not</b> lazy-render by default, you can specifically give it permission to lazy-render by setting <code>lazy:true</code> like <code>TweenLite.set(element, {opacity:0, lazy:true});</code>. In most cases, you <strong>won't</strong> need to set <code>lazy</code>. To learn more, watch the video at <a href=\"http://www.youtube.com/embed/TMHJptqnDpU?vq=hd720\">http://www.youtube.com/embed/TMHJptqnDpU?vq=hd720</a>","contentShort":"Helps avoid performance problems caused by read / write layout thrashing."}},"23dd15a5cb01a73a":{"name":"onOverwrite","returns":{"type":"Function","content":"A function that should be called when the tween gets overwritten by another tween. The following parameters will be passed to that function: \r\n<ol>\r\n  <li><strong>overwrittenTween</strong> : Animation - the tween that was just overwritten</li>\r\n  <li><strong>overwritingTween</strong> : Animation - the tween did the overwriting</li>\r\n  <li><strong>target</strong> : Object [only passed if the overwrite mode was <code>\"auto\"</code> because that's the only case when portions of a tween can be overwritten rather than the entire thing] - the target object whose properties were overwritten. This is usually the same as <code>overwrittenTween.target</code> unless that's an array and the overwriting targeted a sub-element of that array. For example, <code>TweenLite.to([obj1, obj2], 1, {x:100})</code> and then <code>TweenLite.to(obj2, 1, {x:50})</code>, the <code>target</code> would be <code>obj2</code>.</li>\r\n  <li><strong>overwrittenProperties</strong> : Array [only passed if the overwrite mode was <code>\"auto\"</code> because that's the only case when portions of a tween can be overwritten rather than the entire thing] - an array of property names that were overwritten, like <code>[\"x\",\"y\",\"opacity\"]</code>.</li>\r\n</ol>\r\nNote: there is also a static <code>TweenLite.onOverwrite</code> that you can use if you want a quick and easy way to be notified when any tween is overwritten (great for debugging). This saves you the hassle of defining an <code>onOverwrite</code> on a tween-by-tween basis. (available since version 1.14.0)","contentShort":"A function that should be called when the tween gets overwritten by another tween."}},"a7dacb5385dc0208":{"name":"autoCSS","returns":{"type":"Boolean","content":"Animating css-related properties of DOM elements requires the CSSPlugin which means that normally you'd need to wrap css-related properties in a <code>css:{}</code> object like <code>TweenLite.to(element, 2, {css:{left:\"200px\", top:\"100px\"}, ease:Linear.easeNone});</code> to indicate your intent (and to tell GSAP to feed those values to the CSSPlugin), but since animating css-related properties is so common, GSAP implements some logic internally that allows you to omit the <code>css:{}</code> wrapper (meaning you could rewrite the above tween as <code>TweenLite.to(element, 2, {left:\"200px\", top:\"100px\", ease:Linear.easeNone});</code>). By default, it will check to see if the target is a DOM element. If so, and if you haven't defined a <code>css:{}</code> object, it will create one for you and populate it with any properties that aren't reserved (like onComplete, ease, etc. or other plugin properties) and that don't already exist directly on the target itself (like if you created a custom \"xpos\" property on your element, that won't get added to the <code>css:{}</code> object). To prevent GSAP from automatically creating the css wrapper for you, simply set <code>autoCSS:false</code>. This is rarely useful, but if you suspect that GSAP is interpreting certain properties as css-related when it shouldn't be, try setting <code>autoCSS:false</code> or manually define your own <code>css:{}</code> object. It is perfectly acceptable to always create <code>css:{}</code> wrappers for your css-related properties. In fact, that results in a slight speed boost because it avoids some parsing logic when the tween gets rendered for the first time (the speed boost is probably imperceptible unless you're tweening thousands of DOM elements simultaneously).","contentShort":"An optimization that allows CSSPlugin to automatically parse CSS properties from the <code>vars :{} </code>object when the target of a tween is a DOM element."}},"9927ce1237a8b0b1":{"meta":{"keywords":["js.SplitText","Text","Utilities"],"title":"SplitText","description":"SplitText makes it easy to break apart the text in an HTML element so that each character, word, and/or line is in its own <div> making complex animation simple."},"header":{"content":"<p>SplitText makes it easy to break apart the text in an HTML element so that each character, word, and/or line is in its own &lt;div&gt;, making complex animation simple. For example, maybe you'd like to make each character or word fade into place in a staggered fashion. SplitText automatically works around various browser inconsistencies and recognizes line breaks appropriately. Plus it is highly configurable.</p><p><b>Watch overview video</b><br /><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/C7Z62o2GQB0?vq=hd720\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><p><b>FEATURES</b></p><p>There are a few things about SplitText that set it apart from some of the other popular libraries/plugins out there:</p><ul><li><b>No dependencies</b> - no jQuery dependency. Keep things lightweight (less than 2k gzipped and minified).</li><li><b>Compatibility</b> - even works in IE8! Plus it doesn't force non-breaking spaces into the divs like many other solutions on the web do, because those can alter the line breaks in some situations.</li><li><b>Uses divs, not spans</b> - some browsers won't render transforms like rotation, scale, skew, etc. on spans. Actually, it's related to <code>display:inline</code> (the default for spans) which is why we're using divs with <code>display:inline-block</code> for better animation flexibility.</li><li><b>Nested elements</b> - The element you are splitting can contain nested elements such as <code>&lt;span&gt;</code>, <code>&lt;strong&gt;</code>, <code>&lt;a&gt;</code>, etc. Requires version 0.5.4+.<li><b>Permits position:absolute</b> - this can improve performance and enable effects that would otherwise be impossible. With SplitText, you can choose if you want the divs to remain in the document flow or not.</li><li><b>Honors line breaks</b> - some other libraries force you to use a &lt;br&gt; to define line breaks, but SplitText doesn't. Of course you're welcome to use those if you prefer, but SplitText can recognize natural line breaks in the normal document flow. That's handy because you don't always know how the text will flow in every environment at various sizes.</li><li><b>Extremely flexible class assignment</b> - use no classes at all, or define a different one for characters, words, and/or lines. They don't need to be incremented (like \"char1\", \"char2\", \"char3\"...) but they can if you prefer (simply append \"++\" to the class name like <code>charsClass:\"yourCharClass++\"</code>).</li><li><b>Works with arrays and selectors</b> - a single SplitText instance can manage multiple elements; you can feed in a regular array like <code>new SplitText([element1, element2])</code> or a selector object (think jQuery), like <code>new SplitText( $(\".yourClass\") )</code>. In fact, you can define a <code>SplitText.selector</code> just like <code>TweenLite.selector</code> so that you can feed in selector text directly and have it use whatever selector you want! It will use jQuery by default (if it is loaded), or whatever window.$ is. For example, <code>new SplitText(\"#yourID\", {wordsClass:\"word\"})</code> would find the element with the ID <code>\"yourID\"</code> and split its text, applying a \"word\" class to every resulting word.</li><li><b>revert() anytime</b> - allows you to get back to the original content (swaps in the innerHTML that was recorded when the split occurred).</li></ul><p><b>BASIC USAGE</b></p><p>Start by creating a new SplitText instance and pass any of the following to the constructor to indicate which element(s) to split apart: a DOM element, an array of DOM elements, a selector object (like a jQuery object), or selector text. For example:<br /></p><pre class='pre-container prettyprint'>//a DOM element:<br />var yourElement = document.getElementById(\"yourID\");<br />var split = new SplitText(yourElement);<br /> <br />//or selector text which will use jQuery by default (if loaded) to get the selection:<br />var split = new SplitText(\"#yourID\");<br /> <br />//or a selector object, like jQuery:<br />var split = new SplitText( $(\".yourClass\") );<br /> <br />//or an array of DOM elements:<br />var split = new SplitText([element1, element2, element3]);</pre><pre class=\"codepen\" data-height=\"400\" data-type=\"result\" data-href=\"mvhak\" data-user=\"GreenSock\" data-safe=\"true\"><code></code><a href=\"http://codepen.io/GreenSock/pen/mvhak\">Check out this Pen!</a></pre><p><b>CONFIGURATION</b></p><p>By default, SplitText will split by characters, words, and lines which may be overkill for you. To control exactly which components are split apart (chars, words, and/or lines), or apply your own classes or set positioning to <code>absolute</code>, pass a <code>vars</code> configuration object as the second parameter to the constructor like <code>new SplitText(\"#yourID\", {type:\"words,lines\", wordsClass:\"word++\", position:\"absolute\"})</code>.</p><p><span style=\"background-color: #ffffff;\">[config id=\"53ab3440dc93284a\"]</span></p><p>Then, once the SplitText has been created, you can access an array of the split-apart <code>&lt;div&gt;</code> elements of each type by using the SplitText's <code>\"chars\"</code>, <code>\"words\"</code>, and/or <code>\"lines\"</code> properties. For example:</p><pre class='pre-container prettyprint'>//create a SplitText instance for the element with ID \"yourElementID\" that splits apart characters, words, and lines, and uses absolute positioning:<br />var split = new SplitText(\"#yourElementID\", {type:\"chars,words,lines\", position:\"absolute\"});<br /> <br />//now animate each character into place from 100px above, fading in:<br />TweenMax.staggerFrom(split.chars, 1, {y:100, autoAlpha:0}, 0.05);<br /> <br />//or animate each word<br />TweenMax.staggerFrom(split.words, 1, {x:200, autoAlpha:0, ease:Elastic.easeOut}, 0.1);<br /> <br />//or animate each line<br />TweenMax.staggerFrom(split.lines, 1, {x:200, autoAlpha:0, ease:Power3.easeOut}, 0.1);</pre><p><b>NESTED ELEMENTS AND EMOJI</b></p><p>SplitText (version 0.5.4+) will honor nested elements such as <code>&lt;span&gt;</code>, <code>&lt;strong&gt;</code>, <code>&lt;a&gt;</code>, etc. Want to have some fun with emoji? No problem: 🐳 🍔 ❤️. Watch the video below.</p><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/gh9eIGYFuE4?vq=hd720\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><p data-height=\"500\" data-theme-id=\"pEKYVz\" data-slug-hash=\"pEKYVz\" data-default-tab=\"result\" data-user=\"GreenSock\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/pbWwLZ/\">SplitText - delimeter</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><p><b>CUSTOM WORD DELIMITERS</b><br />Ever need to split a long string of text into words but didn't want any spaces? Custom word delimiters to the rescue! As of SplitText version 0.4.0, you can place any character you want to mark where words should be split and SplitText will remove them during the split. <code>#AwesomeForLongHashTags</code>. </p><p data-height=\"300\" data-theme-id=\"3984\" data-slug-hash=\"pbWwLZ\" data-default-tab=\"result\" data-user=\"GreenSock\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/pbWwLZ/\">SplitText - delimeter</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><p><b>NOTES / LIMITATIONS</b></p><ul><li>In order to maintain proper line breaks, don't just split the characters - split by words too and/or lines.</li><li>If you are using custom fonts, make sure they load BEFORE you split (otherwise all the splitting will be based on the default font which could throw off how things get aligned and sized)</li><li>If your goal is to animate 2D transforms in IE8, make sure you set <code>position:\"absolute\"</code> because otherwise IE will clip the content using the original size of the character/word/line.</li><li>Some inline css styles are set on the resulting div elements in order to position them correctly, so if you apply classes and don't see some styles taking effect, that could be why (the inline styles are overriding the class styles). Feel free to clear those inline styles manually or use <code>TweenLite.set([elements], {clearProps:\"all\"})</code> to clear them (of course that would affect positioning, so beware).</li><li>To maximize performance, only split the components you need. Don't split characters if you don't need to.</li><li>IE8 doesn't allow &lt;div&gt; tags to be nested inside &lt;p&gt; elements, so if you need IE8 compatability, don't try splitting &lt;p&gt; elements. Instead, build your HTML using &lt;div&gt; tags.</li><li>If the element uses justified text (<code>text-align:justify</code>), you must use <code>position:\"absolute\"</code> for the SplitText because divs that remain in the document flow cannot be justified.</li><li>Some browsers (like Safari) apply custom kerning by default between letters, so when characters are split apart and put into their own divs, the spacing is slightly different. A bug has been filed with the Safari team (it's a browser issue, not SplitText) but you can typically eliminate the differences by setting these CSS properties: <br /><pre class='pre-container prettyprint'>font-kerning: none;<br />-webkit-text-rendering: optimizeSpeed;<br />text-rendering: optimizeSpeed;<br />-webkit-transform: translateZ(0);<br />transform: translateZ(0);</pre><p></li><li>SplitText is <strong>not</strong> designed to work with SVG &lt;text&gt; nodes.</li></ul><p><b>GETTING ODD LINEBREAKS WITH NESTED ELEMENTS?<b></p><p>Nested elements can produce some odd results when you split text into lines. The issue arises when a nested elements like <code>&lt;span&gt;</code> wrap onto multiple lines. SplitText must place the entire nested elements within the line that first appears on. At times this can make it appear that lines are breaking in the wrong place.</p><p>In most cases adding <code>display:inline-block</code> to the nested element will yield better results. For a detailed explanation watch the video below.</p><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/1gLdsdDJF4g?vq=hd720\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><p>Please visit our <a href=\"http://codepen.io/collection/KiEhr\" target=\"_blank\">SplitText Codepen Collection</a> for more demos of SplitText in action.</p><p>SplitText is a <a href=\"http://greensock.com/club/\">Club GreenSock</a> membership benefit. You must have a valid membership to use this class without violating the terms of use. Visit <a href=\"http://greensock.com/club/\" target=\"\">http://greensock.com/club/</a> to sign up or get more details.</p>"}},"17115da28b40d682":{"meta":{"keywords":["js.SplitText.SplitText()"],"title":"SplitText()","description":"Creates a SplitText object."},"header":{"content":"<p>Creates a SplitText object.</p>"},"parameters":[{"name":"target","data_type":"*","description":"<p>The source element (or array of elements or selector object or selector text) whose text should be split apart. For example, <code>yourElement</code> or <code>\"#yourElementID\"</code> or<code>$(\".yourClass\")</code> or <code>[element1, element2, element3]</code> are all valid.</p>\n"},{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — a configuration object defining any of the following values: <code>type, charsClass, wordsClass, linesClass</code>, or <code>position</code>.</p>\n","related_configuration_object":"53ab3440dc93284a"}],"returns":{},"details":{"content":"<p>Creates a SplitText object.</p>"}},"0ea9e67b512c6662":{"meta":{"keywords":["js.SplitText.chars"],"title":"chars","description":"An array containing all of the characters&#039; raw DOM elements that were split apart."},"header":{"content":"<p>An array containing all of the characters' raw DOM elements that were split apart.</p>"},"returns":{"type":"Array","content":""},"details":{"content":"<p>An array containing all of the characters' raw DOM elements that were split apart. For example, if the original text was <code>\"my split text\"</code>, the <code>chars</code> array would contain 11 elements.</p>"}},"dadae713b9b4342e":{"meta":{"keywords":["js.SplitText.lines"],"title":"lines","description":"An array containing all of the lines&#039; raw DOM element that were split apart."},"header":{"content":"<p>An array containing all of the lines' raw DOM element that were split apart.</p>"},"returns":{"type":"Array","content":""},"details":{"content":"<p>An array containing all of the lines' raw DOM element that were split apart. For example, if the original text was broken onto 4 lines vertically, the <code>lines</code> array would contain 4 elements.</p>"}},"490bfb425778129e":{"meta":{"keywords":["js.SplitText.selector"],"title":"selector","description":"[static] When you pass a string to a SplitText (as the first parameter), it will feed that to its selector engine internally to find the element(s), and jQuery is used by default if it happens to be loaded."},"header":{"content":"<p>[static] When you pass a string to a SplitText (as the first parameter), it will feed that to its selector engine internally to find the element(s), and jQuery is used by default if it happens to be loaded.</p>"},"returns":{"type":"*","content":""},"details":{"content":"<p>When you pass a string to a SplitText (as the first parameter), it will feed that to its selector engine internally to find the element(s), and jQuery is used by default if it happens to be loaded. If jQuery isn't loaded, SplitText falls back to simply using <code>document.getElementById()</code> and strips out any leading <code>\"#\"</code>, so IDs are always safe to use. You can define a custom selector engine like Sizzle or Zepto or your own like this:<br /></p><pre class='pre-container prettyprint'>//use Zepto<br />SplitText.selector = Zepto;<br />//use Sizzle:<br />SplitText.selector = Sizzle;<br />//or use your own:<br />SplitText.selector = function(text) {<br />   var list = document.querySelector(text),<br />       a = [];<br />    if (list) {<br />        for (var i = 0; i < list.length; i++) {<br />            a.push(list[i]);<br />        }<br />    }<br />    return a;<br />}</pre>"}},"1a7ff1a6dbe597e1":{"meta":{"keywords":["js.SplitText.words"],"title":"words","description":"An array containing all of the words&#039; raw DOM elements that were split apart."},"header":{"content":"<p>An array containing all of the words' raw DOM elements that were split apart.</p>"},"returns":{"type":"Array","content":""},"details":{"content":"<p>An array containing all of the words' raw DOM elements that were split apart. For example, if the original text was \"my split text\", the words array would contain 3 elements.</p>"}},"ccf8d9233484488a":{"meta":{"keywords":["js.SplitText.revert()"],"title":"revert()","description":"Reverts to the original content (the innerHTML before the split)."},"header":{"content":"<p>Reverts to the original content (the innerHTML before the split).</p>"},"parameters":[],"returns":{"type":"","content":""},"details":{"content":"<p>Reverts to the original content (the innerHTML before the split).</p>"}},"a4be9362b50f3a83":{"meta":{"keywords":["js.SplitText.split()"],"title":"split()","description":"[static] Splits the text in the target element(s) according to the provided config properties."},"header":{"content":"<p>[static] Splits the text in the target element(s) according to the provided config properties.</p>"},"parameters":[{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — a configuration object defining any of the following values: <code>type, charsClass, wordsClass, linesClass</code>, or <code>position</code>. (see the constructor description for details)</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Splits the text in the target element(s) according to the provided config properties. Normally you don't need to use this method because it is called in the constructor automatically, but if you want to <b>change</b> the way the text is split after the SplitText instance is created, you can use this method. It will automatically call <code>revert()</code> first if necessary.</p>"}},"aa9969ee39687902":{"meta":{"keywords":["js.Bounce","Easing"],"title":"Bounce","description":"Eases, bouncing either at the beginning (easeIn), the end (easeOut), or both (easeInOut)."},"header":{"content":"<p>Eases, bouncing either at the beginning (easeIn), the end (easeOut), or both (easeInOut). <code>Bounce</code> is a convenience class that congregates the 3 types of Bounce eases (BounceIn, BounceOut, and BounceInOut) as static properties so that they can be referenced using the standard synatax, like <code>Bounce.easeIn</code>, <code>Bounce.easeOut</code>, and <code>Bounce.easeInOut</code>.</p><div class=\"ease-visualizer\" data-ease=\"Bounce\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p>"}},"507a069e7c771a21":{"meta":{"keywords":["js.Bounce.easeIn"],"title":"easeIn","description":"[static] Bounces slightly at first, then to a greater degree over time, accelerating as the ease progresses."},"header":{"content":"<p>[static] Bounces slightly at first, then to a greater degree over time, accelerating as the ease progresses.</p>"},"returns":{"type":"BounceIn","content":""},"details":{"content":"<p>Bounces slightly at first, then to a greater degree over time, accelerating as the ease progresses.</p>"}},"012753da17253cb9":{"meta":{"keywords":["js.Bounce.easeInOut"],"title":"easeInOut","description":"[static] Bounces in increasing degree towards the center of the ease, then eases out, bouncing to the end (decreasing in degree at the end)."},"header":{"content":"<p>[static] Bounces in increasing degree towards the center of the ease, then eases out, bouncing to the end (decreasing in degree at the end).</p>"},"returns":{"type":"BounceInOut","content":""},"details":{"content":"<p>Bounces in increasing degree towards the center of the ease, then eases out, bouncing to the end (decreasing in degree at the end).</p>"}},"dec74fd87bb63197":{"meta":{"keywords":["js.Bounce.easeOut"],"title":"easeOut","description":"[static] Eases out, bouncing at the end."},"header":{"content":"<p>[static] Eases out, bouncing at the end.</p>"},"returns":{"type":"BounceOut","content":""},"details":{"content":"<p>Eases out, bouncing at the end.</p>"}},"b40bb6a3fc06daa2":{"meta":{"keywords":"Pixi, PixiJS, pixi.js, PixiPlugin, plugin, GSAP","description":"PixiPlugin makes it much easier to animate things in PixiJS, a canvas-based rendering library.","imagePath":""},"content":"sample content for FOLDER","header":{"content":"<p>PixiPlugin makes it much easier to animate things in <a href=\"http://www.pixijs.com/\">PixiJS</a>,&nbsp;a popular canvas library that&#39;s <strong>extremely</strong> performant. Without the plugin, it&#39;s a tad cumbersome with certain properties because they&#39;re tucked inside sub-objects in PixiJS&#39;s API, like <code>object.position.x</code>, <code>object.scale.y</code>, <code>object.skew.x</code>, etc. Plus PixiJS defines rotational values in radians instead of degrees which isn&#39;t as intuitive for most developers/designers. PixiPlugin saves you a bunch of headaches:</p><pre class=\"pre-container prettyprint\">//old way (without plugin): \nTweenMax.to(pixiObject.scale, 1, {x:2, y:1.5});\nTweenMax.to(pixiObject.skew, 1, {x:30 * Math.PI / 180});\nTweenMax.to(pixiObject, 1, {rotation:60 * Math.PI / 180});\n\n//new way (with plugin):\nTweenMax.to(pixiObject, 1, {pixi:{scaleX:2, scaleY:1.5, skewX:30, rotation:60}});</pre>\n\n<p>Notice <strong>rotational values are defined in degrees, not radians</strong>.</p>\n\n<h2>Colors</h2>\n\n<p><a href=\"http://pixijs.com\">PixiJS</a> requires that you define color-related values in a format like <code>0xFF0000</code> but with PixiPlugin, you can define them the same way you would in CSS, like <code>&quot;red&quot;</code> | <code>&quot;#F00&quot;</code> | <code>&quot;#FF0000&quot;</code> | <code>&quot;rgb(255,0,0)&quot;</code> | <code>&quot;hsl(0, 100%, 50%)&quot;</code> | <code>0xFF0000</code>. <strong>You can even do relative HSL values!</strong>\n\t<code>&quot;hsl(+=180, +=0%, +=0%)&quot;</code>.</p><pre class=\"pre-container prettyprint\">//named colors\nTweenMax.to(graphics, 2, {pixi:{lineColor:&quot;purple&quot;}});\n//relative hsl() color that reduces brightness but leaves the hue and saturation the same:\nTweenMax.to(graphics, 2, {pixi:{fillColor:&quot;hsl(+=0, +=0%, -=30%)&quot;}});</pre>\n\n<h2>ColorMatrixFilter</h2>\n\n<p>Another big convenience is that PixiPlugin recognizes some special values like <code>saturation</code>, <code>brightness</code>, <code>contrast</code>, <code>hue</code>, and <code>colorize</code> (which all leverage a ColorMatrixFilter under the hood).</p>\n<div><pre class=\"pre-container prettyprint\">var image = new PIXI.Sprite.fromImage(&quot;http://pixijs.github.io/examples/required/assets/panda.png&quot;);\napp.stage.addChild(image);\n\nvar tl = new TimelineMax();\n//colorize fully red. Change colorAmount to 0.5 to make it only halfway colorized, for example:\ntl.to(image, 2, { pixi: { colorize:&quot;red&quot;, colorizeAmount:1 } })\n//change the hue 180 degrees (opposite)\n  .to(image, 2, { pixi: { hue:180 } })\n//completely desaturate\n  .to(image, 2, { pixi: { saturation:0 } })\n//blow out the brightness to double the normal amount\n  .to(image, 2, { pixi: { brightness: 2 } })\n//increase the contrast \n  .to(image, 2, { pixi: { contrast: 1.5 } })\n</pre></div>\n<div class=\"cp_embed_wrapper\">\n\t<iframe id=\"cp_embed_e1f256723ce102d6b9a776fa7f6da9f4\" src=\"http://codepen.io/GreenSock/embed/e1f256723ce102d6b9a776fa7f6da9f4?default-tab=result&embed-version=2&height=750&pen-title=PixiFilter%20(shortcodes%20and%20combineCMF)&slug-hash=e1f256723ce102d6b9a776fa7f6da9f4&theme-id=3984&user=GreenSock\" scrolling=\"no\" frameborder=\"0\" height=\"800\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"PixiFilter (shortcodes and combineCMF)\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"></iframe>\n</div>\n<script async=\"\" src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n<p>Or if you have a custom ColorMatrixFilter, just pass that in as the <code>colorMatrixFilter</code> property and it&#39;ll handle animating between states:</p><pre class=\"pre-container prettyprint\">var filter = new PIXI.filters.ColorMatrixFilter();\nfilter.sepia(); \nTweenMax.to(image, 2, { pixi: { colorMatrixFilter: filter } });</pre>\n\n<h2>BlurFilter</h2>\n\n<p>PixiPlugin recognizes <code>blur</code>, <code>blurX</code>, and <code>blurY</code> properties, so it&#39;s very simple to apply a blur without having to create a new BlurFilter instance, add it to the filters array, and animate its properties separately.</p>\n<div><pre class=\"pre-container prettyprint\">//blur on both the x and y axis to a blur amount of 15\nTweenMax.to(image, 2, { pixi: { blurX: 15, blurY: 15 } });</pre></div>\n\n<h2>Other properties</h2>\n\n<p>PixiPlugin can handle almost any other property as well - there is no pre-determined list of &quot;allowed&quot; properties. PixiPlugin simply improves developer ergonomics for anyone animating in PixiJS. Less code, fewer headaches, and faster production.</p>\n\n<p>\n\t<br>\n</p>\n"},"misc":{"version":"1.20.0"}},"43cdb51b9b63b1b9":{"meta":{"keywords":"","description":"","imagePath":""},"content":"sample content for ELEMENT","header":{"content":""},"parameters":[{"name":"color","data_type":"string | number","description":"The color value the should be parsed which could be a string like #9F0 or rgb(255,102,51) or rgba(255,0,0,0.5) or it could be a number like 0xFF00CC or even a named color like red, blue, purple, etc.","related_configuration_object":""},{"name":"format","data_type":"string","description":"By default, an rgb-based value will be returned, but if the format parameter is set to \"hsl\", an hsl() or hsla() value will be returned instead. Or if format is \"number\", then a numeric value will be returned, like 0xFF0000.","related_configuration_object":""}],"returns":{"type":"array | number","content":"By default, an array containing red, green, and blue (and optionally alpha) in that order, or if the format parameter was \"hsl\", the array will contain hue, saturation and lightness (and optionally alpha) in that order. Or if format is defined as \"number\", it'll return a number like 0xFF0000. "},"details":{"content":"Parses a color (like #9F0, #FF9900, rgb(255,51,153) or hsl(108, 50%, 10%))&nbsp;into an array with 3 elements (red, green, and blue, or if format parameter is &quot;hsl&quot;, it will populate the array with hue, saturation, and lightness). Or if format parameter is &quot;number&quot;, it&#39;ll return a numeric value like 0xFF0000 instead of an array. If a relative value is found in an hsl() or hsla() string, it will preserve those relative prefixes and all the values in the array will be strings instead of numbers (in all other cases the array will be populated with numbers). This is a useful method for converting color-related values into data that&#39;s more useful. PixiJS, for example, requires numeric values for most of its color-related values so it would be cumbersome to use &quot;purple&quot; or &quot;#F00&quot;, for example, without this method.&nbsp;"},"misc":{"version":"1.20.0"}},"6590258193b0bcbc":{"name":"align","returns":{"type":"String","content":"a value of <code>align:\"relative\"</code> effectively moves the path to the SVG element, giving each point a \"+=\" prefix (e.g. <code>{x:\"+=100\", y:\"+=200\"}</code>). To have the opposite effect and adjust the values so that a particular element gets repositioned onto the path, simply pass in an SVG DOM element or string selector (e.g. <code>align:\"#mySVGElement\"</code>).","contentShort":""}},"1e30866acfaa806d":{"name":"offsetX","returns":{"type":"Number","content":"number to offset all of the points along the x axis. So if normally one of the points is <code>{x:0, y:100}</code> and you set <code>offsetX:20</code>, it would become <code>{x:20, y:100}</code> (and all of the other points would also be affected similarly, adding 20 to the x value)","contentShort":""}},"146a504063bb6ab7":{"name":"offsetY","returns":{"type":"Number","content":"number to offset all of the points along the y axis. So if normally one of the points is <code>{x:0, y:100}</code> and you set <code>offsetY:30</code>, it would become <code>{x:0, y:130}</code> (and all of the other points would also be affected similarly, adding 30 to the y value)","contentShort":""}},"0e3c0b29fc38903c":{"name":"matrix","returns":{"type":"Array","content":"a 2D matrix array (e.g. <code>matrix:[1.5,0,0,1.5,120,-30]</code>) that should be applied to all coordinates in the path. This can be helpful if you want to scale, rotate, skew and/or translate the path advanced ways.","contentShort":""}},"bac828fc726d4d82":{"meta":{"keywords":["js.RoundPropsPlugin","Plugins"],"title":"RoundPropsPlugin","description":"Rounds the tweened values to the nearest integer."},"header":{"content":"<p><span class=\"inTweenMax\">Included in TweenMax: <span class=\"yes\">YES</span></span></p><p>RoundProps ensures that the property values always get rounded to the nearest integer during the tween. Just pass in a comma-delimited list of property names that should be rounded. For example, if you're tweening the x, y, and opacity properties of \"#someID\" element and you want to round the x and y values (not opacity) every time the tween is rendered, you'd do:</p><pre class='pre-container prettyprint'>TweenMax.to(mc, 2, {x:300, y:200, opacity:0.5, roundProps:\"x,y\"});</pre><p>Note: as of <a href=\"/1-19-0/\">GSAP 1.19.0</a>, RoundPropsPlugin leverages the same plumbing internally as <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:ModifiersPlugin\"><span data-link-id=\"82b95bb606c34e2f\"></span></span> (roundProps is just a modifier that applies <code>Math.round()</code>), thus you cannot do <strong>BOTH</strong> a modifier <strong>and</strong> roundProps on the same property in the same tween. It's easy to get that functionality, though, by just doing <code>Math.round()</code> inside your modifier function.</p>"}},"be137a434f5b4e08":{"meta":{"keywords":["js.CSSPlugin","Plugins"],"title":"CSSPlugin","description":"CSSPlugin enables animation of a DOM element&#039;s CSS properties like &quot;top&quot;, &quot;left&quot;, &quot;backgroundColor&quot;, as well as 2D and 3D transforms and many others."},"header":{"content":"<p><span class=\"inTweenMax\">Included in TweenMax: <span class=\"yes\">YES</span></span>\n</p>\n\n<p>With the help of the CSSPlugin,&nbsp;<strong>GSAP can animate almost any css-related property</strong>&nbsp;of DOM elements including the obvious things like width, height, margin, padding, top, left, and more plus more interesting things like transforms (rotation, scaleX, scaleY, skewX, skewY, x, y, rotationX, and rotationY), colors, opacity, and lots more.</p>\n\n<p><em><strong>Note:</strong>&nbsp;a common mistake is to forget to use camel case representations of the properties, so instead of &quot;font-size&quot;, you&#39;d use &quot;fontSize&quot;. &quot;background-color&quot; should be &quot;backgroundColor&quot;.</em></p>\n\n<p>You can even define properties that are not generally tweenable and GSAP will apply the property for you (like <code>position:&quot;absolute&quot;</code> or <code>borderStyle:&quot;solid&quot;</code>). These non-tweenable properties will be set at the beginning of the tween (except&nbsp;<code>display:&quot;none&quot;</code>&nbsp;which will be applied at the end of the tween for obvious reasons).</p>\n\n<p>It is typically a good idea to define a unit of measurement (like &quot;24px&quot; instead of &quot;24&quot; or &quot;50%&quot; rather than &quot;50&quot;) but the default in most cases is pixels (px), so you can omit the unit if you prefer. And even if the unit of measurement doesn&#39;t match the current one, GSAP will attempt to convert them for you. So, for example, you could tween a width from &quot;50%&quot; to &quot;200px&quot;.</p>\n\n<p>CSSPlugin can animate complex values like&nbsp;<code>boxShadow:&quot;0px 0px 20px 20px red&quot;</code>&nbsp;and&nbsp;<code>borderRadius:&quot;50% 50%&quot;</code>&nbsp;and&nbsp;<code>border:&quot;5px solid rgb(0,255,0)&quot;</code>. When necessary, it attempts to figure out if the property needs a&nbsp;<strong>vendor prefix</strong>&nbsp;and applies it accordingly. There may be a very small subset of complex or bleeding-edge css properties that CSSPlugin can&#39;t handle yet, but that&#39;s rare - it handles virtually all css properties you throw at it.</p>\n\n<p>In addition to almost all of the standard css properties, CSSPlugin recognizes some special ones that can be quite convenient:</p>\n\n<h2 id=\"2DTransforms\">2D Transforms</h2>\n\n<p><strong>rotation</strong>,&nbsp;<strong>scaleX</strong>,&nbsp;<strong>scaleY</strong>,&nbsp;<strong>scale</strong>,&nbsp;<strong>skewX</strong>,&nbsp;<strong>skewY</strong>,&nbsp;<strong>x</strong>,&nbsp;<strong>y</strong>, <strong>xPercent</strong> and <strong>yPercent</strong>&nbsp;- one of the most convenient things about the CSSPlugin is that it greatly simplifies transforms in the various browsers&nbsp;<strong>including IE back through version 6!</strong>&nbsp;No need to mess with various browser prefixes or funky matrix filters in IE. <strong>GSAP exclusive:</strong> they even work on SVG elements! You can animate 2D transform properties intuitively:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">//much simpler\nTweenLite.to(element, 2, {rotation:30, scaleX:0.8});</pre>\n\n<p>\n\t<br>By default, <code>rotation</code>, <code>skewX</code>, and <code>skewY</code> use degrees but you can use radians if you prefer. Simply append one of the standard suffixes (&quot;rad&quot; or &quot;deg&quot;) like this:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">//use &quot;deg&quot; or &quot;rad&quot;\nTweenLite.to(element, 2, {rotation:&quot;1.25rad&quot;, skewX:&quot;30deg&quot;});</pre>\n\n<p>\n\t<br>To be clear, this is like setting the element&#39;s css to:&nbsp;<code>transform:rotate(1.25rad) skewX(30deg)</code>&nbsp;along with all the other browser prefix values and the necessary IE filter which would be much more verbose.</p>\n\n<h3>Notes about transforms</h3>\n\n<ol>\n\t<li>To do percentage-based translation use <code>xPercent</code> and <code>yPercent</code> (added in version 1.13.0) instead of <code>x</code> or <code>y</code> which are typically px-based. Why does GSAP have special properties just for percentage-based translation? Because it allows you to <strong><em>COMBINE</em></strong> them to accomplish useful tasks, like perhaps you want to build your own &quot;world&quot; where everything has its origin in the very center of the world and then you move things in a px-based fashion from there - you could set <code>xPercent</code> and <code>yPercent</code> to <code>-50</code> and <code>position:&quot;absolute&quot;</code> so that everything starts with their centers in the same spot, and then use <code>x</code> and <code>y</code> to move them from there. If you set <code>x</code> or <code>y</code> to a percent-based value like <code>50%&quot;</code>, GSAP will recognize that and funnel that value to <code>xPercent</code> or <code>yPercent</code> appropriately as a convenience. Our <a href=\"http://greensock.com/gsap-1-13-1\">1.13.1 Release Notes</a> have some great demos showing how xPercent and yPercent can help with responsive layouts.</li>\n\t<li>You can use <code>scale</code> as a shortcut to control both the <code>scaleX</code> and <code>scaleY</code> properties identically.</li>\n\t<li>You can define relative values, like&nbsp;<code>rotation:&quot;+=30&quot;</code></li>\n\t<li>The order in which you declare the transform properties makes no difference.</li>\n\t<li>GSAP has nothing to do with the rendering quality of the element in the browser. Some browsers seem to render transformed elements beautifully while others don&#39;t handle anti-aliasing as well.</li>\n\t<li>IE6, IE7, and IE8 transforms don&#39;t apply to child elements (that&#39;s a browser limitation).</li>\n\t<li>By default, CSSPlugin uses a <code>skewType</code> of <code>&quot;compensated&quot;</code> which affects the <code>skewX</code>/<code>skewY</code> values in a slightly different (arguably more intuitive) way because visually the object isn&#39;t stretched. For example, if you set&nbsp;<code>transform:skewX(85deg)</code>&nbsp;in the browser via CSS, the object would become EXTREMELY long (stretched) whereas with <code>skewType:&quot;compensated&quot;</code>, it would look more like it sheared in 3D space. This was a purposeful design decision because this behavior is more likely what animators desire. If you prefer the uncompensated behavior, you can set <code>CSSPlugin.defaultSkewType = &quot;simple&quot;</code> which affects the default for all skew tweens, or for an individual tween you can set the special property <code>skewType:&quot;simple&quot;</code>.</li>\n\t<li>Percentage-based x/y translations also work on SVG elements. Caveat: it&#39;s calculated and then baked into the matrix(), so it&#39;s not &quot;live&quot; meaning if you later change the width/height of the SVG element, it doesn&#39;t alter the translation but you could certainly just re-apply the translation if you need to.</li>\n\t<li>For more info on how CSSPlugin handles transforms on SVG elements be sure to read our <a href=\"//greensock.com/svg-tips\">SVG Tips</a> article.</li>\n</ol>\n\n<h2 id=\"3DTransforms\">3D Transforms</h2>\n\n<p>In addition to all of the regular 2D properties (<code>x</code>, <code>y</code>, <code>scaleX</code>, <code>scaleY</code>, <code>scale</code>, <code>rotation</code>, <code>skewX</code>, <code>skewY</code>, <code>xPercent</code>, and <code>yPercent</code>) that work in all browsers, you can animate 3D properties too like&nbsp;<code>rotationX</code>,&nbsp;<code>rotationY</code>,&nbsp;<code>rotationZ</code>&nbsp;(identical to regular <code>rotation</code>),&nbsp;<code>z</code>,&nbsp;<code>perspective</code>, and&nbsp;<code>transformPerspective</code>&nbsp;in all modern browsers (see <a href=\"http://caniuse.com/transforms3d\" target=\"external\">http://caniuse.com/transforms3d</a>&nbsp;for details about browser support for 3D transforms). To see 3D transforms demonstrated visually in GSAP, see&nbsp;<a href=\"//greensock.com/css3/\" target=\"external\">http://greensock.com/css3/</a>. Again, there is no need to use browser prefixes; CSSPlugin handles all of that for you under the hood. You can animate 3D transform properties and 2D properties together intuitively:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">TweenLite.to(element, 2, {rotationX:45, scaleX:0.8, z:-300});</pre>\n\n<p>\n\t<br>To get your elements to have a true 3D visual perspective applied, you must either set the&nbsp;<code>perspective</code>&nbsp;property of the parent element or set the special <code>transformPerspective</code> of the element itself (common values range from around 200 to 1000, the lower the number the stronger the perspective distortion). The <code>transformPerspective</code> is like adding a <code>perspective()</code>&nbsp;directly inside the css &quot;transform&quot; style, like:&nbsp;<code>transform: perspective(500px) rotateX(45deg)</code>&nbsp;which only applies to that specific element whereas if you want to a group of elements share a common perspective (the same vanishing point), you should set the regular <code>perspective</code> property on the parent/container of those elements. For more information about perspective, see&nbsp;<a href=\"http://desandro.github.com/3dtransforms/docs/perspective.html\" target=\"external\">this article</a>.\n\t<br>\n</p><pre class=\"pre-container prettyprint\">//apply a perspective to the PARENT element (the container) to make the perspective apply to all child elements (typically best)\nTweenLite.set(container, {perspective:500});\n \n//or set a default perspective that will be applied to every individual element that you tween in 3D:\nCSSPlugin.defaultTransformPerspective = 500;\n \n//or apply perspective to a single element using &quot;transformPerspective&quot;\nTweenLite.set(element, {transformPerspective:500});</pre>\n\n<p>\n\t<br>In regular CSS, the order that you list the transforms matters but GSAP always applies them in the same order for consistency: translation (<code>x</code>, <code>y</code>, <code>z</code>), then <code>scale</code>, then <code>rotationX</code>, then <code>rotationY</code>, then <code>skew</code>, then <code>rotation</code> (same as <code>rotationZ</code>) although in terms of constructing the matrix, the math is technically done in the reverse of that order. If you want to rotate the element around a point in 3D space other than its center, use the&nbsp;<code>transformOrigin</code>&nbsp;property (see below).\n\t<br>\n</p><pre class=\"pre-container prettyprint\">//sample css:\n.myClass {\n    transform: translate3d(10px, 0px, -200px) rotateY(45deg) scale(1.5, 1.5);\n}\n \n//corresponding GSAP transform (tweened over 2 seconds):\nTweenLite.to(element, 2, {scale:1.5, rotationY:45, x:10, y:0, z:-200});\n \n//sample css that uses a perspective():\n.myClass {\n    transform: perspective(500px) translateY(50px) rotate(120deg)\n}\n \n//corresponding GSAP transform (set, not tweened):\nTweenLite.set(element, {transformPerspective:500, rotation:120, y:50});</pre>\n\n<h3>Notes about 3D transforms</h3>\n\n<ol>\n\t<li>In browsers that don&#39;t support 3D transforms, they&#39;ll be ignored. For example, <code>rotationX</code> may not work, but rotation would. See&nbsp;<a href=\"http://caniuse.com/transforms3d\" target=\"external\">http://caniuse.com/transforms3d</a>&nbsp;for a chart of which browser versions support 3D transforms.</li>\n\t<li>All transforms are cached in a <code>_gsTransform</code> object attached to the element, so you can tween individual properties without worrying that they&#39;ll be lost. You don&#39;t need to define all of the transform properties on every tween - only the ones you want to animate. You can read the transform-related values anytime, like <code>element._gsTransform.scaleX</code>. If you&#39;d like to clear those values (including the transform applied to the inline style of the element), you can do&nbsp;<code>TweenLite.set(element, {clearProps:&quot;transform&quot;});</code>. If you&#39;d like to force GSAP to re-parse the transform data from the css (rather than use the data it had recorded from previous tweens), you can pass&nbsp;<code>parseTransform:true</code>&nbsp;into the config object.</li>\n\t<li>GSAP has nothing to do with the rendering quality of the element in the browser. Some browsers seem to render transformed elements beautifully while others don&#39;t handle anti-aliasing as well.</li>\n\t<li>To learn more about css 3D transforms, see&nbsp;<a href=\"http://coding.smashingmagazine.com/2012/01/06/adventures-in-the-third-dimension-css-3-d-transforms/\" target=\"external\">this article</a></li>\n\t<li>IE10 supports 3D transforms, but it does&nbsp;<strong>not</strong>&nbsp;support transformStyle of &quot;preserve-3d&quot; (see&nbsp;<a href=\"http://msdn.microsoft.com/en-us/library/ie/hh673529(v=vs.85).aspx#the_ms_transform_style_property\" target=\"external\">Microsoft&#39;s site</a>&nbsp;for details).</li>\n</ol>\n\n<h2 id=\"force3D\">force3D</h2>\n\n<p>As of 1.15.0, <code>force3D</code> defaults to <code>&quot;auto&quot;</code> mode which means transforms are automatically optimized for speed by using matrix3d() instead of matrix(), or translate3d() instead of translate(). This typically results in the browser putting that element onto its own compositor layer, making animation updates more efficient. In <code>&quot;auto&quot;</code> mode, GSAP will automatically switch back to 2D when the tween is done (if 3D isn&#39;t necessary) to free up more GPU memory. If you&#39;d prefer to keep it in 3D mode, you can set <code>force3D:true</code>. Or, to stay in 2D mode whenever possible, set <code>force3D:false</code>. See&nbsp;<a href=\"//css-tricks.com/myth-busting-css-animations-vs-javascript/\">http://css-tricks.com/myth-busting-css-animations-vs-javascript/</a>&nbsp;for more details about performance.</p>\n<a name=\"transformOrigin\"></a>\n\n<h2 id=\"transformOrigin\">transformOrigin</h2>\n\n<p>Sets the origin around which all transforms (2D and/or 3D) occur. By default, it is in the center of the element (<code>&quot;50% 50%&quot;</code>). You can define the values using the keywords <code>&quot;top&quot;</code>, <code>&quot;left&quot;</code>, <code>&quot;right&quot;</code>, or <code>&quot;bottom&quot;</code> or you can use percentages (bottom right corner would be <code>&quot;100% 100%&quot;</code>) or pixels. If, for example, you want an object to spin around its top left corner you can do this:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">//spins around the element&#39;s top left corner\nTweenLite.to(element, 2, {rotation:360, transformOrigin:&quot;left top&quot;});</pre>\n\n<p>\n\t<br>The first value in the quotes corresponds to the x-axis and the second corresponds to the y-axis, so to make the object transform around exactly 50px in from its left edge and 20px from its top edge, you could do:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">//spins/scales around a point offset from the top left by 50px, 20px\nTweenLite.to(element, 2, {rotation:270, scale:0.5, transformOrigin:&quot;50px 20px&quot;});</pre>\n\n<p>\n\t<br><strong>GSAP exclusive</strong>: this even works with SVG elements!</p>\n\n<p>You can define a transformOrigin as a&nbsp;<strong>3D value</strong>&nbsp;by adding a 3rd number, like to rotate around the y-axis from a point that is offset 400px in the distance, you could do:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">//rotates around a point that is 400px back in 3D space, creating an interesting effect:\nTweenLite.to(element, 2, {rotationY:360, transformOrigin:&quot;50% 50% -400px&quot;});</pre>\n\n<h3>Notes about transformOrigin:</h3>\n\n<ol>\n\t<li>CSSPlugin automatically works around a bug in Safari that causes 3D transformOrigin values to incorrectly act as though they affect translateZ(). To work around the bug, when you perform a 3D tween that has a transformOrigin with a non-zero z component (like&nbsp;<code>transformOrigin:&quot;50% 50% -100px&quot;</code>), CSSPlugin will record the z-component (-100px in this example) internally and remove it from the transformOrigin that gets applied to the css. Everything will render correctly because the z-axis origin offset is calculated internally and applied to the matrix3d(). Just keep in mind that if you check the css value of the <code>transformOrigin</code> after the tween has started, it won&#39;t have the z component but that&#39;s by design.</li>\n\t<li><code>transformOrigin</code> even works in Internet Explorer back to version 6 in 2D, although it is recommended that you set the element&#39;s <code>position</code> to <code>&quot;absolute&quot;</code> to avoid clipping.</li>\n\t<li>GSAP does make transformOrigin work on SVG elements consistently across browsers (<strong>GSAP exclusive</strong>) but keep in mind that SVG elements don&#39;t officially support 3D transforms according to the spec.</li>\n</ol>\n\n<h2 id=\"svgOrigin\">svgOrigin</h2>\n\n<p>[Only for SVG elements] Works exactly like <code>transformOrigin</code> but it uses the SVG&#39;s global coordinate space instead of the element&#39;s local coordinate space. This can be very useful if, for example, you want to make a bunch of SVG elements rotate around a common point. You can <em>either</em> define an <code>svgOrigin</code>\n\t<em>or</em> a <code>transformOrigin</code>, not both (for obvious reasons). So you can do <code>TweenLite.to(svgElement, 1, {rotation:270, svgOrigin:&quot;250 100&quot;})</code> if you&#39;d like to rotate svgElement as though its origin is at x:250, y:100 in the SVG canvas&#39;s global coordinates. Units are not required. It also records the value in a <code>data-svg-origin</code> attribute so that it can be parsed back in. <code>svgOrigin</code> doesn&#39;t accommodate percentage-based values. <a href=\"http://codepen.io/GreenSock/pen/06716224865c2c536cee5b4222d771ee\">See an example here</a>.</p>\n\n<h2 id=\"smoothOrigin\">smoothOrigin (for SVG only)</h2>\n\n<p>When changing the transformOrigin (or svgOrigin) of an SVG element, CSSPlugin will now automatically record/apply some offsets to ensure that the element doesn&#39;t &quot;jump&quot;. You can disable this by setting CSSPlugin.defaultSmoothOrigin = false, or you can control it on a per-tween basis using smoothOrigin:true | false. Explanation: The way transforms and transform-origins work in the browser (and according to the official spec), changing the origin causes the element jump in a jarring way. For example, if you rotate 180 degrees when the transform-origin is in the element&#39;s top left corner, it ends up at a very different position than if you applied the same rotation around its bottom right corner. Since GSAP is focused on solving real-world problems for animators (most of whom prefer to smoothly alter the transformOrigin), the new smoothOrigin feature in GSAP solves this issue. This also means that if you create SVG artwork in an authoring program like Adobe Flash where it may not be easy/obvious to control where the element&#39;s origin is, things will &quot;just work&quot; when you define a transformOrigin via GSAP. Currently, this feature only applies to SVG elements, as that is where it is more commonly a pain-point, and we&#39;re eager to see how GSAP users employ the feature and share their feedback/suggestions before we consider adding it to &quot;regular&quot; DOM elements.</p>\n\n<p>Video explaining smoothOrigin</p>\n\n<p><span class=\"fr-video fr-draggable\" contenteditable=\"false\"><iframe src=\"http://www.youtube.com/embed/GsniGDilKtI?rel=0&feature=player_detailpage\" width=\"830\" height=\"460\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></span></p>\n\n<h2 id=\"directionalRotation\">directionalRotation</h2>\n\n<p>Tweens rotation in a particular direction which can be either&nbsp;<strong>clockwise</strong>&nbsp;(<code>&quot;_cw&quot;</code>&nbsp;suffix),&nbsp;<strong>counter-clockwise</strong>&nbsp;(<code>&quot;_ccw&quot;</code>&nbsp;suffix), or in the shortest direction (<code>&quot;_short&quot;</code>&nbsp;suffix) in which case the plugin chooses the direction for you based on the shortest path. For example, if the element&#39;s rotation is currently 170 degrees and you want to tween it to -170 degrees, a normal rotation tween would travel a total of 340 degrees in the counter-clockwise direction, but if you use the <code>_short</code> suffix, it would travel 20 degrees in the clockwise direction instead. Example:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">TweenLite.to(element, 2, {rotation:&quot;-170_short&quot;});\n \n//or even use it on 3D rotations and use relative prefixes:\nTweenLite.to(element, 2, {rotation:&quot;-170_short&quot;, rotationX:&quot;-=30_cw&quot;, rotationY:&quot;1.5rad_ccw&quot;});</pre>\n\n<p>\n\t<br>Notice that the value is in quotes, thus a string with a particular suffix indicating the direction (<code>_cw</code>, <code>_ccw</code>, or <code>_short</code>). You can also use the&nbsp;<code>&quot;+=&quot;</code>&nbsp;or&nbsp;<code>&quot;-=&quot;</code>&nbsp;prefix to indicate relative values. Directional rotation suffixes are supported in all rotational properties (<code>rotation</code>, <code>rotationX</code>, and <code>rotationY</code>); you don&#39;t need to use <code>directionalRotation</code> as the property name. There is a <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:DirectionalRotationPlugin\"><span data-link-id=\"0a6e62faf0a53059\"></span></span> that you can use to animate objects that aren&#39;t DOM elements, but there&#39;s no need to load that plugin if you&#39;re just animating css-related properties with CSSPlugin because it has <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:DirectionalRotationPlugin\"><span data-link-id=\"0a6e62faf0a53059\"></span></span>&#39;s capabilities baked-in.</p>\n\n<p>Check out an&nbsp;<a href=\"http://codepen.io/GreenSock/pen/jiEyG\" target=\"\">interactive example here</a>.</p>\n\n<p><em>Prior to version 1.9.0, <code>directionalRotation</code> was called <code>shortRotation</code> and it only handled going in the shortest direction. The new <code>directionalRotation</code> functionality is much more flexible and easy to use (just slap a suffix on the regular property).</em></p>\n\n<h2 id=\"autoAlpha\">autoAlpha</h2>\n\n<p>Identical to <code>opacity</code> except that when the value hits <code>0</code> the <code>visibility</code> property will be set to <code>&quot;hidden&quot;</code> in order to improve browser rendering performance and prevent clicks/interactivity on the target. When the value is anything other than 0, <code>visibility</code> will be set to <code>&quot;inherit&quot;</code>. It is not set to <code>&quot;visible&quot;</code> in order to honor inheritance (imagine the parent element is hidden - setting the child to visible explicitly would cause it to appear when that&#39;s probably not what was intended). And for convenience, if the element&#39;s <code>visibility</code> is initially set to <code>&quot;hidden&quot;</code> and <code>opacity</code> is <code>1</code>, it will assume opacity should also start at <code>0</code>. This makes it simple to start things out on your page as invisible (set your css <code>visibility:hidden</code>) and then fade them in whenever you want.\n\t<br>\n</p><pre class=\"pre-container prettyprint\">//fade out and set visibility:hidden\nTweenLite.to(element, 2, {autoAlpha:0});\n \n//in 2 seconds, fade back in with visibility:visible\nTweenLite.to(element, 2, {autoAlpha:1, delay:2});</pre>\n\n<h2 id=\"className\">className</h2>\n\n<p>Allows you to morph between classes on an element. For example, let&#39;s say <code>myElement</code> has a class of <code>&quot;class1&quot;</code> currently and you want to change to <code>&quot;class2&quot;</code> and animate the differences, you could do this:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">TweenLite.to(myElement, 1, {className:&quot;class2&quot;});</pre>\n\n<p>\n\t<br>And if you want to ADD the class to the existing one, you can simply use the <code>&quot;+=&quot;</code> prefix. To remove a class, use the <code>&quot;-=&quot;</code> prefix like this:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">TweenLite.to(myElement, 1, {className:&quot;+=class2&quot;});</pre>\n\n<p>\n\t<br><em>Note: there are some css-related properties that don&#39;t tween like IE filters, but almost every css property is recognized and animates great. Also, there is a slight speed penalty when a <code>className</code> tween initializes because the engine needs to loop through all of the css properties to see which ones are different.</em></p>\n\n<h2 id=\"bezier\">bezier</h2>\n\n<p>Animate virtually any property (or properties) along a Bezier (curved) path which you define as an array of points/values that can be interpreted in several different ways, like as points through which a Bezier should be drawn, or cubic or quadratic Bezier control and anchor points, etc. See the&nbsp;<span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:BezierPlugin\"><span data-link-id=\"43077a47946db3db\"></span></span>&#39;s documentation&nbsp;for details and an explanation of all the features available. Don&#39;t forget to load the <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:BezierPlugin\"><span data-link-id=\"43077a47946db3db\"></span></span> JavaScript file in order to utilize its features from within CSSPlugin. Here is an example of a bezier tween that makes an element curve through 3 points using <code>x</code> and <code>y</code> transform properties and also automatically rotates it along the path as it goes:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">TweenLite.to(element, 5, {bezier:{curviness:1.25, values:[{x:100, y:200}, {x:250, y:400}, {x:500, y:50}], autoRotate:true}, ease:Power1.easeOut});</pre>\n\n<h2 id=\"CSSvariables\">CSS variables</h2>\n\n<p>As of version 1.20.0, GSAP can animate CSS variables in browsers that support them.</p>\n\n<p><span class=\"fr-video fr-draggable\" contenteditable=\"false\"><iframe src=\"http://www.youtube.com/embed/chL0Pb7Yesw?rel=0&feature=player_detailpage\" width=\"838\" height=\"471\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></span></p>\n<div class=\"cp_embed_wrapper\">\n\t<iframe id=\"cp_embed_e1a338a481c001eb5f8654c8d155170f\" src=\"http://codepen.io/GreenSock/embed/e1a338a481c001eb5f8654c8d155170f?default-tab=js%2Cresult&embed-version=2&height=300&pen-title=CSS%20Variables%20Demo&slug-hash=e1a338a481c001eb5f8654c8d155170f&theme-id=3984&user=GreenSock\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CSS Variables Demo\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"></iframe>\n</div>\n<script async=\"\" src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"clearProps\">clearProps</h2>\n\n<p>A comma-delimited list of property names that you want to clear from the element&#39;s &quot;style&quot; property when the tween completes (or use <code>&quot;all&quot;</code> to clear all properties). This can be useful if, for example, you have a class (or some other selector) that should apply certain styles to an element when the tween is over that would otherwise get overridden by the element.style-specific data that was applied during the tween. Typically you do&nbsp;<strong>not</strong>&nbsp;need to include vendor prefixes.\n\t<br>\n</p><pre class=\"pre-container prettyprint\">//tweens 3 properties and then clears only &quot;left&quot; and &quot;transform&quot; (because &quot;scale&quot; affects the &quot;transform&quot; css property. CSSPlugin automatically applies the vendor prefix if necessary too)\n TweenLite.from(element, 5, {scale:0, left:200, backgroundColor:&quot;red&quot;, clearProps:&quot;scale,left&quot;});</pre>\n\n<h2 id=\"autoRound\">autoRound</h2>\n\n<p>By default, CSSPlugin will round pixel values and zIndex to the closest integer during the tween (the inbetween values) because it improves browser performance, but if you&#39;d rather disable that behavior, pass&nbsp;<code>autoRound:false</code>&nbsp;in the css object. You can still use the <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:RoundPropsPlugin\"><span data-link-id=\"bac828fc726d4d82\"></span></span> to manually define properties that you want rounded.</p>\n\n<p>If you need to animate numeric attributes (rather than css-related properties), you can use the&nbsp;<span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:AttrPlugin\"><span data-link-id=\"27db5e20e8bbb9ae\"></span></span>. And to replace the text in a DOM element, use the&nbsp;<span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TextPlugin\"><span data-link-id=\"7bc5a8cd3cf25890\"></span></span>.</p>\n\n<h3>Note about css:{} wrapper</h3>\n\n<p>Originally, css-specific properties needed to be wrapped in their own object and passed in like&nbsp;<code>TweenLite.to(element, 1, {css:{left:&quot;100px&quot;, top:&quot;50px&quot;}});</code>&nbsp;so that the engine could determine the properties that should be funneled to CSSPlugin, but because animating DOM elements in the browser is so common, TweenLite and TweenMax (as of version 1.8.0) automatically check to see if the target is a DOM element and if so, it creates that css object for you and shifts any properties that aren&#39;t defined directly on the element or reserved (like&nbsp;<code>onComplete</code>, <code>ease</code>, <code>delay</code>, etc. or plugin keywords like&nbsp;<code>scrollTo</code>, <code>easel</code>, etc.) into that css object when the tween renders for the first time. In the code examples below, we&#39;ll use the more concise style that omits the&nbsp;<code>css:{}</code>&nbsp;object but be aware that either style is acceptable.\n\t<br>\n</p><pre class=\"pre-container prettyprint\">//as of 1.8.0 the following lines produce identical results:\nTweenLite.to(element, 1, {top:&quot;20px&quot;, backgroundColor:&quot;#FF0000&quot;, ease:Power2.easeOut});\n//longer, less convenient syntax:\nTweenLite.to(element, 1, {css:{top:&quot;20px&quot;, backgroundColor:&quot;#FF0000&quot;}, ease:Power2.easeOut});</pre>\n"}},"c928fdd09fd62a63":{"returns":{"type":"Ease | Boolean","contentShort":"Specify an ease for the yoyo (backwards) portion of a repeating TweenMax animation.","content":"You can set <code>yoyoEase</code> to a specific ease like <code>Power2.easeOut</code> or to simply flip the existing ease, use the shortcut <code>yoyoEase:true</code>. Note: TweenMax is smart enough to automatically set <code>yoyo:true</code> if you define any yoyoEase, so there's less code for you to write. (Added in GSAP 1.20.0)"}},"b32d8d5efb278d20":{"returns":{"type":"Array","contentShort":"An Array of parameters to pass the onReverseComplete function.","content":"An Array of parameters to pass the onReverseComplete function. For example, <code>TweenMax.to(mc, 1, {x:100, onReverseComplete:myFunction, onReverseCompleteParams:[mc, \"param2\"]});</code> To self-reference the tween instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onReverseCompleteParams:[\"{self}\", \"param2\"]</code>"}},"f5404cc3146549c8":{"returns":{"type":"Array","contentShort":"An Array of parameters to pass the onStart function.","content":"An Array of parameters to pass the onStart function. For example, <code>TweenMax.to(mc, 1, {x:100, onStart:myFunction, onStartParams:[mc, \"param2\"]});</code> To self-reference the tween instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onStartParams:[\"{self}\", \"param2\"]</code>"}},"e4bce09225a62234":{"returns":{"type":"Array","contentShort":"An Array of parameters to pass the onUpdate function.","content":"An Array of parameters to pass the onUpdate function. For example, <code>TweenMax.to(mc, 1, {x:100, onUpdate:myFunction, onUpdateParams:[mc, \"param2\"]});</code> To self-reference the tween instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onUpdateParams:[\"{self}\", \"param2\"]</code>"}},"73ed096fbb4733b1":{"name":"wiggles","returns":{"type":"Integer","content":"Number of oscillations back and forth. Default: 10","contentShort":""}},"e62bf18e77fe7fef":{"name":"type","returns":{"type":"String","content":"\"easeOut\" | \"easeInOut\" | \"anticipate\" | \"uniform\" | \"random\" - the type (or style) of wiggle. Default: \"easeOut\"","contentShort":""}},"6c7082f81905820b":{"name":"amplitudeEase","returns":{"type":"Ease","content":"Provides advanced control over the shape of the amplitude (y-axis in the ease visualizer). You define an ease that controls the amplitude's progress from 1 toward 0 over the course of the tween. Defining an amplitudeEase (or timingEase) will override the \"type\" (think of the 5 \"types\" as convenient presets for amplitudeEase and timingEase combinations).","contentShort":""}},"1b58719563b939ae":{"name":"timingEase","returns":{"type":"Ease","content":"Provides advanced control over how the waves are plotted over time (x-axis in the ease visualizer). Defining an timingEase (or amplitudeEase) will override the \"type\" (think of the 5 \"types\" as convenient presets for amplitudeEase and timingEase combinations).","contentShort":""}},"c2327a2ee1c89b0c":{"meta":{"keywords":["js.Strong","Easing"],"title":"Strong","description":"Provides an easeIn, easeOut, and easeInOut with a power (or strength) of 4 which is identical to the Power4 ease. The more power, the more exaggerated the easing effect. Using a numeric approach like Power4 instead of Strong makes experimenting easier and the code reads more intuitively."},"header":{"content":"<p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 4 which is identical to the <code>Power4</code> ease. The more power, the more exaggerated the easing effect. Using a numeric approach like Power4 instead of Strong makes experimenting easier and the code reads more intuitively.</p><p>This is one of the eases that is natively accelerated in TweenLite and TweenMax. All of the \"Power\" eases and their counterparts (Linear (0), Quad (1), Cubic (2), Quart (3), Quint (4), and Strong (4)) are accelerated.</p><div class=\"ease-visualizer\" data-ease=\"Power4\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example usage:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Strong.easeOut});</pre>"}},"7e1eddf0750f462e":{"meta":{"keywords":["js.Strong.easeIn"],"title":"easeIn","description":"[static] Eases in with a power of 4."},"header":{"content":"<p>[static] Eases in with a power of 4.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in with a power of 4.</p>"}},"72e083392b443236":{"meta":{"keywords":["js.Strong.easeInOut"],"title":"easeInOut","description":"[static] Eases in and then out with a power of 4."},"header":{"content":"<p>[static] Eases in and then out with a power of 4.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in and then out with a power of 4.</p>"}},"9f6a01699fc50e73":{"meta":{"keywords":["js.Strong.easeOut"],"title":"easeOut","description":"[static] Eases out with a power of 4."},"header":{"content":"<p>[static] Eases out with a power of 4.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases out with a power of 4.</p>"}},"c5344f5dcfcf49a3":{"meta":{"keywords":["js.Power4","Easing"],"title":"Power4","description":"Provides an easeIn, easeOut, and easeInOut with a power (or strength) of 4 which is identical to Quint and Strong but with a more intuitive name. The more power, the more exaggerated the easing effect. Using a numeric approach like this in the name makes experimenting easier."},"header":{"content":"<p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 4 which is identical to <code>Quint</code> and <code>Strong</code> but with a more intuitive name. The more power, the more exaggerated the easing effect. Using a numeric approach like this in the name makes experimenting easier.</p><p>This is one of the eases that is natively accelerated in TweenLite and TweenMax. All of the \"Power\" eases and their counterparts (Linear (0), Quad (1), Cubic (2), Quart (3), Quint (4), and Strong (4)) are accelerated.</p><div class=\"ease-visualizer\" data-ease=\"Power4\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example usage:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Power4.easeOut});</pre>"}},"db8d74151be49b20":{"meta":{"keywords":["js.Power4.easeIn"],"title":"easeIn","description":"[static] Eases in with a power of 4"},"header":{"content":"<p>[static] Eases in with a power of 4</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in with a power of 4</p>"}},"83a96a07388dba2e":{"meta":{"keywords":["js.Power4.easeInOut"],"title":"easeInOut","description":"[static] Eases in and then out with a power of 4"},"header":{"content":"<p>[static] Eases in and then out with a power of 4</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in and then out with a power of 4</p>"}},"c059f076d35f6211":{"meta":{"keywords":["js.Power4.easeOut"],"title":"easeOut","description":"[static] Eases out with a power of 4"},"header":{"content":"<p>[static] Eases out with a power of 4</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases out with a power of 4</p>"}},"cb31e7d72b0e7b00":{"meta":{"keywords":["js.Cubic","Easing"],"title":"Cubic","description":"Provides an easeIn, easeOut, and easeInOut with a power (or strength) of 2 which is identical to the Power2 ease. The more power, the more exaggerated the easing effect. Using a numeric approach like Power2 instead of Cubic makes experimenting easier and the code reads more intuitively."},"header":{"content":"<p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 2 which is identical to the <code>Power2</code> ease. The more power, the more exaggerated the easing effect. Using a numeric approach like Power2 instead of Cubic makes experimenting easier and the code reads more intuitively.</p><p>This is one of the eases that is natively accelerated in TweenLite and TweenMax. All of the \"Power\" eases and their counterparts (Linear (0), Quad (1), Cubic (2), Quart (3), Quint (4), and Strong (4)) are accelerated.</p><div class=\"ease-visualizer\" data-ease=\"Power2\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example usage:</b></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Cubic.easeOut});</pre>"}},"3abce597eeda187e":{"meta":{"keywords":["js.Cubic.easeIn"],"title":"easeIn","description":"[static] Eases in with a power of 2"},"header":{"content":"<p>[static] Eases in with a power of 2</p>"},"returns":{"type":"CubicIn","content":""},"details":{"content":"<p>Eases in with a power of 2</p>"}},"a34d8ad8d2f59e97":{"meta":{"keywords":["js.Cubic.easeInOut"],"title":"easeInOut","description":"[static] Eases in and then out with a power of 2"},"header":{"content":"<p>[static] Eases in and then out with a power of 2</p>"},"returns":{"type":"CubicInOut","content":""},"details":{"content":"<p>Eases in and then out with a power of 2</p>"}},"f6d4c1c141e1b351":{"meta":{"keywords":["js.Cubic.easeOut"],"title":"easeOut","description":"[static] Eases out with a power of 2"},"header":{"content":"<p>[static] Eases out with a power of 2</p>"},"returns":{"type":"CubicEaseOut","content":""},"details":{"content":"<p>Eases out with a power of 2</p>"}},"9b26fbd793cd0dd0":{"name":"onCompleteParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onComplete</code> function. For example, <code>new TimelineLite({onComplete:myFunction, onCompleteParams:[\"param1\", \"param2\"]});</code> To self-reference the timeline instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onCompleteParams:[\"{self}\", \"param2\"]</code>","contentShort":"An Array of parameters to pass the <code>onComplete</code> function. "}},"98e0cdd165137d37":{"name":"onStartParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onStart</code> function. For example, <code>new TimelineLite({onStart:myFunction, onStartParams:[\"param1\", \"param2\"]});</code> To self-reference the timeline instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onStartParams:[\"{self}\", \"param2\"]</code>","contentShort":"An Array of parameters to pass the <code>onStart</code> function."}},"4b93e7c32eaa5f45":{"name":"onUpdateParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onUpdate</code> function. For example, <code>new TimelineLite({onUpdate:myFunction, onUpdateParams:[\"param1\", \"param2\"]});</code> To self-reference the timeline instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onUpdateParams:[\"{self}\", \"param2\"]</code>","contentShort":"An Array of parameters to pass the <code>onUpdate</code> function."}},"16a4b49f868715de":{"name":"onReverseCompleteParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onReverseComplete</code> function. For example, <code>new TimelineLite({onReverseComplete:myFunction, onReverseCompleteParams:[\"param1\", \"param2\"]});</code> To self-reference the timeline instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onReverseCompleteParams:[\"{self}\", \"param2\"]</code>","contentShort":"An Array of parameters to pass the <code>onReverseComplete</code> function."}},"ced2d2c7aaaa4d5f":{"meta":{"keywords":["js.Ease","Easing"],"title":"Ease","description":""},"header":{"content":"<p>Base class for all GreenSock easing equations. In its simplest form, an Ease is responsible for translating linear time (typically represented as a number between 0 and 1 where 0 is the beginning, 0.5 is halfway complete, and 1 is the end) into a value that has a different rate of change but still starts at 0 and ends at 1. In the GreenSock platform, eases are used to give tweens/animations the look and feel that the animator desires. For example, a ball rolling to a stop would decelerate over time (easeOut) rather than using a linear velocity. An Elastic ease could be used to make an object appear as though it is loosely attached somewhere and is snapping into place with loose (or tight) tension.</p><p>All Ease instances have a <code>getRatio()</code> method that is responsible for the translation of the progress ratio which the tween typically feeds in. End users almost never need to directly feed any values to or get any values from an Ease instance - the tweens will do that internally.</p><p>The base Ease class handles most of the common power-based easeIn/easeOut/eaesInOut calculations (like Linear, Quad, Cubic, Quart, Quint, and Strong) internally. You can define a separate function that uses what was considered the 4 standard easing parameters by Adobe and many others (time, start, change, duration) and Ease will serve as a proxy in order to maximize backwards compatibility and usability. For example, if you have a custom method that you created like this:<br /></p><pre class='pre-container prettyprint'>function myEase(t, s, c, d) {<br />    return s+(t=t/d);<br />}</pre><p>You could still use that by wrapping Ease around it like this:<br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 5, {x:600, ease:new Ease(myEase)});</pre><p>In the above example, the anytime the Ease's <code>getRatio()</code> method is called, it would feed the first parameter as a ratio between 0 and 1 and the rest of the 3 parameters would always be 0, 1, 1. This is all done transparently by TweenLite/TweenMax, so you really shouldn't need to worry about this.</p>"}},"cbfeda9e3ee6bc0e":{"meta":{"keywords":["js.Ease.Ease()"],"title":"Ease()","description":"Constructor"},"header":{"content":"<p>Constructor</p>"},"parameters":[{"name":"func","data_type":"Function","description":"<p>(default = <code>null</code>)<code></code> — Function (if any) that should be proxied. This is completely optional and is in fact rarely used except when you have your own custom ease function that follows the standard ease parameter pattern like time, start, change, duration.</p>\n"},{"name":"extraParams","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — If any extra parameters beyond the standard 4 (time, start, change, duration) need to be fed to the <code>func</code> function, define them as an array here. For example, the old Elastic.easeOut accepts 2 extra parameters in its standard equation (although the newer GreenSock version uses the more modern <code>config()</code> method for configuring the ease and doesn&#8217;t require any extraPrams here)</p>\n"},{"name":"type","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Integer indicating the type of ease where 1 is easeOut, 2 is easeIn, 3 is easeInOut, and 0 is none of these.</p>\n"},{"name":"power","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Power of the ease where Linear is 0, Quad is 1, Cubic is 2, Quart is 3, Quint (and Strong) is 4, etc.</p>\n"}],"returns":{},"details":{"content":"<p>Constructor</p>"}},"56b233da235302db":{"meta":{"keywords":["js.Ease.getRatio()"],"title":"getRatio()","description":"Translates the tween&#039;s progress ratio into the corresponding ease ratio."},"header":{"content":"<p>Translates the tween's progress ratio into the corresponding ease ratio.</p>"},"parameters":[{"name":"p","data_type":"Number","description":"<p>progress ratio (a value between 0 and 1 indicating the progress of the tween/ease)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Number","content":"<p>translated number</p>\n"},"details":{"content":"<p>Translates the tween's progress ratio into the corresponding ease ratio. This is the heart of the Ease, where it does all its work.</p>"}},"d3b047e7bd016acd":{"meta":{"keywords":["js.Power0","Easing"],"title":"Power0","description":"Provides an easeIn, easeOut, and easeInOut with a power (or strength) of 0 which is identical to Linear but with a more intuitive name. The more power, the more exaggerated the easing effect. So Power0 actually has no power at all, providing a linear transition."},"header":{"content":"<p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 0 which is identical to <code>Linear</code> but with a more intuitive name. The more power, the more exaggerated the easing effect. So Power0 actually has no power at all, providing a linear transition.</p><p>This is one of the eases that is natively accelerated in TweenLite and TweenMax. All of the \"Power\" eases and their counterparts (Linear (0), Quad (1), Cubic (2), Quart (3), Quint (4), and Strong (4)) are accelerated.</p><div class=\"ease-visualizer\" data-ease=\"Power0\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example usage:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Power0.easeOut});</pre>"}},"1d489de3c6de961d":{"meta":{"keywords":["js.Power0.easeIn"],"title":"easeIn","description":"[static] Eases in with a power of 0 (linear)."},"header":{"content":"<p>[static] Eases in with a power of 0 (linear).</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in with a power of 0 (linear). Power0.easeIn, Power0.easeOut, and Power0.easeInOut are all identical because there is no power - they're all linear but use the common naming convention for ease of use.</p>"}},"23bff1d0d1d4314b":{"meta":{"keywords":["js.Power0.easeInOut"],"title":"easeInOut","description":"[static] eases in and then out with a power of 0 (linear)."},"header":{"content":"<p>[static] eases in and then out with a power of 0 (linear).</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in and then out with a power of 0 (linear). Power0.easeIn, Power0.easeOut, and Power0.easeInOut are all identical because there is no power - they're all linear but use the common naming convention for ease of use.</p>"}},"18fc5255c4712aae":{"meta":{"keywords":["js.Power0.easeOut"],"title":"easeOut","description":"[static] Eases out with a power of 0 (linear)."},"header":{"content":"<p>[static] Eases out with a power of 0 (linear).</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases out with a power of 0 (linear). Power0.easeIn, Power0.easeOut, and Power0.easeInOut are all identical because there is no power - they're all linear but use the common naming convention for ease of use.</p>"}},"4056e396f43ce90d":{"name":"clamp","returns":{"type":"Boolean","content":"setting <code>clamp</code> to <code>true</code> will prevent points from exceeding the end value or dropping below the starting value. For example, if you're tweening the x property from 0 to 100, the RoughEase would force all random points to stay between 0 and 100 if <code>clamp</code> is <code>true</code>, but if it is <code>false</code>, x could potentially jump above 100 or below 0 at some point during the tween (it would always end at 100 though in this example) (Default: <code>false</code>).","contentShort":""}},"d0461dff035b44f9":{"name":"points","returns":{"type":"Number","content":"the number of points to be plotted along the ease, making it jerk more or less frequently. (Default: <code>20</code>)","contentShort":""}},"6c1ff8e4bba97b5b":{"name":"randomize","returns":{"type":"Boolean","content":"by default, the placement of points will be randomized (creating the roughness) but you can set <code>randomize</code> to <code>false</code> to make the points zig-zag evenly across the ease. Using this in conjunction with a <code>taper</code> value can create a nice effect. (Default: <code>true</code>)","contentShort":""}},"a2e04ec469211693":{"name":"strength","returns":{"type":"Number","content":"controls how far from the template ease the points are allowed to wander (a small number like 0.1 keeps it very close to the template ease whereas a larger number like 5 creates much bigger variations). (Default: <code>1</code>)","contentShort":""}},"b47d6ea25d670878":{"name":"taper","returns":{"type":"String","content":"(<code>\"in\" | \"out\" | \"both\" | \"none\"</code>) - to make the strength of the roughness taper towards the end or beginning or both, use <code>\"out\"</code>, <code>\"in\"</code>, or <code>\"both\"</code> respectively. (Default: <code>\"none\"</code>)","contentShort":""}},"d3baed1556229a6c":{"name":"template","returns":{"type":"Ease","content":"an ease that should be used as a template, like a general guide. The RoughEase will plot points that wander from that template. You can use this to influence the general shape of the RoughEase. (Default: <code>Linear.easeNone</code>)","contentShort":""}},"ea91e06b445f4ac7":{"meta":{"keywords":["js.Back","Easing"],"title":"Back","description":"Eases with an overshoot either at the beginning (easeIn), the end (easeOut), or both (easeInOut)."},"header":{"content":"<p>Eases with an overshoot either at the beginning (easeIn), the end (easeOut), or both (easeInOut). <code>Back</code> is a convenience class that congregates the 3 types of Back eases (BackIn, BackOut, and BackInOut) as static properties so that they can be referenced using the standard synatax, like <code>Back.easeIn</code>, <code>Back.easeOut</code>, and <code>Back.easeInOut</code>.</p><p>You can configure the amount of overshoot using the <code>config()</code> method, like <code>TweenLite.to(obj, 1, {x:100, ease:Back.easeOut.config(3)});</code></p><div class=\"ease-visualizer\" data-ease=\"Back\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p>"}},"18e2a901c1ec4b19":{"meta":{"keywords":["js.Back.easeIn"],"title":"easeIn","description":"[static] Eases in with an overshoot, initially dipping below the starting value before accelerating towards the end."},"header":{"content":"<p>[static] Eases in with an overshoot, initially dipping below the starting value before accelerating towards the end.</p>"},"returns":{"type":"BackIn","content":""},"details":{"content":"<p>Eases in with an overshoot, initially dipping below the starting value before accelerating towards the end.</p>"}},"655846b8e15c420b":{"meta":{"keywords":["js.Back.easeInOut"],"title":"easeInOut","description":"[static] Eases in and out with an overshoot, initially dipping below the starting value before accelerating towards the end, overshooting it and easing out."},"header":{"content":"<p>[static] Eases in and out with an overshoot, initially dipping below the starting value before accelerating towards the end, overshooting it and easing out.</p>"},"returns":{"type":"BackInOut","content":""},"details":{"content":"<p>Eases in and out with an overshoot, initially dipping below the starting value before accelerating towards the end, overshooting it and easing out.</p>"}},"633ffc00de2e0c33":{"meta":{"keywords":["js.Back.easeOut"],"title":"easeOut","description":"[static] Eases out with an overshoot."},"header":{"content":"<p>[static] Eases out with an overshoot.</p>"},"returns":{"type":"BackOut","content":""},"details":{"content":"<p>Eases out with an overshoot.</p>"}},"eb1821730d324359":{"meta":{"keywords":["js.VelocityTracker","Utilities"],"title":"VelocityTracker","description":""},"header":{"content":"<p>Allows you to have the velocity of particular properties automatically tracked for you so that you can access them anytime using the VelocityTracker's <code>getVelocity()</code> method, like<code>myTracker.getVelocity(\"y\")</code>. For example, let's say there's an object that the user interacts with by dragging it or maybe it is being tweened and then at some point you want to create a tween based on that velocity. Normally, you'd need to write your own tracking code that records that object's <code>x</code> and <code>y</code> properties (as well as time stamps) so that when it comes time to feed the<code>velocity</code> into whatever other code you need to run, you'd have the necessary data to calculate it. But let's face it: that can be cumbersome to do manually, and that's precisely why VelocityTracker exists.</p><p>VelocityTracker is in the ThrowPropsPlugin JavaScript file and it's a membership benefit of <a href=\"http://www.greensock.com/club/\" target=\"\">Club GreenSock</a> (so it's not in the public downloads). You can access the important methods directly through ThrowPropsPlugin, like <code>ThrowPropsPlugin.track()</code>.</p><p>Use the static <code>VelocityTracker.track()</code> method to start tracking properties. <i>You generally should <b>not</b> use the VelocityTracker's constructor because there needs to only be one VelocityTracker instance associated with any particular object.</i> The <code>track()</code> method will return the instance that you can then use to <code>getVelocity()</code> like:<br /></p><pre class='pre-container prettyprint'>//first, start tracking \"x\" and \"y\":<br />var tracker = VelocityTracker.track(obj, \"x,y\");<br /> <br />//then, after at least 100ms and 2 \"ticks\", we can get the velocity of each property:<br />var vx = tracker.getVelocity(\"x\");<br />var vy = tracker.getVelocity(\"y\");</pre><p><b>What kinds of properties can be tracked?</b></p><p>Pretty much any numeric property of any object can be tracked, including function-based ones. For example, <code>obj.x</code> or <code>obj.rotation</code> or even <code>obj.myCustomProp()</code>. In fact, for getters and setters that start with the word \"get\" or \"set\" (like <code>getCustomProp()</code> and <code>setCustomProp()</code>), it will automatically find the matching counterpart method and use the getter appropriately, so you can track the getter or setter and it'll work. You <b>cannot</b>, however, track custom plugin-related values like \"directionalRotation\" or \"autoAlpha\" or \"physics2D\" because those aren't real properties of the object. You should instead track the real properties that those plugins affect, like \"rotation\" or \"alpha\" or \"x\" or \"y\".</p><p>This class is used in <code>ThrowPropsPlugin</code> to make it easy to create velocity-based tweens that smoothly transition an object's movement (or rotation or whatever) and glide to a stop.</p><p>Note: In order to report accurately, at least 100ms and 2 ticks of the core tweening engine must have been elapsed before you check velocity.</p>"}},"57b9279b6277c124":{"meta":{"keywords":["js.VelocityTracker.target"],"title":"target","description":"Returns the target object with which the VelocityTracker is associated."},"header":{"content":"<p>Returns the target object with which the VelocityTracker is associated.</p>"},"returns":{"type":"Object","content":""},"details":{"content":"<p>Returns the target object with which the VelocityTracker is associated.</p>"}},"bbc69448cde56863":{"meta":{"keywords":["js.VelocityTracker.addProp()"],"title":"addProp()","description":"Adds a property to track"},"header":{"content":"<p>Adds a property to track</p>"},"parameters":[{"name":"prop","data_type":"String","description":"<p>the property name, like <code>\"x\"</code> or <code>\"y\"</code></p>\n"},{"name":"type","data_type":"String","description":"<p>(default = <code>num</code>)<code></code> — <code>\"rad\"</code> for radian-based rotation or <code>\"deg\"</code> for degree-based rotation &#8211; this is only useful to define if the property is rotation-related and you&#8217;d like to have VelocityTracker compensate for artificial jumps in the value when the rotational midline is crossed, like when rotation goes from 179 to -178 degrees it would interpret that as a change of 3 instead of 357 degrees. Leave this blank unless you want the rotational compensation.</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Adds a property to track</p>"}},"b179b41393276f8a":{"meta":{"keywords":["js.VelocityTracker.getByTarget()"],"title":"getByTarget()","description":"[static] Returns the VelocityTracker associated with a particular object."},"header":{"content":"<p>[static] Returns the VelocityTracker associated with a particular object.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>The object whose VelocityTracker should be returned</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"VelocityTracker","content":"<p>the VelocityTracker associated with the object (or <code>null</code> if none exists)</p>\n"},"details":{"content":"<p>Returns the VelocityTracker associated with a particular object. If none exists, <code>null</code> will be returned.</p>"}},"6c68e64d09faf182":{"meta":{"keywords":["js.VelocityTracker.getVelocity()"],"title":"getVelocity()","description":"Returns the current velocity of the given property."},"header":{"content":"<p>Returns the current velocity of the given property.</p>"},"parameters":[{"name":"prop","data_type":"String","description":"<p>Property name (like <code>\"x\"</code>)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Number","content":"<p>The current velocity</p>\n"},"details":{"content":"<p>Returns the current velocity of the given property.</p>"}},"c573b4d50cc3ef87":{"meta":{"keywords":["js.VelocityTracker.isTracking()"],"title":"isTracking()","description":"[static] Allows you to discern whether the velocity of a particular target or one of its properties is being tracked (typically initiated using the VelocityTracker.track() method)."},"header":{"content":"<p>[static] Allows you to discern whether the velocity of a particular target or one of its properties is being tracked (typically initiated using the VelocityTracker.track() method).</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>The target object</p>\n"},{"name":"prop","data_type":"String","description":"<p>(default = <code>null</code>)<code></code> — the name of the property to check, like <code>\"x\"</code> or <code>\"y\"</code>.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Boolean","content":"<p><code>true</code> if the target/property is being tracked, <code>false</code> if not.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Allows you to discern whether the velocity of a particular target or one of its properties is being tracked (typically initiated using the <code>VelocityTracker.track()</code> method).</p>"}},"eee6bf3e1eda7652":{"meta":{"keywords":["js.VelocityTracker.isTrackingProp()"],"title":"isTrackingProp()","description":"Allows you to discern whether the velocity of a particular property is being tracked."},"header":{"content":"<p>Allows you to discern whether the velocity of a particular property is being tracked.</p>"},"parameters":[{"name":"prop","data_type":"String","description":"<p>the name of the property to check, like <code>\"x\"</code> or <code>\"y\"</code>.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Boolean","content":"<p><code>true</code> if the target/property is being tracked, <code>false</code> if not.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Allows you to discern whether the velocity of a particular property is being tracked.</p>"}},"daa700409ba890e6":{"meta":{"keywords":["js.VelocityTracker.removeProp()"],"title":"removeProp()","description":"Stops tracking a particular property"},"header":{"content":"<p>Stops tracking a particular property</p>"},"parameters":[{"name":"prop","data_type":"String","description":"<p>the property name to stop tracking</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Stops tracking a particular property</p>"}},"dc81ae0b3f16fa34":{"meta":{"keywords":["js.VelocityTracker.track()"],"title":"track()","description":"[static] Allows you to have the velocity of particular properties automatically tracked for you so that you can access them anytime using the VelocityTracker&#039;s getVelocity() method, like myTracker.getVelocity(&quot;y&quot;)."},"header":{"content":"<p>[static] Allows you to have the velocity of particular properties automatically tracked for you so that you can access them anytime using the VelocityTracker's getVelocity() method, like myTracker.getVelocity(\"y\").</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>the target object whose properties will be tracked</p>\n"},{"name":"props","data_type":"String","description":"<p>(default = <code>null</code>)<code></code> — a comma-delimited list of property names, like <code>\"y\"</code> or <code>\"x,y\"</code></p>\n"},{"name":"type","data_type":"String","description":"<p>(default = <code>num</code>)<code></code> — a comma-delimited list of property types (only helpful if they are rotation-based), <code>\"rad\"</code> for radian-based rotation or <code>\"deg\"</code> for degree-based rotation &#8211; this is only useful you&#8217;d like to have VelocityTracker compensate for artificial jumps in rotational values when the rotational midline is crossed, like when rotation goes from 179 to -178 degrees it would interpret that as a change of 3 instead of 357 degrees. Leave this blank unless you want the rotational compensation. You can use <code>\"num\"</code> to indicate normal numeric behavior (or leave it blank).</p>\n"}],"returns":{"type":"VelocityTracker","content":"<p>a VelocityTracker object that&#8217;s responsible for doing the tracking.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Allows you to have the velocity of particular properties automatically tracked for you so that you can access them anytime using the VelocityTracker's <code>getVelocity()</code> method, like<code>myTracker.getVelocity(\"y\")</code>. For example, let's say there's an object that the user interacts with by dragging it or maybe it is being tweened and then at some point you want to create a tween that smoothly continues that motion and glides to a rest. Normally, you'd need to write your own tracking code that records that object's <code>x</code> and <code>y</code> properties (as well as time stamps) so that when it comes time to feed the <code>velocity</code> into the tween, you'd have the necessary data to calculate it. But let's face it: that can be cumbersome to do manually, and that's precisely why the <code>track()</code> method exists.</p><p>Just feed in the <code>target</code> and a comma-delimited list of properties that you want tracked like this:<br /></p><pre class='pre-container prettyprint'>var tracker = VelocityTracker.track(obj, \"x,y\");</pre><p>Then every time the core tweening engine updates (at whatever frame rate you're running), the <code>x</code> and <code>y</code> values (or whichever properties you define) will be recorded along with time stamps (it keeps a maximum of 2 of these values and keeps writing over the previous ones, so don't worry about memory buildup). This even works with properties that are function-based, like getters and setters.</p><p>Then, after at least 100ms and 2 \"ticks\" of the core engine have elapsed (so that some data has been recorded), you can use the VelocityTracker's <code>getVelocity()</code> method to get the current velocity of a particular property.<br /></p><pre class='pre-container prettyprint'>//first, start tracking \"x\" and \"y\":<br />var tracker = VelocityTracker.track(obj, \"x,y\");<br /> <br />//then, after at least 100ms, we can get the velocity:<br />var vx = tracker.getVelocity(\"x\");<br />var vy = tracker.getVelocity(\"y\");</pre><p><b>IMPORTANT:</b> you should <code>untrack()</code> properties when you no longer need them tracked in order to maximize performance and ensure things are released for garbage collection. To untrack, simply use the <code>untrack()<br /></code> method:<br /></p><pre class='pre-container prettyprint'>//stop tracking only the \"x\" property: <br />VelocityTracker.untrack(obj, \"x\");<br /> <br />//stop tracking \"x\" and \"y\":<br />VelocityTracker.untrack(obj, \"x,y\");<br /> <br />//stop tracking all properties of obj:<br />VelocityTracker.untrack(obj);</pre><p><b>What kinds of properties can be tracked?</b></p><p>Pretty much any numeric property of any object can be tracked, including function-based ones. For example, <code>obj.x</code> or <code>obj.rotation</code> or even <code>obj.myCustomProp()</code>. In fact, for getters and setters that start with the word \"get\" or \"set\" (like <code>getCustomProp()</code> and <code>setCustomProp()</code>), it will automatically find the matching counterpart method and use the getter appropriately, so you can track the getter or setter and it'll work. You <b>cannot</b>, however, track custom plugin-related values like \"directionalRotation\" or \"autoAlpha\" or \"physics2D\" because those aren't real properties of the object. You should instead track the real properties that those plugins affect, like \"rotation\" or \"alpha\" or \"x\" or \"y\".</p>"}},"08358b2af1bc5b64":{"meta":{"keywords":["js.VelocityTracker.untrack()"],"title":"untrack()","description":"[static] Stops tracking the velocity of certain properties (or all properties of an object), like ones initiated with the track() method."},"header":{"content":"<p>[static] Stops tracking the velocity of certain properties (or all properties of an object), like ones initiated with the track() method.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>the target object whose properties should stop being tracked</p>\n"},{"name":"props","data_type":"String","description":"<p>(default = <code>null</code>)<code></code> — a comma-delimited list of properties to stop tracking. If <code>null</code>, ALL properties of the <code>target</code> will stop being tracked.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Stops tracking the velocity of certain properties (or all properties of an object), like ones initiated with the <code>track()</code> method.<br /></p><pre class='pre-container prettyprint'>//starts tracking \"x\" and \"y\":<br />var tracker = VelocityTracker.track(obj, \"x,y\");<br /> <br />//stops tracking only the \"x\" property: <br />VelocityTracker.untrack(obj, \"x\");<br /> <br />//stops tracking \"x\" and \"y\":<br />VelocityTracker.untrack(obj, \"x,y\");<br /> <br />//stops tracking all properties of obj:<br />VelocityTracker.untrack(obj);<br />//or you can use the removeProp() method directly on the VelocityTracker instance to remove one at a time:<br />tracker.removeProp(\"x\");</pre>"}},"f7f7759fe81fd22f":{"meta":{"keywords":["js.Elastic","Easing"],"title":"Elastic","description":"Eases with an elastic effect either at the beginning (easeIn), the end (easeOut), or both (easeInOut)."},"header":{"content":"<p>Eases with an elastic effect either at the beginning (easeIn), the end (easeOut), or both (easeInOut). You can optionally configure the amplitude and period of the sine wave using the <code>config()</code> method, like:<br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Elastic.easeOut.config(1.1, 0.4)});</pre><p>Or just use the defaults which work great in most cases:<br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Elastic.easeOut});</pre><p>The first parameter, amplitude, should generally be more than 1 and it basically controls the strength of the effect (how far it overshoots). The second parameter, period, controls how tight the wave is (like how many times it goes back and forth) where the smaller the number, the tighter the wave which results in more cycles. The period parameter is typically a decimal, less than 1 (but it doesn't have to be). </p><div class=\"ease-visualizer\" data-ease=\"Elastic\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p>"}},"37e6c3b703353a69":{"meta":{"keywords":["js.Elastic.easeIn"],"title":"easeIn","description":"[static] Eases using a sine wave that starts slowly and then accelerates over time"},"header":{"content":"<p>[static] Eases using a sine wave that starts slowly and then accelerates over time</p>"},"returns":{"type":"ElasticIn","content":""},"details":{"content":"<p>Eases using a sine wave that starts slowly and then accelerates over time</p>"}},"f5fe26060be2a85b":{"meta":{"keywords":["js.Elastic.easeInOut"],"title":"easeInOut","description":"[static] Eases using a sine wave that starts slowly, then accelerates and then decelerates over time."},"header":{"content":"<p>[static] Eases using a sine wave that starts slowly, then accelerates and then decelerates over time.</p>"},"returns":{"type":"ElasticInOut","content":""},"details":{"content":"<p>Eases using a sine wave that starts slowly, then accelerates and then decelerates over time.</p>"}},"7e3df7d80af0b0bb":{"meta":{"keywords":["js.Elastic.easeOut"],"title":"easeOut","description":"[static] Eases using a sine wave that starts fast and then decelerates over time."},"header":{"content":"<p>[static] Eases using a sine wave that starts fast and then decelerates over time.</p>"},"returns":{"type":"ElasticOut","content":""},"details":{"content":"<p>Eases using a sine wave that starts fast and then decelerates over time.</p>"}},"f8a990bb64a897ea":{"meta":{"keywords":["js.Power3","Easing"],"title":"Power3","description":"Provides an easeIn, easeOut, and easeInOut with a power (or strength) of 3 which is identical to Quart but with a more intuitive name. The more power, the more exaggerated the easing effect. Using a numeric approach like this in the name makes experimenting easier."},"header":{"content":"<p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 3 which is identical to <code>Quart</code> but with a more intuitive name. The more power, the more exaggerated the easing effect. Using a numeric approach like this in the name makes experimenting easier.</p><p>This is one of the eases that is natively accelerated in TweenLite and TweenMax. All of the \"Power\" eases and their counterparts (Linear (0), Quad (1), Cubic (2), Quart (3), Quint (4), and Strong (4)) are accelerated.</p><div class=\"ease-visualizer\" data-ease=\"Power3\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example usage:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Power3.easeOut});</pre>"}},"dd5665cbddb9aa0d":{"meta":{"keywords":["js.Power3.easeIn"],"title":"easeIn","description":"[static] Eases in with a power of 3"},"header":{"content":"<p>[static] Eases in with a power of 3</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in with a power of 3</p>"}},"5aff71c5f05c1b9e":{"meta":{"keywords":["js.Power3.easeInOut"],"title":"easeInOut","description":"[static] Eases in and then out with a power of 3"},"header":{"content":"<p>[static] Eases in and then out with a power of 3</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in and then out with a power of 3</p>"}},"ae081698f5101041":{"meta":{"keywords":["js.Power3.easeOut"],"title":"easeOut","description":"[static] Eases out with a power of 3"},"header":{"content":"<p>[static] Eases out with a power of 3</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases out with a power of 3</p>"}},"fb2d7be451025509":{"meta":{"keywords":"","description":"","imagePath":""},"content":"<div class=\"package-feature\"><h1>Plugins</h1><img style=\"width: 93%;\" src=\"https://greensock.com/wp-content/themes/greensock/images/divider.png\" class=\"fr-fic fr-dii\"><p>Plugins Summary Text</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/ModifiersPlugin\"><span data-link-id=\"82b95bb606c34e2f\"></span></span></h1></div><p>ModifiersPlugin intercepts values that GSAP would normally apply on each update (\"tick\"), passes them to your function which can run custom logic and return a new value (great for snapping, clamping, wrapping, or other dynamic effects).</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/MorphSVGPlugin\"><span data-link-id=\"28124149c0519430\"></span></span></h1></div><p>MorphSVGPlugin provides advanced control over tweens that morph SVG paths.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/DrawSVGPlugin\"><span data-link-id=\"2433928b0e0f6cc4\"></span></span></h1></div><p><code>DrawSVGPlugin</code> allows you to progressively reveal (or hide) the <strong>stroke</strong> of an SVG <code><path></code>, <code><line></code>, <code><polyline></code>, <code><rect></code>, or <code><ellipse></code> and you can even animate outward from the center of the stroke (or any position/segment). It does this by controlling the <code>stroke-dashoffset</code> and <code>stroke-dasharray</code> CSS properties.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/TextPlugin\"><span data-link-id=\"7bc5a8cd3cf25890\"></span></span></h1></div><p><br></p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/ScrollToPlugin\"><span data-link-id=\"13df7c5ab97ce05d\"></span></span></h1></div><p>Animates the scroll position of the window or DOM element.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/ScrambleTextPlugin\"><span data-link-id=\"357645cd3e630097\"></span></span></h1></div><p>Scrambles the text in a DOM element with randomized characters, refreshing new randomized characters at regular intervals while gradually revealing your new text over the course of the tween. Great for decryption effects.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/RoundPropsPlugin\"><span data-link-id=\"bac828fc726d4d82\"></span></span></h1></div><p>Rounds the tweened values to the nearest integer.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/RaphaelPlugin\"><span data-link-id=\"5b09c1a25bf1df7e\"></span></span></h1></div><p><br></p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/PhysicsPropsPlugin\"><span data-link-id=\"447e2b0a637eb56f\"></span></span></h1></div><p><br></p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/Physics2DPlugin\"><span data-link-id=\"7913694fbfa93c13\"></span></span></h1></div><p>Apply physics properties to your animations.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/EaselPlugin\"><span data-link-id=\"4c5618b6dde74bd2\"></span></span></h1></div><p><br></p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/DirectionalRotationPlugin\"><span data-link-id=\"0a6e62faf0a53059\"></span></span></h1></div><p>Tweens any rotation-related property to another value in a particular direction.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/TweenPlugin\"><span data-link-id=\"16d64b5b1b82fde8\"></span></span></h1></div><p><br></p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/ThrowPropsPlugin\"><span data-link-id=\"091b70448f18262e\"></span></span></h1></div><p>ThrowPropsPlugin allows you to smoothly glide any property to a stop, honoring an initial velocity as well as applying optional restrictions on the end value.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/CSSRulePlugin\"><span data-link-id=\"3d0f25beac1906b4\"></span></span></h1></div><p><br></p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/CSSPlugin\"><span data-link-id=\"be137a434f5b4e08\"></span></span></h1></div><p>CSSPlugin enables animation of a DOM element's CSS properties like \"top\", \"left\", \"backgroundColor\", as well as 2D and 3D transforms and many others.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/ColorPropsPlugin\"><span data-link-id=\"23b845c3016f0559\"></span></span></h1></div><p>Allows you to animate any color-related property of any object (for DOM element properties, these capabilities are already built into CSSPlugin, so you only need ColorPropsPlugin if you're animating color properties of non-DOM elements, like canvas library objects or custom objects/properties).</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/BezierPlugin\"><span data-link-id=\"43077a47946db3db\"></span></span></h1></div><p>Animate virtually any property (or properties) along a curved Bezier path which you define as an array of points/values.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/AttrPlugin\"><span data-link-id=\"27db5e20e8bbb9ae\"></span></span></h1></div><p>Tweens any numeric <strong>attribute of a DOM element, like <code>cx</code> in <code><circle cx=\"100\" cy=\"0\" r=\"50\"/></code></strong></p></div>"},"fe7727d7fa29b16b":{"meta":{"keywords":["js.Expo","Easing"],"title":"Expo","description":"Eases in a strong fashion either at the beginning (easeIn), the end (easeOut), or both (easeInOut)."},"header":{"content":"<p>Eases in a strong fashion either at the beginning (easeIn), the end (easeOut), or both (easeInOut). <code>Expo</code> is a convenience class that congregates the 3 types of Expo eases (ExpoIn, ExpoOut, and ExpoInOut) as static properties so that they can be referenced using the standard synatax, like <code>Expo.easeIn</code>, <code>Expo.easeOut</code>, and <code>Expo.easeInOut</code>.</p><div class=\"ease-visualizer\" data-ease=\"Expo\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p>"}},"114305ffa6e0ca96":{"meta":{"keywords":["js.Expo.easeIn"],"title":"easeIn","description":"[static] Eases in a strong fashion starting out slowly and then accelerating."},"header":{"content":"<p>[static] Eases in a strong fashion starting out slowly and then accelerating.</p>"},"returns":{"type":"ExpoIn","content":""},"details":{"content":"<p>Eases in a strong fashion starting out slowly and then accelerating. Produces an effect similar to the popular \"Zeno's paradox\" style of scripted easing, where each interval of time decreases the remaining distance by a constant proportion.</p>"}},"55855c7922de0e47":{"meta":{"keywords":["js.Expo.easeInOut"],"title":"easeInOut","description":"[static] Eases out in a strong fashion starting out fast and then decelerating."},"header":{"content":"<p>[static] Eases out in a strong fashion starting out fast and then decelerating.</p>"},"returns":{"type":"ExpoInOut","content":""},"details":{"content":"<p>Eases out in a strong fashion starting out fast and then decelerating. Produces an effect similar to the popular \"Zeno's paradox\" style of scripted easing, where each interval of time decreases the remaining distance by a constant proportion.</p>"}},"884555468e3861f7":{"meta":{"keywords":["js.Expo.easeOut"],"title":"easeOut","description":"[static] Eases out in a strong fashion starting out fast and then decelerating."},"header":{"content":"<p>[static] Eases out in a strong fashion starting out fast and then decelerating.</p>"},"returns":{"type":"ExpoOut","content":""},"details":{"content":"<p>Eases out in a strong fashion starting out fast and then decelerating. Produces an effect similar to the popular \"Zeno's paradox\" style of scripted easing, where each interval of time decreases the remaining distance by a constant proportion.</p>"}},"root":{"meta":{"keywords":["Greensock, Animation, Platform, Javascript"],"title":"Greensock | Docs","description":"Meet the Docs Super Menu The menu to the left gives you access to every class across the entire GreenSock API for HTML5. Take a peak inside GSAP to see the docs for all our animation tools. Looking to add some snazzy text effects? Check out the tools in the Text category. Select a class &hellip;"},"content":"<div class=\"docs-feature\"><div class=\"left\"><h3>Getting started with</h3><h1>DOCS</h1></div><div class=\"right\"><p>Animating with code may seem intimidating at first, but don&rsquo;t worry, our platform was engineered to make it simple and intuitive.</p></div><div class=\"clear\"><br></div></div><div class=\"class-intro-text main-content full html5\" style=\"display: block;\"><h2>Meet the Docs Super Menu</h2><p>The menu to the left gives you access to every class in the GreenSock API for HTML5. Take a peak inside <a href=\"/docs/\">GSAP</a> to see the docs for all our animation tools. Looking to add some snazzy text effects? Check out the tools in the <a href=\"http://greensock.com/docs/search/Text/\">Text</a> category. Select a class to get an overview and list of every method and property. Every method and property has its own detail page too packed with descriptions and examples. Not sure where to look? Try the search feature.</p><h2>Our most popular tools</h2><p>Get the technical details on GreenSock&#39;s most popular tools</p><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenLite\"><span data-link-id=\"52db442320b34fc1\"></span></span></h1></div><p>TweenLite is an extremely fast, lightweight, and flexible animation tool that serves as the foundation of the GreenSock Animation Platform (GSAP). A TweenLite instance handles tweening one or more properties of <strong>any object</strong> (or array of objects) over time.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenMax\"><span data-link-id=\"7eebd4b20adcaecc\"></span></span></h1></div><p>TweenMax extends TweenLite, adding many useful (but non-essential) features like repeat(), repeatDelay(), yoyo(), updateTo(), and more. It also includes many extra plugins by default, making it extremely full-featured. Any of the plugins can work with TweenLite too, but TweenMax saves you the step of loading the common ones like CSSPlugin, RoundPropsPlugin, BezierPlugin, AttrPlugin, DirectionalRotationPlugin as well as EasePack, TimelineLite, and TimelineMax.</p></div><div style=\"border-radius:8px; width:826px; height:288px; overflow:hidden; margin:20px 0;\"><a href=\"https://ihatetomatoes.net/greensock-cheat-sheet/#more-6001\" target=\"_blank\"><img src=\"https://greensock.com/wp-content/uploads/2012/05/cheat-sheet.png\" alt=\"cheat-sheet\" width=\"826\" height=\"288\" class=\"alignleft size-full wp-image-6354 fr-fic fr-dii\"></a></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineLite\"><span data-link-id=\"2b3bb68a78e65fe7\"></span></span></h1></div><p>TimelineLite is a lightweight, intuitive timeline class for building and managing sequences of TweenLite, TweenMax, TimelineLite, and/or TimelineMax instances. You can think of a TimelineLite instance like a container where you place tweens (or other timelines) over the course of time.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineMax\"><span data-link-id=\"32bc2e8f667c28b7\"></span></span></h1></div><p>TimelineMax extends TimelineLite, offering exactly the same functionality plus useful (but non-essential) features like repeat, repeatDelay, yoyo, currentLabel(), tweenTo(), tweenFromTo(), getLabelAfter(), getLabelBefore(), getActive() and more.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Utilities/Draggable\"><span data-link-id=\"27ffcb75af705686\"></span></span></h1></div><p>Draggable provides a surprisingly simple way to make virtually any DOM element draggable, spinnable, tossable, and even flick-scrollable using mouse and/or touch events, plus Draggable integrates beautifully (and optionally) with ThrowPropsPlugin so that the user can flick and have the motion decelerate smoothly based on momentum.</p></div></div>"}},"dataUpdated":{"059d5eab36bbdd55":{"meta":{"keywords":["js.Power2","Easing"],"title":"Power2","description":"Provides an easeIn, easeOut, and easeInOut with a power (or strength) of 2 which is identical to Cubic but with a more intuitive name. The more power, the more exaggerated the easing effect. Using a numeric approach like this in the name makes experimenting easier."},"header":{"content":"<p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 2 which is identical to <code>Cubic</code> but with a more intuitive name. The more power, the more exaggerated the easing effect. Using a numeric approach like this in the name makes experimenting easier.</p><p>This is one of the eases that is natively accelerated in TweenLite and TweenMax. All of the \"Power\" eases and their counterparts (Linear (0), Quad (1), Cubic (2), Quart (3), Quint (4), and Strong (4)) are accelerated.</p><div class=\"ease-visualizer\" data-ease=\"Power2\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example usage:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Power2.easeOut});</pre>"}},"0cad0bf3209f5092":{"meta":{"keywords":["js.Power2.easeIn"],"title":"easeIn","description":"[static] Eases in with a power of 2"},"header":{"content":"<p>[static] Eases in with a power of 2</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in with a power of 2</p>"}},"79c15370e7fe03de":{"meta":{"keywords":["js.Power2.easeInOut"],"title":"easeInOut","description":"[static] Eases in and then out with a power of 2"},"header":{"content":"<p>[static] Eases in and then out with a power of 2</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in and then out with a power of 2</p>"}},"b2858d09588f2384":{"meta":{"keywords":["js.Power2.easeOut"],"title":"easeOut","description":"[static] Eases out with a power of 2"},"header":{"content":"<p>[static] Eases out with a power of 2</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases out with a power of 2</p>"}},"07392828b060a423":{"meta":{"keywords":["js.Sine","Easing"],"title":"Sine","description":"Eases with a relatively low power either at the beginning (easeIn), the end (easeOut), or both (easeInOut)."},"header":{"content":"<p>Eases with a relatively low power either at the beginning (easeIn), the end (easeOut), or both (easeInOut). <code>Sine</code> is a convenience class that congregates the 3 types of Sine eases (SineIn, SineOut, and SineInOut) as static properties so that they can be referenced using the standard synatax, like <code>Sine.easeIn</code>, <code>Sine.easeOut</code>, and <code>Sine.easeInOut</code>.</p><div class=\"ease-visualizer\" data-ease=\"Sine\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p>"}},"c87b724c588c3884":{"meta":{"keywords":["js.Sine.easeIn"],"title":"easeIn","description":"[static] Eases in with slight acceleration."},"header":{"content":"<p>[static] Eases in with slight acceleration.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in with slight acceleration.</p>"}},"0569061e32ebf041":{"meta":{"keywords":["js.Sine.easeInOut"],"title":"easeInOut","description":"[static] Eases in and then out with slight acceleration/deceleration."},"header":{"content":"<p>[static] Eases in and then out with slight acceleration/deceleration.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in and then out with slight acceleration/deceleration.</p>"}},"84e7a26232a0339f":{"meta":{"keywords":["js.Sine.easeOut"],"title":"easeOut","description":"[static] Eases out with slight deceleration."},"header":{"content":"<p>[static] Eases out with slight deceleration.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases out with slight deceleration.</p>"}},"0879a53eb4051ccf":{"meta":{"keywords":["js.SteppedEase","Easing"],"title":"SteppedEase","description":"Most easing equations give a smooth, gradual transition between the start and end values, but SteppedEase provides an easy way to define a specific number of steps that the transition should take."},"header":{"content":"<p>Most easing equations give a smooth, gradual transition between the start and end values, but SteppedEase provides an easy way to define a specific number of steps that the transition should take. For example, if x is 0 and you want to tween it to 100 with 5 steps (20, 40, 60, 80, and 100) over the course of 2 seconds, you'd do:<br /></p><pre class='pre-container prettyprint'>TweenLite.to(mc, 2, {x:100, ease:SteppedEase.config(5)});<br />//or create an instance directly<br />var steppedEase = new SteppedEase(5);<br />TweenLite.to(mc, 3, {y:300, ease:steppedEase});</pre><div class=\"ease-visualizer\" data-ease=\"SteppedEase\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p>Note: SteppedEase is optimized for use with the GreenSock Animation Platform, so it isn't intended to be used with other engines. Specifically, its easing equation always returns values between 0 and 1.</p>"}},"5022798f02602b73":{"meta":{"keywords":["js.SteppedEase.SteppedEase()"],"title":"SteppedEase()","description":"Constructor"},"header":{"content":"<p>Constructor</p>"},"parameters":[{"name":"steps","data_type":"int","description":"<p>Number of steps between the start and the end values.</p>\n"}],"returns":{},"details":{"content":"<p>Constructor</p>"}},"c9842efb11f4c87a":{"meta":{"keywords":["js.SteppedEase.config()"],"title":"config()","description":"[static] Permits customization of the ease (defining a number of steps)."},"header":{"content":"<p>[static] Permits customization of the ease (defining a number of steps).</p>"},"parameters":[{"name":"steps","data_type":"int","description":"<p>Number of steps between the start and the end values.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"SteppedEase","content":"<p>new SteppedEase instance that is configured according to the parameters provided</p>\n"},"details":{"content":"<p>Permits customization of the ease (defining a number of steps).</p>"}},"1299db89651318f1":{"meta":{"keywords":["js.SteppedEase.getRatio()"],"title":"getRatio()","description":"[override] Translates the tween&#039;s progress ratio into the corresponding ease ratio."},"header":{"content":"<p>[override] Translates the tween's progress ratio into the corresponding ease ratio.</p>"},"parameters":[{"name":"p","data_type":"Number","description":"<p>progress ratio (a value between 0 and 1 indicating the progress of the tween/ease)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Number","content":"<p>translated number</p>\n"},"details":{"content":"<p>Translates the tween's progress ratio into the corresponding ease ratio. This is the heart of the Ease, where it does all its work.</p>"}},"091b70448f18262e":{"meta":{"keywords":["js.ThrowPropsPlugin","Plugins"],"title":"ThrowPropsPlugin","description":"ThrowPropsPlugin allows you to smoothly glide any property to a stop, honoring an initial velocity as well as applying optional restrictions on the end value."},"header":{"content":"<code>ThrowPropsPlugin</code> allows you to smoothly glide any property to a stop, honoring an initial velocity as well as applying optional restrictions on the end value. You can define a specific end value or allow it to be chosen automatically based on the initial velocity and ease or you can define a max/min range or even an array of snap-to values that act as notches. <code>ThrowPropsPlugin</code>even integrates <code>VelocityTracker</code> so that you can have it \"watch\" certain properties to keep track of their velocities for you and then use them automatically when you do a <code>throwProps</code>tween. This is perfect for flick-scrolling or animating things as though they are being thrown (where momentum factors into the tween).<br /><br />For example, let's say a user clicks and drags a ball and and then when released, the ball should continue flying at the same velocity as it was just moving (so that it appears seamless), and then glide to a rest. You can't do a normal tween because you don't know exactly where it should land or how long the tween should last (faster initial velocity would usually mean a longer duration). You'd like it to decelerate based on whatever ease you define in your tween (always use some sort of easeOut, like <code>Power1.easeOut, Strong.easeOut</code>, etc.).<br /><br />Maybe you want the final resting value to always land within a particular range so that the ball doesn't fly off the edge of the screen. But you don't want it to suddenly jerk to a stop when it hits the edge of the screen either; instead, you want it to ease gently into place even if that means going past the landing spot briefly and easing back (if the initial velocity is fast enough to require that). The whole point is to make it look <b>smooth</b>.<br /><br /><b>No problem.</b><br /><br />In its simplest form, you can pass just the initial velocity for each property like this:<br /><pre class='pre-container prettyprint'>TweenLite.to(obj, 2, {throwProps:{x:500, y:-300}});</pre>In the above example, <code>obj.x</code> will animate at 500 pixels per second initially and <code>obj.y</code> will animate at -300 pixels per second. Both will decelerate smoothly until they come to rest 2 seconds later (because the tween's duration is 2 seconds).<br /><br />To use the <code>Strong.easeOut</code> easing equation and impose maximum and minimum boundaries on the end values, use the object syntax with the <code>max</code> and <code>min</code> special properties like this:<br /><pre class='pre-container prettyprint'>TweenLite.to(obj, 2, {throwProps:{x:{velocity:500, max:1024, min:0}, y:{velocity:-300, max:720, min:0}}, ease:Strong.easeOut});</pre>Notice the nesting of the objects (<code>{}</code>). The <code>max</code> and <code>min</code> values refer to the range for the final resting position (coordinates in this case), <b>not</b> the velocity. So <code>obj.x</code> would always land between 0 and 1024 in this case, and <code>obj.y</code> would always land between 0 and 720. If you want the target object to land on a specific value rather than within a range, simply set <code>max</code> and <code>min</code> to identical values or just use the <code>\"end\"</code> property. Also notice that you must define a <code>velocity</code> value for each property (unless you're using <code><a href=\"http://api.greensock.com/js/com/greensock/plugins/ThrowPropsPlugin.html#track()\" target=\"\">track()</a> </code>- see below for details).<br /><br /><b>Valid properties for object syntax</b><br /><br /><ul><li><b>velocity</b> : Number or <code>\"auto\"</code> - the initial velocity, measured in units per second (or per frame for frames-based tweens). You may omit velocity or just use \"auto\" for properties that are being tracked automatically using the <code><a href=\"http://api.greensock.com/js/com/greensock/plugins/ThrowPropsPlugin.html#track()\" target=\"\">track()</a> </code>method.</li><li><b>min</b> : Number - the minimum end value of the property. For example, if you don't want <code>x</code> to land at a value below 0, your throwProps may look like <code>{x:{velocity:-500, min:0}}</code></li><li><b>max</b> : Number - the maximum end value of the property. For example, if you don't want <code>x</code> to exceed 1024, your throwProps may look like <code>{x:{velocity:500, max:1024}}</code></li><li><b>end</b> : [Number | Array | Function] - if <code>end</code> is defined as a <b>Number</b>, the target will land EXACTLY there (just as if you set both the <code>max</code> and <code>min</code> to identical values). If <code>end</code> is defined as a numeric <b>Array</b>, those values will be treated like \"notches\" or \"snap-to\" values so that the closest one to the natural landing spot will be selected. For example, if <code>[0,100,200]</code> is used, and the value would have naturally landed at 141, it will use the closest number (100 in this case) and land there instead. If <code>end</code> is defined as a <b>Function</b>, that function will be called and passed the natural landing value as the only parameter, and your function can run whatever logic you want, and then return the number at which it should land. This can be useful if, for example, you have a rotational tween and you want it to snap to 10-degree increments no matter how big or small, you could use a function that just rounds the natural value to the closest 10-degree increment. So any of these are valid: <code>end:100</code> or <code>end:[0,100,200,300]</code> or <code>end:function(n) { return Math.round(n / 10) * 10; }</code></li></ul>ThrowPropsPlugin isn't just for tweening x and y coordinates. It works with any numeric property, so you could use it for spinning the <code>rotation</code> of an object as well. Or the <code>scaleX</code>/<code>scaleY</code>properties. Maybe the user drags to spin a wheel and lets go and you want it to continue increasing the <code>rotation</code> at that velocity, decelerating smoothly until it stops. It even works with method-based getters/setters.<br /><br /><b>Automatically determine duration</b><br /><br />One of the trickiest parts of creating a <code>throwProps</code> tween that looks fluid and natural (particularly if you're applying maximum and/or minimum values) is determining its duration. Typically it's best to have a relatively consistent level of resistance so that if the initial velocity is very fast, it takes longer for the object to come to rest compared to when the initial velocity is slower. You also may want to impose some restrictions on how long a tween can last (if the user drags incredibly fast, you might not want the tween to last 200 seconds). The duration will also affect how far past a max/min boundary the property may go, so you might want to only allow a certain amount of overshoot tolerance. That's why <code>ThrowPropsPlugin</code> has a few static helper methods that make managing all these variables much easier. The one you'll probably use most often is the <a href=\"http://api.greensock.com/js/com/greensock/plugins/ThrowPropsPlugin.html#to()\" target=\"\"><code>to()</code> </a>method which is very similar to <code>TweenLite.to()</code> except that it doesn't have a<code>duration</code> parameter and it adds several other optional parameters. Read the <a href=\"http://api.greensock.com/js/com/greensock/plugins/ThrowPropsPlugin.html#to()\" target=\"\">docs below</a> for details.<pre class='pre-container prettyprint'>ThrowPropsPlugin.to(mc, {throwProps:{x:\"auto\", y:{velocity:\"auto\", max:1000, min:0}}, ease:Strong.easeOut});</pre>Feel free to experiment with using different easing equations to control how the values ease into place at the end. You don't need to put the \"ease\" special property inside the <code>throwProps</code>object. Just keep it in the same place it has always been, like:<br /><pre class='pre-container prettyprint'>TweenLite.to(mc, 1, {throwProps:{x:500, y:-300}, ease:Strong.easeOut});</pre><b>Automatically track velocity</b><br /><br />Another tricky aspect of smoothly transitioning from a particular velocity is tracking the property's velocity in the first place! So we've made that easier too - you can use the<code><a href=\"http://api.greensock.com/js/com/greensock/plugins/ThrowPropsPlugin.html#track()\" target=\"\">ThrowPropsPlugin.track()</a> </code>method to have the velocity (rate of change) of certain properties tracked and then <code>throwProps</code> tweens will automatically grab the appropriate tracked value internally, allowing you to omit the <code>velocity</code> values in your tweens altogether. See the <code><a href=\"http://api.greensock.com/js/com/greensock/plugins/ThrowPropsPlugin.html#track()\" target=\"\">track()</a> </code>method's description for details. And make sure you start tracking velocity at least a half-second before you need to tween because it takes a small amount of time to guage how fast something is going.<br /><br />A unique convenience of ThrowPropsPlugin compared to most other solutions out there that use frame-based loops is that everything is reverseable and you can jump to any spot in the tween immediately. So if you create several <code>throwProps</code> tweens, for example, and dump them into a TimelineLite, you could simply call <code>reverse()</code> on the timeline to watch the objects retrace their steps right back to the beginning!<br /><br /><b>Examples</b><br /><br />The following example creates a green box and a red box that you can drag and toss around the screen in a natural, fluid way. If you check the \"Snap to grid\" checkbox, the boxes will always land exactly on the grid. We use <code>Draggable</code> class so that we can focus more on the ThrowPropsPlugin code rather than all the boilerplate code needed to make things draggable:<br /><br /><p data-height=\"665\" data-theme-id=\"0\" data-slug-hash=\"zDwEk\" data-default-tab=\"js\" data-user=\"GreenSock\" data-embed-version=\"2\" data-pen-title=\"Draggable \"Toss\" Demo\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/GreenSock/pen/zDwEk/\">Draggable \"Toss\" Demo</a> by GreenSock (<a href=\"https://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script><br /><br />The next example shows how rotation can be flicked as well, and we make sure that the end rotation is always a multiple of 45 degrees:<br /><br /><p data-height=\"436\" data-theme-id=\"0\" data-slug-hash=\"gnoDc\" data-default-tab=\"js,result\" data-user=\"GreenSock\" data-embed-version=\"2\" data-pen-title=\"Draggable knob and scroll area (linked)\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/GreenSock/pen/gnoDc/\">Draggable knob and scroll area (linked)</a> by GreenSock (<a href=\"https://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p><br />ThrowPropsPlugin is a <a href=\"http://www.greensock.com/club/\" target=\"\">Club GreenSock</a> membership benefit. You must have a valid membership to use this class without violating the terms of use. Visit <a href=\"http://www.greensock.com/club/\" target=\"\">http://www.greensock.com/club/</a> to sign up or get more details."}},"d0e776e5281dcb6c":{"meta":{"keywords":["js.ThrowPropsPlugin.defaultResistance"],"title":"defaultResistance","description":"[static] The default resistance that is used to calculate how long it will take for the tweening property (or properties) to come to rest by the static ThrowPropsPlugin.to() and ThrowPropsPlugin.calculateTweenDuration() methods."},"header":{"content":"<p>[static] The default resistance that is used to calculate how long it will take for the tweening property (or properties) to come to rest by the static ThrowPropsPlugin.to() and ThrowPropsPlugin.calculateTweenDuration() methods.</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>The default <code>resistance</code> that is used to calculate how long it will take for the tweening property (or properties) to come to rest by the static <code>ThrowPropsPlugin.to()</code> and<code>ThrowPropsPlugin.calculateTweenDuration()</code> methods. Keep in mind that you can define a <code>resistance</code> value either for each individual property in the <code>throwProps</code> tween like this:</p><pre class='pre-container prettyprint'>ThrowPropsPlugin.to(obj, {throwProps:{x:{velocity:500, resistance:150}, y:{velocity:-300, resistance:50}}});</pre><p><b>OR</b> you can define a single <code>resistance</code> value that will be used for all of the properties in that particular <code>throwProps</code> tween like this:</p><pre class='pre-container prettyprint'>ThrowPropsPlugin.to(obj, {throwProps:{x:500, y:-300, resistance:150}});<br /> <br />//-OR- <br /> <br />ThrowPropsPlugin.to(obj, {throwProps:{x:{velocity:500, max:800, min:0}, y:{velocity:-300, max:800, min:100}, resistance:150}});</pre>"}},"4c659aa2524b1945":{"meta":{"keywords":["js.ThrowPropsPlugin.calculateChange()"],"title":"calculateChange()","description":"[static] Determines the amount of change given a particular velocity, an easing equation, and the duration that the tween will last."},"header":{"content":"<p>[static] Determines the amount of change given a particular velocity, an easing equation, and the duration that the tween will last.</p>"},"parameters":[{"name":"velocity","data_type":"Number","description":"<p>The initial velocity</p>\n"},{"name":"ease","data_type":"*","description":"<p>The easing equation (like <code>Strong.easeOut</code> or <code>Power2.easeOut</code>).</p>\n"},{"name":"duration","data_type":"Number","description":"<p>The duration (in seconds) of the tween</p>\n"},{"name":"checkPoint","data_type":"Number","description":"<p>(default = <code>0.05</code>)<code></code> — A value between 0 and 1 (typically 0.05) that is used to measure an easing equation&#8217;s initial strength. The goal is for the value to have moved at the initial velocity through that point in the ease. So 0.05 represents 5%. If the initial velocity is 500, for example, and the ease is <code>Strong.easeOut</code> and <code>checkpoint</code> is 0.05, it will measure 5% into that ease and plot the position that would represent where the value would be if it was moving 500 units per second for the first 5% of the tween. If you notice that your tween appears to start off too fast or too slow, try adjusting the <code>checkpoint</code> higher or lower slightly. Typically 0.05 works great.</p>\n"}],"returns":{"type":"Number","content":"<p>The amount of change (can be positive or negative based on the velocity)</p>\n"},"details":{"content":"<p>Determines the amount of change given a particular velocity, an easing equation, and the duration that the tween will last. This is useful for plotting the resting position of an object that starts out at a certain velocity and decelerates based on an ease (like <code>Strong.easeOut</code>).</p>"}},"c272ebc90f1e65c8":{"meta":{"keywords":["js.ThrowPropsPlugin.calculateDuration()"],"title":"calculateDuration()","description":"[static] Calculates the duration (in seconds) that it would take to move from a particular start value to an end value at the given initial velocity, decelerating according to a certain easing equation (like Strong.easeOut)."},"header":{"content":"<p>[static] Calculates the duration (in seconds) that it would take to move from a particular start value to an end value at the given initial velocity, decelerating according to a certain easing equation (like Strong.easeOut).</p>"},"parameters":[{"name":"start","data_type":"Number","description":"<p>Starting value</p>\n"},{"name":"end","data_type":"Number","description":"<p>Ending value</p>\n"},{"name":"velocity","data_type":"Number","description":"<p>the initial velocity at which the starting value is changing</p>\n"},{"name":"ease","data_type":"*","description":"<p>The easing equation used for deceleration (like <code>Strong.easeOut</code> or <code>Power2.easeOut</code>).</p>\n"},{"name":"checkPoint","data_type":"Number","description":"<p>(default = <code>0.05</code>)<code></code> — A value between 0 and 1 (typically 0.05) that is used to measure an easing equation&#8217;s initial strength. The goal is for the value to have moved at the initial velocity through that point in the ease. So 0.05 represents 5%. If the initial velocity is 500, for example, and the ease is <code>Strong.easeOut</code> and <code>checkpoint</code> is 0.05, it will measure 5% into that ease and plot the position that would represent where the value would be if it was moving 500 units per second for the first 5% of the tween. If you notice that your tween appears to start off too fast or too slow, try adjusting the <code>checkpoint</code> higher or lower slightly. Typically 0.05 works great.</p>\n"}],"returns":{"type":"Number","content":"<p>The duration (in seconds) that it would take to move from the start value to the end value at the initial velocity provided, decelerating according to the ease.</p>\n"},"details":{"content":"<p>Calculates the duration (in seconds) that it would take to move from a particular start value to an end value at the given initial velocity, decelerating according to a certain easing equation (like <code>Strong.easeOut</code>).</p>"}},"c33fc0b177a91675":{"meta":{"keywords":["js.ThrowPropsPlugin.calculateTweenDuration()"],"title":"calculateTweenDuration()","description":"[static] Analyzes various throwProps variables (like initial velocities, max/min values, and resistance) and determines the appropriate duration."},"header":{"content":"<p>[static] Analyzes various throwProps variables (like initial velocities, max/min values, and resistance) and determines the appropriate duration.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object whose properties the tween affects. This can be ANY object, not just a DOM element.</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object containing the end values of the properties you&#8217;re tweening, and it must also contain a <code>throwProps</code> object. For example, to create a tween that tweens<code>obj.x</code> at an initial velocity of 500 and <code>obj.y</code> at an initial velocity of -300 and applies a <code>resistance</code> of 80 and uses the <code>Strong.easeOut</code> easing equation and calls the method<code>tweenCompleteHandler</code> when it is done, the <code>vars</code> object would look like: <code>{throwProps:{x:500, y:-300, resistance:80}, ease:Strong.easeOut, onComplete:tweenCompleteHandler}</code>.</p>\n"},{"name":"maxDuration","data_type":"Number","description":"<p>(default = <code>10</code>)<code></code> — Maximum duration (in seconds)</p>\n"},{"name":"minDuration","data_type":"Number","description":"<p>(default = <code>0.2</code>)<code></code> — Minimum duration (in seconds)</p>\n"},{"name":"overshootTolerance","data_type":"Number","description":"<p>(default = <code>1</code>)<code></code> — sets a maximum number of seconds that can be added to the tween&#8217;s duration (if necessary) to accommodate temporarily overshooting the end value before smoothly returning to it at the end of the tween. This can happen in situations where the initial velocity would normally cause it to exceed the <code>max</code>or <code>min</code> values. An example of this would be in the iOS (iPhone or iPad) when you flick-scroll so quickly that the content would shoot past the end of the scroll area. Instead of jerking to a sudden stop when it reaches the edge, the content briefly glides past the max/min position and gently eases back into place. The larger the <code>overshootTolerance</code> the more leeway the tween has to temporarily shoot past the max/min if necessary.</p>\n"}],"returns":{"type":"Number","content":"<p>The duration (in seconds) that the tween should use.</p>\n"},"details":{"content":"<p>Analyzes various throwProps variables (like initial velocities, max/min values, and resistance) and determines the appropriate duration. Typically it is best to use the<code>ThrowPropsPlugin.to()</code> method for this, but <code>calculateTweenDuration()</code> could be convenient if you want to create a TweenMax instance instead of a TweenLite instance (which is what <code>throwPropsPlugin.to()</code> returns).</p>"}},"b218bb5d19f9b9ab":{"meta":{"keywords":["js.ThrowPropsPlugin.getVelocity()"],"title":"getVelocity()","description":"[static] Returns the current velocity of the given property and target object (only works if you started tracking the property using the ThrowPropsPlugin.track() or VelocityTracker.track() method)."},"header":{"content":"<p>[static] Returns the current velocity of the given property and target object (only works if you started tracking the property using the ThrowPropsPlugin.track() or VelocityTracker.track() method).</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>The object whose property is being tracked.</p>\n"},{"name":"prop","data_type":"String","description":"<p>The property name, like <code>\"x\"</code>.</p>\n"}],"returns":{"type":"Number","content":"<p>The current velocity</p>\n"},"details":{"content":"<p>Returns the current velocity of the given property and target object (only works if you started tracking the property using the <a href=\"http://api.greensock.com/js/com/greensock/plugins/ThrowPropsPlugin.html#track()\" target=\"\">ThrowPropsPlugin.track()</a> or <code>VelocityTracker.track()</code>method).</p>"}},"56a562fa808f415e":{"meta":{"keywords":["js.ThrowPropsPlugin.isTracking()"],"title":"isTracking()","description":"[static] Allows you to discern whether the velocity of a particular target or one of its properties is being tracked (typically initiated using the track() method)."},"header":{"content":"<p>[static] Allows you to discern whether the velocity of a particular target or one of its properties is being tracked (typically initiated using the track() method).</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>The target object</p>\n"},{"name":"prop","data_type":"String","description":"<p>(default = <code>null</code>)<code></code> — the name of the property to check, like <code>\"x\"</code> or <code>\"y\"</code>.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Boolean","content":"<p><code>true</code> if the target/property is being tracked, <code>false</code> if not.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Allows you to discern whether the velocity of a particular target or one of its properties is being tracked (typically initiated using the <code>track()</code> method).</p>"}},"a159d08fd0e75293":{"meta":{"keywords":["js.ThrowPropsPlugin.to()"],"title":"to()","description":"[static] Automatically analyzes various throwProps variables (like velocity, max, min, and resistance) and creates a TweenLite instance with the appropriate duration."},"header":{"content":"<p>[static] Automatically analyzes various throwProps variables (like velocity, max, min, and resistance) and creates a TweenLite instance with the appropriate duration.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object whose properties the tween affects. This can be ANY object, not just a DOM element.</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object containing the end values of the properties you&#8217;re tweening, and it must also contain a <code>throwProps</code> object. For example, to create a tween that tweens<code>obj.x</code> at an initial velocity of 500 and <code>obj.y</code> at an initial velocity of -300 and applies a <code>resistance</code> of 80 and uses the <code>Strong.easeOut</code> easing equation and calls the method<code>tweenCompleteHandler</code> when it is done, the <code>vars</code> object would look like: <code>{throwProps:{x:500, y:-300, resistance:80}, ease:Strong.easeOut, onComplete:tweenCompleteHandler}</code>.</p>\n"},{"name":"maxDuration","data_type":"Number","description":"<p>(default = <code>100</code>)<code></code> — Maximum duration of the tween</p>\n"},{"name":"minDuration","data_type":"Number","description":"<p>(default = <code>0.25</code>)<code></code> — Minimum duration of the tween</p>\n"},{"name":"overshootTolerance","data_type":"Number","description":"<p>(default = <code>1</code>)<code></code> — sets a maximum number of seconds that can be added to the tween&#8217;s duration (if necessary) to accommodate temporarily overshooting the end value before smoothly returning to it at the end of the tween. This can happen in situations where the initial velocity would normally cause it to exceed the <code>max</code>or <code>min</code> values. An example of this would be in the iOS (iPhone or iPad) when you flick-scroll so quickly that the content would shoot past the end of the scroll area. Instead of jerking to a sudden stop when it reaches the edge, the content briefly glides past the max/min position and gently eases back into place. The larger the <code>overshootTolerance</code> the more leeway the tween has to temporarily shoot past the max/min if necessary.</p>\n"}],"returns":{"type":"TweenLite","content":"<p>TweenLite instance</p>\n"},"details":{"content":"<p>Automatically analyzes various throwProps variables (like <code>velocity</code>, <code>max</code>, <code>min</code>, and <code>resistance</code>) and creates a TweenLite instance with the appropriate duration. You can use<code>ThrowPropsPlugin.to()</code> instead of <code>TweenLite.to()</code> to create a tween - they're identical except that <code>ThrowPropsPlugin.to()</code> doesn't have a <code>duration</code> parameter (it figures it out for you) and it adds a few extra parameters to the end that can optionally be used to affect the duration.</p><p>Another key difference is that <code>ThrowPropsPlugin.to()</code> will recognize the <code>resistance</code> special property which basically controls how quickly each property's velocity decelerates (and consequently influences the duration of the tween). For example, if the initial <code>velocity</code> is 500 and the <code>resistance</code> is 300, it will decelerate much faster than if the resistance was 20. You can define a <code>resistance</code> value either for each individual property in the <code>throwProps</code> tween like this:<br /></p><pre class='pre-container prettyprint'>ThrowPropsPlugin.to(obj, {throwProps:{x:{velocity:500, resistance:150}, y:{velocity:-300, resistance:50}}});</pre><p><b>OR</b> you can define a single <code>resistance</code> value that will be used for all of the properties in that particular <code>throwProps</code> tween like this:</p><pre class='pre-container prettyprint'>ThrowPropsPlugin.to(obj, {throwProps:{x:500, y:-300, resistance:150}});<br /> <br />//-OR- <br /> <br />ThrowPropsPlugin.to(obj, {throwProps:{x:{velocity:500, max:800, min:0}, y:{velocity:-300, max:700, min:100}, resistance:150}});</pre><p><code>resistance</code> should always be a positive value, although <code>velocity</code> can be negative. <code>resistance</code> always works against <code>velocity</code>. If no <code>resistance</code> value is found, the<code>ThrowPropsPlugin.defaultResistance</code> value will be used. The <code>resistance</code> values merely affect the duration of the tween and can be overriden by the <code>maxDuration</code> and<code>minDuration</code> parameters. Think of the <code>resistance</code> as more of a suggestion that ThrowPropsPlugin uses in its calculations rather than an absolute set-in-stone value. When there are multiple properties in one throwProps tween (like <code>x</code> and <code>y</code>) and the calculated duration for each one is different, the longer duration is always preferred in order to make things animate more smoothly.</p><p>You also may want to impose some restrictions on the tween's duration (if the user drags incredibly fast, for example, you might not want the tween to last 200 seconds). Use<code>maxDuration</code> and <code>minDuration</code> parameters for that. You can use the <code>overshootTolerance</code> parameter to set a maximum number of seconds that can be added to the tween's duration (if necessary) to accommodate temporarily overshooting the end value before smoothly returning to it at the end of the tween. This can happen in situations where the initial velocity would normally cause it to exceed the <code>max</code> or <code>min</code> values. An example of this would be in the iOS (iPhone or iPad) when you flick-scroll so quickly that the content would shoot past the end of the scroll area. Instead of jerking to a sudden stop when it reaches the edge, the content briefly glides past the max/min position and gently eases back into place. The larger the <code>overshootTolerance</code> the more leeway the tween has to temporarily shoot past the max/min if necessary.</p><p>If you'd like to have ThrowPropsPlugin automatically track the velocity of certain properties for you and auto-populate them internally so that you don't have to pass <code>velocity</code> values in, use the <code><a href=\"http://api.greensock.com/js/com/greensock/plugins/ThrowPropsPlugin.html#track()\" target=\"\">track()</a></code> method.</p><p><b>Valid properties for object syntax</b></p><ul><li><b>velocity</b> : Number or <code>\"auto\"</code> - the initial velocity, measured in units per second (or per frame for frames-based tweens). You may omit velocity or just use \"auto\" for properties that are being tracked automatically using the <code><a href=\"http://api.greensock.com/js/com/greensock/plugins/ThrowPropsPlugin.html#track()\" target=\"\">track()</a></code> method.</li><li><b>min</b> : Number - the minimum end value of the property. For example, if you don't want <code>x</code> to land at a value below 0, your throwProps may look like <code>{x:{velocity:-500, min:0}}</code></li><li><b>max</b> : Number - the maximum end value of the property. For example, if you don't want <code>x</code> to exceed 1024, your throwProps may look like <code>{x:{velocity:500, max:1024}}</code></li><li><b>end</b> : [Number | Array | Function] - if <code>end</code> is defined as a <b>Number</b>, the target will land EXACTLY there (just as if you set both the <code>max</code> and <code>min</code> to identical values). If <code>end</code> is defined as a numeric <b>Array</b>, those values will be treated like \"notches\" or \"snap-to\" values so that the closest one to the natural landing spot will be selected. For example, if<code>[0,100,200]</code> is used, and the value would have naturally landed at 141, it will use the closest number (100 in this case) and land there instead. If <code>end</code> is defined as a <b>Function</b>, that function will be called and passed the natural landing value as the only parameter, and your function can run whatever logic you want, and then return the number at which it should land. This can be useful if, for example, you have a rotational tween and you want it to snap to 10-degree increments no matter how big or small, you could use a function that just rounds the natural value to the closest 10-degree increment. So any of these are valid: <code>end:100</code> or <code>end:[0,100,200,300]</code> or <code>end:function(n) { return Math.round(n / 10) * 10; }</code></li><li><b>resistance</b> : Number - think of resistance like the rate of velocity decay. If no <code>resistance</code> value is found, the <code>ThrowPropsPlugin.defaultResistance</code> value will be used. The<code>resistance</code> values merely affect the duration of the tween and can be overriden by the <code>maxDuration</code> and <code>minDuration</code> parameters.</li></ul><p>&nbsp;</p>"}},"bdf13585fd570814":{"meta":{"keywords":["js.ThrowPropsPlugin.track()"],"title":"track()","description":"[static] Allows you to have the velocity of particular properties automatically tracked for you so that ThrowPropsPlugin tweens can access that data internally instead of manually calculating it and feeding it into each tween."},"header":{"content":"<p>[static] Allows you to have the velocity of particular properties automatically tracked for you so that ThrowPropsPlugin tweens can access that data internally instead of manually calculating it and feeding it into each tween.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>the target object whose properties will be tracked</p>\n"},{"name":"props","data_type":"String","description":"<p>a comma-delimited list of property names, like <code>\"y\"</code> or <code>\"x,y\"</code></p>\n"},{"name":"type","data_type":"String","description":"<p>a comma-delimited list of property types (only helpful if they are rotation-based), <code>\"rad\"</code> for radian-based rotation or <code>\"deg\"</code> for degree-based rotation &#8211; this is only useful you&#8217;d like to have VelocityTracker compensate for artificial jumps in rotational values when the rotational midline is crossed, like when rotation goes from 179 to -178 degrees it would interpret that as a change of 3 instead of 357 degrees. Leave this blank unless you want the rotational compensation. You can use <code>\"num\"</code> to indicate normal numeric behavior (or leave it blank).</p>\n"}],"returns":{"type":"VelocityTracker","content":"<p>a VelocityTracker object that&#8217;s responsible for doing the tracking. You can use this if you want &#8211; the most useful method is its <code>getVelocity()</code> method that you feed the property name to like <code>myTracker.getVelocity(\"y\")</code> to get the target&#8217;s <code>y</code> velocity anytime. Normally, however, you don&#8217;t need to keep track of this VelocityTracker object at all because the work is done internally and ThrowPropsPlugin knows how to find it.</p>\n"},"details":{"content":"<p>Allows you to have the velocity of particular properties automatically tracked for you so that ThrowPropsPlugin tweens can access that data internally instead of manually calculating it and feeding it into each tween. For example, let's say there's an object that the user interacts with by dragging it or maybe it is being tweened and then at some point you want to create a<code>throwProps</code> tween that smoothly continues that motion and glides to a rest. Normally, you'd need to write your own tracking code that records that object's <code>x</code> and <code>y</code> properties and the time stamps so that when it comes time to feed the <code>velocity</code> into the <code>throwProps</code> tween, you'd have the necessary data to calculate it. But let's face it: that can be cumbersome to do manually, and that's precisely why the <code>track()</code> method exists.</p><p>Just feed in the <code>target</code> and a comma-delimited list of its properties that you want tracked like this:<br /></p><pre class='pre-container prettyprint'>ThrowPropsPlugin.track(obj, \"x,y\");</pre><p>Then every time the core tweening engine updates (at whatever frame rate you're running), the <code>x</code> and <code>y</code> values (or whichever properties you define) will be recorded along with time stamps (it keeps a maximum of 2 of these values and continually writes over the previous ones, so don't worry about memory buildup). This even works with function-based properties like getters and setters.</p><p>Then, after at least 100ms and 2 \"ticks\" of the core engine have elapsed (so that some data has been recorded), you can create <code>throwProps</code> tweens for those properties and omit the<code>\"velocity\"</code> values and it will automatically populate them for you internally. For example:<br /></p><pre class='pre-container prettyprint'>//first, start tracking \"x\" and \"y\":<br />ThrowPropsPlugin.track(obj, \"x,y\");<br /> <br />//then, after at least 100ms, let's smoothly tween to EXACTLY x:200, y:300<br />TweenLite.to(obj, 2, {throwProps:{x:{end:200}, y:{end:300}}, ease:Strong.easeOut});<br /> <br />//and if you want things to use the defaults and have obj.x and obj.y glide to a stop based on the velocity rather than setting any destination values, just use \"auto\":<br />TweenLite.to(obj, 2, {throwProps:{x:\"auto\", y:\"auto\"}, ease:Strong.easeOut});</pre><p>Notice that <code>\"auto\"</code> is a valid option when you're tracking the properties too, but <b>only</b> for tracked properties.</p><p><b>What kinds of properties can be tracked?</b></p><p>Pretty much any numeric property of any object can be tracked, including function-based ones. For example, <code>obj.x</code> or <code>obj.rotation</code> or even <code>obj.myCustomProp()</code>. In fact, for getters and setters that start with the word \"get\" or \"set\" (like <code>getCustomProp()</code> and <code>setCustomProp()</code>), it will automatically find the matching counterpart method and use the getter appropriately, so you can track the getter or setter and it'll work. You <b>cannot</b>, however, track custom plugin-related values like \"directionalRotation\" or \"autoAlpha\" or \"physics2D\" because those aren't real properties of the object. You should instead track the real properties that those plugins affect, like \"rotation\" or \"alpha\" or \"x\" or \"y\".</p><p><b>IMPORTANT:</b> you should <code>untrack()</code> properties when you no longer need them tracked in order to maximize performance and ensure things are released for garbage collection. To untrack, simply use the <code>untrack()</code> method:</p>"}},"d938e1f03eee893f":{"meta":{"keywords":["js.ThrowPropsPlugin.untrack()"],"title":"untrack()","description":"[static] Stops tracking the velocity of certain properties (or all properties of an object), like ones initiated with the track() method."},"header":{"content":"<p>[static] Stops tracking the velocity of certain properties (or all properties of an object), like ones initiated with the track() method.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>the target object whose properties should stop being tracked</p>\n"},{"name":"props","data_type":"String","description":"<p>(default = <code>null</code>)<code></code> — a comma-delimited list of properties to stop tracking. If <code>null</code>, ALL properties of the <code>target</code> will stop being tracked.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Stops tracking the velocity of certain properties (or all properties of an object), like ones initiated with the <code>track()</code> method.<br /></p><pre class='pre-container prettyprint'>//starts tracking \"x\" and \"y\":<br />ThrowPropsPlugin.track(obj, \"x,y\");<br /> <br />//stops tracking only the \"x\" property: <br />ThrowPropsPlugin.untrack(obj, \"x\");<br /> <br />//stops tracking \"x\" and \"y\":<br />ThrowPropsPlugin.untrack(obj, \"x,y\");<br /> <br />//stops tracking all properties of obj:<br />ThrowPropsPlugin.untrack(obj);</pre>"}},"09af4edb7491fd9e":{"meta":{"keywords":["js.EaseLookup","Easing"],"title":"EaseLookup","description":"EaseLookup enables you to find the easing function associated with a particular name (String), like &quot;strongEaseOut&quot; which can be useful when loading in XML data that comes in as Strings but needs to be translated to native function references."},"header":{"content":"<p>EaseLookup enables you to find the easing function associated with a particular name (String), like \"strongEaseOut\" which can be useful when loading in XML data that comes in as Strings but needs to be translated to native function references.</p>"}},"ac38f7748fba8a28":{"meta":{"keywords":["js.EaseLookup.find()"],"title":"find()","description":"[static] Finds the easing function associated with a particular name (String), like &quot;easeOutStrong&quot;."},"header":{"content":"<p>[static] Finds the easing function associated with a particular name (String), like \"easeOutStrong\".</p>"},"parameters":[{"name":"name","data_type":"String","description":"<p>The name of the easing function, with or without the period and case insensitive (i.e. &#8220;Strong.easeOut&#8221; or &#8220;easeOutStrong&#8221;)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Ease","content":"<p>The easing function associated with the name</p>\n"},"details":{"content":"<p>Finds the easing function associated with a particular name (String), like \"easeOutStrong\". This can be useful when loading in XML data that comes in as Strings but needs to be translated to native function references. You can pass in the name with or without the period, and it is case insensitive, so any of the following will find the Strong.easeOut function:</p><pre class='pre-container prettyprint'>EaseLookup.find(\"Strong.easeOut\")<br />EaseLookup.find(\"easeOutStrong\")<br /></pre><p>You can translate strings directly when tweening, like this:<br /></p><pre class='pre-container prettyprint'>TweenLite.to(mc, 1, {x:100, ease:EaseLookup.find(myString)});</pre>"}},"0a6e62faf0a53059":{"meta":{"keywords":["js.DirectionalRotationPlugin","Plugins"],"title":"DirectionalRotationPlugin","description":"Tweens any rotation-related property to another value in a particular direction."},"header":{"content":"<p><span class=\"inTweenMax\">Included in TweenMax: <span class=\"yes\">YES</span></span></p><p>Tweens any rotation-related property to another value in a particular direction which can be either <b>clockwise</b> (<code>\"_cw\"</code> suffix), <b>counter-clockwise</b> (<code>\"_ccw\"</code> suffix), or in the shortest direction (<code>\"_short\"</code> suffix) in which case the plugin chooses the direction for you based on the shortest path. For example:</p><pre class='pre-container prettyprint'>//obj.rotation starts at 45<br />var obj = {rotation:45}; <br /> <br />//tweens to the 270 position in a clockwise direction<br />TweenLite.to(obj, 1, {directionalRotation:\"270_cw\"}); <br /> <br />//tweens to the 270 position in a counter-clockwise direction<br />TweenLite.to(obj, 1, {directionalRotation:\"270_ccw\"});<br /> <br />//tweens to the 270 position in the shortest direction (which, in this case, is counter-clockwise)<br />TweenLite.to(obj, 1, {directionalRotation:\"270_short\"});</pre><p>Notice that the value is in quotes, thus a string with a particular suffix indicating the direction (\"_cw\", \"_ccw\", or \"_short\"). You can also use the <code>\"+=\"</code> or <code>\"-=\"</code> prefix to indicate relative values.</p><p>By default, directionalRotation assumes you're attempting to tween the <code>\"rotation\"</code> property of the target, but you can define any rotational property name (including MULTIPLE properties) by passing an object instead, like this:</p><pre class='pre-container prettyprint'>//animate obj.rotationX and obj.rotationY:<br />TweenLite.to(obj, 1, {directionalRotation:{rotationX:\"-140_cw\", rotationY:\"70_short\"}, ease:Power2.easeIn});</pre><p>DirectionalRotationPlugin's functionality is built into the <b>CSSPlugin</b>, so you do not need to load DirectionalRotationPlugin separately if you just want to tween css-related properties of DOM elements. For example, you could animate rotation-related css properties like this (assuming CSSPlugin is loaded and <code>yourElement</code> is a DOM element):</p><p>Check out an <a href=\"http://codepen.io/GreenSock/pen/jiEyG\" target=\"\">interactive example here</a>.</p><pre class='pre-container prettyprint'>TweenLite.to(yourElement, 1, {rotation:\"270_ccw\", rotationX:\"-45_cw\", rotationY:\"+=30_cw\"});</pre><p>If you want to define the values in radians instead of degrees, you can use the special <code>useRadians:true</code> flag, like this:</p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {directionalRotation:{rotation:\"1.5_ccw\", useRadians:true}, ease:Power2.easeInOut});</pre><p>And if the value that you want to pass in is a numeric variable, you can easily append the appropriate suffix like this:</p><pre class='pre-container prettyprint'>var myValue = -270;<br />TweenLite.to(obj, 1, {directionalRotation: (myValue + \"_short\") });</pre>"}},"0c466d8095583e88":{"meta":{"keywords":["js.Linear","Easing"],"title":"Linear","description":"Linear ease with no acceleration or deceleration. Linear is identical to Power0."},"header":{"content":"<p>Linear ease with no acceleration or deceleration. Linear is identical to <code>Power0</code>.</p><p>This is one of the eases that is natively accelerated in TweenLite and TweenMax. All of the \"Power\" eases and their counterparts (Linear (0), Quad (1), Cubic (2), Quart (3), Quint (4), and Strong (4)) are accelerated.</p><div class=\"ease-visualizer\" data-ease=\"Power0\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example usage:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Linear.easeNone});</pre>"}},"f8a5c0f959c5c320":{"meta":{"keywords":["js.Linear.Linear()"],"title":"Linear()","description":"Constructor"},"header":{"content":"<p>Constructor</p>"},"parameters":[],"returns":{},"details":{"content":"<p>Constructor</p>"}},"3a1185cd458dbf47":{"meta":{"keywords":["js.Linear.ease"],"title":"ease","description":"[static] The default ease instance which can be reused many times in various tweens in order to conserve memory and improve performance slightly compared to creating a new instance each time."},"header":{"content":"<p>[static] The default ease instance which can be reused many times in various tweens in order to conserve memory and improve performance slightly compared to creating a new instance each time.</p>"},"returns":{"type":"Linear","content":""},"details":{"content":"<p>The default ease instance which can be reused many times in various tweens in order to conserve memory and improve performance slightly compared to creating a new instance each time.</p>"}},"c1554e19d34a341f":{"meta":{"keywords":["js.Linear.easeIn"],"title":"easeIn","description":"[static] Linear ease with no acceleration or deceleration"},"header":{"content":"<p>[static] Linear ease with no acceleration or deceleration</p>"},"returns":{"type":"Linear","content":""},"details":{"content":"<p>Linear ease with no acceleration or deceleration</p>"}},"515e2689add7a2d1":{"meta":{"keywords":["js.Linear.easeInOut"],"title":"easeInOut","description":"[static] Linear ease with no acceleration or deceleration"},"header":{"content":"<p>[static] Linear ease with no acceleration or deceleration</p>"},"returns":{"type":"Linear","content":""},"details":{"content":"<p>Linear ease with no acceleration or deceleration</p>"}},"4919ddfb10ad7aa4":{"meta":{"keywords":["js.Linear.easeNone"],"title":"easeNone","description":"[static] Linear ease with no acceleration or deceleration (for backwards compatibility)"},"header":{"content":"<p>[static] Linear ease with no acceleration or deceleration (for backwards compatibility)</p>"},"returns":{"type":"Linear","content":""},"details":{"content":"<p>Linear ease with no acceleration or deceleration (for backwards compatibility)</p>"}},"e96a5eb3d0ae1709":{"meta":{"keywords":["js.Linear.easeOut"],"title":"easeOut","description":"[static] Linear ease with no acceleration or deceleration"},"header":{"content":"<p>[static] Linear ease with no acceleration or deceleration</p>"},"returns":{"type":"Linear","content":""},"details":{"content":"<p>Linear ease with no acceleration or deceleration</p>"}},"0bce3fc5ec3e76b0":{"meta":{"keywords":["js.Linear.getRatio()"],"title":"getRatio()","description":"Translates the tween&#039;s progress ratio into the corresponding ease ratio."},"header":{"content":"<p>Translates the tween's progress ratio into the corresponding ease ratio.</p>"},"parameters":[{"name":"p","data_type":"Number","description":"<p>progress ratio (a value between 0 and 1 indicating the progress of the tween/ease)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Number","content":"<p>translated number</p>\n"},"details":{"content":"<p>Translates the tween's progress ratio into the corresponding ease ratio. This is the heart of the Ease, where it does all its work.</p>"}},"addd2d84013b1134":{"name":"type","returns":{"type":"String","content":"indicates the type of dragging (the properties that the dragging should affect). Any of the following work: <b>\"x,y\"</b> (basically the translateX and translateY of transform) | <b>\"top,left\"</b> | <b>\"rotation\"</b> |<b>\"scroll\"</b> | <b>\"x\"</b> | <b>\"y\"</b> | <b>\"top\"</b> | <b>\"left\"</b> | <b>\"scrollTop\"</b> | <b>\"scrollLeft\"</b>. The default is <code>\"x,y\"</code> for all browsers except old versions of IE that don't natively support transforms in which case <code>\"top,left\"</code> is the default.","contentShort":"indicates the type of dragging (the properties that the dragging should affect), like x. y, rotation, etc"}},"d2bd9f16ab20530b":{"name":"bounds","returns":{"type":"Element | String | Object","content":"to cause the draggable element to stay within the bounds of another DOM element (like a container), you can pass the element like<code>bounds:document.getElementById(\"container\")</code> or a jQuery object is fine too, or even selector text like <code>\"#container\"</code> which gets passed to whatever <code>TweenLite.selector</code> is. If you prefer, you can define bounds as a rectangle instead, like <code>bounds:{top:100, left:0, width:1000, height:800}</code>which is based on the parent's coordinate system (top/left would be from the upper left corner of the parent). Or you can define specific maximum and minimum values like <code>bounds:{minX:10, maxX:300, minY:50, maxY:500}</code> or <code>bounds:{minRotation:0, maxRotation:270}</code>.","contentShort":"to cause the draggable element to stay within the bounds of another DOM element (like a container)."}},"1c306a319826c160":{"name":"lockAxis","returns":{"type":"Boolean","content":"if <code>true</code>, dragging more than 2 pixels in either direction (horizontally or vertically) will lock movement into that axis so that the element can only be dragged that direction (horizontally or vertically, whichever had the most initial movement) during that drag. No diagonal movement will be allowed. Obviously this is only applicable for <code>type:\"x,y\"</code> and <code>type:\"top,left\"</code> and <code>type:\"scroll\"</code>Draggables. If you only want to allow vertical movement, you should use <code>type:\"y\"</code> or <code>type:\"top\"</code> or<code>type:\"scrollTop\"</code> or if you only want to allow horizontal movement, you should use <code>type:\"x\"</code> or<code>type:\"left\"</code> or <code>type:\"scrollLeft\"</code>.","contentShort":"if <code>true</code>, dragging more than 2 pixels in either direction (horizontally or vertically) will lock movement into that axis so that the element can only be dragged that direction"}},"aca7362aad5f9793":{"name":"trigger","returns":{"type":"Element | String | Object","content":"if you want only a certain area to trigger the dragging (like the top bar of a window) instead of the entire element, you can define a child element as the <code>trigger</code>, like<code>trigger:yourElement</code> or <code>trigger:\"#topBar\"</code> or <code>trigger:$(\"#yourID\")</code>. You may define the trigger as an element or a selector string (which gets fed to whatever <code>TweenLite.selector</code> is), or a jQuery object.","contentShort":"if you want only a certain area to trigger the dragging (like the top bar of a window) instead of the entire element, you can define a child element as the <code>trigger</code>."}},"66cba4d5da870b3b":{"name":"edgeResistance","returns":{"type":"Number","content":"a number between 0 and 1 that controls the degree to which resistance is applied to the element as it goes outside the bounds (if any are applied), where 1 won't allow it to be dragged past the bounds at all, 0.75 applies a lot of resistance (making the object travel at quarter-speed beyond the border while dragging), and 0.5 would be half-speed beyond the border, etc. This can even apply to rotation.","contentShort":"a number between 0 and 1 that controls the degree to which resistance is applied to the element as it goes outside the bounds."}},"3e643e36562500cb":{"name":"dragResistance","returns":{"type":"Number","content":"a number between 0 and 1 that controls the degree to which resistance is constantly applied to the element as it is dragged, where 1 won't allow it to be dragged at all, 0.75 applies a lot of resistance (making the object travel at quarter-speed), and 0.5 would be half-speed, etc. This can even apply to rotation.","contentShort":"a number between 0 and 1 that controls the degree to which resistance is constantly applied to the element as it is dragged."}},"df43bae4a56cfe24":{"name":"zIndexBoost","returns":{"type":"Boolean","content":"by default, for vertical/horizontal dragging, when an element is pressed/touched, it has its <code>zIndex</code> set to a high value (1000 by default) and that number gets incremented and applied to each new element that gets pressed/touched so that the stacking order looks correct (newly pressed objects rise to the top), but if you prefer to skip this behavior set<code>zIndexBoost:false</code>.","contentShort":"by default, for vertical/horizontal dragging, when an element is pressed/touched, it has its <code>zIndex</code> set to a high value (1000 by default)  so that newly selected items will rise above others."}},"316858f5f13de012":{"name":"cursor","returns":{"type":"String","content":"by default (except for <code>type:\"rotation\"</code>), the <code>cursor</code> css property of the element is set to <code>\"move\"</code> so that when the mouse rolls over it, there's a visual cue indicating that it's moveable, but you may define a different <code>cursor</code> if you prefer (as described at <a href=\"http://devdocs.io/css/cursor\" target=\"\">http://devdocs.io/css/cursor</a>) like<code>cursor:\"pointer\"</code>.","contentShort":"by default (except for <code>type:\"rotation\"</code>), the <code>cursor</code> css property of the element is set to <code>\"move\"</code> so that when the mouse rolls over it, there's a visual cue indicating that it's moveable."}},"138bfd0f79da1923":{"name":"autoScroll","returns":{"type":"Number","content":"To enable auto-scrolling when a Draggable is dragged within 40px of an edge of a scrollable container, set <code>autoScroll</code> to a non-zero value, where 1 is normal speed, 2 is double-speed, etc. (you can use any number). For a more intuitive/natural feel, it will scroll faster as the mouse/touch gets closer to the edge. The default value is 0 (no auto-scrolling). For a demo, see <a href=\"http://codepen.io/GreenSock/pen/YPvdYv/?editors=001\">http://codepen.io/GreenSock/pen/YPvdYv/?editors=001</a>","contentShort":"To enable auto-scrolling when a Draggable is dragged within 40px of an edge of a scrollable container, set <code>autoScroll</code> to a non-zero value, where 1 is normal speed, 2 is double-speed, etc."}},"a6944cbf3f89e97e":{"name":"liveSnap","returns":{"type":"Function | Boolean | Array | Object","content":"allows you to define rules that get applied <b>WHILE</b> the element is being dragged (whereas regular <code>snap</code> affects only the end value(s), where the element lands after the drag is released). For example, maybe you want the rotation to snap to 10-degree increments while dragging or you want the x and y values to snap to a grid (whichever cell is closest). You can define the<code>liveSnap</code> in any of the following ways:\n<ul>\n\t<li><b>as a function</b> - this function will be passed one numeric parameter, the natural (unaltered) value. The function must return whatever the new value should be (you run whatever logic you want inside your function and spit back the value). For example, to make the value snap to the closest increment of 50, you'd do <code>liveSnap:function(value) { return Math.round(value / 50) * 50; }</code></li>\n\t<li><b>as an array</b> - if you use an array of values, Draggable will loop through the array and find the closest number (as long as it's not outside any bounds you defined). For example, to have it choose the closest number from 10, 50, 200, and 450, you'd do <code>liveSnap:[10,50,200,450]</code></li>\n\t<li><b>as an object</b> - if you'd like to use different logic for each property, like if <code>type</code> is <code>\"x,y\"</code> and you'd like to have the \"x\" part snap to one set of values, and the \"y\" part snap to a different set of values, you can use an object that has matching properties, like: <code>liveSnap:{x:[5,20,80,400], y:[10,60,80,500]}</code> or if <code>type</code> is <code>\"top,left\"</code> and you want to use a different function for each, you'd do <code>liveSnap:{top:function(value) { return Math.round(value / 50) * 50; }, left:function(value) { return Math.round(value / 100) * 100; }}</code>. As of GSAP 1.20.0, you can define a <code>points</code> property inside this object that combines both x and y, like <code>liveSnap:{points:[{x:0, y:0},{x:100, y:0}],\n radius:20}</code> which will snap to any point in the array when it's within 20px (distance). Or you can even use a function-based value to run your own snapping logic, like <code>liveSnap:{points:function(point) { //run custom logic and return a new point }}</code>. See <a href=\"#snapping\">snapping section</a> of this page for examples.</li>\n\t<li><b>as a boolean (true)</b> - live snapping will use whatever is defined for the <code>snap</code> (so that instead of only applying to the end value(s), it will apply it \"live\" while dragging too)</li>\n</ul>","contentShort":"defines rules that get applied <b>WHILE</b> the element is being dragged."}},"ae5d53b7dad3637a":{"name":"dragClickables","returns":{"type":"Boolean","content":"By default, Draggable will ignore clicks on <code>&lt;a&gt;</code>, <code>&lt;input&gt;</code> <code>&lt;select&gt;</code>,<code>&lt;button&gt;</code>, and <code>&lt;textarea&gt;</code> elements (as well as any element that has a <code>data-clickable=\"true\"</code>attribute), allowing the browser's default behavior (like clicking on an input would give it focus and drop the cursor there to begin typing), but if you want Draggable to hijack those clicks and initiate dragging instead, set <code>dragClickables:true</code>.","contentShort":"by setting <code>dragClickables:true</code> Draggable will initiate dragging when you click on <code>&lt;a&gt;</code>, <code>&lt;input&gt;</code> <code>&lt;select&gt;</code>,<code>&lt;button&gt;</code>, and <code>&lt;textarea&gt;</code> elements."}},"5b6654db000793db":{"name":"throwProps","returns":{"type":"Boolean | Object","content":"ThrowPropsPlugin is the key to getting the momentum-based motion after the users' mouse (or touch) is released; to have Draggable auto-apply a ThrowPropsPlugin tween to the element when the mouse is released (or touch ends), you can set <code>throwProps:true</code>. Or for advanced effects, you can define the actual <code>throwProps</code> object that will get fed into the<code>ThrowPropsPlugin.to()</code> call, like <code>throwProps:{top:{min:0, max:1000, end:[0,200,400,600]}}</code>. However, if you want ultimate control over the <code>ThrowPropsPlugin</code> tween, you can simply use an onDragEnd to call your own function that creates the tween. Note that ThrowPropsPlugin is a membership benefit of <a href=\"http://www.greensock.com/club/\" target=\"\">Club GreenSock</a>, so it is not in the public downloads or github repository.\n\nIf <code>throwProps:true</code> is defined, you may also use any of the following configuration properties that apply to the movement after the mouse/touch is released:\n<ul>\n\t<li><b>snap</b> : Function | Object | Array - allows you to define rules for where the element can land after it gets released. For example, maybe you want the rotation to always end at a 90-degree increment or you want the x and y values to be exactly on a grid (whichever cell is closest to the natural landing spot) or maybe you want it to land on a very specific value. You can define the <code>snap</code> in any of the following ways:\n<ul>\n\t<li><b>as a function</b> - this function will be passed one numeric parameter, the natural ending value. The function must return whatever the new ending value should be (you run whatever logic you want inside the function and spit back the value). For example, to make the value snap to the closest increment of 50, you'd do <code>snap:function(endValue) { return Math.round(endValue / 50) * 50; }</code></li>\n\t<li><b>as an array</b> - if you use an array of values, ThrowPropsPlugin will first plot the natural landing position and then loop through the array and find the closest number (as long as it's not outside any bounds you defined). For example, to have it choose the closest number from 10, 50, 200, and 450, you'd do <code>snap:[10,50,200,450]</code></li>\n\t<li><b>as an object</b> - if you'd like to use different logic for each property, like if <code>type</code> is <code>\"x,y\"</code> and you'd like to have the \"x\" part snap to one set of values, and the \"y\" part snap to a different set of values, you can use an object that has matching properties, like: <code>snap:{x:[5,20,80,400], y:[10,60,80,500]}</code> or if <code>type</code> is <code>\"top,left\"</code> and you want to use a different function for each, you'd do <code>snap:{top:function(endValue) { return Math.round(endValue / 50) * 50; }, left:function(endValue) { return Math.round(endValue / 100) * 100; }}</code>. As of GSAP 1.20.0, you can define a <code>points</code> property inside this object that combines both x and y, like <code>liveSnap:{points:[{x:0, y:0},{x:100, y:0}],\n radius:20}</code> which will snap to any point in the array when it's within 20px (distance). Or you can even use a function-based value to run your own snapping logic, like <code>liveSnap:{points:function(point) { //run custom logic and return a new point }}</code>. See <a href=\"#snapping\">snapping section</a> of this page for examples.</li>\n</ul>\n</li>\n\t<li><b>onThrowUpdate</b> : Function - a function that should be called each time the ThrowPropsPlugin tween updates/renders (basically on each \"tick\" of the engine while the tween is active). This only applies to the tween that gets generated after the user releases their mouse/touch - the function is not called while the user is dragging the element (that's what <code>onDrag</code> is for). By default, the scope of the <code>onThrowUpdate</code> is the Draggable instance itself, but you may define an<code>onThrowUpdateScope</code> if you prefer, just like any other TweenLite or TweenMax.</li>\n\t<li><b>onThrowComplete</b> : Function - a function that should be called when the ThrowPropsPlugin tween finishes. This only applies to the tween that gets generated after the user releases their mouse/touch - the function is not called immediately when the user releases their mouse/touch - that's what <code>onDragEnd</code> is for. By default, the scope of the <code>onThrowComplete</code> is the Draggable instance itself, but you may define an <code>onThrowCompleteScope</code> if you prefer, just like any other TweenLite or TweenMax.</li>\n\t<li><b>throwResistance</b> : Number - a number (1000 by default) that controls how much resistance or friction there is when the mouse/touch is released and momentum-based motion is enabled (by setting <code>throwProps:true</code>). The larger the number, the more resistance and the quicker the motion decelerates. (requires <code>ThrowPropsPlugin</code> and setting <code>throwProps:true</code>, otherwise<code>throwResistance</code> will simply be ignored.)</li>\n\t<li><b>maxDuration</b> : Number - the maximum duration (in seconds) that the kinetic-based throwProps tween can last. <code>ThrowPropsPlugin</code> will automatically analyze the velocity and bounds and determine an appropriate duration (faster movements would typically result in longer tweens to decelerate), but you can cap the duration by defining a <code>maxDuration</code>. The default is 10 seconds. This has nothing to do with the maximum amount of time that the user can drag the object - it's only the <code>throwProps</code> tween that results <b>after</b> they release the mouse/touch. (requires<code>ThrowPropsPlugin</code> and setting <code>throwProps:true</code>, otherwise <code>maxDuration</code> will simply be ignored.)</li>\n\t<li><b>minDuration</b> : Number - the minimum duration (in seconds) that the kinetic-based throwProps tween should last. <code>ThrowPropsPlugin</code> will automatically analyze the velocity and bounds and determine an appropriate duration (faster movements would typically result in longer tweens to decelerate), but you can force the tween to take at least a certain amount of time by defining a<code>minDuration</code>. The default is 0.2 seconds. This has nothing to do with the minimum amount of time that the user can drag the object - it's only the <code>throwProps</code> tween that results <b>after</b> they release the mouse/touch. (requires <code>ThrowPropsPlugin</code> and setting <code>throwProps:true</code>, otherwise <code>minDuration</code> will simply be ignored.)</li>\n\t<li><b>overshootTolerance</b> : Number - affects how much overshooting is allowed before smoothly returning to the resting position at the end of the tween. This can happen when the initial velocity from the flick would normally cause it to exceed the bounds/min/max. The larger the <code>overshootTolerance</code> the more leeway the tween has to temporarily shoot past the max/min if necessary. The default is 1. If you don't want to allow any overshooting, you can set it to 0.</li>\n</ul>","contentShort":"Enables momentum-based motion after the users' mouse (or touch) is released."}},"e6ec9a76a8a3b2ae":{"name":"minimumMovement","returns":{"type":"Integer","content":"By default, Draggable requires that the mouse/touch moves more than 2 pixels in order to be interpreted as a drag, but you can change that threshold using <code>minimumMovement</code>. So <code>minimumMovement:6</code> would require that the mouse/touch moves more than 6 pixels to be interpreted as a drag. ","contentShort":"by default, Draggable requires that the mouse/touch moves more than 2 pixels in order to be interpreted as a drag, but you can change that threshold using <code>minimumMovement</code>. "}},"2ba22762a5b9b4a0":{"name":"clickableTest","returns":{"type":"Function","content":"Your Draggable may contain child elements that are \"clickable\", like links (&lt;a&gt; tags), &lt;button&gt; or &lt;input&gt; elements, etc. By default, it treats clicks/taps on those elements differently, not allowing the user to drag them. You can set <code>dragClickables:true</code> to override that, but it still may be handy to control exactly what Draggable considers to be a \"clickable\" element, so you can use your own function that accepts the clicked-on element as the only parameter and returns <code>true</code> or <code>false</code> accordingly. Draggable will call this function whenever the user presses their mouse/finger down on a Draggable, and the target of that event will be passed to your <code>clickableTest</code> function. ","contentShort":"A custom function that developers can use for debugging purposes to determine what element has been clicked inside a Draggable. "}},"0e014e8442979a30":{"name":"onPress","returns":{"type":"Function","content":"a function that should be called as soon as the mouse (or touch) <b>presses down</b> on the element. Inside that function, <code>\"this\"</code> refers to the <code>Draggable</code> instance (unless you specifically set the scope using <code>onPressScope</code>), making it easy to access the target element (<code>this.target</code>) or the boundary coordinates (<code>this.maxX, this.minX, this.maxY</code>, and <code>this.minY</code>). By default, the<code>pointerEvent</code> (last mouse or touch event related to the Draggable) will be passed as the only parameter to the callback so that you can, for example, access its pageX or pageY or target or currentTarget, etc.","contentShort":"a function that should be called as soon as the mouse (or touch) <b>presses down</b> on the element. Inside that function."}},"11eab4868f87b7c3":{"name":"onDragStart","returns":{"type":"Function","content":"a function that should be called as soon as the mouse (or touch) <b>moves more than 2 pixels</b>, meaning that dragging has begun. Inside that function, <code>\"this\"</code> refers to the <code>Draggable</code>instance (unless you specifically set the scope using <code>onDragStartScope</code>), making it easy to access the target element (<code>this.target</code>) or the boundary coordinates (<code>this.maxX, this.minX, this.maxY</code>, and <code>this.minY</code>). By default, the <code>pointerEvent</code> (last mouse or touch event related to the Draggable) will be passed as the only parameter to the callback so that you can, for example, access its pageX or pageY or target or currentTarget, etc.","contentShort":"a function that should be called as soon as the mouse (or touch) <b>moves more than 2 pixels</b>."}},"9bea7a673f2a5f91":{"name":"onDrag","returns":{"type":"Function","content":"a function that should be called every time the mouse (or touch) <b>moves</b> during the drag. Inside that function, <code>\"this\"</code> refers to the <code>Draggable</code> instance (unless you specifically set the scope using <code>onDragScope</code>), making it easy to access the target element (<code>this.target</code>) or the boundary coordinates (<code>this.maxX, this.minX, this.maxY</code>, and <code>this.minY</code>). By default, the <code>pointerEvent</code>(last mouse or touch event related to the Draggable) will be passed as the only parameter to the callback so that you can, for example, access its pageX or pageY or target or currentTarget, etc.","contentShort":"a function that should be called every time the mouse (or touch) <b>moves</b> during the drag. "}},"b1f70b1c29bb1592":{"name":"onDragEnd","returns":{"type":"Function","content":"a function that should be called as soon as the mouse (or touch) is <b>released</b>after the drag. Even if nothing is moved, the <code>onDragEnd</code> will always fire, whereas the <code>onClick</code> callback only fires if the mouse/touch moves less than 3 pixels. Inside that function, <code>\"this\"</code> refers to the<code>Draggable</code> instance (unless you specifically set the scope using <code>onDragEndScope</code>), making it easy to access the target element (<code>this.target</code>) or the boundary coordinates (<code>this.maxX, this.minX, this.maxY</code>, and <code>this.minY</code>). By default, the <code>pointerEvent</code> (last mouse or touch event related to the Draggable) will be passed as the only parameter to the callback so that you can, for example, access its pageX or pageY or target or currentTarget, etc.","contentShort":"a function that should be called as soon as the mouse (or touch) is <b>released</b>after the drag. "}},"8ba85d1dc9b4a8e9":{"name":"onRelease","returns":{"type":"Function","content":"a function that should be called as soon as the mouse (or touch) is <b>released</b> after having been pressed on the target element, regardless of whether or not anything was dragged. Inside that function, <code>\"this\"</code> refers to the <code>Draggable</code> instance (unless you specifically set the scope using<code>onReleaseScope</code>), making it easy to access the target element (<code>this.target</code>) or the boundary coordinates (<code>this.maxX, this.minX, this.maxY</code>, and <code>this.minY</code>). By default, the <code>pointerEvent</code>(last mouse or touch event related to the Draggable) will be passed as the only parameter to the callback so that you can, for example, access its pageX or pageY or target or currentTarget, etc.","contentShort":"a function that should be called as soon as the mouse (or touch) is <b>released</b> after having been pressed on the target element, regardless of whether or not anything was dragged. "}},"36b18ca91ec3b297":{"name":"onClick","returns":{"type":"Function","content":"a function that should be called only when the mouse/touch is pressed on the element and released without moving 3 pixels or more. This makes it easier to discern the user's intent (click or drag). Inside that function, <code>\"this\"</code> refers to the <code>Draggable</code> instance (unless you specifically set the scope using <code>onClickScope</code>), making it easy to access the target element (<code>this.target</code>) or the boundary coordinates (<code>this.maxX, this.minX, this.maxY</code>, and <code>this.minY</code>). By default, the<code>pointerEvent</code> (last mouse or touch event related to the Draggable) will be passed as the only parameter to the callback so that you can, for example, access its pageX or pageY or target or currentTarget, etc.","contentShort":"a function that should be called only when the mouse/touch is pressed on the element and released without moving 3 pixels or more."}},"1458512f4f6da6b0":{"name":"onPressParams","returns":{"type":"Array","content":"an optional array of parameters to feed the <code>onPress</code> callback. For example,<code>onPressParams:[\"drag started\", 5]</code> would fit with this code: <code>onPress:function(message, num) { console.log(\"message: \" + message + \", num: \" + num); }</code>","contentShort":"an optional array of parameters to feed the <code>onPress</code> callback."}},"0310445a4a5ffbf5":{"name":"onDragStartParams","returns":{"type":"Array","content":"an optional array of parameters to feed the <code>onDragStart</code> callback. For example, <code>onDragStartParams:[\"drag started\", 5]</code> would fit with this code:<code>onDragStart:function(message, num) { console.log(\"message: \" + message + \", num: \" + num); }</code>","contentShort":"an optional array of parameters to feed the <code>onDragStart</code> callback."}},"81c56c4009633eaf":{"name":"onDragParams","returns":{"type":"Array","content":"an optional array of parameters to feed the <code>onDrag</code> callback. For example,<code>onDragParams:[\"dragged\", 5]</code> would fit with this code: <code>onDrag:function(message, num) { console.log(\"message: \" + message + \", num: \" + num); }</code>","contentShort":"an optional array of parameters to feed the <code>onDrag</code> callback."}},"f30ae6a0d4cb24a2":{"name":"onDragEndParams","returns":{"type":"Array","content":"an optional array of parameters to feed the <code>onDragEnd</code> callback. For example, <code>onDragEndParams:[\"drag ended\", 5]</code> would fit with this code:<code>onDragEnd:function(message, num) { console.log(\"message: \" + message + \", num: \" + num); }</code>","contentShort":"an optional array of parameters to feed the <code>onDragEnd</code> callback."}},"5937ab91418da4cc":{"name":"onReleaseParams","returns":{"type":"Array","content":"an optional array of parameters to feed the <code>onRelease</code> callback. For example, <code>onReleaseParams:[\"drag ended\", 5]</code> would fit with this code:<code>onRelease:function(message, num) { console.log(\"message: \" + message + \", num: \" + num); }</code>","contentShort":"an optional array of parameters to feed the <code>onRelease</code> callback."}},"c584f051bacbf69a":{"name":"onClickParams","returns":{"type":"Array","content":"an optional array of parameters to feed the <code>onClick</code> callback. For example,<code>onClickParams:[\"clicked\", 5]</code> would fit with this code: <code>onClick:function(message, num) { console.log(\"message: \" + message + \", num: \" + num); }</code>","contentShort":"an optional array of parameters to feed the <code>onClick</code> callback."}},"16500e6ab1ae062d":{"name":"onPressScope","returns":{"type":"Object","content":"defines the scope of the <code>onPress</code> function (what <code>\"this\"</code> refers to inside that function).","contentShort":""}},"98f8c0d24cc27123":{"name":"onDragStartScope","returns":{"type":"Object","content":"defines the scope of the <code>onDragStart</code> function (what <code>\"this\"</code> refers to inside that function).","contentShort":""}},"8d4780fbb348c43d":{"name":"onDragScope","returns":{"type":"Object","content":"defines the scope of the <code>onDrag</code> function (what <code>\"this\"</code> refers to inside that function).","contentShort":""}},"71b5e21519642473":{"name":"onDragEndScope","returns":{"type":"Object","content":"defines the scope of the <code>onDragEnd</code> function (what <code>\"this\"</code> refers to inside that function).","contentShort":""}},"cf97049a05eea106":{"name":"onReleaseScope","returns":{"type":"Object","content":"defines the scope of the <code>onRelease</code> function (what <code>\"this\"</code> refers to inside that function).","contentShort":""}},"4ce57534a0d91a84":{"name":"onClickScope","returns":{"type":"Object","content":"defines the scope of the <code>onClick</code> function (what <code>\"this\"</code> refers to inside that function).","contentShort":""}},"f10a4a463f486d1a":{"name":"onLockAxis","returns":{"type":"Function","content":"a function that should be called as soon as movement is locked into the horizontal or vertical axis. This happens when <code>lockAxis</code> is <code>true</code> and the user drags enough for Draggable to determine which axis to lock. It also happens on touch-enabled devices when you have a Draggable whose <code>type</code> only permits it to drag along one axis (like <code>type:\"x\"</code>, <code>type:\"y\"</code>, <code>type:\"left\"</code>, or <code>type:\"top\"</code>) and the user touch-drags and Draggable determines the direction, either allowing native touch-scrolling or Draggable-induced dragging. Inside the function, <code>\"this\"</code> refers to the <code>Draggable</code> instance, making it easy to access the locked axis (<code>this.lockedAxis</code> which will either be <code>\"x\"</code> or <code>\"y\"</code>), or the target element (<code>this.target</code>), etc. By default, the <code>pointerEvent</code> (last mouse or touch event related to the Draggable) will be passed as the only parameter to the callback so that you can, for example, access its <code>pageX</code> or <code>pageY</code> or <code>target</code> or <code>currentTarget</code>, etc.","contentShort":"a function that should be called as soon as movement is locked into the horizontal or vertical axis."}},"bcc4d262959c2e60":{"name":"callbackScope","returns":{"type":"Object","content":"The scope to be used for all of the callbacks (onDrag, onDragEnd, onDragStart, etc). The scope is what \"this\" refers to inside any of the callbacks. The older callback-specific scope properties are deprecated but still work.","contentShort":""}},"d29495128260fefc":{"name":"allowNativeTouchScrolling","returns":{"type":"Boolean","content":"by default, allows you to native touch-scroll in the opposite direction as Draggables that are limited to one axis . For example, a Draggable of type : \" x \" or \" left \" would permit native touch-scrolling in the vertical direction , and type : \" y \" or \" top \" would permit native horizontal touch-scrolling.","contentShort":"by default, allows you to native touch-scroll in the opposite direction as Draggables that are limited to one axis ."}},"05478e8ef895c98c":{"name":"force3D","returns":{"type":"Boolean","content":"by default, 3D transforms are used (when the browser supports them) in order to force the element onto its own layer on the GPU, thus speeding compositing. Typically this provides the best performance, but you can disable it by setting <code>force3D:false</code>. This may be a good idea if the element that you're dragging contains child elements that are animating.","contentShort":"by default, 3D transforms are used (when the browser supports them) in order to force the element onto its own layer on the GPU, thus speeding compositing."}},"ffa4332009ed59c7":{"returns":{"type":"Function","contentShort":"An onUpdate callback for the throwProps tween that's generated when the element is flicked.","content":"A function that should be called every time the element updates its position/rotation during the \"throw\" animation (after the user flicks, releasing the mouse/touch with momentum). It is essentially the onUpdate that is assigned to that throwProps tween, so it gets called on every \"tick\" (refresh) until the element comes to rest. "}},"5f649fd49e95f606":{"returns":{"type":"Function","contentShort":"A function that should be called when the \"flick\" (throwProps) animation finishes (when the element comes to rest after a \"flick\").","content":"A function that should be called when the \"flick\" (throwProps) animation finishes (when the element comes to rest after a \"flick\"). Only applies when ThrowPropsPlugin is loaded and you have defined <code>throwProps:true</code>. It is essentially the onComplete that's assigned to the throwProps tween. "}},"11f92408d2609969":{"meta":{"keywords":["js.Animation"],"title":"Animation","description":""},"header":{"content":"<p>Base class for all TweenLite, TweenMax, TimelineLite, and TimelineMax classes, providing core methods/properties/functionality, but there is no reason to create an instance of this class directly.</p>"}},"6ef668a9f15ebadd":{"meta":{"keywords":["js.Animation.Animation()"],"title":"Animation","description":"Constructor"},"header":{"content":"<p>Constructor</p>"},"parameters":[{"name":"duration","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — duration in seconds (or frames for frames-based tweens)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — configuration variables (for example, <code>{x:100, y:0, opacity:0.5, onComplete:myFunction}</code>)</p>\n"}],"returns":{},"details":{"content":"<p>Constructor</p>"}},"fd0b8307fd5118c6":{"meta":{"keywords":["js.Animation.data"],"title":"data","description":"A place to store any data you want (initially populated with vars.data if it exists)."},"header":{"content":"<p>A place to store any data you want (initially populated with vars.data if it exists).</p>"},"returns":{"type":"*","content":""},"details":{"content":"<p>A place to store any data you want (initially populated with vars.data if it exists).</p>"}},"4e8b086407f4fb2c":{"meta":{"keywords":["js.Animation.timeline"],"title":"timeline","description":"[Read-only] Parent timeline."},"header":{"content":"<p>[Read-only] Parent timeline.</p>"},"returns":{"type":"SimpleTimeline","content":""},"details":{"content":"<p>Parent timeline. Every animation is placed onto a timeline (the root timeline by default) and can only have one parent. An instance cannot exist in multiple timelines at once.</p>"}},"1d9a881066fb186e":{"meta":{"keywords":["js.Animation.vars"],"title":"vars","description":"The vars object passed into the constructor which stores configuration variables like onComplete, onUpdate, etc."},"header":{"content":"<p>The vars object passed into the constructor which stores configuration variables like onComplete, onUpdate, etc.</p>"},"returns":{"type":"Object","content":""},"details":{"content":"<p>The <code>vars</code> object passed into the constructor which stores configuration variables like onComplete, onUpdate, etc. as well as tweening properties like opacity, x, y or whatever.</p>"}},"f35957809b52dfd2":{"meta":{"keywords":["js.Animation.delay()","Delay","Utilities"],"title":"delay()","description":"Gets or sets the animation&#039;s initial delay which is the length of time in seconds (or frames for frames-based tweens) before the animation should begin."},"header":{"content":"<p>Gets or sets the animation's initial delay which is the length of time in seconds (or frames for frames-based tweens) before the animation should begin.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"* ","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the animation's initial <code>delay</code> which is the length of time in seconds (or frames for frames-based tweens) before the animation should begin. A tween's starting values are not recorded until after the <code>delay</code> has expired (except in <code>from()</code> tweens which render immediately by default unless <code>immediateRender:false</code> is set in the <code>vars</code>parameter). An animation's <code>delay</code> is unaffected by its <code>timeScale</code>, so if you were to change <code>timeScale</code> from 1 to 10, for example, it wouldn't cause the delay to grow tenfold.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like<code>myAnimation.delay(2).timeScale(0.5).play(1);</code></p><pre class='pre-container prettyprint'>var currentDelay = myAnimation.delay(); //gets current delay<br />myAnimation.delay(2); //sets delay</pre>"}},"560295553a39dad1":{"meta":{"keywords":["js.Animation.duration()"],"title":"duration()","description":"Gets or sets the animation&#039;s duration, not including any repeats or repeatDelays (which are only available in TweenMax and TimelineMax)."},"header":{"content":"<p>Gets or sets the animation's duration, not including any repeats or repeatDelays (which are only available in TweenMax and TimelineMax).</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the animation's duration, <b>not</b> including any repeats or repeatDelays (which are only available in TweenMax and TimelineMax). For example, if a TweenMax instance has a <code>duration</code> of 2 and a <code>repeat</code> of 3, its <code>totalDuration</code> would be 8 (one standard play plus 3 repeats equals 4 total cycles).</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myAnimation.duration(2).delay(0.5).play(1);</code></p><pre class='pre-container prettyprint'>var currentDuration = myAnimation.duration(); //gets current duration<br />myAnimation.duration(2); //sets duration</pre>"}},"ac42870b8c3fb694":{"meta":{"keywords":["js.Animation.endTime()"],"title":"endTime()","description":"Returns the time at which the animation will finish according to the parent timeline&#039;s local time. "},"header":{"content":"<p>Returns the time at which the animation will finish according to the parent timeline's local time. </p>"},"parameters":[{"name":"includeRepeats","data_type":"Boolean","description":"<p>(default = <code>true</code>) — by default, repeats are included when calculating the end time but you can pass <code>false</code> to prevent that.</p>\n"}],"returns":{"type":"Number","content":""},"details":{"content":"<p>Returns the time at which the animation will finish according to the parent timeline's local time. This does factor in the timeScale. For example:<br /></p><pre class='pre-container prettyprint'>var tl = new TimelineLite();<br />var tween = TweenLite.to(e, 1, {x:100}); //create a 1-second tween<br />tl.add(tween, 0.5); //insert the tween at 0.5 seconds into the timeline<br />console.log(tween.endTime()); //1.5<br />tween.timeScale(2); //double the speed of the tween, thus it'll finish in half the normal time<br />console.log(tween.endTime()); //1</pre>"}},"7e0c6f182a9fa2db":{"meta":{"keywords":["js.Animation.eventCallback()"],"title":"eventCallback()","description":"Gets or sets an event callback like &quot;onComplete&quot;, &quot;onUpdate&quot;, &quot;onStart&quot;, &quot;onReverseComplete&quot; or &quot;onRepeat&quot; (onRepeat only applies to TweenMax or TimelineMax instances) along with any parameters that should be passed to that callback."},"header":{"content":"<p>Gets or sets an event callback like \"onComplete\", \"onUpdate\", \"onStart\", \"onReverseComplete\" or \"onRepeat\" (onRepeat only applies to TweenMax or TimelineMax instances) along with any parameters that should be passed to that callback.</p>"},"parameters":[{"name":"type","data_type":"String","description":"<p>The type of event callback, like <code>\"onComplete\", \"onUpdate\", \"onStart\"</code> or <code>\"onRepeat\"</code>. This is case-sensitive.</p>\n"},{"name":"callback","data_type":"Function","description":"<p>(default = <code>null</code>)<code></code> — The function that should be called when the event occurs.</p>\n"},{"name":"params","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — An array of parameters to pass the callback. Use <code>\"{self}\"</code> to refer to the animation instance itself. Example: <code>[\"param1\",\"{self}\"]</code></p>\n"},{"name":"scope","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The scope in which the callback should be called (basically, what &#8220;this&#8221; refers to in the function). NOTE: this parameter only pertains to the JavaScript and AS2 versions; it is omitted in AS3.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the all but the first parameter returns the current value (getter), whereas defining more than the first parameter sets the callback (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets an event callback like <code>\"onComplete\", \"onUpdate\", \"onStart\", \"onReverseComplete\"</code> or <code>\"onRepeat\"</code> (<code>onRepeat</code> only applies to TweenMax or TimelineMax instances) along with any parameters that should be passed to that callback. This is the same as defining the values directly in the constructor's <code>vars</code> parameter initially, so the following two lines are functionally equivalent:</p><pre class='pre-container prettyprint'>//the following two lines produce IDENTICAL results:<br />var myAnimation = new TweenLite(mc, 1, {x:100, onComplete:myFunction, onCompleteParams:[\"param1\",\"param2\"]});<br />myAnimation.eventCallback(\"onComplete\", myFunction, [\"param1\",\"param2\"]);</pre><p>The benefit of using <code>eventCallback()</code> is that it allows you to set callbacks even after the animation instance has been created and it also allows you to inspect the callback references or even delete them on-the-fly (use <code>null</code> to delete the event callback).<br /></p><pre class='pre-container prettyprint'>//deletes the onUpdate<br />myAnimation.eventCallback(\"onUpdate\", null);</pre><p><b>IMPORTANT: </b>Animation instances can only have one callback associated with each event type (one <code>onComplete</code>, one <code>onUpdate</code>, one <code>onStart</code>, etc.). So setting a new value will overwrite the old one. All of the values populate the <code>vars</code> object too which was originally passed into the constructor (think of that like a storage place for configuration data).</p><p>This method serves as both a getter and setter. Omitting all but the first parameter returns the current value (getter), whereas defining more than the first parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myAnimation.eventCallback(\"onComplete\", completeHandler).eventCallback(\"onUpdate\", updateHandler, [\"param1\",\"{self}\"]).play(1);</code></p><pre class='pre-container prettyprint'>var currentOnComplete = myAnimation.eventCallback(\"onComplete\"); //gets current onComplete<br />myAnimation.eventCallback(\"onComplete\", myFunction); //sets the onComplete</pre><p><b>Note:</b> - Due to the way JavaScript doesn't maintain scope (what \"<code>this</code>\" refers to, or the context) in function calls, it can be useful to define the scope specifically in the 4th parameter. </p>"}},"b634b21b470a9e55":{"meta":{"keywords":["js.Animation.invalidate()"],"title":"invalidate()","description":"Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values."},"header":{"content":"<p>Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values.</p>"},"parameters":[],"returns":{"type":"*","content":"<p><code>*</code> — self (makes chaining easier)</p>\n"},"details":{"content":"<p>Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values. When you <code>invalidate()</code> an animation, it will be re-initialized the next time it renders and its <code>vars</code>object will be re-parsed. The timing of the animation (duration, startTime, delay) will not be affected.</p><p>Another example would be if you have a <code>TweenMax(mc, 1, {x:100, y:100})</code> that ran when mc.x and mc.y were initially at 0, but now mc.x and mc.y are 200 and you want them tween to 100 again, you could simply <code>invalidate()</code> the tween and <code>restart()</code> it. Without invalidating first, restarting it would cause the values jump back to 0 immediately (where they started when the tween originally began). When you invalidate a TimelineLite/TimelineMax, it automatically invalidates all of its children.</p>"}},"cdfc78d10c0d9317":{"meta":{"keywords":["js.Animation.isActive()"],"title":"isActive()","description":"Indicates whether or not the animation is currently active (meaning the virtual playhead is actively moving across this instance&#039;s time span and it is not paused, nor are any of its ancestor timelines)."},"header":{"content":"<p>Indicates whether or not the animation is currently active (meaning the virtual playhead is actively moving across this instance's time span and it is not paused, nor are any of its ancestor timelines).</p>"},"parameters":[],"returns":{"type":"Boolean","content":""},"details":{"content":"<p>Indicates whether or not the animation is currently active (meaning the virtual playhead is actively moving across this instance's time span and it is not paused, nor are any of its ancestor timelines). So for example, if a tween is in the middle of tweening, it's active, but after it is finished (or before it begins), it is <b>not</b> active. If it is paused or if it is placed inside of a timeline that's paused (or if any of its ancestor timelines are paused), <code>isActive()</code> will return <code>false</code>. If the playhead is directly on top of the animation's start time (even if it hasn't rendered quite yet), that counts as \"active\".</p><p>You may also check the <code><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenMax.progress()\"><span data-link-id=\"9555ceafd00d82bd\"></span></span></code> or <code><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenMax.totalProgress()\"><span data-link-id=\"3783d0a065069766\"></span></span></code>, but those don't take into consideration the paused state or the position of the parent timeline's playhead.</p><p>In the demo below we use isActive() to make sure the tween can not have its direction changed while it is active. Click the <strong>toogle tween direction</strong> button repeatedly to see that clicks are ignored while the box is moving.</p><p data-height=\"256\" data-theme-id=\"9446\" data-slug-hash=\"Pwzomo\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/Pwzomo/'>check isActive()</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p>"}},"9b20c27ddbcaa297":{"meta":{"keywords":["js.Animation.kill()"],"title":"kill()","description":"Kills the animation entirely or in part depending on the parameters."},"header":{"content":"<p>Kills the animation entirely or in part depending on the parameters.</p>"},"parameters":[{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — To kill only specific properties, use a generic object containing enumerable properties corresponding to the ones that should be killed, like <code>{x:true, y:true}</code>. The values assigned to each property of the object don&#8217;t matter &#8211; the sole purpose of the object is for iteration over the named properties (in this case, <code>x</code> and <code>y</code>). If no object (or <code>null</code>) is defined, <b>ALL</b> properties will be killed.</p>\n"},{"name":"target","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — To kill only aspects of the animation related to a particular target (or targets), reference it here. For example, to kill only parts having to do with <code>myObject</code>, do <code>kill(null, myObject)</code> or to kill only parts having to do with <code>myObject1</code> and<code>myObject2</code>, do <code>kill(null, [myObject1, myObject2])</code>. If no target is defined, <b>ALL</b> targets will be affected.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Kills the animation entirely or in part depending on the parameters. Simply calling <code>kill()</code> (omitting the parameters) will immediately stop the animation and release it for garbage collection. To kill only particular tweening properties of the animation, use the first parameter which should be a generic object with enumerable properties corresponding to those that should be killed, like <code>{x:true, y:true}</code>. The second parameter allows you to define a target (or array of targets) to affect.</p><p>Note: the values assigned to each property of the <code>vars</code> parameter object don't matter - the sole purpose of the object is for iteration over the named properties. In other words, <code>{x:true, y:true}</code> would produce the same results as <code>{x:false, y:false}</code>.</p><pre class='pre-container prettyprint'>//kill the entire animation:<br />myAnimation.kill();<br /> <br />//kill only the \"x\" and \"y\" properties of the animation (all targets):<br />myAnimation.kill({x:true, y:true});<br /> <br />//kill all parts of the animation related to the target \"myObject\" (if the tween has multiple targets, the others will not be affected):<br />myAnimation.kill(null, myObject);<br /> <br />//kill only the \"x\" and \"y\" properties of animations of the target \"myObject\":<br />myAnimation.kill({x:true, y:true}, myObject);<br />  <br />//kill only the \"opacity\" properties of animations of the targets \"myObject1\" and \"myObject2\":<br />myAnimation.kill({opacity:true}, [myObject1, myObject2]);</pre>"}},"96fc1d850d4a51e6":{"meta":{"keywords":["js.Animation.pause()"],"title":"pause()","description":"Pauses the instance, optionally jumping to a specific time."},"header":{"content":"<p>Pauses the instance, optionally jumping to a specific time.</p>"},"parameters":[{"name":"atTime","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The time (or label for TimelineLite/TimelineMax instances) that the instance should jump to before pausing (if none is defined, it will pause wherever the playhead is currently located).</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>default = <code>true</code>)<code></code> — If <code>true</code> (the default), no events or callbacks will be triggered when the playhead moves to the new position defined in the <code>atTime</code> parameter.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Pauses the instance, optionally jumping to a specific time.</p><p>If you define a time to jump to (the first parameter, which could also be a label for TimelineLite or TimelineMax instances), the playhead moves there immediately and if there are any events/callbacks inbetween where the playhead was and the new time, they will not be triggered because by default <code>suppressEvents</code> (the 2nd parameter) is <code>true</code>. Think of it like picking the needle up on a record player and moving it to a new position before placing it back on the record. If, however, you do not want the events/callbacks suppressed during that initial move, simply set the <code>suppressEvents</code> parameter to <code>false</code>.</p><pre class='pre-container prettyprint'>//pauses wherever the playhead currently is:<br />myAnimation.pause();<br /> <br />//jumps to exactly 2-seconds into the animation and then pauses:<br />myAnimation.pause(2);<br /> <br />//jumps to exactly 2-seconds into the animation and pauses but doesn't suppress events during the initial move:<br />myAnimation.pause(2, false);</pre>"}},"15ad1f9068bff51f":{"meta":{"keywords":["js.Animation.paused()"],"title":"paused()","description":"Gets or sets the animation&#039;s paused state which indicates whether or not the animation is currently paused."},"header":{"content":"<p>Gets or sets the animation's paused state which indicates whether or not the animation is currently paused.</p>"},"parameters":[{"name":"value","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the animation's paused state which indicates whether or not the animation is currently paused. This does not take into account anscestor timelines. So for example, a tween that is not paused might appear paused if its parent timeline (or any ancenstor timeline) is paused. Pausing an animation doesn't remove it from its parent timeline, but it does cause it not to be factored into the parent timeline's<code>duration/totalDuration</code>. When an animation completes, it does <b>NOT</b> alter its paused state.</p><p>In most cases, it is easiest to use the <code>pause()</code> method to pause the animation, and <code>resume()</code> to resume it. But to check the current state, you must use the <code>paused()</code> method. It can also be useful for toggling like <code>myAnimation.paused( !myAnimation.paused() );</code></p><p>You can set the <code>paused</code> state initially by passing <code>paused:true</code> in the <code>vars</code> parameter.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myAnimation.paused(true).delay(2).timeScale(0.5);</code><br /></p><pre class='pre-container prettyprint'>var paused = myAnimation.paused(); //gets current paused state<br />myAnimation.paused( true ); //sets paused state to true (just like pause())<br />myAnimation.paused( !myAnimation.paused() ); //toggles the paused state</pre>"}},"a8b5fe1cfbc57740":{"meta":{"keywords":["js.Animation.play()"],"title":"play()","description":"Begins playing forward, optionally from a specific time (by default playback begins from wherever the playhead currently is)."},"header":{"content":"<p>Begins playing forward, optionally from a specific time (by default playback begins from wherever the playhead currently is).</p>"},"parameters":[{"name":"from","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The time (or label for TimelineLite/TimelineMax instances) from which the animation should begin playing (if none is defined, it will begin playing from wherever the playhead currently is).</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code> (the default), no events or callbacks will be triggered when the playhead moves to the new position defined in the <code>from</code> parameter.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Begins playing forward, optionally from a specific time (by default playback begins from wherever the playhead currently is). This also ensures that the instance is neither paused nor reversed.</p><p>If you define a \"from\" time (the first parameter, which could also be a label for TimelineLite or TimelineMax instances), the playhead moves there immediately and if there are any events/callbacks inbetween where the playhead was and the new time, they will not be triggered because by default<code>suppressEvents</code> (the 2nd parameter) is <code>true</code>. Think of it like picking the needle up on a record player and moving it to a new position before placing it back on the record. If, however, you do not want the events/callbacks suppressed during that initial move, simply set the<code>suppressEvents</code> parameter to <code>false</code>.</p><pre class='pre-container prettyprint'>//begins playing from wherever the playhead currently is:<br />myAnimation.play();<br />//begins playing from exactly 2-seconds into the animation:<br />myAnimation.play(2);<br />//begins playing from exactly 2-seconds into the animation but doesn't suppress events during the initial move:<br />myAnimation.play(2, false);</pre>"}},"7bb4870bba9c525d":{"meta":{"keywords":["js.Animation.progress()"],"title":"progress()","description":"Gets or sets the animations&#039;s progress which is a value between 0 and 1 indicating the position of the virtual playhead (excluding repeats) where 0 is at the beginning, 0.5 is at the halfway point, and 1 is at the end (complete)."},"header":{"content":"<p>Gets or sets the animations's progress which is a value between 0 and 1 indicating the position of the virtual playhead (excluding repeats) where 0 is at the beginning, 0.5 is at the halfway point, and 1 is at the end (complete).</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, no events or callbacks will be triggered when the playhead moves to the new position.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the animations's progress which is a value between 0 and 1 indicating the position of the virtual playhead (<b>excluding</b> repeats) where 0 is at the beginning, 0.5 is at the halfway point, and 1 is at the end (complete). If the animation has a non-zero <code>repeat</code> defined (only available in TweenMax and TimelineMax), <code>progress()</code> and <code>totalProgress()</code> will be different because <code>progress()</code> doesn't include the <code>repeat</code> or<code>repeatDelay</code> whereas <code>totalProgress()</code> does. For example, if a TimelineMax instance is set to repeat once, at the end of the first cycle<code>totalProgress()</code> would only be 0.5 whereas <code>progress()</code> would be 1. If you watched both properties over the course of the entire animation, you'd see <code>progress()</code> go from 0 to 1 twice (once for each cycle) in the same time it takes the <code>totalProgress()</code> to go from 0 to 1 once.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myAnimation.progress(0.5).play();</code></p><pre class='pre-container prettyprint'>var progress = myAnimation.progress(); //gets current progress<br />myAnimation.progress(0.25); //sets progress to one quarter finished</pre>"}},"db54f293b92ce54b":{"meta":{"keywords":["js.Animation.restart()"],"title":"restart()","description":"Restarts and begins playing forward from the beginning."},"header":{"content":"<p>Restarts and begins playing forward from the beginning.</p>"},"parameters":[{"name":"includeDelay","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — Determines whether or not the delay (if any) is honored when restarting. For example, if a tween has a delay of 1 second, like <code>new TweenLite(mc, 2, {x:100, delay:1});</code> and then later <code>restart()</code> is called, it will begin immediately, but<code>restart(true)</code> will cause the delay to be honored so that it won&#8217;t begin for another 1 second.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code> (the default), no events or callbacks will be triggered when the playhead moves to the new position defined in the <code>time</code> parameter.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Restarts and begins playing forward from the beginning.</p><pre class='pre-container prettyprint'>//restarts, not including any delay that was defined<br />myAnimation.restart();<br /> <br />//restarts, including any delay, and doesn't suppress events during the initial move back to time:0<br />myAnimation.restart(true, false);</pre>"}},"d185bba975b21413":{"meta":{"keywords":["js.Animation.resume()"],"title":"resume()","description":"Resumes playing without altering direction (forward or reversed), optionally jumping to a specific time first."},"header":{"content":"<p>Resumes playing without altering direction (forward or reversed), optionally jumping to a specific time first.</p>"},"parameters":[{"name":"from","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The time (or label for TimelineLite/TimelineMax instances) that the instance should jump to before resuming playback (if none is defined, it will resume wherever the playhead is currently located).</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code> (the default), no events or callbacks will be triggered when the playhead moves to the new position defined in the <code>from</code> parameter.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Resumes playing without altering direction (forward or reversed), optionally jumping to a specific time first.</p><p>If you define a time to jump to (the first parameter, which could also be a label for TimelineLite or TimelineMax instances), the playhead moves there immediately and if there are any events/callbacks inbetween where the playhead was and the new time, they will not be triggered because by default<code>suppressEvents</code> (the 2nd parameter) is <code>true</code>. Think of it like picking the needle up on a record player and moving it to a new position before placing it back on the record. If, however, you do not want the events/callbacks suppressed during that initial move, simply set the<code>suppressEvents</code> parameter to <code>false</code>.</p><pre class='pre-container prettyprint'>//resumes from wherever the playhead currently is:<br />myAnimation.resume();<br /> <br />//jumps to exactly 2-seconds into the animation and then resumes playback:<br />myAnimation.resume(2);<br /> <br />//jumps to exactly 2-seconds into the animation and resumes playbck but doesn't suppress events during the initial move:<br />myAnimation.resume(2, false);</pre>"}},"652fc9fd0bc84808":{"meta":{"keywords":["js.Animation.reverse()"],"title":"reverse()","description":"Reverses playback so that all aspects of the animation are oriented backwards including, for example, a tween&#039;s ease."},"header":{"content":"<p>Reverses playback so that all aspects of the animation are oriented backwards including, for example, a tween's ease.</p>"},"parameters":[{"name":"from","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The time (or label for TimelineLite/TimelineMax instances) from which the animation should begin playing in reverse (if none is defined, it will begin playing from wherever the playhead currently is). To begin at the very end of the animation, use <code>0</code>. Negative numbers are relative to the end of the animation, so -1 would be 1 second from the end.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p><code>Boolean</code> (default = <code>true</code>)<code></code> — If <code>true</code> (the default), no events or callbacks will be triggered when the playhead moves to the new position defined in the <code>from</code> parameter.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Reverses playback so that all aspects of the animation are oriented backwards including, for example, a tween's ease. This will cause the instance's <code>time</code> and <code>totalTime</code> to move back towards zero as well. You can optionally define a specific time to jump to before reversing (by default it begins playing in reverse from wherever the playhead currently is). Calling<code>reverse()</code> also ensures that the instance is neither paused nor reversed.</p><p>To jump to the very end of the animation and play in reverse from there, use 0 as the \"from\" parameter, like <code>reverse(0)</code>.</p><p>To check whether or not the instance is reversed, use the <code>reversed()</code> method, like <code>if (myAnimation.reversed()) {...}</code></p><p>If you define a \"from\" time (the first parameter, which could also be a label for TimelineLite or TimelineMax instances), the playhead moves there immediately and if there are any events/callbacks inbetween where the playhead was and the new time, they will not be triggered because by default <code>suppressEvents</code> (the 2nd parameter) is <code>true</code>. Think of it like picking the needle up on a record player and moving it to a new position before placing it back on the record. If, however, you do not want the events/callbacks suppressed during that initial move, simply set the <code>suppressEvents</code> parameter to <code>false</code>.</p><pre class='pre-container prettyprint'>//reverses playback from wherever the playhead currently is:<br /> myAnimation.reverse();<br /> <br /> //reverses playback from exactly 2 seconds into the animation:<br /> myAnimation.reverse(2);<br /> <br /> //reverses playback from exactly 2 seconds into the animation but doesn't suppress events during the initial move:<br />myAnimation.reverse(2, false);<br /> <br />//reverses playback from the very END of the animation:<br />myAnimation.reverse(0);<br />  <br />//reverses playback starting from exactly 1 second before the end of the animation:<br />myAnimation.reverse(-1);<br /> <br />//flips the orientation (if it's forward, it will go backward, if it is backward, it will go forward):<br />if (myAnimation.reversed()) {<br />    myAnimation.play();<br />} else {<br />    myAnimation.reverse();<br />}<br /> <br />//flips the orientation using the reversed() method instead (shorter version of the code above):<br />myAnimation.reversed( !myAnimation.reversed() );</pre>"}},"d708d783bf75b7f9":{"meta":{"keywords":["js.Animation.reversed()"],"title":"reversed()","description":"Gets or sets the animation&#039;s reversed state which indicates whether or not the animation should be played backwards."},"header":{"content":"<p>Gets or sets the animation's reversed state which indicates whether or not the animation should be played backwards.</p>"},"parameters":[{"name":"value","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the animation's reversed state which indicates whether or not the animation should be played backwards. This value is not affected by<code>yoyo</code> repeats (TweenMax and TimelineMax only) and it does not take into account the reversed state of anscestor timelines. So for example, a tween that is not reversed might appear reversed if its parent timeline (or any ancenstor timeline) is reversed.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.<br /></p><pre class='pre-container prettyprint'>var rev = myAnimation.reversed(); //gets current orientation<br />myAnimation.reversed( true ); //sets the orientation to reversed<br />myAnimation.reversed( !myAnimation.reversed() ); //toggles the orientation</pre>"}},"b6d7efcbb07722e0":{"meta":{"keywords":["js.Animation.seek()"],"title":"seek()","description":"Jumps to a specific time without affecting whether or not the instance is paused or reversed."},"header":{"content":"<p>Jumps to a specific time without affecting whether or not the instance is paused or reversed.</p>"},"parameters":[{"name":"time","data_type":"*","description":"<p>The time (or label for TimelineLite/TimelineMax instances) to go to.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code> (the default), no events or callbacks will be triggered when the playhead moves to the new position defined in the <code>time</code> parameter.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Jumps to a specific time without affecting whether or not the instance is paused or reversed.</p><p>If there are any events/callbacks inbetween where the playhead was and the new time, they will not be triggered because by default<code>suppressEvents</code> (the 2nd parameter) is <code>true</code>. Think of it like picking the needle up on a record player and moving it to a new position before placing it back on the record. If, however, you do not want the events/callbacks suppressed during that initial move, simply set the<code>suppressEvents</code> parameter to <code>false</code>.<br /></p><pre class='pre-container prettyprint'>//jumps to exactly 2 seconds<br />myAnimation.seek(2);<br /><br />//jumps to exactly 2 seconds but doesn't suppress events during the initial move:<br />myAnimation.seek(2, false);</pre>"}},"e646e51de97ab747":{"meta":{"keywords":["js.Animation.startTime()"],"title":"startTime()","description":"Gets or sets the time at which the animation begins on its parent timeline (after any delay that was defined)."},"header":{"content":"<p>Gets or sets the time at which the animation begins on its parent timeline (after any delay that was defined).</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the time at which the animation begins on its parent timeline (after any <code>delay</code> that was defined). For example, if a tween starts at exactly 3 seconds into the timeline on which it is placed, the tween's <code>startTime</code> would be 3.</p><p>The <code>startTime</code> may be automatically adjusted to make the timing appear seamless if the parent timeline's <code>smoothChildTiming</code> property is <code>true</code>and a timing-dependent change is made on-the-fly, like <code>reverse()</code> is called or <code>timeScale()</code> is changed, etc. See the documentation for the<code>smoothChildTiming</code> property of timelines for more details.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p><pre class='pre-container prettyprint'>var start = myAnimation.startTime(); //gets current start time<br />myAnimation.startTime(2); //sets the start time</pre>"}},"9c2d24c127d9ebc7":{"meta":{"keywords":["js.Animation.time()"],"title":"time()","description":"Gets or sets the local position of the playhead (essentially the current time), described in seconds (or frames for frames-based animations) which will never be less than 0 or greater than the animation&#039;s duration."},"header":{"content":"<p>Gets or sets the local position of the playhead (essentially the current time), described in seconds (or frames for frames-based animations) which will never be less than 0 or greater than the animation's duration.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining. Negative values will be interpreted from the <b>END</b> of the animation.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, no events or callbacks will be triggered when the playhead moves to the new position defined in the <code>value</code> parameter.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the local position of the playhead (essentially the current time), described in seconds (or frames for frames-based animations) which will never be less than 0 or greater than the animation's <code>duration</code>. For example, if the <code>duration</code> is 10 and you were to watch the <code>time</code> during the course of the animation, you'd see it go from 0 at the beginning to 10 at the end. Setting <code>time</code> to 5 would cause the animation to jump to its midway point (because it's half of the duration).</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.<br /></p><pre class='pre-container prettyprint'>var currentTime = myAnimation.time(); //gets current time<br />myAnimation.time(2); //sets time, jumping to new value just like seek().</pre>"}},"7334cca40467aa44":{"meta":{"keywords":["js.Animation.timeScale()"],"title":"timeScale()","description":"Factor that&#039;s used to scale time in the animation where 1 = normal speed (the default), 0.5 = half speed, 2 = double speed, etc."},"header":{"content":"<p>Factor that's used to scale time in the animation where 1 = normal speed (the default), 0.5 = half speed, 2 = double speed, etc.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Factor that's used to scale time in the animation where 1 = normal speed (the default), 0.5 = half speed, 2 = double speed, etc. For example, if an animation's <code>duration</code> is 2 but its <code>timeScale</code> is 0.5, it will take 4 seconds to finish. If you nest that animation in a timeline whose <code>timeScale</code> is 0.5 as well, it would take 8 seconds to finish. You can even tween the <code>timeScale</code> to gradually slow it down or speed it up.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myAnimation.timeScale(2).play(1);</code></p><pre class='pre-container prettyprint'>var currentTimeScale = myAnimation.timeScale(); //gets current timeScale<br />myAnimation.timeScale( 0.5 ); //sets timeScale to half-speed</pre>"}},"8ecf8286d1667a67":{"meta":{"keywords":["js.Animation.totalDuration()"],"title":"totalDuration()","description":"Gets or sets the animation&#039;s total duration including any repeats or repeatDelays (which are only available in TweenMax and TimelineMax)."},"header":{"content":"<p>Gets or sets the animation's total duration including any repeats or repeatDelays (which are only available in TweenMax and TimelineMax).</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the animation's <b>total</b> duration including any repeats or repeatDelays (which are only available in TweenMax and TimelineMax). For example, if a TweenMax instance has a <code>duration</code> of 2 and a repeat of 3, its <code>totalDuration</code> would be 8 (one standard play plus 3 repeats equals 4 total cycles).</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myAnimation.totalDuration(2).delay(0.5).play(1);</code><br /></p><pre class='pre-container prettyprint'>var ctd = myAnimation.totalDuration(); //gets current total duration<br />myAnimation.totalDuration(2); //sets total duration</pre>"}},"43a03109965e7d4e":{"meta":{"keywords":["js.Animation.totalProgress()"],"title":"totalProgress()","description":"Gets or sets the animation&#039;s total progress which is a value between 0 and 1 indicating the position of the virtual playhead (including repeats) where 0 is at the beginning, 0.5 is at the halfway point, and 1 is at the end (complete)."},"header":{"content":"<p>Gets or sets the animation's total progress which is a value between 0 and 1 indicating the position of the virtual playhead (including repeats) where 0 is at the beginning, 0.5 is at the halfway point, and 1 is at the end (complete).</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, no events or callbacks will be triggered when the playhead moves to the new position.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the animation's total progress which is a value between 0 and 1 indicating the position of the virtual playhead (<b>including</b> repeats) where 0 is at the beginning, 0.5 is at the halfway point, and 1 is at the end (complete). If the animation has a non-zero <code>repeat</code> defined (only available in TweenMax and TimelineMax), <code>progress()</code> and <code>totalProgress()</code> will be different because <code>progress()</code> doesn't include the <code>repeat</code> or<code>repeatDelay</code> whereas <code>totalProgress()</code> does. For example, if a TimelineMax instance is set to repeat once, at the end of the first cycle<code>totalProgress()</code> would only be 0.5 whereas <code>progress</code> would be 1. If you watched both properties over the course of the entire animation, you'd see <code>progress</code> go from 0 to 1 twice (once for each cycle) in the same time it takes the <code>totalProgress()</code> to go from 0 to 1 once.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myAnimation.totalProgress(0.5).play();</code><br /></p><pre class='pre-container prettyprint'>var progress = myAnimation.totalProgress(); //gets total progress<br />myAnimation.totalProgress(0.25); //sets total progress to one quarter finished</pre>"}},"37d58fccb2afe6a1":{"meta":{"keywords":["js.Animation.totalTime()"],"title":"totalTime()","description":"Gets or sets the position of the playhead according to the totalDuration which includes any repeats and repeatDelays (only available in TweenMax and TimelineMax)."},"header":{"content":"<p>Gets or sets the position of the playhead according to the totalDuration which includes any repeats and repeatDelays (only available in TweenMax and TimelineMax).</p>"},"parameters":[{"name":"time","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining. Negative values will be interpreted from the <b>END</b> of the animation.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, no events or callbacks will be triggered when the playhead moves to the new position defined in the <code>time</code> parameter.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the position of the playhead according to the <code>totalDuration</code> which <b>includes any repeats and repeatDelays</b> (only available in TweenMax and TimelineMax). For example, if a TweenMax instance has a <code>duration</code> of 2 and a <code>repeat</code> of 3, <code>totalTime</code> will go from 0 to 8 during the course of the tween (plays once then repeats 3 times, making 4 total cycles) whereas <code>time</code> will go from 0 to 2 a total of 4 times. If you added a<code>repeatDelay</code> of 1, that would make the <code>totalTime</code> go from 0 to 11 over the course of the tween.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p><p><code>totalTime</code> will never exceed the <code>totalDuration</code>, nor will it be less than 0 (values will be clipped appropriately). Negative values will be interpreted from the <b>END</b> of the animation. For example, -2 would be 2 seconds before the end. If the animation's <code>totalDuration</code> is 6 and you do<code>myAnimation.totalTime(-2)</code>, it will jump to a <code>totalTime</code> of 4.<br /></p><pre class='pre-container prettyprint'>var tt = myAnimation.totalTime(); //gets total time<br />myAnimation.totalTime(2); //sets total time, jumping to new value just like seek().</pre>"}},"1315d24279922963":{"meta":{"keywords":["js.CustomEase","Easing"],"title":"CustomEase","description":"Allows you to create literally **ANY** ease by simply drawing it in the Ease Visualizer or by copying/pasting an SVG path. Unlimited control points. "},"header":{"content":"<p><span class=\"inTweenMax\">Included in TweenMax: <span class=\"no\">NO</span></span></p><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/A9ROywSFFiY?rel=0&feature=player_detailpage\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><p>CustomEase frees you from the limitations of canned easing options; create literally any easing curve imaginable by simply drawing it in the <a href=\"/ease-visualizer/\">Ease Visualizer</a> or by copying/pasting an SVG path. <strong><i>Zero limitations</i></strong>. Use as many control points as you want.</p><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/rJRrUHds7fc?rel=0&feature=player_detailpage\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><p>The easiest way to create a CustomEase is to click the \"Custom\" link in the Ease Visualizer (below) and then edit the curve.</p><ul class=\"compact\"><li><strong>Add points</strong> - ATL/OPTION-click anywhere on the curve</li><li><strong>Delete points</strong> - Select the point and then press the DELETE key on the keyboard</li><li><strong>Toggle smooth/corner</strong> - ALT/OPTION-click on an anchor point. Or, ALT/OPTION-drag a control handle to turn it into a corner (not smooth) point.</li><li><strong>Select multiple points</strong> - Hold the SHIFT key while clicking anchor points.</li><li><strong>Undo</strong> - Press CTRL-Z</li><li><strong>Disable snapping</strong> - Hold SHIFT while dragging</li></ul><div class=\"ease-visualizer\" data-ease=\"CustomEase\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><h2>Copy/Paste SVG</h2><p>When in the \"custom\" mode of the Ease Visualizer, you can select the orange text at the bottom (the CustomEase data string), highlight it all, and then paste in an SVG path (like from Adobe Illustrator) and then click elsewhere and the Ease Visualizer will grab the first <code>&lt;path&gt;</code> and convert it into the proper format. </p><h2>Using cubic-bezier values</h2><p>CustomEase also recognizes standard <code>cubic-bezier()</code> strings containing four numbers, like those you can get from <a href=\"http://cubic-bezier.com\">cubic-bezier.com</a>. For example, <code>\".17,.67,.83,.67\"</code>. Either paste that into the orange text area in the bottom of the Ease Visualizer or feed it directly into the <code>CustomEase.create()</code> method, like <code>CustomEase.create(\"easeName\", \".17,.67,.83,.67\");</code>. </p><h2>The code</h2><p>Instead of using the long data string in each tween, you simply <code>create()</code> a CustomEase once (typically as soon as your page/app loads) and assign it a memorable ID (like <code>\"hop\"</code> or <code>\"wiggle\"</code> or whatever you want) that you reference thereafter in any of your tweens, like:<br /></p><pre class='pre-container prettyprint'>//define your CustomEase and give it an ID (\"hop\" in this case)<br />CustomEase.create(\"hop\", \"M0,0 C0,0 0.056,0.442 0.175,0.442 0.294,0.442 0.332,0 0.332,0 0.332,0 0.414,1 0.671,1 0.991,1 1,0 1,0\");<br /><br />//now you can reference the ease by ID (as a string):<br />TweenLite.to(element, 1, {y:-100, ease:\"hop\"});<br /></pre><p>Creating the ease(s) initially ensures maximum performance during animation because there's some overhead involved in calculating all the points internally and optimizing the data for blisteringly fast runtime performance. That only happens once, upon creation. </p><p>Typically the path string uses normalized values (0-1), but you can pass in any SVG path data that uses cubic bezier instructions (\"M\", \"C\", \"S\", \"L\", or \"Z\" commands) and it'll normalize things internally.</p><h2>Download CustomEase</h2><p>You must have a GreenSock account which is completely free to set up. Plus it gets you access to our <a href=\"/forums/\">community forums</a> (a fantastic place to learn and get your questions answered). The widget below lets you sign up or if you're already logged in, it'll give you immediate access to the download zip that contains CustomEase in the \"easing\" directory. <i>Note: CustomEase is not in the github repository or CDN; it's only available for download at GreenSock.com.</i><br />[[loginwidget]]</p>"}},"cb1da3c33a8e7bb2":{"meta":{"keywords":["js.CustomEase.create()"],"title":"create()","description":"Creates a CustomEase instance"},"header":{"content":"<p>Creates a CustomEase instance</p>"},"parameters":[{"name":"ID","data_type":"String","description":"<p>An ID (name) that can be used to identify this CustomEase instance, like <code>\"hop\"</code></p>\n"},{"name":"data","data_type":"String","description":"<p>The string describing the easing curve, like <code>\"M0,0 C0,0 0.056,0.442 0.175,0.442 0.294,0.442 0.332,0 0.332,0 0.332,0 0.414,1 0.671,1 0.991,1 1,0 1,0\"</code>. This can be SVG path data containing &#8220;M&#8221;, &#8220;C&#8221;, &#8220;S&#8221;, &#8220;L&#8221;, or &#8220;Z&#8221; commands, or it can be a string containing 4 numbers from CSS cubic-bezier() data like from cubic-bezier.com. Typically the values are normalized (0-1) but if not, they&#8217;ll be normalized internally.</p>\n"}],"returns":{"type":"CustomEase","content":"<p>Returns a new CustomEase instance</p>\n"},"details":{"content":"<p>Creates a <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:CustomEase\"><span data-link-id=\"1315d24279922963\"></span></span> instance and associates it with a particular ID (name) that can be used later in your animation code.</p><pre class='pre-container prettyprint'><br />//create a CustomEase with an ID of \"hop\"<br />CustomEase.create(\"hop\", \"M0,0 C0,0 0.056,0.445 0.175,0.445 0.294,0.445 0.332,0 0.332,0 0.332,0 0.414,1 0.671,1 0.991,1 1,0 1,0\");<br /><br />//then, in your tween you can reference the ID for the ease:<br />TweenMax.to(element, 1, {y:-100, ease:\"hop\"});<br /></pre><p><iframe height='300' scrolling='no' title='Single Tween with CustomEase' src='//codepen.io/GreenSock/embed/84d89c6dc09205ec564b151966af7dea/?height=300&theme-id=3984&default-tab=js,result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='http://codepen.io/GreenSock/pen/84d89c6dc09205ec564b151966af7dea/'>Single Tween with CustomEase</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.<br /></iframe></p><p>We strongly recommend creating the CustomEase(s) when your page/app initially loads (rather than directly in each tween) in order to maximize performance and readability. You then reference it by ID in the tweening code. When an ease is created, it must parse the points and do various calculations to prepare for blisteringly fast runtime performance during the animation, so front-loading those calculations when your page/app loads is typically best. </p><p><iframe src=\"http://www.youtube.com/embed/rJRrUHds7fc?rel=0&feature=player_detailpage\" width=\"838\" height=\"471\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\" style=\"margin:10px 0;\"></iframe></p><h2>Download CustomEase</h2><p>You must have a GreenSock account which is completely free to set up. Plus it gets you access to our <a href=\"/forums/\">community forums</a> (a fantastic place to learn and get your questions answered). The widget below lets you sign up or if you're already logged in, it'll give you immediate access to the download zip that contains CustomEase in the \"easing\" directory. <i>Note: CustomEase is not in the github repository or CDN; it's only available for download at GreenSock.com.</i><br />[[loginwidget]]</p>"}},"24e00423129f1300":{"meta":{"keywords":["js.CustomEase.get()"],"title":"get()","description":"Gets the CustomEase instance associated with the ID provided."},"header":{"content":"<p>Gets the CustomEase instance associated with the ID provided.</p>"},"parameters":[{"name":"ID","data_type":"String","description":"<p>The ID (name) associated with the CustomEase instance, like <code>\"hop\"</code></p>\n"}],"returns":{"type":"CustomEase","content":"<p>Returns the CustomEase instance associated with the ID provided.</p>\n"},"details":{"content":"<p>Gets the <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:CustomEase\"><span data-link-id=\"1315d24279922963\"></span></span> instance associated with the ID (name) provided. </p><pre class='pre-container prettyprint'><br />//create a CustomEase with an ID of \"hop\"<br />CustomEase.create(\"hop\", \"M0,0 C0,0 0.056,0.445 0.175,0.445 0.294,0.445 0.332,0 0.332,0 0.332,0 0.414,1 0.671,1 0.991,1 1,0 1,0\");<br /><br />//then, later, you can get it like this:<br />var ease = CustomEase.get(\"hop\");<br /></pre><p>Typically you don't need to <code>get()</code> the CustomEase instance because you can just pass its ID into any animation as the ease and GSAP will find it internally. </p><h2>Download CustomEase</h2><p>You must have a GreenSock account which is completely free to set up. Plus it gets you access to our <a href=\"/forums/\">community forums</a> (a fantastic place to learn and get your questions answered). The widget below lets you sign up or if you're already logged in, it'll give you immediate access to the download zip that contains CustomEase in the \"easing\" directory. <i>Note: CustomEase is not in the github repository or CDN; it's only available for download at GreenSock.com.</i><br />[[loginwidget]]</p>"}},"02cf505adaa3c1db":{"meta":{"keywords":["js.CustomEase.getRatio()"],"title":"getRatio()","description":"Converts a linear progress value (0-1) into the corresponding eased value."},"header":{"content":"<p>Converts a linear progress value (0-1) into the corresponding eased value.</p>"},"parameters":[{"name":"progress","data_type":"Number","description":"<p>Converts a linear progress value (0-1) into the corresponding eased value.</p>\n"}],"returns":{"type":"CustomEase","content":""},"details":{"content":"<p>Converts a linear progress value (0-1) into the corresponding eased value. In other words, if the tween is halfway done (progress of 0.5), you'd get the corresponding ease ratio like this:<br /></p><pre class='pre-container prettyprint'><br />//create a CustomEase with an ID of \"hop\"<br />var ease = CustomEase.create(\"hop\", \"M0,0 C0,0 0.056,0.445 0.175,0.445 0.294,0.445 0.332,0 0.332,0 0.332,0 0.414,1 0.671,1 0.991,1 1,0 1,0\");<br /><br />//get the eased ratio at the progress of 0.5 (halfway done):<br />var value = ease.getRatio(0.5);<br /></pre><p>See <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:CustomEase\"><span data-link-id=\"1315d24279922963\"></span></span> for more details.</p>"}},"b387c2e659d8f05e":{"meta":{"keywords":["js.CustomEase.getSVGData()"],"title":"getSVGData()","description":"Calculates the SVG <code>path</code> data string for visualizing the supplied ease graphically. "},"header":{"content":"<p>Calculates the SVG <code>&lt;path&gt;</code> data string for visualizing the supplied ease graphically. </p>"},"parameters":[{"name":"ease","data_type":"*","description":"<p>The ease that should be visualized as an SVG path. Can be a reference to a CustomEase instance, a string ID of a CustomEase (<code>\"hop\"</code>) or even a standard ease like Power2.easeOut.</p>\n"},{"name":"vars","data_type":"Object","description":"<p>A config object containing properties that affect how the ease is rendered, like width, height, x, y, etc. Typically it&#8217;s best to define at least a <code>width</code> and <code>height</code> (default is 100 for each). <code>x</code> and <code>y</code> default to 0.</p>\n","related_configuration_object":"780cd7d653daf782"}],"returns":{"type":"String","content":"<p>An SVG <code>&lt;path&gt;</code> data string like <code>\"M0,0 C0,0 0.056,0.445 0.175,0.445 0.294,0.445 0.332,0 0.332,0 0.332,0 0.414,1 0.671,1 0.991,1 1,0 1,0\"</code>.</p>\n"},"details":{"content":"<p>Calculates the SVG <code>&lt;path&gt;</code> data string for visualizing the any ease graphically at any size that you define, like <code>{width:500, height:400, x:10, y:50}</code>. You can supply a <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:CustomEase\"><span data-link-id=\"1315d24279922963\"></span></span> or the ID associated with one, or even a standard ease like <code>Power2.easeOut</code>. Feed in a <code>path</code> in the vars object and it'll populate its <code>d</code> attribute for you, like:</p><pre class='pre-container prettyprint'><br />//create a CustomEase with an ID of \"hop\"<br />CustomEase.create(\"hop\", \"M0,0 C0,0 0.056,0.445 0.175,0.445 0.294,0.445 0.332,0 0.332,0 0.332,0 0.414,1 0.671,1 0.991,1 1,0 1,0\");<br /><br />//draw the ease visually in the SVG <path> that has an ID of \"ease\" at 500px by 400px:<br />CustomEase.getSVGData(\"hop\", {width:500, height:400, path:\"#ease\"});<br /></pre><h3>Demo</h3><p data-height=\"550\" data-theme-id=\"9446\" data-slug-hash=\"jVYgvb\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/jVYgvb?editors=0010'>CustomEase.getSVGData()</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><h2>Download CustomEase</h2><p>You must have a GreenSock account which is completely free to set up. Plus it gets you access to our <a href=\"/forums/\">community forums</a> (a fantastic place to learn and get your questions answered). The widget below lets you sign up or if you're already logged in, it'll give you immediate access to the download zip that contains CustomEase in the \"easing\" directory. <i>Note: CustomEase is not in the github repository or CDN; it's only available for download at GreenSock.com.</i><br />[[loginwidget]]</p>"}},"13df7c5ab97ce05d":{"meta":{"keywords":["js.ScrollToPlugin","Plugins"],"title":"ScrollToPlugin","description":"Animates the scroll position of the window or DOM element."},"header":{"content":"<p>Animates the scroll position of the window (like doing <code>window.scrollTo(x, y)</code>) or a DOM element (like doing <code>myDiv.scrollTop = y; myDiv.scrollLeft = x;</code>). </p><p>To scroll the window to a particular position, use <code>window</code> as the target of the tween like this:</p><pre class='pre-container prettyprint'>//scroll to 400 pixels down from the top<br />TweenLite.to(window, 2, {scrollTo:400});<br /><br />//or to scroll to the element with the ID \"#someID\" (as of GSAP 1.19.0):<br />TweenLite.to(window, 2, {scrollTo:\"#someID\"});<br /></pre><p>To tween the content of a div, make sure you've set the <code>overflow:scroll</code> on the div and then:<br /></p><pre class='pre-container prettyprint'>//scroll to 250 pixels down from the top of the content in the div<br />TweenLite.to(myDiv, 2, {scrollTo:250});</pre><p>You can define an x or y value or both (to scroll on both the x- and y-axis). For example, to scroll to 400 pixels from the top and 200 pixels from the left, do this:<br /></p><pre class='pre-container prettyprint'>TweenLite.to(myDiv, 2, {scrollTo:{y:400, x:200}, ease:Power2.easeOut});</pre><p>As of <a href=\"/1-19-0/\">GSAP 1.19.0</a>, you can also optionally pass <code>offsetX</code> and/or <code>offsetY</code> numeric values if you want to offset the destination from the element.<br /> </p><pre class='pre-container prettyprint'><br />//scroll #someID into view with 50 pixels from the top (like a margin)<br />TweenMax.to(window, 2, {scrollTo:{y:\"#someID\", offsetY:50}});<br /></pre><p>The demo below uses the <code>offsetY</code> so that each section scrolls into view just under the navigation. Click the section buttons in the demo below. Check out the JS source. </p><p data-height=\"400\" data-theme-id=\"9446\" data-slug-hash=\"4be7ea5c962b62bcd156612524687a5a\" data-default-tab=\"result\" data-user=\"GreenSock\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/4be7ea5c962b62bcd156612524687a5a/\">ScrollToPlugin: Scroll to Element</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><p>By default, the ScrollToPlugin will automatically sense if the scroll position was changed outside of itself (like if the user manually started dragging the scrollbar mid-tween) and cancel that portion of the tween. If, however, you'd like to prevent the auto-killing behavior, set <code>autoKill:false</code> inside the <code>scrollTo</code> object, like:</p><pre class='pre-container prettyprint'>TweenLite.to(myDiv, 2, {scrollTo:{y:400, autoKill:false}, ease:Power2.easeOut});</pre><p>If you would like to detect when autoKill gets triggered you can define an <code>onAutoKill</code> callback.<br /></p><pre class='pre-container prettyprint'>TweenLite.to(window, 2, {scrollTo:{y:300, onAutoKill:myAutoKillFunction}});<br /><br />function myAutoKillFunction() {<br /> alert(\"autoKill\");<br />}</pre><p><!--<h3>ScrollToPlugin.autoKillThreshold</h3>As of <a href=\"/1-19-0/\">GSAP 1.19.0</a>, you can set <code>ScrollToPlugin.autoKillThreshold</code> (default is <code>7</code>) which determines how many pixels the scroll position must drift before triggering the <code>autoKill</code> (like if the user starts scrolling while a scrollTo tween is in-progress). --></p><p>To scroll to the maximum scroll position, use the string <code>\"max\"</code> as the value, like this:<br /></p><pre class='pre-container prettyprint'>TweenLite.to(myDiv, 2, {scrollTo:{y:\"max\"}});</pre><p>If you don't wrap the value in an object, it will assume you want to scroll in the \"y\" direction, so these two lines are functionally equivalent:<br /></p><pre class='pre-container prettyprint'>TweenLite.to(myDiv, 2, {scrollTo:{y:\"max\"}});<br />TweenLite.to(myDiv, 2, {scrollTo:\"max\"});</pre><p><!--<h3>ScrollToPlugin.getOffset()</h3>As of <a href=\"/1-19-0/\">GSAP 1.19.0</a>, ScrollToPlugin exposes a <code>getOffset()</code> method that returns an object with \"x\" and \"y\" properties corresponding to the amount of offset from the container. For example, <code>ScrollToPlugin.getOffset(element, window)</code> might return <code>{x:0, y:310}</code>. --></p>"}},"16d64b5b1b82fde8":{"meta":{"keywords":["js.TweenPlugin","Plugins"],"title":"TweenPlugin","description":""},"header":{"content":"<p>TweenPlugin is the base class for all TweenLite and TweenMax plugins, but generally isn't used directly.</p><p><b>USAGE:</b></p><p>To create your own plugin, extend TweenPlugin and override whichever methods you need (typically <code>_onInitTween()</code> and <code>setRatio()</code>). To make things easier, we have included a file named <code>TEMPLATE_Plugin.js</code> in the plugins directory that serves as a jumping-off point and it has some comments in the code. <code>_onInitTween()</code> is called when the tween renders for the first time and <code>setRatio()</code> is called on every update and passes a ratio parameter which is typically a value between 0 and 1, and it changes according to the ease). There are a few key concepts to keep in mind:</p><ol><li>Pass the TweenPlugin constructor a comma-delimited list of property names that the plugin should overwrite, the first of which should be the property name that the plugin intercepts. For example, the ScrollToPlugin handles any tweens of <code>\"scrollTo\"</code> and it also overwrites other concurrent tweens that are handling the \"scrollTo\" but you may have a ScalePlugin that handles both \"scaleX\" and \"scaleY\" properties, thus the comma-delimited list would look like <code>\"scale,scaleX,scaleY\"</code>. The first name in the list must be unique - two plugins cannot handle the same primary property.</li><li>When a tween that uses your plugin initializes its tween values (normally when it renders for the first time), a new instance of your plugin will be created and its <code>_onInitTween()</code>method is called. That's where you'll want to record any initial values and prepare for the tween. <code>_onInitTween()</code> should return a Boolean value that essentially indicates whether or not the plugin initted successfully. If you return false, TweenLite/Max will just use a normal tween for the value, ignoring the plugin for that particular tween. For example, maybe your tween only works with DOM elements, so if the target isn't one you could return <code>false</code></li><li>The <code>setRatio()</code> method will be called on every frame during the course of the tween and it will be passed a single parameter that's a multiplier (typically between 0 and 1, according to the ease) describing the total amount of change from the beginning of the tween (0). It is normally zero at the beginning of the tween and 1 at the end, and inbetween it could be any value based on the ease applied (for example, an <code>ElasticOut</code> ease would cause the value to shoot past 1 and back again before the end of the tween). So if the tween uses the<code>Linear.ease</code>, when it's halfway finished, <code>setRatio(0.5)</code> would be called</li><li>The <code>_overwriteProps</code> is an array that should contain the properties that your plugin should overwrite in <code>\"auto\"</code> overwrite mode. For example, an <code>autoAlpha</code> plugin could control the<code>\"visible\"</code> and <code>\"alpha\"</code> properties of an object, so if another tween is created that controls the <code>alpha</code> of the target object, your plugin's <code>_kill()</code> method will be called which should handle killing the <code>\"alpha\"</code> part of the tween. It is your responsibility to populate (and depopulate) the <code>_overwriteProps</code> Array. Failure to do so properly can cause odd overwriting behavior.</li><li>There's a <code>_roundProps()</code> method that gets called by the <code>RoundPropsPlugin</code> if the user requests that certain properties get rounded to the nearest integer. If you use <code>_addTween()</code>method to add property tweens, rounding will happen automatically (if necessary), but if you don't use <code>_addTween()</code> and prefer to manually calculate tween values in your <code>setRatio()</code>method, just remember to override the <code>_roundProps()</code> method if that makes sense in your plugin (some plugins wouldn't need to accommodate rounding, like color plugins, in which case you can ignore the method altogether).</li><li>If you need to run a function when the tween gets disabled, add an <code>_onDisable()</code> method (named exactly that) to your plugin. It will automatically be called when the tween gets disabled (typically when it finishes and is removed from its parent timeline). Same for <code>_onEnable()</code> if you need to run code when a tween is enabled. These methods should return a Boolean value indicating whether or not they changed any properties on the target becaues if so (<code>true</code>), it helps notify any initting tweens of the same target to re-init. It is very rare that an <code>_onDisable()</code> or <code>_onEnable()</code> method is necessary, but it can be useful for things like MotionBlurPlugin which must do some very advanced things, hiding the target, changing its alpha to almost 0, etc. only while the tween occurs. If another alpha tween of that same target overwrites an existing motionBlur of the same target, the alpha would be at the wrong value normally, but the if the <code>_onDisable()</code> returns <code>true</code>, it would force the new tween to re-init AFTER the alpha was fixed inside the <code>_onDisable()</code>. Again, this is <b>VERY</b>rare.</li><li>Please use the same naming convention as the rest of the plugins, like MySpecialPropertyNamePlugin.</li><li>If you are handling more than one property in your plugin (like RoundPropsPlugin or ShortRotationPlugin), and you're not using <code>_addTween()</code> to create property tweens internally, make sure you override the <code>_kill()</code> method which will be passed a <code>vars</code> parameter with properties that need to be killed (typically for overwriting).</li></ol>"}},"19160c04837df0bb":{"meta":{"keywords":["js.CustomBounce","Easing"],"title":"CustomBounce","description":"Configure your own bounce ease with squash and stretch"},"header":{"content":"<p>GSAP always had the tried-and-true <code>Bounce.easeOut</code>, but there was no way to customize how \"bouncy\" it was, nor could you get a synchronized squash and stretch effect during the bounce because: </p><ul class=\"compact\"><li>The \"bounce\" ease needs to stick to the ground momentarily at the point of the bounce while the squashing occurs. <code>Bounce.easeOut</code> offers no such customization.</li><li>There was no way to create the corresponding [synchronized] scaleX/scaleY ease for the squashing/stretching. <a href=\"/customease/\">CustomEase</a> solves this now, but it'd still be very difficult to manually draw that ease with all the points lined up in the right spots to match up with the bounces.</li></ul><p>With CustomBounce, you can set a few parameters and it'll create <strong>BOTH</strong> CustomEases for you (one for the bounce, and one [optionally] for the squash/stretch). Think of CustomBounce like a wrapper that creates a CustomEase under the hood based on the variables you pass in.</p><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/iO8J_CiH1fk?rel=0&feature=player_detailpage?rel=0\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><h3>Options</h3><ul><li><strong><code>strength</code></strong> (Number) - a number between 0 and 1 that determines how \"bouncy\" the ease is, so 0.9 will have a lot more bounces than 0.3. Default: 0.7</li><li><strong><code>endAtStart</code></strong> (Boolean) - if true, the ease will end back where it started, allowing you to get an effect like an object sitting on the ground, leaping into the air, and bouncing back down to a stop. Default: false</li><li><strong><code>squash</code></strong> (Number) - controls how long the squash should last (the gap between bounces, when it appears \"stuck\"). Typically <code>2</code> is a good number, but <code>4</code> (as an example) would make the squash longer in relation to the rest of the ease. Default: 0</li><li><strong><code>squashID</code></strong> (String) - the ID that should be assigned to the squash ease. The default is whatever the ID of the bounce is plus \"-squash\" appended to the end. For example, <code>CustomBounce.create(\"hop\", {strength:0.6, squash:2})</code> would default to a squash ease ID of <code>\"hop-squash\"</code>.</li></ul><p>How do you get the bounce and the squash/stretch to work together? You'd use two tweens; one for the position (\"y\"), and the other for the scaleX/scaleY, with both running at the same time:<br /></p><pre class='pre-container prettyprint'>//Create a custom bounce ease:<br />CustomBounce.create(\"myBounce\", {strength:0.6, squash:3, squashID:\"myBounce-squash\"});<br />//do the bounce by affecting the \"y\" property.<br />TweenMax.from(\".class\", 2, {y:-200, ease:\"myBounce\"});<br />//and do the squash/stretch at the same time:<br />TweenMax.to(\".class\", 2, {scaleX:140, scaleY:60, ease:\"myBounce-squash\", transformOrigin:\"center bottom\"});<br /> </pre><p data-height=\"525\" data-theme-id=\"3984\" data-slug-hash=\"pRowwX\" data-default-tab=\"result\" data-user=\"GreenSock\" data-embed-version=\"2\" data-pen-title=\"CustomBounce from GreenSock\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/GreenSock/pen/pEEVoV/\">CustomBounce from GreenSock</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script></p>"}},"08efb16bbc092c14":{"meta":{"keywords":["js.CustomBounce.create()"],"title":"create()","description":"Creates a CustomBounce ease based on the parameters you provide."},"header":{"content":"<p>Creates a CustomBounce ease based on the parameters you provide.</p>"},"parameters":[{"name":"ID","data_type":"String","description":"<p>An ID (name) that can be used to identify this CustomBounce instance, like <code>\"superBounce\".</code></p>\n"},{"name":"vars","data_type":"Object","description":"<p>configuration options for the ease for setting its strength (bounciness), and squash.</p>\n","related_configuration_object":"2a344abc5d73a637"}],"returns":{"type":"CustomBounce","content":"<p>Returns a CustomBounce ease instance.</p>\n"},"details":{"content":"<p>This method creates a new CustomBouunce ease and a separate ease to handle the squash and stretch (optional).</p><p>For the bounce and the squash/stretch to work together use two tweens; one for the position (\"y\"), and the other for the scaleX/scaleY, with both running at the same time:<br /></p><pre class='pre-container prettyprint'>//Create a custom bounce ease:<br />CustomBounce.create(\"myBounce\", {strength:0.6, squash:3, squashID:\"myBounce-squash\"});<br />//do the bounce by affecting the \"y\" property.<br />TweenMax.from(\".class\", 2, {y:-200, ease:\"myBounce\"});<br />//and do the squash/stretch at the same time:<br />TweenMax.to(\".class\", 2, {scaleX:140, scaleY:60, ease:\"myBounce-squash\", transformOrigin:\"center bottom\"});<br /> </pre><p data-height=\"525\" data-theme-id=\"3984\" data-slug-hash=\"pRowwX\" data-default-tab=\"result\" data-user=\"GreenSock\" data-embed-version=\"2\" data-pen-title=\"CustomBounce from GreenSock\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/GreenSock/pen/pEEVoV/\">CustomBounce from GreenSock</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script></p>"}},"211a71fb195b2819":{"meta":{"keywords":["js.SimpleTimeline"],"title":"SimpleTimeline","description":""},"header":{"content":"<p>SimpleTimeline is the base class for TimelineLite and TimelineMax, providing the most basic timeline functionality and it is used for the root timelines in TweenLite but is only intended for internal use in the GreenSock tweening platform. It is meant to be very fast and lightweight.</p>"}},"52466ef8d6a25e07":{"meta":{"keywords":["js.SimpleTimeline.SimpleTimeline()"],"title":"SimpleTimeline()","description":"Constructor"},"header":{"content":"<p>Constructor</p>"},"parameters":[{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — Object containing configuration variables like onComplete, onUpdate, onStart, data, etc.</p>\n"}],"returns":{},"details":{"content":"<p>Constructor</p>"}},"a8583ff10d4f8c14":{"meta":{"keywords":["js.SimpleTimeline.autoRemoveChildren"],"title":"autoRemoveChildren","description":"If true, child tweens/timelines will be removed as soon as they complete."},"header":{"content":"<p>If true, child tweens/timelines will be removed as soon as they complete.</p>"},"returns":{"type":"Boolean","content":""},"details":{"content":"<p>If <code>true</code>, child tweens/timelines will be removed as soon as they complete. (<code>false</code> by default except on the root timeline(s))</p>"}},"180106cf49a52891":{"meta":{"keywords":["js.SimpleTimeline.smoothChildTiming"],"title":"smoothChildTiming","description":"Controls whether or not child tweens/timelines are repositioned automatically (changing their startTime) in order to maintain smooth playback when properties are changed on-the-fly."},"header":{"content":"<p>Controls whether or not child tweens/timelines are repositioned automatically (changing their startTime) in order to maintain smooth playback when properties are changed on-the-fly.</p>"},"returns":{"type":"Boolean","content":""},"details":{"content":"<p>Controls whether or not child tweens/timelines are repositioned automatically (changing their <code>startTime</code>) in order to maintain smooth playback when properties are changed on-the-fly. For example, imagine that the timeline's playhead is on a child tween that is 75% complete, moving mc.x from 0 to 100 and then that tween's <code>reverse()</code> method is called. If <code>smoothChildTiming</code> is <code>false</code> (the default except for the root timelines), the tween would flip in place, keeping its <code>startTime</code> consistent. Therefore the playhead of the timeline would now be at the tween's 25% completion point instead of 75%. Remember, the timeline's playhead position and direction are unaffected by child tween/timeline changes. mc.x would jump from 75 to 25, but the tween's position in the timeline would remain consistent. However, if <code>smoothChildTiming</code> is <code>true</code>, that child tween's <code>startTime</code> would be adjusted so that the timeline's playhead intersects with the same spot on the tween (75% complete) as it had immediately before <code>reverse()</code> was called, thus playback appears perfectly smooth. mc.x would still be 75 and it would continue from there as the playhead moves on, but since the tween is reversed now mc.x will travel back towards 0 instead of 100. Ultimately it's a decision between prioritizing smooth on-the-fly playback (<code>true</code>) or consistent position(s) of child tweens/timelines (<code>false</code>).</p><p>Some examples of on-the-fly changes to child tweens/timelines that could cause their <code>startTime</code> to change when <code>smoothChildTiming</code> is <code>true</code> are: <code>reversed, timeScale, progress, totalProgress, time, totalTime, delay, pause, resume, duration,</code> and <code>totalDuration</code>.</p>"}},"f3d0f009919eaed3":{"meta":{"keywords":["js.SimpleTimeline.add()"],"title":"add()","description":"Adds a TweenLite, TweenMax, TimelineLite, or TimelineMax instance to the timeline at a specific time."},"header":{"content":"<p>Adds a TweenLite, TweenMax, TimelineLite, or TimelineMax instance to the timeline at a specific time.</p>"},"parameters":[{"name":"child","data_type":"*","description":"<p>TweenLite, TweenMax, TimelineLite, or TimelineMax instance to insert</p>\n"},{"name":"position","data_type":"*","description":"<p>(default = <code>+=0</code>)<code></code> — The position at which the tween/timeline should be inserted which can be expressed as a number (for an absolute time as seconds or frames for frames-based timelines) or a string, using &#8220;+=&#8221; or &#8220;-=&#8221; prefix to indicate a relative value (relative to the END of the timeline). For example, <code>myTimeline.insert(myTween, 3)</code> would insert myTween 3 seconds into the timeline.</p>\n"},{"name":"align","data_type":"String","description":"<p>(default = <code>normal</code>)<code></code> — Determines how the tweens/timelines/callbacks/labels will be aligned in relation to each other before getting inserted. Options are: <code>\"sequence\"</code> (aligns them one-after-the-other in a sequence), <code>\"start\"</code> (aligns the start times of all of the objects (ignoring delays)), and <code>\"normal\"</code> (aligns the start times of all the tweens (honoring delays)). The default is <code>\"normal\"</code>.</p>\n"},{"name":"stagger","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Staggers the inserted objects by a set amount of time (in seconds) (or in frames for frames-based timelines). For example, if the stagger value is 0.5 and the <code>\"align\"</code> parameter is set to <code>\"start\"</code>, the second one will start 0.5 seconds after the first one starts, then 0.5 seconds later the third one will start, etc. If the align property is <code>\"sequence\"</code>, there would be 0.5 seconds added between each tween. Default is 0.</p>\n"}],"returns":{"type":"*","content":"<p>this timeline instance (useful for chaining like <code>myTimeline.add(...).add(...)</code>)</p>\n"},"details":{"content":"<p>Adds a TweenLite, TweenMax, TimelineLite, or TimelineMax instance to the timeline at a specific time. In classes like TimelineLite and TimelineMax that override this method, it allows things like callbacks, labels, and arrays of tweens/timelines/callbacks/labels to be inserted too. They also allow the position to be defined in terms of either a numeric time or a label (String).</p>"}},"0891734c6084b33c":{"meta":{"keywords":["js.SimpleTimeline.render()"],"title":"render()","description":"renders"},"header":{"content":"<p>renders</p>"},"parameters":[{"name":"time","data_type":"Number","description":"<p>the time</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>false</code>)</p>\n"},{"name":"force","data_type":"Boolean","description":"<p>(default = <code>false</code>)</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>renders</p>"}},"22c860af2d1dbbcb":{"meta":{"keywords":["js.Power1","Easing"],"title":"Power1","description":"Provides an easeIn, easeOut, and easeInOut with a power (or strength) of 1 which is identical to Quad but with a more intuitive name. The more power, the more exaggerated the easing effect. Using a numeric approach like this in the name makes experimenting easier."},"header":{"content":"<p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 1 which is identical to <code>Quad</code> but with a more intuitive name. The more power, the more exaggerated the easing effect. Using a numeric approach like this in the name makes experimenting easier.</p><p>This is one of the eases that is natively accelerated in TweenLite and TweenMax. All of the \"Power\" eases and their counterparts (Linear (0), Quad (1), Cubic (2), Quart (3), Quint (4), and Strong (4)) are accelerated.</p><div class=\"ease-visualizer\" data-ease=\"Power1\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example usage:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Power1.easeOut});</pre>"}},"08c9c08b99f1928d":{"meta":{"keywords":["js.Power1.easeIn"],"title":"easeIn","description":"[static] Eases in with a power of 1"},"header":{"content":"<p>[static] Eases in with a power of 1</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in with a power of 1</p>"}},"6206e87e65b57251":{"meta":{"keywords":["js.Power1.easeInOut"],"title":"easeInOut","description":"[static] Eases in and then out with a power of 1"},"header":{"content":"<p>[static] Eases in and then out with a power of 1</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in and then out with a power of 1</p>"}},"ef46b9dc2d56104b":{"meta":{"keywords":["js.Power1.easeOut"],"title":"easeOut","description":"[static] Eases out with a power of 1."},"header":{"content":"<p>[static] Eases out with a power of 1.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases out with a power of 1</p>"}},"23b845c3016f0559":{"meta":{"keywords":["js.ColorPropsPlugin","Plugins"],"title":"ColorPropsPlugin","description":"Allows you to animate any color-related property of any object (for DOM element properties, these capabilities are already built into CSSPlugin, so you only need ColorPropsPlugin if you&#039;re animating color properties of non-DOM elements, like canvas library objects or custom objects/properties). "},"header":{"content":"<p>Tweens any color-related property of any object, like <code>myObject.borderColor</code> from <code>\"rgb(255,0,51)\"</code> to <code>\"rgb(102,204,0)\"</code> (and you can define the initial color in almost any format like<code>\"#FF00CC\"</code> or <code>\"rgba(255,0,51,0.5)\"</code> or <code>\"red\"</code> or <code>\"#f0c\"</code> or <code>0xFF00CC</code> or <code>\"hsl(105,50%,80%)\"</code>). New values are always set in the format <code>\"rgb(...)\"</code> (or <code>rgba(...)</code> for values that include alpha). Or, if you want them applied as a number rather than rgb() string, simply set <code>format:\"number\"</code> in the colorProps:{} object (new in version 1.3.0).</p><p>You can tween an unlimited number of color properties simultaneously. Just use the associated property name inside the <code>colorProps:{}</code> object like this:</p><pre class='pre-container prettyprint'>//tweens myObject.borderColor and myObject.myCustomProp <br />TweenLite.to(myObject, 1, {colorProps:{borderColor:\"red\", myCustomProp:\"rgb(204,51,0)\"}, ease:Linear.easeNone});</pre><p>ColorPropsPlugin is <b>NOT</b> generally intended to be used with css-related color properties because the CSSPlugin already handles those. ColorPropsPlugin is meant to tween other color-related properties directly on your JavaScript object(s).</p><p>You may even use getter and setter functions on your JavasScript object if you want, so for example let's say your JavaScript object has a <code>getColor()</code> and <code>setColor()</code> method; tweening the value would be as simple as:</p><pre class='pre-container prettyprint'>//tween a getter/setter-based value<br />TweenLite.to(myObject, 1, {colorProps:{setColor:\"rgb(102,255,51)\"}, ease:Linear.easeNone});</pre><p>This even works for single-method getters/setters (like the ones in jQuery). For example, maybe you have a <code>lineColor()</code> method that serves as a getter and a setter based on whether or not you pass in a parameter like this:<br /></p><pre class='pre-container prettyprint'>//gets<br />var color = myObject.lineColor(); <br /> <br />//sets<br />myObject.lineColor(\"rgb(255,0,51)\"); <br /> <br />//tweens<br />TweenLite.to(myObject, 1, {colorProps:{lineColor:\"rgb(102,255,51)\"}, ease:Linear.easeNone});</pre><p><b>Note:</b> a common mistake is to forget to wrap color-related properties in a <code>colorProps</code> object which is essential for specifying your intent.</p>"}},"2433928b0e0f6cc4":{"meta":{"keywords":["js.DrawSVGPlugin","Animation","Plugins"],"title":"DrawSVGPlugin","description":"DrawSVGPlugin allows you to progressively reveal (or hide) the stroke of an SVG <path>, <line>, <polyline>, <polygon>, <rect>, or <ellipse> and you can even animate outward from the center of the stroke (or any position/segment). It does this by controlling the stroke-dashoffset."},"header":{"content":"<p>DrawSVGPlugin allows you to progressively reveal (or hide) the <strong>stroke</strong> of an SVG <code>&lt;path&gt;</code>, <code>&lt;line&gt;</code>, <code>&lt;polyline&gt;</code>, <code>&lt;polygon&gt;</code>, <code>&lt;rect&gt;</code>, or <code>&lt;ellipse&gt;</code> and you can even animate outward from the center of the stroke (or any position/segment). It does this by controlling the <code>stroke-dashoffset</code> and <code>stroke-dasharray</code> CSS properties. </p><p>Think of the <code>drawSVG</code> value as describing the stroked portion of the overall SVG element (which doesn't necessarily have to start at the beginning). For example, <code>drawSVG:\"20% 80%\"</code> renders the stroke between the 20% and 80% positions, meaning there's a 20% gap on each end. If you started at <code>\"50% 50%\"</code> and animated to <code>\"0% 100%\"</code>, it would draw the stroke from the middle outward to fill the whole path.</p><p data-height=\"584\" data-theme-id=\"9447\" data-slug-hash=\"d99f307bef8b65451613ba899154515b\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/d99f307bef8b65451613ba899154515b/'>DrawSVGPlugin Values: carl click next</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><p>Remember, the <code>drawSVG</code> value doesn't describe the values <i>between</i> which you want to animate - it describes the end state to which you're animating (or the beginning if you're using a <code>from()</code> tween). So <code>TweenLite.to(\"#path\", 1, {drawSVG:\"20% 80%\"})</code> animates it from wherever the stroke is currently to a state where the stroke exists between the 20% and 80% positions along the path. It does <strong>NOT</strong> animate it from 20% to 80% over the course of the tween. This is a <strong>GOOD</strong> thing because it gives you much more flexibility. You're not limited to starting out at a single point along the path and animating in one direction only. You control the whole segment (starting and ending positions). So you could even animate a dash from one end of the path to the other, never changing size, like <code>TweenLite.fromTo(\"#path\", 1, {drawSVG:\"0 5%\"}, {drawSVG:\"95% 100%\"});</code></p><p>You may use either <strong>percentages</strong> or <strong>absolute lengths</strong>. If you use a single value, 0 is assumed for the starting value, so <code>\"100%\"</code> is the same as <code>\"0 100%\"</code> and <code>\"true\"</code>.</p><p><strong>IMPORTANT:</strong> In order to animate the stroke, you must first actually apply one using either css or SVG attributes:<br /></p><pre class='pre-container prettyprint'><br />//Define a stroke and stroke-width in CSS:<br />.yourPath {<br />    stroke-width: 10px;<br />    stroke: red;<br />}<br /><br />//or as SVG attributes:<br /><circle stroke-width=\"10\" stroke=\"red\" fill=\"none\" cx=\"100\" cy=\"100\" r=\"50\" class=\"yourPath\" /><br /></pre><h2>How do I animate many strokes and stagger animations?</h2><p>The great thing about having DrawSVGPlugin integrated into GSAP is that you can tap into the rich API to quickly create complex effects and have total control (pause, resume, reverse, seek, nest, etc.). So let's say you have 20 SVG elements that all have the class \"draw-me\" applied to them, and you want to draw them in a staggered fashion, you could do:<br /></p><pre class='pre-container prettyprint'>//draws all elements with the \"draw-me\" class applied with staggered start times 0.1 seconds apart<br />TweenMax.staggerFrom(\".draw-me\", 2, {drawSVG:0}, 0.1);</pre><p>Or you could create a <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineLite\"><span data-link-id=\"2b3bb68a78e65fe7\"></span></span> and drop the tweens into it so that you can control the entire sequence as a whole:<br /></p><pre class='pre-container prettyprint'>var tl = new TimelineLite();<br />tl.staggerFrom(\".draw-me\", 2, {drawSVG:0}, 0.1);<br />//now we can control it:<br />tl.pause();<br />tl.play();<br />tl.reverse();<br />tl.seek(0.5);<br />...</pre><h2>Video</h2><p><iframe src=\"http://www.youtube.com/embed/6UAoyBcn2fk?rel=0&feature=player_detailpage\" width=\"838\" height=\"471\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></p><h2>Caveats / Notes</h2><ul><li>DrawSVGPlugin does <strong>not</strong> animate the fill of the SVG at all - it only affects the stroke using <code>stroke-dashoffset</code> and <code>stroke-dasharray</code> CSS properties.</li><li>In some rare situations, Firefox doesn't properly calculate the total length of <code>&lt;path&gt;</code> elements, so you may notice that the path stops a bit short even if you animate to 100%. In this [uncommon] scenario, there are two solutions: either add more anchors to your path to make the control points hug closer to the path, or overshoot the percentage a bit, like use 102% instead of 100%. To be clear, this is a Firefox bug, not a bug with DrawSVGPlugin.</li><li>DrawSVGPlugin is a <a href=\"/club/\" target=\"\">Club GreenSock</a> membership benefit. You must have a valid membership to use this class without violating the terms of use. Visit <a href=\"/club/\" target=\"\">http://greensock.com/club/</a> to sign up or get more details.</li><li>As of December 2014, iOS Safari has a bug that causes it to render <code>&lt;rect&gt;</code> strokes incorrectly in some cases (too thick, and slight artifacts around the edges, plus it misplaces the origin). The best workaround is to either convert your <code>&lt;rect&gt;</code> to a <code>&lt;path&gt;</code> or <code>&lt;polyline&gt;</code>.</li><li>You cannot affect the contents of a <code>&lt;use&gt;</code> element because browsers simply don't allow it. Well, you can tween them but you won't see any changes on the screen.</li></ul>"}},"27db5e20e8bbb9ae":{"meta":{"keywords":["js.AttrPlugin","Plugins"],"title":"AttrPlugin","description":"Tweens any numeric <code>attribute</code> of a DOM element, like <code>cx</code> in <code><circle cx=\"100\" cy=\"0\" r=\"50\"/></code>"},"header":{"content":"<span class=\"inTweenMax\">Included in TweenMax: <span class=\"yes\">YES</span></span>Tweens any numeric attribute of a DOM element. For example, let&#39;s say your DOM element looks like this:<br><pre class=\"pre-container prettyprint lang-html\">&lt;rect id=&quot;rect&quot; fill=&quot;none&quot; x=&quot;0&quot; y=&quot;0&quot; width=&quot;500&quot; height=&quot;400&quot;&gt;&lt;/rect&gt;</pre>You could tween the &quot;x&quot;, &quot;y&quot;, &quot;width&quot;, or &quot;height&quot; attributes using AttrPlugin like this:<br><pre class=\"pre-container prettyprint\">TweenLite.to(&quot;#rect&quot;, 1, {attr:{x:100, y:50, width:100, height:100}, ease:Linear.easeNone});</pre>You can tween an unlimited number of attributes simultaneously. Just use the associated property name inside the&nbsp;<code>attr:{}</code>&nbsp;object.<br><br>AttrPlugin is&nbsp;<strong>NOT</strong>&nbsp;intended to be used with css-related properties because the <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:CSSPlugin\"><span data-link-id=\"be137a434f5b4e08\"></span></span> already handles those. In the example above, if you specify <code>x</code> outside the <code>attr:{}</code> object, it would animate the CSS transform instead (as if you wanted to affect the <code>translateX()</code> of the CSS transform).<br><br>AttrPlugin will retain suffixes like &quot;%&quot;, meaning you can tween values like <code> &lt;rect width=&quot;50%&quot;...&gt;</code>. Caveat: it doesn&#39;t do unit conversion (like px to %), but that&#39;s rarely needed anyway.<br><br><strong>Note:</strong>&nbsp;a common mistake is to forget to wrap attributes in a&nbsp;<code>attr:{}</code>&nbsp;object which is essential for specifying your intent."}},"27ffcb75af705686":{"meta":{"keywords":["js.Draggable","Drag","Utilities"],"title":"Draggable","description":"Draggable provides a surprisingly simple way to make virtually any DOM element draggable, spinnable, tossable, and even flick-scrollable using mouse and/or touch events, plus Draggable integrates beautifully (and optionally) withThrowPropsPlugin so that the user can flick and have the motion decelerate smoothly based on momentum."},"header":{"content":"<p>Provides a surprisingly simple way to make virtually any DOM element draggable, spinnable, tossable, and even flick-scrollable using mouse and/or touch events, plus&nbsp;<code>Draggable</code>&nbsp;integrates beautifully (and optionally) with<code>ThrowPropsPlugin</code>&nbsp;so that the user can flick and have the motion decelerate smoothly based on momentum.</p>\n\n<p>For an interactive demo, go to&nbsp;<a href=\"http://greensock.com/draggable/\" target=\"external\">http://greensock.com/draggable/</a>.</p>\n\n<h3>Features</h3>\n\n<ul>\n\t<li><strong>Touch enabled</strong>&nbsp;- works great on tablets, phones, and desktop browsers.</li>\n\t<li><strong>Incredibly smooth</strong>&nbsp;- GPU-accelerated and requestAnimationFrame-driven for ultimate performance. Compared to other options out there,&nbsp;<code>Draggable</code>&nbsp;just&nbsp;<em>feels</em>&nbsp;far more natural and fluid, particularly when imposing bounds and momentum.</li>\n\t<li><strong>Momentum-based animation</strong>&nbsp;- if you have ThrowPropsPlugin loaded, you can simply set&nbsp;<code>throwProps:true</code>&nbsp;in the config object and it&#39;ll automatically apply natural, momentum-based movement after the mouse/touch is released, causing the object to glide gracefully to a stop. You can even control the amount of resistance, maximum or minimum duration, etc.</li>\n\t<li><strong>Impose bounds</strong>&nbsp;- tell a draggable element to stay within the bounds of another DOM element (a container) as in&nbsp;<code>bounds:&quot;#container&quot;</code>&nbsp;or define bounds as coordinates like&nbsp;<code>bounds:{top:100, left:0, width:1000, height:800}</code>&nbsp;or specific maximum/minimum values like&nbsp;<code>bounds:{minRotation:0, maxRotation:270}</code>.</li>\n\t<li><strong>Sense overlaps with hitTest()</strong>&nbsp;- see if one element is overlapping another and even set a tolerance threshold (like at least 20 pixels or 25% of either element&#39;s total surface area) using the super-flexible <code>Draggable.hitTest()</code>&nbsp;method. Feed it a mouse event and it&#39;ll tell you if the mouse is over the element. See&nbsp;<a href=\"http://codepen.io/GreenSock/pen/GFBvn\" target=\"external\">http://codepen.io/GreenSock/pen/GFBvn</a>&nbsp;for a simple example.</li>\n\t<li><strong>Define a trigger element</strong>&nbsp;- maybe you want only a certain area to trigger the dragging (like the top bar of a window) - it&#39;s as simple as&nbsp;<code>trigger:&quot;#topBar&quot;</code>, for example.</li>\n\t<li><strong>Drag position, rotation, or scroll</strong>&nbsp;- lots of drag types to choose from:&nbsp;<code>&quot;x,y&quot;</code> | <code>&quot;top,left&quot;</code> | <code>&quot;rotation&quot;</code> | <code>&quot;scroll&quot;</code> | <code>&quot;x&quot;</code> | <code>&quot;y&quot;</code> | <code>&quot;top&quot;</code> | <code>&quot;left&quot;</code> | <code>&quot;scrollTop&quot;</code> | <code>&quot;scrollLeft&quot;</code></li>\n\t<li><strong>Lock movement along a certain axis</strong>&nbsp;- set <code>lockAxis:true</code> and Draggable will watch the direction the user starts to drag and then restrict it to that axis. Or if you only want to allow vertical or horizontal movement, that&#39;s easy too using the <code>type</code> (<code>&quot;top&quot;</code>,&nbsp;<code>&quot;y&quot;</code>&nbsp;or <code>&quot;scrollTop&quot;</code> only allow vertical movement; <code>&quot;x&quot;</code>, <code>&quot;left&quot;</code>,&nbsp;or <code>&quot;scrollLeft&quot;</code> only allow horizontal movement).</li>\n\t<li><strong>Rotation honors transform origin</strong>&nbsp;- by default, spinnable elements will rotate around their center, but you can set&nbsp;<code>transformOrigin</code>&nbsp;to something else to make the pivot point be elsewhere. For example, if you call&nbsp;<code>TweenLite.set(yourElement, {transformOrigin:&quot;top left&quot;})</code>&nbsp;before dragging, it will rotate around its top left corner. Or use % or px. Whatever is set in the element&#39;s css will be honored.</li>\n\t<li><strong>Rich callback system and event dispatching</strong>&nbsp;- you can use any of the following callbacks:&nbsp;<code>onPress</code>, <code>onDragStart</code>, <code>onDrag</code>, <code>onDragEnd</code>, <code>onRelease,</code>, <code>onLockAxis</code>,&nbsp;and&nbsp;<code>onClick</code>. Inside the callbacks, <code>&quot;this&quot;</code> refers to the Draggable instance itself, so you can easily access its &quot;target&quot; or bounds, etc. If you prefer event listeners instead, Draggable dispatches events too so you can do things like<code>yourDraggable.addEventListener(&quot;dragend&quot;, yourFunc);</code></li>\n\t<li><strong>Works great with SVG</strong></li>\n\t<li><strong>Even works in transformed containers!</strong> Got a Draggable inside a rotated/scaled container? No problem. No other tool handles this properly that we&#39;ve seen.</li>\n\t<li><strong>Auto-scrolling, even in multiple containers</strong> - set <code>autoScroll:1</code> for normal-speed auto scrolling, or <code>autoScroll:2</code> would scroll twice as fast, etc. The closer you move toward the edge, the faster scrolling gets. See a <a href=\"http://codepen.io/GreenSock/pen/YPvdYv/?editors=001\">demo here</a> (added in version 0.12.0)</li>\n\t<li><strong>Sense clicks when the element moves less than 3 pixels</strong>&nbsp;- a common challenge is figuring out when a user is trying to click/tap an object rather than drag it, so if the mouse/touch moves less than 3 pixels from its starting position, it will be interpreted as a &quot;click&quot; and the onClick callback will be called (and a &quot;click&quot; event dispatched) without actually moving the element. You can define a different threshold using <code>minimumMovement</code> config property, like <code>minimumMovement:6</code> for 6 pixels.</li>\n\t<li><strong>Even works in IE8!</strong>&nbsp;- all major browsers are supported.</li>\n</ul>\n\n<h3>Usage</h3>\n\n<p>In its simplest form, you can make an element draggable (vertically and horizontally) like this:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">Draggable.create(&quot;#yourID&quot;);</pre>\n\n<p>This will simply find the element with the ID&nbsp;<code>&quot;yourID&quot;</code>&nbsp;and make it draggable with no bounds or any kinetic motion after release. You don&#39;t need to use selector text either - you can pass the element itself or a jQuery object.</p>\n\n<p>Use the&nbsp;<code>vars</code>&nbsp;parameter to define various other configuration options. For example, to make the object scroll only vertically using the&nbsp;<code>&quot;y&quot;</code>&nbsp;transform and stay within the bounds of a DOM element with an ID of<code>&quot;container&quot;</code>, and call a function when clicked and another when the drag ends and make it have momentum-based motion (assuming you loaded ThrowPropsPlugin), do this:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">Draggable.create(&quot;#yourID&quot;, {\n\ttype:&quot;y&quot;,\n\tbounds: document.getElementById(&quot;container&quot;),\n\tthrowProps:true,\n\tonClick:function() {\n\t\tconsole.log(&quot;clicked&quot;);\n\t},\n\tonDragEnd:function() {\n\t\tconsole.log(&quot;drag ended&quot;);\n\t}\n});</pre>\n\n<p>Or to make something&nbsp;<strong>spinnable</strong>&nbsp;(dragging rotates the element), you could simply do:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">Draggable.create(&quot;#yourID&quot;, {\n   type:&quot;rotation&quot;,\n   throwProps:true\n});</pre>\n\n<p>And to add the ability to snap to 90-degree increments after the mouse/touch is released (like flick-spinning that always lands on 90-degree increments), use the&nbsp;<code>snap</code>&nbsp;option:</p><pre class=\"pre-container prettyprint\">Draggable.create(&quot;#yourID&quot;, {\n   type:&quot;rotation&quot;,\n   throwProps:true,\n   snap:function(value) {\n//this function gets called by ThrowPropsPlugin when the mouse/finger is released and it plots where rotation should normally end and we can alter that value and return a new one instead. This gives us an easy way to apply custom snapping behavior with any logic we want. In this case, we&#39;ll just make sure the end value snaps to 90-degree increments but only when the &quot;snap&quot; checkbox is selected.\n      return Math.round(value / 90) * 90;\n   }\n});</pre>\n\n<p>Or to make the element&nbsp;<strong>flick-scrollable</strong>, so that dragging it actually scrolls the content, make sure you&#39;ve set the element&#39;s height (and/or width), and then do this:</p><pre class=\"pre-container prettyprint\">Draggable.create(&quot;#yourID&quot;, {\n   type:&quot;scroll&quot;,\n   throwProps:true\n});</pre>\n\n<h2>Config object properties</h2>\n\n<p>[config id=&quot;0dc94f7962bb1809&quot;]</p>\n<a name=\"snapping\"></a>\n\n<h2>Snapping</h2> Draggable has advanced snapping capabilities. You can define a <code>snap</code> value in the config object to control where the Draggable will snap <strong>AFTER</strong> it is released, or you can define a <code>liveSnap</code> value where the Draggable should snap <strong>WHILE</strong> dragging. You can define these values in any of the following ways:\n\n<h3>As an array of snap-to values</h3><pre class=\"pre-container prettyprint\">Draggable.create(&quot;#id&quot;, {\n    type:&quot;x,y&quot;,\n    liveSnap:{\n        //snaps to the closest point in the array, but only when it&#39;s within 15px (new in GSAP 1.20.0 release):\n        points:[{x:0, y:0}, {x:100, y:0}, {x:200, y:50}],\n        radius: 15\n    }\n});\n</pre>\n\n<p><code>points</code> is a special property introduced in GSAP 1.20.0 that allows you to combine both x and y logic into a single place. You can also use separate per-property arrays:</p><pre class=\"pre-container prettyprint\">Draggable.create(&quot;#id&quot;, {\n    type:&quot;x,y&quot;,\n    liveSnap:{\n        //x and y (or top and left) can each have their own array of values to snap to:\n        x:[0, 100, 200, 300],\n        y:[0, 50, 100, 150]\n    }\n});\n</pre>\n\n<h3>As a function with custom logic</h3><pre class=\"pre-container prettyprint\">Draggable.create(&quot;#id&quot;, {\n    type:&quot;x,y&quot;,\n    liveSnap:{\n        points: function(point) {\n            //if it&#39;s within 100px, snap exactly to 500,250\n            var dx = point.x - 500;\n            var dy = point.y - 250;\n            if (Math.sqrt(dx * dx + dy * dy) &lt; 100) {\n                return {x:500, y:250};\n            }\n            return point; //otherwise don&#39;t change anything.\n        }\n    }\n});\n</pre>\n\n<p>Or use separate per-property functions:</p><pre class=\"pre-container prettyprint\">Draggable.create(&quot;#id&quot;, {\n    type:&quot;x,y&quot;,\n    liveSnap:{\n        x: function(value) {\n            //snap to the closest increment of 50.\n            return Math.round(value / 50) * 50; \n        },\n        y: function(value) {\n            //snap to the closest increment of 25.\n            return Math.round(value / 25) * 25;\n        }\n    }\n});\n</pre>\n\n<p>It&#39;s just as simple for a rotation Draggable:</p><pre class=\"pre-container prettyprint\">Draggable.create(&quot;#id&quot;, {\n    type:&quot;rotation&quot;,\n    liveSnap:{\n        rotation: function(value) {\n            //snap to the closest increment of 10.\n            return Math.round(value / 10) * 10; \n        }\n    }\n});\n</pre>\n\n<h2>Getting the velocity</h2>\n\n<p>As long as you&#39;ve loaded&nbsp;<code>ThrowPropsPlugin</code>&nbsp;and set&nbsp;<code>throwProps:true</code>&nbsp;on your Draggable, you can tap into the&nbsp;<code>ThrowPropsPlugin.getVelocity()</code>&nbsp;method. Draggable will automatically start tracking the velocity of the necessary properties based on whatever its &quot;type&quot; is (<code>type:&quot;x,y&quot;</code>&nbsp;will track x and y,&nbsp;<code>type:&quot;rotation&quot;</code>&nbsp;will track rotation, etc.). The only odd duck is &quot;scroll&quot; (or &quot;scrollTop&quot; or &quot;scrollLeft&quot;) because browsers don&#39;t allow overscrolling, so Draggable has to create a special&nbsp;<code>ScrollProxy</code>&nbsp;object that manages the complexity of adding transforms or margins when necessary. Therefore, to get the scrolling-based velocity, you&#39;d use that proxy and check its &quot;top&quot; or &quot;left&quot; values (&quot;top&quot; for the vertical scrolling velocity, and &quot;left&quot; for horizontal). Here are a few examples that you could add to the <code>onDragEnd</code> callback to log the velocity when the user releases their mouse/touch:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">//positional velocity\nDraggable.create(&quot;#movableID&quot;, {\n\ttype:&quot;x,y&quot;,\n\tthrowProps:true,\n\tonDragEnd:function() {\n\t\tconsole.log(&quot;x velocity is: &quot; + ThrowPropsPlugin.getVelocity(this.target, &quot;x&quot;) + &quot; and the duration is &quot; + this.tween.duration() + &quot; seconds.&quot;);\n\t}\n});\n\n//scroll velocity\nDraggable.create(&quot;#scrollableID&quot;, {\n\ttype:&quot;scroll&quot;,\n\tthrowProps:true,\n\tonDragEnd:function() {\n\t\tconsole.log(&quot;vertical scroll velocity is: &quot; + ThrowPropsPlugin.getVelocity(this.scrollProxy, &quot;top&quot;) + &quot;, horizontal scroll velocity is: &quot; + ThrowPropsPlugin.getVelocity(this.scrollProxy, &quot;left&quot;));\n\t}\n});</pre>\n\n<h2>Notes, dependencies, and limitations</h2>\n\n<ul>\n\t<li>Requires TweenLite and CSSPlugin (or just TweenMax which already contains both TweenLite and CSSPlugin). Does&nbsp;<strong>not</strong>&nbsp;require jQuery or any other framework.</li>\n\t<li>If you want a particular element to be &quot;clickable&quot;, thus ignored by Draggable, simply add a&nbsp;<code>data-clickable=&quot;true&quot;</code>&nbsp;attribute to it, or an onclick. By default, Draggable automatically ignores clicks on<code>&lt;a&gt;</code>,&nbsp;<code>&lt;input&gt;</code>,&nbsp;<code>&lt;select&gt;</code>,&nbsp;<code>&lt;button&gt;</code>, and&nbsp;<code>&lt;textarea&gt;</code>&nbsp;elements. If you prefer to run your own logic to determine if an object should be considered &quot;clickable&quot;, you can set the <code>clickableTest</code> config property to a function of your choosing that returns true or false.</li>\n\t<li><code>Draggable</code>&nbsp;can be used&nbsp;<strong>without</strong>&nbsp;<code>ThrowPropsPlugin</code>, but doing so will disable any momentum-based motion (like being able to flick objects and have them continue while decelerating).&nbsp;<code>ThrowPropsPlugin</code>&nbsp;is a membership benefit of&nbsp;<a href=\"http://greensock.com/club/\">Club GreenSock</a>. Please consider joining if you haven&#39;t already.</li>\n\t<li>In order to make things moveable via their&nbsp;<code>&quot;top&quot;</code>&nbsp;and&nbsp;<code>&quot;left&quot;</code>&nbsp;css properties, you must make sure that the elements have their&nbsp;<code>position</code>&nbsp;css property set to either&nbsp;<code>&quot;relative&quot;</code>&nbsp;or&nbsp;<code>&quot;absolute&quot;</code>&nbsp;(that&#39;s just how css works).</li>\n\t<li>By default, all callback functions and &quot;snap&quot; functions and &quot;liveSnap&quot; functions are scoped to the associated Draggable instance, so &quot;this&quot; refers to the Draggable instance. You can get the current horizontal or vertical values using&nbsp;<code>this.x</code>&nbsp;and&nbsp;<code>this.y</code>&nbsp;inside those functions. And if you applied bounds, you can also get the maximum and minimum &quot;legal&quot; values for that particular instance using&nbsp;<code>this.maxX, this.minX, this.maxY</code>, and&nbsp;<code>this.minY</code>.</li>\n\t<li><strong>Having trouble with momentum-based motion?</strong>&nbsp;Make sure you have&nbsp;<code>ThrowPropsPlugin</code>&nbsp;loaded. It&#39;s not in the public downloads because it is a membership benefit of&nbsp;<a href=\"http://greensock.com/club/\" target=\"\">Club GreenSock</a>; you get it by logging into your&nbsp;GreenSock account&nbsp;and downloading it there. Also, make sure you&#39;ve set <code>throwProps:true</code>&nbsp;in the&nbsp;<code>vars</code>&nbsp;config object, like&nbsp;<code>Draggable.create(yourObject, {throwProps:true});</code></li>\n\t<li>If you use an element for the&nbsp;<code>bounds</code>, it should not be rotated differently than the target element.</li>\n</ul>\n\n<p><strong>Examples</strong></p>\n\n<p>For an interactive demo, go to&nbsp;<a href=\"http://greensock.com/draggable/\">http://greensock.com/draggable/</a>.</p>\n\n<p>The following example creates a green box and a red box that you can drag and toss around the screen in a natural, fluid way. If you check the &quot;Snap to grid&quot; checkbox, the boxes will always land exactly on the grid.</p>\n<div class=\"cp_embed_wrapper\">\n\t<iframe id=\"cp_embed_zDwEk\" src=\"http://codepen.io/GreenSock/embed/zDwEk?default-tab=result&height=489&slug-hash=zDwEk&theme-id=9446&user=GreenSock\" scrolling=\"no\" frameborder=\"0\" height=\"489\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed 1\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"></iframe>\n</div>\n\n<p>\n\t<script async=\"\" src=\"http://codepen.io/assets/embed/ei.js\"></script>\n</p>\n"}},"c75d3c448b8ad479":{"meta":{"keywords":["js.Draggable.Draggable()"],"title":"Draggable()","description":"Contstructor"},"header":{"content":"<p>Contstructor</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>The object that will be dragged.</p>\n","related_configuration_object":"0dc94f7962bb1809"},{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code></p>\n"}],"returns":{},"details":{"content":"<p>Constructor. Typically it's best to use <code>Draggable.create()</code> instead of the constructor because it can accommodate multiple elements with one call.</p>"}},"b64a6a3ccee6d6f8":{"meta":{"keywords":["js.Draggable.autoScroll"],"title":"autoScroll","description":"To enable auto-scrolling when a Draggable is dragged within 40px of an edge of a scrollable container, set autoScroll to a non-zero value, where 1 is normal speed, 2 is double-speed, etc. (you can use any number). For a more intuitive/natural feel, it will scroll faster as the mouse/touch gets closer to the edge. The default value is 0 (no auto-scrolling)."},"header":{"content":"<p>To enable auto-scrolling when a Draggable is dragged within 40px of an edge of a scrollable container, set <code>autoScroll</code> to a non-zero value, where 1 is normal speed, 2 is double-speed, etc. (you can use any number). For a more intuitive/natural feel, it will scroll faster as the mouse/touch gets closer to the edge. The default value is 0 (no auto-scrolling).</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>To enable auto-scrolling when a Draggable is dragged within 40px of an edge of a scrollable container, set <code>autoScroll</code> to a non-zero value, where 1 is normal speed, 2 is double-speed, etc. (you can use any number). For a more intuitive/natural feel, it will scroll faster as the mouse/touch gets closer to the edge. The default value is 0 (no auto-scrolling).</p><h2>Video</h2><p><iframe src=\"http://www.youtube.com/embed/lyL8vtF1L68?rel=0&feature=player_detailpage\" width=\"838\" height=\"471\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></p><h2>Demo</h2><p data-height=\"489\" data-theme-id=\"9446\" data-slug-hash=\"YPvdYv\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/YPvdYv/'>SVG + CSS Transform Timeline</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://codepen.io/assets/embed/ei.js\"></script></p>"}},"5402bf6985777c02":{"meta":{"keywords":["js.Draggable.endRotation"],"title":"endRotation","description":"The ending rotation of the Draggable instance which is calculated as soon as the mouse/touch is released after a drag, meaning you can use it to predict precisely where it'll land after a throwProps flick."},"header":{"content":"<p>[read-only] [only applies to type:\"rotation\"] The ending rotation of the Draggable instance which is calculated as soon as the mouse/touch is released after a drag, meaning you can use it to predict precisely where it'll land after a <code>throwProps</code> flick.</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>[only applies to type:\"rotation\"] The ending rotation of the Draggable instance. endRotation gets populated immediately when the mouse (or touch) is released after dragging, even before tweening has completed. This makes it easy to predict exactly what angle the element will land at (useful for <code>throwProps:true</code> Draggables where momentum gets applied and you want to predict where it'll land).</p>"}},"d5a05b37afbe9b9a":{"meta":{"keywords":["js.Draggable.endX"],"title":"endX","description":"The ending x (horizontal) position of the Draggable instance which is calculated as soon as the mouse/touch is released after a drag, meaning you can use it to predict precisely where it'll land after a throwProps flick."},"header":{"content":"<p>[read-only] The ending x (horizontal) position of the Draggable instance which is calculated as soon as the mouse/touch is released after a drag, meaning you can use it to predict precisely where it'll land after a <code>throwProps</code> flick.</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>The ending x (horizontal) position of the Draggable instance. <code>endX</code> gets populated immediately when the mouse (or touch) is released after dragging, even before tweening has completed. This makes it easy to predict exactly where the element will land (useful for <code>throwProps:true</code> Draggables where momentum gets applied). For a Draggable of <code>type:\"x,y\"</code>, <code>endX</code> would pertain to the <code>x</code> transform translation, as in the css <code>transform:translateX(...)</code>. For <code>type:\"top,left\"</code>, the Draggable's <code>x</code> would refer to the css <code>\"left\"</code> value that's applied. This is <b>not</b> the global coordinate - it is the inline css-related value applied to the element.</p>"}},"6151d8080d89dd43":{"meta":{"keywords":["js.Draggable.endY"],"title":"endY","description":"The ending y (vertical) position of the Draggable instance which is calculated as soon as the mouse/touch is released after a drag, meaning you can use it to predict precisely where it'll land after a throwProps flick."},"header":{"content":"<p>[read-only] The ending y (vertical) position of the Draggable instance which is calculated as soon as the mouse/touch is released after a drag, meaning you can use it to predict precisely where it'll land after a <code>throwProps</code> flick.</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>The ending y (vertical) position of the Draggable instance. <code>endY</code> gets populated immediately when the mouse (or touch) is released after dragging, even before tweening has completed. This makes it easy to predict exactly where the element will land (useful for <code>throwProps:true</code> Draggables where momentum gets applied). For a Draggable of <code>type:\"x,y\"</code>, <code>endY</code> would pertain to the <code>y</code> transform translation, as in the css <code>transform:translateY(...)</code>. For <code>type:\"top,left\"</code>, the Draggable's <code>y</code> would refer to the css <code>\"top\"</code> value that's applied. This is <b>not</b> the global coordinate - it is the inline css-related value applied to the element.</p>"}},"37fa5f2f65e863e4":{"meta":{"keywords":["js.Draggable.isThrowing"],"title":"isThrowing","description":"Reports if the target of a Draggable is being thrown using a ThrowPropsPlugin tween."},"header":{"content":"<p>Reports if the target of a Draggable is being thrown using a ThrowPropsPlugin tween.</p>"},"returns":{"type":"Boolean","content":""},"details":{"content":"<p><code>isThrowing</code> will be true if the Draggable's target is currently being animated by a ThrowProps tween.</p>"}},"c6ed6b795d19d3bd":{"meta":{"keywords":["js.Draggable.lockAxis"],"title":"lockAxis","description":"If true, dragging more than 2 pixels in either direction (horizontally or vertically) will lock movement into that axis so that the element can only be dragged that direction (horizontally or vertically, whichever had the most initial movement)."},"header":{"content":"<p>If true, dragging more than 2 pixels in either direction (horizontally or vertically) will lock movement into that axis so that the element can only be dragged that direction (horizontally or vertically, whichever had the most initial movement).</p>"},"returns":{"type":"Boolean","content":""},"details":{"content":"<p>If <code>true</code>, dragging more than 2 pixels in either direction (horizontally or vertically) will lock movement into that axis so that the element can only be dragged that direction (horizontally or vertically, whichever had the most initial movement). No diagonal movement will be allowed. Obviously this is only applicable for <code>type:\"x,y\"</code> and <code>type:\"top,left\"</code> and <code>type:\"scroll\"</code> Draggables. If you only want to allow vertical movement, you should use<code>type:\"y\"</code> or <code>type:\"top\"</code> or <code>type:\"scrollTop\"</code> or if you only want to allow horizontal movement, you should use <code>type:\"x\"</code> or <code>type:\"left\"</code> or<code>type:\"scrollLeft\"</code>.</p>"}},"fcb1bb985e1f73e9":{"meta":{"keywords":["js.Draggable.lockedAxis"],"title":"lockedAxis","description":"The axis along which movement is locked during that particular drag (either \"x\" or \"y\"). For example, if lockAxis is true on a Draggable of type:\"x,y\", and the user starts dragging horizontally, lockedAxis would be \"y\" because vertical movement won't be allowed during that drag."},"header":{"content":"<p>[read-only] The axis along which movement is locked during that particular drag (either <code>\"x\"</code> or <code>\"y\"</code>). For example, if <code>lockAxis</code> is <code>true</code> on a Draggable of <code>type:\"x,y\"</code>, and the user starts dragging horizontally, <code>lockedAxis</code> would be <code>\"y\"</code> because vertical movement won't be allowed during that drag. </p>"},"returns":{"type":"String","content":""},"details":{"content":"<p>[read-only] The axis along which movement is locked (either <code>\"x\"</code> or <code>\"y\"</code>). For example, if <code>lockAxis</code> is <code>true</code> on a Draggable of <code>type:\"x,y\"</code>, and the user starts dragging horizontally, <code>lockedAxis</code> would be <code>\"y\"</code> because vertical movement won't be allowed during that drag. The <code>lockedAxis</code> property isn't set immediately upon press - the Draggable must wait to see which direction the user drags first. You can define a <code>onLockAxis</code> callback if you'd like to be notified when the axis gets locked. </p><p><code>lockedAxis</code> is also populated on touch-enabled devices when you have a Draggable whose <code>type</code> only permits it to drag along one axis (like <code>type:\"x\"</code>, <code>type:\"y\"</code>, <code>type:\"left\"</code>, or <code>type:\"top\"</code>) and the user touch-drags and the Draggable determines the direction, either allowing native touch-scrolling or Draggable-induced dragging. </p><p>Added in Draggable 0.13.0</p><p><b>Example</b><br /></p><pre class='pre-container prettyprint'>Draggable.create(\"#yourID\", {<br />   type:\"x,y\",<br />   lockAxis:true,<br />   onLockAxis:function() {<br />       console.log(\"locked axis: \" + this.lockedAxis);<br />   }<br />});</pre>"}},"b1848b9fa107b520":{"meta":{"keywords":["js.Draggable.maxRotation"],"title":"maxRotation","description":"[read-only] [only applies to type:&quot;rotation&quot;] When bounds are applied, maxRotation refers to the maximum &quot;legal&quot; rotation."},"header":{"content":"<p>[read-only] [only applies to type:\"rotation\"] When bounds are applied, maxRotation refers to the maximum \"legal\" rotation.</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>[only applies to <code>type:\"rotation\"</code>] When <code>bounds</code> are applied, <code>maxRotation</code> refers to the maximum \"legal\" rotation. This makes it easier to run your own custom logic inside the <code>snap</code>, <code>liveSnap</code>, or callback function(s) if you so choose.<br />Implementation<br /><code>    public function get maxRotation():Number</code></p>"}},"8efb834a28d647b3":{"meta":{"keywords":["js.Draggable.maxX"],"title":"maxX","description":"[read-only] When bounds are applied, maxX refers to the maximum &quot;legal&quot; value of the horizontal property (either &quot;x&quot; or &quot;left&quot;, depending on which type the Draggable is)."},"header":{"content":"<p>[read-only] When bounds are applied, maxX refers to the maximum \"legal\" value of the horizontal property (either \"x\" or \"left\", depending on which type the Draggable is).</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>When <code>bounds</code> are applied, <code>maxX</code> refers to the maximum \"legal\" value of the horizontal property (either \"x\" or \"left\", depending on which <code>type</code> the Draggable is). This makes it easier to run your own custom logic inside the <code>snap</code> or callback function(s) if you so choose. So for a Draggable of<code>type:\"x,y\"</code>, <code>maxX</code> would correlate with <code>x</code> transform translation, as in the css <code>transform:translateX(...)</code>. For <code>type:\"top,left\"</code>, the Draggable's<code>maxX</code> would correlate with the css <code>\"left\"</code> value that's applied. This is <b>not</b> the global coordinate - it is the inline css-related value applied to the element.<br />Implementation<br /><code>    public function get maxX():Number</code></p>"}},"0d7cccc5009c65f7":{"meta":{"keywords":["js.Draggable.maxY"],"title":"maxY","description":"[read-only] When bounds are applied, maxY refers to the maximum &quot;legal&quot; value of the vertical property (either &quot;y&quot; or &quot;top&quot;, depending on which type the Draggable is)."},"header":{"content":"<p>[read-only] When bounds are applied, maxY refers to the maximum \"legal\" value of the vertical property (either \"y\" or \"top\", depending on which type the Draggable is).</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>When <code>bounds</code> are applied, <code>maxY</code> refers to the maximum \"legal\" value of the vertical property (either \"y\" or \"top\", depending on which <code>type</code> the Draggable is). This makes it easier to run your own custom logic inside the <code>snap</code> or callback function(s) if you so choose. So for a Draggable of<code>type:\"x,y\"</code>, <code>maxY</code> would correlate with <code>y</code> transform translation, as in the css <code>transform:translateY(...)</code>. For <code>type:\"top,left\"</code>, the Draggable's<code>maxY</code> would correlate with the css <code>\"top\"</code> value that's applied. This is <b>not</b> the global coordinate - it is the inline css-related value applied to the element.<br />Implementation<br /><code>    public function get maxY():Number</code></p>"}},"efaa84c28aa97dc5":{"meta":{"keywords":["js.Draggable.minRotation"],"title":"minRotation","description":"[read-only] [only applies to type:&quot;rotation&quot;] When bounds are applied, minRotation refers to the minimum &quot;legal&quot; rotation."},"header":{"content":"<p>[read-only] [only applies to type:\"rotation\"] When bounds are applied, minRotation refers to the minimum \"legal\" rotation.</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>[only applies to <code>type:\"rotation\"</code>] When <code>bounds</code> are applied, <code>minRotation</code> refers to the minimum \"legal\" rotation. This makes it easier to run your own custom logic inside the <code>snap</code>, <code>liveSnap</code>, or callback function(s) if you so choose.<br />Implementation<br /><code>    public function get minRotation():Number</code></p>"}},"066a1985d52b529c":{"meta":{"keywords":["js.Draggable.minX"],"title":"minX","description":"[read-only] When bounds are applied, minX refers to the minimum &quot;legal&quot; value of the horizontal property (either &quot;x&quot; or &quot;left&quot;, depending on which type the Draggable is).<br />\r\n"},"header":{"content":"<p>[read-only] When bounds are applied, minX refers to the minimum \"legal\" value of the horizontal property (either \"x\" or \"left\", depending on which type the Draggable is).</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>When <code>bounds</code> are applied, <code>minX</code> refers to the minimum \"legal\" value of the horizontal property (either \"x\" or \"left\", depending on which <code>type</code> the Draggable is). This makes it easier to run your own custom logic inside the <code>snap</code> or callback function(s) if you so choose. So for a Draggable of<code>type:\"x,y\"</code>, <code>minX</code> would correlate with <code>x</code> transform translation, as in the css <code>transform:translateX(...)</code>. For <code>type:\"top,left\"</code>, the Draggable's<code>minX</code> would correlate with the css <code>\"left\"</code> value that's applied. This is <b>not</b> the global coordinate - it is the inline css-related value applied to the element.</p>"}},"c9a8ad76c3364ab5":{"meta":{"keywords":["js.Draggable.minY"],"title":"minY","description":"[read-only] When bounds are applied, minY refers to the minimum &quot;legal&quot; value of the vertical property (either &quot;y&quot; or &quot;top&quot;, depending on which type the Draggable is)."},"header":{"content":"<p>[read-only] When bounds are applied, minY refers to the minimum \"legal\" value of the vertical property (either \"y\" or \"top\", depending on which type the Draggable is).</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>When <code>bounds</code> are applied, <code>minY</code> refers to the minimum \"legal\" value of the vertical property (either \"y\" or \"top\", depending on which <code>type</code> the Draggable is). This makes it easier to run your own custom logic inside the <code>snap</code> or callback function(s) if you so choose. So for a Draggable of<code>type:\"x,y\"</code>, <code>minY</code> would correlate with <code>y</code> transform translation, as in the css <code>transform:translateY(...)</code>. For <code>type:\"top,left\"</code>, the Draggable's<code>minY</code> would correlate with the css <code>\"top\"</code> value that's applied. This is <b>not</b> the global coordinate - it is the inline css-related value applied to the element.<br />Implementation<br /><code>    public function get minY():Number</code></p>"}},"83fa31bf259e7bc7":{"meta":{"keywords":["js.Draggable.pointerEvent"],"title":"pointerEvent","description":"[read-only] The last pointer event (either a mouse event or touch event) that affected the Draggable instance."},"header":{"content":"<p>[read-only] The last pointer event (either a mouse event or touch event) that affected the Draggable instance.</p>"},"returns":{"type":"Object","content":""},"details":{"content":"<p>The last pointer event (either a mouse event or touch event) that affected the Draggable instance. This can be useful to, for example, check its pageX or pageY or target or currentTarget, etc.<br />Implementation<br /><code>    public function get pointerEvent():Object</code></p>"}},"4f8bff36fbe23240":{"meta":{"keywords":["js.Draggable.pointerX"],"title":"pointerX","description":"[read-only] The x (horizontal) position of the pointer (mouse or touch) associated with the Draggable&#039;s last event (like event.pageX)."},"header":{"content":"<p>[read-only] The x (horizontal) position of the pointer (mouse or touch) associated with the Draggable's last event (like event.pageX).</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>The x (horizontal) position of the pointer (mouse or touch) associated with the Draggable's last event (like <code>event.pageX</code>).<br />Implementation<br /><code>    public function get pointerX():Number</code></p>"}},"16158325892ff508":{"meta":{"keywords":["js.Draggable.pointerY"],"title":"pointerY","description":"[read-only] The y (vertical) position of the pointer (mouse or touch) associated with the Draggable&#039;s last event (like event.pageY)."},"header":{"content":"<p>[read-only] The y (vertical) position of the pointer (mouse or touch) associated with the Draggable's last event (like event.pageY).</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>The y (vertical) position of the pointer (mouse or touch) associated with the Draggable's last event (like <code>event.pageY</code>).<br />Implementation<br /><code>    public function get pointerY():Number</code></p>"}},"b8156aef40ce441e":{"meta":{"keywords":["js.Draggable.rotation"],"title":"rotation","description":"[read-only] [only applies to type:&quot;rotation&quot;] The current rotation (in degrees) of the Draggable instance."},"header":{"content":"<p>[read-only] [only applies to type:\"rotation\"] The current rotation (in degrees) of the Draggable instance.</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>[only applies to <code>type:\"rotation\"</code>] The current rotation (in degrees) of the Draggable instance. This is the <code>rotation</code> transform, as in the css<code>transform:rotate(...deg)</code>. This value is updated each time the Draggable is dragged interactively and during the momentum-based tween that Draggable applies when the user releases their mouse/touch, but if you manually change (or tween) the element's rotation you can force Draggable to look at the \"real\" value and record it to its own \"x\" property by calling the Draggable's <code>update()</code> method. Basically that re-synchronizes it. Again, this is not necessary unless other code (outside Draggable) alters the target element's position.<br />Implementation<br /><code>    public function get rotation():Number</code></p>"}},"0f6ea912f8ed3cf7":{"meta":{"keywords":["js.Draggable.scrollProxy"],"title":"scrollProxy","description":"[read-only] A special object that gets created for type:&quot;scroll&quot; (or &quot;scrollTop&quot; or &quot;scrollLeft&quot;) Draggables; this object manages the scrolling behavior, applying the necessary transforms or margins to accomplish overscrolling when necessary."},"header":{"content":"<p>[read-only] A special object that gets created for type:\"scroll\" (or \"scrollTop\" or \"scrollLeft\") Draggables; this object manages the scrolling behavior, applying the necessary transforms or margins to accomplish overscrolling when necessary.</p>"},"returns":{"type":"Object","content":""},"details":{"content":"<p>A special object that gets created for <code>type:\"scroll\"</code> (or <code>\"scrollTop\"</code> or <code>\"scrollLeft\"</code>) Draggables; this object manages the scrolling behavior, applying the necessary transforms or margins to accomplish overscrolling when necessary. The <code>scrollProxy</code> object has <code>top()</code> and <code>left()</code>getter/setter methods (and <code>scrollTop()/scrollLeft()</code> which are simply the inverse of <code>top()/left()</code>). If you need to get the scrolling velocity, make sure you've loaded <code>ThrowPropsPlugin</code> and set <code>throwProps:true</code> on the Draggable and then you can use<code>ThrowPropsPlugin.getVelocity(yourDraggable.scrollProxy, \"top\")</code> to get the vertical scrolling velocity (use <code>\"left\"</code> for horizontal).<br />Implementation<br /><code>    public function get scrollProxy():Object</code></p>"}},"78fa71d7884ceae5":{"meta":{"keywords":["js.Draggable.target"],"title":"target","description":"The object that is being dragged."},"header":{"content":"<p>The object that is being dragged.</p>"},"returns":{"type":"Object","content":""},"details":{"content":"<p>The object that is being dragged.</p>"}},"2000fd9279daa4a5":{"meta":{"keywords":["js.Draggable.tween"],"title":"tween","description":"[read-only] The TweenLite instance that gets created as soon as the mouse (or touch) is released (when throwProps is true) - this allows you to check its duration or pause/resume or change its timeScale or whatever you want."},"header":{"content":"<p>[read-only] The TweenLite instance that gets created as soon as the mouse (or touch) is released (when throwProps is true) - this allows you to check its duration or pause/resume or change its timeScale or whatever you want.</p>"},"returns":{"type":"TweenLite","content":""},"details":{"content":"<p>The TweenLite instance that gets created as soon as the mouse (or touch) is released (when <code>throwProps</code> is <code>true</code>) - this allows you to check its duration or pause/resume or change its timeScale or whatever you want. Keep in mind that a new tween is created each time the element is \"thrown\". You can easily get it when the user releases the mouse (or touch) by referencing <code>this.tween</code> inside the <code>onDragEnd</code> callback.<br />Implementation<br /><code>    public function get tween():<a href=\"http://api.greensock.com/js/com/greensock/TweenLite.html\">TweenLite</a></code></p>"}},"f9e5f083d2f0f14a":{"meta":{"keywords":["js.Draggable.vars"],"title":"vars","description":"The vars object passed into the constructor which stores configuration variables like type, bounds, onPress, onDrag, etc."},"header":{"content":"<p>The vars object passed into the constructor which stores configuration variables like type, bounds, onPress, onDrag, etc.</p>"},"returns":{"type":"Object","content":""},"details":{"content":"<p>The vars object passed into the constructor which stores configuration variables like type, bounds, onPress, onDrag, etc.</p>"}},"ec3421d82ab1ddd0":{"meta":{"keywords":["js.Draggable.x"],"title":"x","description":"[read-only] The current x (horizontal) position of the Draggable instance."},"header":{"content":"<p>[read-only] The current x (horizontal) position of the Draggable instance.</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>The current x (horizontal) position of the Draggable instance. For a Draggable of <code>type:\"x,y\"</code>, it would be the <code>x</code> transform translation, as in the css<code>transform:translateX(...)</code>. For <code>type:\"top,left\"</code>, the Draggable's <code>x</code> would refer to the css <code>\"left\"</code> value that's applied. This is <b>not</b> the global coordinate - it is the inline css-related value applied to the element. This value is updated each time the Draggable is dragged interactively and during the momentum-based tween that Draggable applies when the user releases their mouse/touch, but if you manually change (or tween) the element's position you can force Draggable to look at the \"real\" value and record it to its own \"x\" property by calling the Draggable's <code>update()</code> method. Basically that re-synchronizes it. Again, this is not necessary unless other code (outside Draggable) alters the target element's position.<br />Implementation<br /><code>    public function get x():Number</code></p>"}},"eab7ad5c38079651":{"meta":{"keywords":["js.Draggable.y"],"title":"y","description":"[read-only] The current y (vertical) position of the Draggable instance."},"header":{"content":"<p>[read-only] The current y (vertical) position of the Draggable instance.</p>"},"returns":{"type":"Number","content":""},"details":{"content":"<p>The current y (vertical) position of the Draggable instance. So for a Draggable of <code>type:\"x,y\"</code>, it would be the <code>y</code> transform translation, as in the css<code>transform:translateY(...)</code>. For <code>type:\"top,left\"</code>, the Draggable's <code>y</code> would refer to the css <code>\"top\"</code> value that's applied. This is <b>not</b> the global coordinate - it is the inline css-related value applied to the element. This value is updated each time the Draggable is dragged interactively and during the momentum-based tween that Draggable applies when the user releases their mouse/touch, but if you manually change (or tween) the element's position you can force Draggable to look at the \"real\" value and record it to its own \"y\" property by calling the Draggable's <code>update()</code> method. Basically that re-synchronizes it. Again, this is not necessary unless other code (outside Draggable) alters the target element's position.</p>"}},"7ed7b01bbcfcd77c":{"meta":{"keywords":["js.Draggable.zIndex"],"title":"zIndex","description":"[static] The starting zIndex that gets applied by default when an element is pressed/touched (for positional types, like &quot;x,y&quot;, &quot;top,left&quot;, etc."},"header":{"content":"<p>[static] The starting zIndex that gets applied by default when an element is pressed/touched (for positional types, like \"x,y\", \"top,left\", etc.</p>"},"returns":{"type":"Number = 1000","content":""},"details":{"content":"<p>The starting <code>zIndex</code> that gets applied by default when an element is pressed/touched (for positional types, like <code>\"x,y\"</code>, <code>\"top,left\"</code>, etc. but not<code>\"rotation\"</code> or <code>\"scroll\"</code>) and this number gets incremented and applied to each new element that gets pressed/touched so that the stacking order looks correct (newly pressed objects rise to the top) unless <code>zIndexBoost:false</code> is set in a particular Draggable's <code>vars</code> parameter. You can set this<code>zIndex</code> to whatever you want, but 1000 is the default.</p><pre class='pre-container prettyprint'>Draggable.zIndex = 500;</pre>"}},"e25e10e45b7afcd0":{"meta":{"keywords":["js.Draggable.addEventListener()"],"title":"addEventListener()","description":"Registers a function that should be called each time a particular type of event occurs, like &quot;drag&quot; or &quot;dragEnd&quot;. "},"header":{"content":"<p>Registers a function that should be called each time a particular type of event occurs, like \"drag\" or \"dragEnd\". </p>"},"parameters":[{"name":"event","data_type":"String","description":"<p>The type of event.</p>\n"},{"name":"listener","data_type":"Function","description":"<p>The listener function that processes the event.</p>\n"}],"returns":{"type":"void","content":""},"details":{"content":"<p>Registers a function that should be called each time a particular type of event occurs. Inside the listener function <code>this</code> refers to the target of the Draggable instance that fired the event.</p><h3>Events</h3><ul class=\"compact\"><li>press</li><li>click</li><li>dragstart</li><li>drag</li><li>dragend</li><li>release</li><li>throwcomplete</li><li>throwupdate</li></ul><h2>Usage</h2><pre class='pre-container prettyprint'><br />var myDraggable = Draggable.create(\"#box1\", {<br />  bounds:\"#container\"<br />})[0];<br /><br />myDraggable.addEventListener(\"press\", onPress);<br /><br />function onPress() {<br />  console.log(\"myDraggable was pressed\");<br />  TweenLite.to(this, 0.2, {backgroundColor:\"red\"}); // animate the backgroundColor of the target of the Draggable that was pressed<br />}<br /></pre>"}},"ac73f647a485bd9f":{"meta":{"keywords":["js.Draggable.applyBounds()"],"title":"applyBounds()","description":"Immediately updates and applies bounds, ensuring that the target element is within the bounds (if any were defined)."},"header":{"content":"<p>Immediately updates and applies bounds, ensuring that the target element is within the bounds (if any were defined).</p>"},"parameters":[{"name":"newBounds","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — You may optionally supply a new bounds object (a DOM element, selector text, a generic element defining a rectangle like {top:0, left:10, width:100, height:200} or absolute values like {minX:100, minY:100, maxX:400, maxY:500}). If you&#8217;d simply like the existing bounds applied, you don&#8217;t need to supply any newBounds parameter.</p>\n"}],"returns":{"type":"Draggable","content":"<p>the Draggable instance itself (to make chaining possible)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Immediately updates and applies bounds, ensuring that the target element is within the <code>bounds</code> (if any were defined). As a part of applying the bounds, the Draggable's <code>x</code> and <code>y</code> properties are updated as well so that they reflect the target element's current position (just like <code>update()</code>).</p>"}},"c541ba25c5706fee":{"meta":{"keywords":["js.Draggable.create()"],"title":"create()","description":"[static] Provides a more flexible way to create Draggable instances than the constructor (new Draggable(...)) because the Draggable.create() method can accommodate multiple elements (either as an array of elements or a jQuery object with many results) or even selector text like &quot;.yourClass&quot; which gets fed to whatever TweenLite.selector is (defaults to jQuery if it&#039;s loaded)."},"header":{"content":"<p>[static] Provides a more flexible way to create Draggable instances than the constructor (new Draggable(...)) because the Draggable.create() method can accommodate multiple elements (either as an array of elements or a jQuery object with many results) or even selector text like \".yourClass\" which gets fed to whatever TweenLite.selector is (defaults to jQuery if it's loaded).</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>the element that should be draggable; this can be a regular DOM element or a jQuery object or an array of elements. For example, <code>document.getElementById(\"yourID\")</code> or <code>$(\"#yourID\")</code> or <code>\"#yourID\"</code> or <code>[element1, element2, element3]</code></p>\n"},{"name":"vars","data_type":"Object","description":"<p>an object containing optional configuration data like <code>{type:\"x,y\", throwProps:true, edgeResistance:0.8, onDrag:yourFunction}</code></p>\n","related_configuration_object":"0dc94f7962bb1809"}],"returns":{"type":"Array","content":"<p>an array of <code>Draggable</code> instances (one for each element).</p>\n"},"details":{"content":"<p>Provides a more flexible way to create Draggable instances than the constructor (<code>new Draggable(...)</code>) because the <code>Draggable.create()</code> method can accommodate <b>multiple</b> elements (either as an array of elements or a jQuery object with many results) or even selector text like <code>\".yourClass\"</code>which gets fed to whatever <code>TweenLite.selector</code> is (defaults to jQuery if it's loaded). <code>Draggable.create()</code> always returns an array of <code>Draggable</code>instances, one for each element. Remember an individual <code>Draggable</code> instance can only be associated with a single element - that's why<code>Draggable.create()</code> creates one for each element and spits back an array.</p><p>Any of the following are valid:</p><p><pre class='pre-container prettyprint'>//a regular DOM element Draggable.create(document.getElementById(\"yourID\"), {type:\"x,y\"}); //or a jQuery object Draggable.create( $(\".yourClass\"), {type:\"x,y\"}); //or selector text Draggable.create(\"#yourID\", {type:\"x,y\"}); //or an array of elements Draggable.create([element1, element2, element3], {type:\"x,y\"});</pre></p><p>The second parameter is the <code>vars</code> object that contains any optional configuration data. Any of the following properties can be defined:</p><p>[config id=\"0dc94f7962bb1809\"]</p>"}},"8f3a18936cc397fe":{"meta":{"keywords":["js.Draggable.disable()"],"title":"disable()","description":"Disables the Draggable instance so that it cannot be dragged anymore (unless enable() is called)."},"header":{"content":"<p>Disables the Draggable instance so that it cannot be dragged anymore (unless enable() is called).</p>"},"parameters":[],"returns":{"type":"Draggable","content":"<p>the Draggable instance itself (to make chaining possible)</p>\n"},"details":{"content":"<p>Disables the <code>Draggable</code> instance so that it cannot be dragged anymore (unless <code>enable()</code> is called).</p>"}},"5857a6c52c8e3115":{"meta":{"keywords":["js.Draggable.enable()"],"title":"enable()","description":"Enables the Draggable instance."},"header":{"content":"<p>Enables the Draggable instance.</p>"},"parameters":[],"returns":{"type":"Draggable","content":"<p>the Draggable instance itself (to make chaining possible)</p>\n"},"details":{"content":"<p>Enables the <code>Draggable</code> instance.</p>"}},"688b6ac671dbe69d":{"meta":{"keywords":["js.Draggable.enabled()"],"title":"enabled()","description":"Gets or sets the enabled state. "},"header":{"content":"<p>Gets or sets the enabled state. </p>"},"parameters":[{"name":"value","data_type":"Boolean","description":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"Boolean","content":""},"details":{"content":"<p>Gets or sets the enabled state. Omitting the <code>value</code> parameter returns the current enabled value (getter), whereas defining the parameter sets the enabled value (setter). When a Draggable instance is enabled it responds to mouse events, fires callbacks and can be dragged.</p>"}},"b0b2e6f3a9e49b0a":{"meta":{"keywords":["js.Draggable.endDrag()"],"title":"endDrag()","description":"You may force the Draggable to immediately stop interactively dragging by calling endDrag() and passing it the original mouse or touch event that initiated the stop - this is necessary because Draggable must inspect that event for various information like pageX, pageY, target, etc."},"header":{"content":"<p>You may force the Draggable to immediately stop interactively dragging by calling endDrag() and passing it the original mouse or touch event that initiated the stop - this is necessary because Draggable must inspect that event for various information like pageX, pageY, target, etc.</p>"},"parameters":[{"name":"event","data_type":"Object","description":"<p>a mouse or touch event</p>\n"}],"returns":{"type":"void","content":""},"details":{"content":"<p>You may force the Draggable to immediately stop interactively dragging by calling <code>endDrag()</code> and passing it the original mouse or touch event that initiated the stop - this is necessary because Draggable must inspect that event for various information like pageX, pageY, target, etc. You cannot call<code>endDrag()</code> without passing that original event.</p><p><code>endDrag()</code> is different than <code>disable()</code> in that <code>disable()</code> completely shuts down the Draggable instance so that the user cannot initiate dragging anymore whereas <code>endDrag()</code> simply stops a drag-in-progress, acting like the user released their mouse/touch.</p>"}},"ca2e5cc16169165a":{"meta":{"keywords":["js.Draggable.get()"],"title":"get()","description":"[static] Provides an easy way to get the Draggable instance that&#039;s associated with a particular DOM element."},"header":{"content":"<p>[static] Provides an easy way to get the Draggable instance that's associated with a particular DOM element.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>the target DOM element whose Draggable instance you want to retrieve; this can be either the element itself, or a selector string like <code>\"#myElement\"</code> or a jQuery object.</p>\n"}],"returns":{"type":"Draggable","content":"<p>the Draggable instance that&#8217;s associated with the target element (or <code>undefined</code> if none exists)</p>\n"},"details":{"content":"<p>Provides an easy way to get the Draggable instance that's associated with a particular DOM element. For example, maybe you made all of the elements with the class \".draggable\" draggable by calling <code>Draggable.create(\".draggable\")</code> and then you want to find the individual Draggable instance that's associated with the element with an ID of \"#element1\"; that'd be as simple as:</p><p><pre class='pre-container prettyprint'>var draggable = Draggable.get(\"#element1\"); //or use the element itself instead of a selector string: var myElement = document.getElementById(\"element1\"); var draggable = Draggable.get(myElement);</pre></p>"}},"dfba312d84ede771":{"meta":{"keywords":["js.Draggable.getDirection()"],"title":"getDirection()","description":"Returns the direction (right | left | up | down | left-up | left-down | right-up | right-down) as measured from either where the drag started (the default) or the moment-by-moment velocity, or its proximity to another element that you define. "},"header":{"content":"<p>Returns the direction (right | left | up | down | left-up | left-down | right-up | right-down) as measured from either where the drag started (the default) or the moment-by-moment velocity, or its proximity to another element that you define. </p>"},"parameters":[{"name":"from","data_type":"String | Element","description":"<p>Any of the the following can be used:</p>\n<ul>\n<li><code>\"start\"</code> (the default) &#8211; measures from wherever the drag began.</li>\n<li><code>\"velocity\"</code> (<strong>requires <a href=\"/throwpropsplugin/\">ThrowPropsPlugin</a>!</strong>) &#8211; measures the moment-by-moment direction of the drag. For example, maybe the user dragged really far to the right, but then they start dragging to the left for a brief moment &#8211; it&#8217;s still to the right of the starting position, but it&#8217;s current velocity is moving to the left. That&#8217;s what &#8220;velocity&#8221; measures.</li>\n<li><code>[element]</code> &#8211; if you pass an element, it&#8217;ll return the direction from that element&#8217;s center to the Draggable&#8217;s center.</li>\n</ul>\n"}],"returns":{"type":"String","content":""},"details":{"content":"<p>Sometimes it's useful to know which direction an element is dragged (left | right | up | down | left-up | left-down | right-up | right-down), or maybe you'd like to know which direction it is compared to another element. That's precisely what <code>getDirection()</code> is for. You can pass any of the following as the parameter to control its behavior:</p><ul><li><code>\"start\"</code> (the default) - measures from wherever the drag began.</li><li><code>\"velocity\"</code> (<strong>requires <a href=\"/throwpropsplugin/\">ThrowPropsPlugin</a>!</strong>) - measures the moment-by-moment direction of the drag. For example, maybe the user dragged really far to the right, but then they start dragging to the left for a brief moment - it's still to the right of the starting position, but it's current velocity is moving to the left. That's what \"velocity\" measures.</li><li><code>[element]</code> - if you pass an element, it'll return the direction from that element's center to the Draggable's center.</li></ul><h2>Video</h2><p><iframe src=\"http://www.youtube.com/embed/fZLMuuzJC9k?rel=0&feature=player_detailpage\" width=\"838\" height=\"471\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></p><h2>Demo</h2><p data-height=\"820\" data-theme-id=\"3984\" data-slug-hash=\"myjemR\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/myjemR/'>Draggable with direction sensing</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p>"}},"ffe7905a70b61f73":{"meta":{"keywords":["js.Draggable.hitTest()"],"title":"hitTest()","description":"Provides an easy way to test whether or not the target element overlaps with a particular element (or the mouse position) according to whatever threshold you [optionally] define."},"header":{"content":"<p>Provides an easy way to test whether or not the target element overlaps with a particular element (or the mouse position) according to whatever threshold you [optionally] define.</p>"},"parameters":[{"name":"testObject","data_type":"Object","description":"<p>the object that should be hit tested, which can be any of the following: an element, a mouse/touch event that has <code>pageX </code>and <code>pageY</code> properties, selector text like <code>\"#element2\"</code>, or a generic object defining a rectangle (it should have <code>top, left, right,</code> and <code>bottom </code>properties).</p>\n"},{"name":"threshold","data_type":"*","description":"<p>(default = <code>0</code>)<code></code> — Either a number defining the minimum number of pixels that must be overlapping for a positive hitTest or a string percentage (like <code>\"50%\"</code>) defining the minimum amount of overlapping surface area percentage for a positive hitTest. Zero (0) will check for any overlap at all.</p>\n"}],"returns":{"type":"Boolean","content":"<p><code>true</code> if an overlap is sensed (according to the threshold)</p>\n"},"details":{"content":"<p>Provides an easy way to test whether or not the <code>target</code> element overlaps with a particular element (or the mouse position) according to whatever<code>threshold</code> you [optionally] define. For example:</p><pre class='pre-container prettyprint'>Draggable.create(\"#element1\", {<br />    type:\"x,y\",<br />    onDragEnd:function(e) {<br />        //see if the target overlaps with the element with ID \"element2\"<br />        if (this.hitTest(\"#element2\")) {<br />            //do stuff<br />        }<br />    }<br />});</pre><p>By default, <code>hitTest()</code> returns true if there is any overlap whatsoever, but you can optionally define a <code>threshold</code> parameter to, for example, only return true if at least 20 pixels are overlapping or if 50% of the surface area of either element is overlapping with the other or whatever amount you define:</p><pre class='pre-container prettyprint'>Draggable.create(\"#element1\", {<br />    type:\"x,y\",<br />    onDragEnd:function(e) {<br />        //checks if at least 20 pixels are overlapping:<br />        if (this.hitTest(\"#element2\", 20)) {<br />            //do stuff<br />        }<br />        //checks if at least 50% of the surface area of either element is overlapping:<br />        if (this.hitTest(\"#element3\", \"50%\")) {<br />            //do stuff<br />        }<br />    }<br />});</pre><p>You can use <code>hitTest(window)</code> to detect if an element is visible within the viewport (as of version 0.14.0).</p><p>There is also a static version of this method that allows you to pass both elements/objects to test, like <code>Draggable.hitTest(element1, element2, 20);</code></p><p><strong>IMPORTANT:</strong> There is no way to get pixel-perfect hit testing for non-rectangular shapes in the DOM. <code>hitTest()</code> uses the browser's <code>getBoundingClientRect()</code> method to get the <i>rectangular bounding box</i> that surrounds the entire element, thus if you rotate an element or if it's more of a circular shape, the bounding box may extend further than the visual edges. IE8 (and earlier) is <strong>not supported</strong> because hitTest() requires element.getBoundingClientRect() which is in all modern browsers. </p>"}},"ffc1eae92622a822":{"meta":{"keywords":["js.Draggable.hitTest()"],"title":"hitTest()","description":"Provides an easy way to test whether or not the target element overlaps with a particular element (or the mouse position) according to whatever threshold you [optionally] define."},"header":{"content":"<p>Provides an easy way to test whether or not the target element overlaps with a particular element (or the mouse position) according to whatever threshold you [optionally] define.</p>"},"parameters":[{"name":"testObject","data_type":"Object","description":"<p>the object that should be hit tested, which can be any of the following: an element, a mouse/touch event that has <code>pageX </code>and <code>pageY</code> properties, selector text like <code>\"#element2\"</code>, or a generic object defining a rectangle (it should have <code>top, left, right,</code> and <code>bottom </code>properties).</p>\n"},{"name":"threshold","data_type":"*","description":"<p>(default = <code>0</code>)<code></code> — Either a number defining the minimum number of pixels that must be overlapping for a positive hitTest or a string percentage (like <code>\"50%\"</code>) defining the minimum amount of overlapping surface area percentage for a positive hitTest. Zero (0) will check for any overlap at all.</p>\n"}],"returns":{"type":"Boolean","content":"<p><code>true</code> if an overlap is sensed (according to the threshold)</p>\n"},"details":{"content":"<p>Provides an easy way to test whether or not the <code>target</code> element overlaps with a particular element (or the mouse position) according to whatever<code>threshold</code> you [optionally] define. For example:</p><pre class='pre-container prettyprint'>Draggable.create(\"#element1\", {<br />    type:\"x,y\",<br />    onDragEnd:function(e) {<br />        //see if the target overlaps with the element with ID \"element2\"<br />        if (this.hitTest(\"#element2\")) {<br />            //do stuff<br />        }<br />    }<br />});</pre><p>By default, <code>hitTest()</code> returns true if there is any overlap whatsoever, but you can optionally define a <code>threshold</code> parameter to, for example, only return true if at least 20 pixels are overlapping or if 50% of the surface area of either element is overlapping with the other or whatever amount you define:</p><pre class='pre-container prettyprint'>Draggable.create(\"#element1\", {<br />    type:\"x,y\",<br />    onDragEnd:function(e) {<br />        //checks if at least 20 pixels are overlapping:<br />        if (this.hitTest(\"#element2\", 20)) {<br />            //do stuff<br />        }<br />        //checks if at least 50% of the surface area of either element is overlapping:<br />        if (this.hitTest(\"#element3\", \"50%\")) {<br />            //do stuff<br />        }<br />    }<br />});</pre><p>You can use <code>hitTest(window)</code> to detect if an element is visible within the viewport (as of version 0.14.0).</p><p>There is also a static version of this method that allows you to pass both elements/objects to test, like <code>Draggable.hitTest(element1, element2, 20);</code></p><p><strong>IMPORTANT:</strong> There is no way to get pixel-perfect hit testing for non-rectangular shapes in the DOM. <code>hitTest()</code> uses the browser's <code>getBoundingClientRect()</code> method to get the <i>rectangular bounding box</i> that surrounds the entire element, thus if you rotate an element or if it's more of a circular shape, the bounding box may extend further than the visual edges. IE8 (and earlier) is <strong>not supported</strong> because hitTest() requires element.getBoundingClientRect() which is in all modern browsers. </p>"}},"f8dba22fcae52796":{"meta":{"keywords":["js.Draggable.kill()"],"title":"kill()","description":"Disables the Draggable instance and removes it from the internal lookup table so that it is made eligible for garbage collection and it cannot be dragged anymore (unless enable() is called)."},"header":{"content":"<p>Disables the Draggable instance and removes it from the internal lookup table so that it is made eligible for garbage collection and it cannot be dragged anymore (unless enable() is called).</p>"},"parameters":[],"returns":{"type":"Draggable","content":"<p>the Draggable instance itself (to make chaining possible)</p>\n"},"details":{"content":"<p>Disables the <code>Draggable</code> instance and removes it from the internal lookup table so that it is made eligible for garbage collection and it cannot be dragged anymore (unless <code>enable()</code> is called). <code>kill()</code> is identical to <code>disable()</code> except that the latter doesn't remove it from the internal lookup table, thus you could still use Draggable.get(\"#yourID\") to find the associated Draggable instance after being disabled, but if you kill it, the get() method won't be able to find the Draggable anymore (necessary for garbage collection). If you don't plan to use the Draggable instance anymore, <code>kill()</code> it.</p>"}},"5184540aa5ce91bc":{"meta":{"keywords":["js.Draggable.startDrag()"],"title":"startDrag()","description":"This is rarely used, but you may force the Draggable to begin dragging by calling startDrag() and passing it the original mouse or touch event that initiated things - this is necessary because Draggable must inspect that event for various information like pageX, pageY, target, etc."},"header":{"content":"<p>This is rarely used, but you may force the Draggable to begin dragging by calling startDrag() and passing it the original mouse or touch event that initiated things - this is necessary because Draggable must inspect that event for various information like pageX, pageY, target, etc.</p>"},"parameters":[{"name":"event","data_type":"Object","description":"<p>mouse or touch event</p>\n"}],"returns":{"type":"void","content":""},"details":{"content":"<p>This is rarely used, but you may force the Draggable to begin dragging by calling <code>startDrag()</code> and passing it the original mouse or touch event that initiated things - this is necessary because Draggable must inspect that event for various information like pageX, pageY, target, etc. You cannot call<code>startDrag()</code> without passing that original event.</p><p><code>startDrag()</code> is different than <code>enable()</code> in that <code>enable()</code> activates the Draggable instance so that it responds to user interaction whereas<code>startDrag()</code> actually begins dragging the element, as if the user clicked on it and started dragging.</p>"}},"6254d7797a9f3826":{"meta":{"keywords":["js.Draggable.timeSinceDrag()"],"title":"timeSinceDrag()","description":"Returns the time (in seconds) that has elapsed since the last drag ended - this can be useful in situations where you want to skip certain actions if a drag just occurred."},"header":{"content":"<p>Returns the time (in seconds) that has elapsed since the last drag ended - this can be useful in situations where you want to skip certain actions if a drag just occurred.</p>"},"parameters":[],"returns":{"type":"Number","content":"<p>the time (in seconds) since the last drag ended</p>\n"},"details":{"content":"<p>Returns the time (in seconds) that has elapsed since the last drag ended - this can be useful in situations where you want to skip certain actions if a drag just occurred. For example, imagine a draggable DIV with a bunch of child elements that have <code>onclick</code> handlers - if the user clicks on of those and drags the whole DIV and then releases, you might want to ignore that \"click\" because the user was intending to drag, not click (don't forget to set<code>dragClickables:true</code> in the Draggable):</p><pre class='pre-container prettyprint'>$(\"#myDiv a\").click(function(e) {<br />    if (Draggable.timeSinceDrag() > 0.2) {<br />        //do stuff, but not if the user just dragged within the last 0.2 seconds<br />    }<br />});</pre><p>There is also <code>timeSinceDrag()</code> instance method.</p><pre class='pre-container prettyprint'>myDraggable.timeSinceDrag();</pre>"}},"2c9525d38d4cdb74":{"meta":{"keywords":["js.Draggable.update()"],"title":"update()","description":"Updates the Draggable&#039;s x and y properties so that they reflect the target element&#039;s current position."},"header":{"content":"<p>Updates the Draggable's x and y properties so that they reflect the target element's current position.</p>"},"parameters":[{"name":"applyBounds","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — if <code>true</code>, the Draggable&#8217;s <code>applyBounds()</code> method will be called as well so that bounds are enforced (this takes more processing, though).</p>\n"}],"returns":{"type":"Draggable","content":"<p>the Draggable instance itself (to make chaining possible)</p>\n"},"details":{"content":"<p>Updates the Draggable's <code>x</code> and <code>y</code> properties so that they reflect the target element's current position. This can be useful if, for example, you manually change or tween the element's position, but then you want to make sure the Draggable's <code>x</code> and <code>y</code> reflect those changes. You could even point a tween's<code>onUpdate</code> to the Draggable's <code>update</code> method to ensure things are synchronized throughout a tween.</p>"}},"28124149c0519430":{"meta":{"keywords":["js.MorphSVGPlugin","Plugins"],"title":"MorphSVGPlugin","description":"MorphSVGPlugin provides advanced control over tweens that morph SVG paths. "},"header":{"content":"<p>MorphSVGPlugin provides advanced control over tweens that morph SVG paths. The video below details what you need to know to get up and running fast with MorphSVGPlugin.</p><p><span class=\"fr-video fr-draggable\" contenteditable=\"false\"><iframe src=\"http://www.youtube.com/embed/Uxa9sdaeyKM?rel=0&feature=player_detailpage\" width=\"838\" height=\"471\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></span></p><p>It has never been easier to morph between SVG shapes. First, let&#39;s cover what this new plugin can do:</p><ul><li>Morph &lt;path&gt; data&nbsp;<strong>even if the number (and type) of points is completely different</strong> between the start and end shapes! Most other SVG shape morphing tools require that the number of points matches.</li><li>Morph a &lt;polyline&gt; or &lt;polygon&gt; to a different set of points</li><li>There&#39;s a utility function, MorphSVGPlugin.convertToPath() that can convert primitive shapes like &lt;circle&gt;, &lt;rect&gt;, &lt;ellipse&gt;, &lt;polygon&gt;, &lt;polyline&gt;, and &lt;line&gt; directly into the equivalent &lt;path&gt; that looks identical to the original and is swapped right into the DOM.</li><li>Optionally define a &quot;shapeIndex&quot; that controls how the points get mapped. This affects what the inbetween state looks like during animation.</li><li>Instead of passing in raw path data as text, you can simply feed in selector text or an element and the plugin will grab the data it needs from there, making workflow easier.</li><li>Use <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:MorphSVGPlugin.pathDataToBezier()\"><span data-link-id=\"ce25d7004a81e18d\"></span></span> to seamlessly feed SVG path data into BezierPlugin tweens for motion along a path.</li></ul><h2>How does it work?</h2><p>MorphSVGPlugin does a ton of heavy lifting so that you don&#39;t have to. You can morph a circle into a hippo with a single line of code:</p><pre class=\"pre-container prettyprint\">TweenLite.to(&quot;#circle&quot;, 1, {morphSVG:&quot;#hippo&quot;});</pre><div class=\"cp_embed_wrapper\"><iframe id=\"cp_embed_17c602b0adb07d2b2ad45b31c6c933af\" src=\"http://codepen.io/GreenSock/embed/17c602b0adb07d2b2ad45b31c6c933af?default-tab=result&height=450&slug-hash=17c602b0adb07d2b2ad45b31c6c933af&theme-id=9447&user=GreenSock\" scrolling=\"no\" frameborder=\"0\" height=\"450\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed 4\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"></iframe></div><p><script src=\"http://assets.codepen.io/assets/embed/ei.js\" async=\"\"></script></p><p>MorphSVGPlugin finds the path with the id of &quot;circle&quot; and the path with the id of &quot;hippo&quot; and automatically figures out how to add enough points to the circle and position them properly so that you get a super smooth transition to the hippo shape. It will rip through all that ugly path data, convert everything to cubic beziers, and dynamically subdivide them when necessary, adding points so that the beginning and ending quantities match (but visually it looks the same). It&rsquo;s all seamless under the hood, of course.</p><p>Note: MorphSVGPlugin requires GSAP 1.18.0 (TweenLite or TweenMax)</p><h2>API</h2><p>MorphSVGPlugin needs to know what shape to morph too and optionally which shapeIndex to use.</p><p>When only specifying a shape, MorphSVGPlugin can take a wide range of values.</p><p>Selector string<br></p><pre class=\"pre-container prettyprint\">TweenLite.to(&quot;#circle&quot;, 1, {morphSVG:&quot;#hippo&quot;});</pre><p>An SVG element<br></p><pre class=\"pre-container prettyprint\">var endShape = document.getElementById(&quot;hippo&quot;);\nTweenLite.to(&quot;#circle&quot;, 1, {morphSVG:endShape);</pre><p>Points for &lt;polyline&gt; or &lt;polygon&gt; elements:<br></p><pre class=\"pre-container prettyprint\">TweenLite.to(&ldquo;#polygon&rdquo;, 2, {morphSVG:&quot;240,220 240,70 70,70 70,220&quot;});</pre><p>Strings for &lt;path&gt; elements<br></p><pre class=\"pre-container prettyprint\">TweenLite.to(&ldquo;#path&rdquo;, 2, {morphSVG:&quot;M10 315 L 110 215 A 30 50 0 0 1 162.55 162.45 L 172.55 152.45 A 30 50 -45 0 1 215.1 109.9 L 315 10&quot;});</pre><p><strong>*Note: </strong>if the shape&nbsp;you pass in is a &lt;rect&gt;, &lt;circle&gt;, &lt;ellipse&gt; (or similar), MorphSVGPlugin will internally create path data from those shapes.</p><h2>shapeIndex</h2><p>The <code>shapeIndex</code> property allows you to adjust how the points in the start shape are mapped. In order to prevent points from drifting wildly during the animation MorphSVGPlugin needs to find a point in the start path that is in close proximity to the first point in the end path. Once that point is found it will map the next point in the start path to the second point in the end path (and so on and so on). Due to the complexity of vector art there will be times that you may want to change which point in the start path gets mapped to the first point in the end path. This is where <code>shapeIndex</code> comes in.</p><p>In order to specify the <code>shapeIndex</code> you need to use an object {} with <code>shape</code> and <code>shapeIndex</code> properties.</p><p>The following code will map the third point in the square to the first point in the star.<br></p><pre class=\"pre-container prettyprint\">TweenLite.to(&quot;#square&quot;, 1, {morphSVG:{shape:&quot;#star&quot;, shapeIndex:3}});</pre><h2>findShapeIndex() utility</h2><p>Experimenting with <code>shapeIndex</code> can be a bit of a guessing game. To make things easier we have created a stand-alone utility function called <code>findShapeIndex()</code>. This function provides an interactive user interface to help you visualize where the start point is, change it and preview the animation.</p><p>You can load findShapeIndex() from: <a href=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/16327/findShapeIndex.js\">https://s3-us-west-2.amazonaws.com/s.cdpn.io/16327/findShapeIndex.js</a></p><p>Once its loaded you simply tell it which shapes to use.<br></p><pre class=\"pre-container prettyprint\">findShapeIndex(&quot;#square&quot;, &quot;#star&quot;);</pre><p>Or pass in raw data:<br></p><pre class=\"pre-container prettyprint\">findShapeIndex(&quot;#square&quot;, &quot;M10 315 L 110 215 A 30 50 0 0 1 162.55 162.45 L 172.55 152.45 A 30 50 -45 0 1 215.1 109.9 L 315 10&quot;);</pre><div class=\"cp_embed_wrapper\"><iframe id=\"cp_embed_763b6533f17a795c3cd957c668c33882\" src=\"http://codepen.io/GreenSock/embed/763b6533f17a795c3cd957c668c33882?default-tab=result&height=556&slug-hash=763b6533f17a795c3cd957c668c33882&theme-id=3984&user=GreenSock\" scrolling=\"no\" frameborder=\"0\" height=\"556\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed 3\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"></iframe></div><p>The best way to get started is to drop your SVG into the pen above and alter the IDs to match your svg. Be sure to watch the video above which clearly illustrates how <code>shapeIndex</code> and <code>findShapeIndex()</code> work.</p><p><strong>Additional Notes</strong></p><ul><li>shapeIndex only works on closed paths.</li><li>if you supply a negative shapeIndex the start path will be completely reversed (which can be quite useful).</li></ul><h2>Performance tip #1: define a shapeIndex in advance</h2><p>MorphSVGPlugin&#39;s default <code>shapeIndex:&quot;auto&quot;</code> does a bunch of calculations to reorganize the points so that they match up in a natural way but if you define a numeric shapeIndex (like <code>shapeIndex:5</code>) it skips those calculations. Each segment inside a path needs a <code>shapeIndex</code>, so multiple values are passed in an array like <code>shapeIndex:[5,1,-8,2]</code>. But how would you know what numbers to pass in? The findShapeIndex() tool helps for single-segment paths, what about multi-segment paths? It&#39;s a pretty complex thing to provide a GUI for.</p><p>Typically the default <code>&quot;auto&quot;</code> mode works great but the goal here is to avoid the calculations, so there is a new <code>&quot;log&quot;</code> value that will act just like <code>&quot;auto&quot;</code> but it will <strong>also <code>console.log()</code> the shapeIndex value(s)</strong>. That way, you can run the tween in the browser once and look in your console and see the numbers that <code>&quot;auto&quot;</code> mode would produce. Then it&#39;s simply a matter of copying and pasting that value into your tween where <code>&quot;log&quot;</code> was previously. For example:</p><pre class=\"pre-container prettyprint\">TweenMax.to(&quot;#id&quot;, 1, {morphSVG:{shape:&quot;#otherID&quot;, shapeIndex:&quot;log&quot;}}); //logs a value like &quot;shapeIndex:[3]&quot;\n//now you can grab the value from the console and drop it in...\nTweenMax.to(&quot;#id&quot;, 1, {morphSVG:{shape:&quot;#otherID&quot;, shapeIndex:[3]}});\n</pre><h2>Converting SVG shapes to paths</h2><p><span class=\"fr-video fr-draggable\" contenteditable=\"false\"><iframe src=\"http://www.youtube.com/embed/jcq9kEyJNMM?rel=0&feature=player_detailpage\" width=\"838\" height=\"471\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></span><br>Technically it&rsquo;s only feasible to morph &lt;path&gt; elements or &lt;polyline&gt;/&lt;polygon&gt; elements, but what if you want to morph a &lt;circle&gt; or &lt;rect&gt; or &lt;ellipse&gt; or &lt;line&gt;? No problem - just tap into the utility method and have the plugin do the conversion for you:<br></p><pre class=\"pre-container prettyprint\">MorphSVGPlugin.convertToPath(&quot;#elementID&quot;);</pre><p><br>You can pass in an element or selector text, so you could also have it convert ALL of those elements with one line:<br></p><pre class=\"pre-container prettyprint\">MorphSVGPlugin.convertToPath(&quot;circle, rect, ellipse, line, polygon, polyline&quot;);</pre><p><br>This literally swaps in a for each one directly in the DOM, and it should look absolutely identical. It&rsquo;ll keep the attributes, like the &ldquo;id&rdquo; attribute. So after the conversion, you should be able to target the elements pretty easily, just as you would before.<br></p><pre class=\"pre-container prettyprint\">//An svg  Like this:\n\n//becomes\n</pre><h2>Morph into multiple shapes</h2><p>Since MorphSVGPlugin is so tightly integrated into GSAP, sequencing multiple morphs is a breeze. Watch how easy it is to make that circle morph into a hippo, star, elephant and back to a circle.</p><pre class=\"pre-container prettyprint\">tl.to(circle, 1, {morphSVG:&quot;#hippo&quot;}, &quot;+=1&quot;)\n  .to(circle, 1, {morphSVG:&quot;#star&quot;}, &quot;+=1&quot;)\n  .to(circle, 1, {morphSVG:&quot;#elephant&quot;}, &quot;+=1&quot;)\n  .to(circle, 1, {morphSVG:circle}, &quot;+=1&quot;);</pre><div class=\"cp_embed_wrapper\"><iframe id=\"cp_embed_rOjeRq\" src=\"http://codepen.io/GreenSock/embed/rOjeRq?default-tab=result&height=320&slug-hash=rOjeRq&theme-id=3984&user=GreenSock\" scrolling=\"no\" frameborder=\"0\" height=\"320\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed 2\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"></iframe></div><p><script async=\"\" src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><p>Note: MorphSVG 0.5.0+ stores the original path data on any target of a morph tween so that you can easily tween back to the original shape.</p><pre class=\"pre-container prettyprint\">data-original=&quot;M490.1,280.649c0,44.459-36.041,80....&quot;&gt;</pre><h2>Performance tip #2: precompile</h2><p>The biggest performance improvement comes from <strong>precompiling</strong> which involves having MorphSVGPlugin run <strong>all</strong> of its initial calculations listed above and then spit out an array with the transformed strings, logging them to the console where you can copy and paste them back into your tween. That way, when the tween begins it can just grab all the values directly instead of doing expensive calculations. For example:</p><pre class=\"pre-container prettyprint\">TweenMax.to(&quot;#id&quot;, 1, {morphSVG:{shape:&quot;#otherID&quot;, precompile:&quot;log&quot;}}); //logs a value like precompile:[&quot;M0,0 C100,200 120,500 300,145 34,245 560,46&quot;,&quot;M0,0 C200,300 100,400 230,400 100,456 400,300&quot;]\n//now you can grab the value from the console and drop it in...\nTweenMax.to(&quot;#id&quot;, 1, {morphSVG:{shape:&quot;#otherID&quot;, precompile:[&quot;M0,0 C100,200 120,500 300,145 34,245 560,46&quot;,&quot;M0,0 C200,300 100,400 230,400 100,456 400,300&quot;]}});\n</pre><p>As an example, here&#39;s a really cool codepen by Dave Rupert before it was precompiled: <a href=\"http://codepen.io/davatron5000/pen/meNOqK/\" target=\"_blank\">http://codepen.io/davatron5000/pen/meNOqK/</a>. Notice the <strong>very first</strong> time you click the toggle button, it may seem to jerk a bit because the entire brain is one path with many segments, and it must get matched up with all the letters and figure out the shapeIndex for each (expensive). By contrast, here&#39;s a fork of that pen that has precompile enabled: <a href=\"http://codepen.io/GreenSock/pen/MKevzM\" target=\"_blank\">http://codepen.io/GreenSock/pen/MKevzM</a>. You may noticed that it starts more smoothly.</p><p><strong>Notes</strong></p><ul class=\"compact\"><li><code>precompile</code> was added in MorphSVGPlugin version 0.8.1.</li><li><code>precompile</code> is only available on <code>&lt;path&gt;</code> elements (not polyline/polygon). You can easily convert things using <code>MorphSVGPlugin.convertToPath(&quot;polygon, polyline&quot;);</code></li><li>Precompiling only improves the performance of the <strong>first (most expensive)</strong> render. If your entire morph is janky throughout the tween, it most likely has nothing to do with GSAP; your SVG may be too complex for the browser to render fast enough. In other words, the bottleneck is probably the browser&#39;s graphics rendering routines. Unfortunately, there&#39;s nothing GSAP can do about that and you&#39;ll need to simplify your SVG artwork and/or reduce the size at which it is displayed.</li><li>The precompiled values are inclusive of shapeIndex adjustments. In other words, shapeIndex gets baked in.</li><li>In most cases, you probably don&#39;t need to precompile; it&#39;s intended to be an advanced technique for squeezing every ounce of performance out of a very complex morph.</li><li>If you alter the original start or end shape/artwork, make sure you precomple again so that the values reflect your changes.</li></ul><h2>Controlling segment matching</h2><p>In version 0.8.1, there were several improvements made to the algorithm that matches up corresponding segments in the start and end shapes so that things just look more natural. So even without changing any of your code, loading the latest version may instantly make things match up better.</p><h3>map: &quot;size&quot; | &quot;position&quot; | &quot;complexity&quot;</h3><p>If the sub-segments inside your path aren&#39;t matching up the way you hoped between the start and end shapes, you can use the <code>map</code> special property to tell MorphSVGPlugin which algorithm to prioritize:</p><ul class=\"compact\"><li><code>&quot;size&quot;</code> (the default) - attempts to match segments based on their overall size. If multiple segments are close in size, it&#39;ll use positional data to match them. This mode typically gives the most intuitive morphs.</li><li><code>&quot;position&quot;</code> - matches mostly based on position.</li><li><code>&quot;complexity&quot;</code> - matches purely based on the quantity of anchor points. This is the fastest algorithm and it can be used to &quot;trick&quot; things to match up by manually adding anchors in your SVG authoring tool so that the pieces that you want matched up contain the same number of anchors (though that&#39;s completely optional).</li></ul><pre class=\"pre-container prettyprint\">TweenMax.to(&quot;#id&quot;, 1, {morphSVG:{shape:&quot;#otherID&quot;, map:&quot;complexity&quot;}});\n</pre><p><strong>Notes</strong></p><ul class=\"compact\"><li><code>map</code> is completely optional. Typically the default mode works great.</li><li>If none of the <code>map</code> modes get the segments to match up the way you want, it&#39;s probabaly best to just split your path into multiple paths and morph each one. That way, you get total control.</li></ul><h2>Animate along an SVG path</h2><p>The new <code>MorphSVGPlugin.pathDataToBezier()</code> method converts SVG &lt;path&gt; data into an array of cubic Bezier points that can be fed directly into a <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:BezierPlugin\"><span data-link-id=\"43077a47946db3db\"></span></span>-based tween so that you can essentially use it as a motion guide.</p><h3>Watch the video</h3><p><span class=\"fr-video fr-draggable\" contenteditable=\"false\"><iframe src=\"http://www.youtube.com/embed/nAc9k8sXrUo?rel=0&feature=player_detailpage\" width=\"838\" height=\"471\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></span></p><h3>Demo</h3><div class=\"cp_embed_wrapper\"><iframe id=\"cp_embed_550e4b59c59355eef809658fbce77ee9\" src=\"http://codepen.io/GreenSock/embed/550e4b59c59355eef809658fbce77ee9?default-tab=result&height=550&slug-hash=550e4b59c59355eef809658fbce77ee9&theme-id=9446&user=GreenSock\" scrolling=\"no\" frameborder=\"0\" height=\"550\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed 1\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"></iframe></div><p><script async=\"\" src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><h2>Performance Tips Video</h2><p>The video below shows exactly how to implement the performance tips above regarding <code>shapeIndex:log</code> and <code>precompile:log</code>.</p><p><span class=\"fr-video fr-draggable\" contenteditable=\"false\"><iframe src=\"http://www.youtube.com/embed/n_5tx2onBzE?rel=0&feature=player_detailpage\" width=\"838\" height=\"471\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></span></p><h2>MorphSVGPlugin Examples</h2><ul class=\"compact\"><li><a href=\"http://codepen.io/chrisgannon/pen/8fd1a390fe5c0feeab508427927112d8?editors=001\" target=\"_blank\">SVG Pencil Download</a> by Chris Gannon</li><li><a href=\"http://codepen.io/chrisgannon/pen/85764552746264251a3ec01347b7ad9d?editors=001\" target=\"_blank\">&quot;!?&quot; to GreenSock Logo</a> by Chris Gannon</li><li><a href=\"http://codepen.io/chrisgannon/pen/53771832864228681ccf06c98d8a5ac7/?editors=001\" target=\"_blank\">Send Email Success/Failure</a> by Chris Gannon</li><li><a href=\"http://codepen.io/MAW/pen/8031816520f252c148b1c22d6213ca4d?editors=001\" target=\"_blank\">Father &amp; Son</a> by Diaco</li><li><a href=\"http://codepen.io/chrisgannon/pen/6337d31ca13f51c0bb2bcd5aa3f2c0bf?editors=001\" target=\"_blank\">Count Down &amp; Count Up</a> by Chris Gannon</li><li><a href=\"http://codepen.io/chrisgannon/pen/d1019f573b49e008301db4dc89b48a24?editors=001\" target=\"_blank\">Life is Short</a> by Chris Gannon</li><li><a href=\"http://codepen.io/chrisgannon/pen/a14d7ebbcb90b89c26f1e47689559d79?editors=001\" target=\"_blank\">Bow &amp; Arrow</a> by Chris Gannon</li><li><a href=\"http://codepen.io/GreenSock/pen/7d5643ac2958ead4d70f87304ef70329?editors=001\" target=\"_blank\">Simple Polyline Morphing</a> by Jack</li><li><a href=\"http://codepen.io/chrisgannon/pen/da80768036ff2c9804b6883bf33f752c?editors=001\" target=\"_blank\">Happy/Sad Face</a> (click the face) by Chris Gannon</li><li><a href=\"http://codepen.io/chrisgannon/pen/5f3f653d6e759adfffd85ba32bbf029e?editors=001\" target=\"_blank\">Bad Hair Day</a> (click the face) by Chris Gannon</li><li><a href=\"http://codepen.io/waterfallmedia/pen/ZbOjRO?editors=001\" target=\"_blank\">Floating Duckie</a> by Brad Larson</li><li><a href=\"http://codepen.io/MAW/pen/b28e9e6c8419dff6067629caeb5d5a8e?editors=001\" target=\"_blank\">Power of GSAP</a> (lightening) by Diaco</li><li><a href=\"http://codepen.io/GreenSock/pen/2f7aec980161c8def330b99c85fe8b98?editors=001\" target=\"_blank\">Animal Shapes</a> by Carl Schooff</li></ul><h2>Get your hands on MorphSVGPlugin</h2><p>MorphSVGPlugin is a bonus plugin for <a href=\"/club/\">Club GreenSock</a> members (&quot;Shockingly Green&quot; and higher). It&#39;s our way of saying &quot;Thank you&quot; to those that are fueling innovation at GreenSock. To download MorphSVGPlugin, just log into your <a href=\"/forums/account-dashboard/\">account dashboard</a> and grab the latest version of GSAP.</p><p><strong>Try MorphSVGPlugin for free on Codepen!</strong><br>There&#39;s a special [fully-functional] version of MorphSVGPlugin that we link to in our demos in our <strong><a href=\"http://codepen.io/collection/naMaNQ/\">MorphSVGPlugin Collection on CodePen</a></strong>, so feel free to fork any of them, add your own SVG graphics, and take MorphSVGPlugin for a spin. Codepen is a fantastic way to experiment. We highly recommend it. <em>Note: the special version of the plugin will only work on the Codepen domain.</em></p><p>To find out more about the many benefits of being a Club GreenSock member swing on by the <a href=\"/club/\" target=\"_blank\">club page</a> and be sure to check out the other premium plugins.</p>"}},"b5e39c1c0244c4f9":{"meta":{"keywords":["js.MorphSVGPlugin.convertToPath()"],"title":"convertToPath()","description":"There's a utility function, MorphSVGPlugin.convertToPath() that can convert primitive shapes like <circle>, <rect>, <ellipse>, <polygon>, <polyline>, and <line> directly into the equivalent <path> that looks identical to the original and is swapped right into the DOM"},"header":{"content":"<p>Converts SVG shapes like &lt;circle&gt;, &lt;rect&gt;, &lt;ellipse&gt;, or &lt;line&gt; into &lt;path&gt;</p>"},"parameters":[{"name":"shape","data_type":"*","description":"<p>element or selector string</p>\n"}],"returns":{"type":"Array","content":"<p>returns an Array of all &lt;path&gt; elements that were created.</p>\n"},"details":{"content":"<p><iframe src=\"http://www.youtube.com/embed/jcq9kEyJNMM?rel=0&amp;feature=player_detailpage\" width=\"838\" height=\"471\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></p><p>Technically it’s only feasible to morph &lt;path&gt; elements or &lt;polyline&gt;/&lt;polygon&gt; elements, but there are plenty of times you will want to morph a &lt;circle&gt; or &lt;rect&gt; or &lt;ellipse&gt; or &lt;line&gt;; This method makes that possible by converting those basic shapes into &lt;path&gt; elements.<br /></p><pre class='pre-container prettyprint'>MorphSVGPlugin.convertToPath(\"#elementID\");</pre><p><br />You can pass in an element or selector text, so you could also have it convert ALL of those elements with one line:<br /></p><pre class='pre-container prettyprint'>MorphSVGPlugin.convertToPath(\"circle, rect, ellipse, line, polygon, polyline\");</pre><p><br />This literally swaps in a &lt;path&gt; for each one directly in the DOM, and it should look absolutely identical. It'll keep the attributes like \"id\", etc. intact so that the conversion, you should be able to target the elements just as you would before.<br /></p><pre class='pre-container prettyprint'>//An svg <rect> Like this:<br /><rect id=\"endShape\" width=\"100\" height=\"100\" fill=\"red\"/><br />//becomes<br /><path id=\"endShape\" fill=\"red\" d=\"M100,0 v100 h-100 v-100 h100z\"></path></pre><p>Why not automatically do the conversion? Because that's a bit too intrusive and could cause problems. For example, if you had event listeners applied to the original element(s) or references in your own code to those elements. We feel it's best to make sure the developer is aware of and specifically requests this conversion rather than doing it automatically. </p><p data-height=\"450\" data-theme-id=\"3984\" data-slug-hash=\"gagNeR\" data-default-tab=\"result\" data-user=\"GreenSock\" data-embed-version=\"2\" data-pen-title=\"MorphSVG : convertToPath() End\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/gagNeR/\">MorphSVG : convertToPath() End</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script></p>"}},"ce25d7004a81e18d":{"meta":{"keywords":["js.MorphSVGPlugin.pathDataToBezier()"],"title":"pathDataToBezier()","description":"Converts SVG &amp;lt;path&amp;gt; data into an array of cubic Bezier points that can be fed directly into a BezierPlugin-based tween."},"header":{"content":"<p>Converts SVG &lt;path&gt; data into an array of cubic Bezier points that can be fed directly into a BezierPlugin-based tween.</p>"},"parameters":[{"name":"path","data_type":"*","description":"<p>The SVG path that should be converted. Can be a reference to an SVG &lt;path&gt;, a string selector (<code>\"#myPath\"</code>) or raw path data (<code>\"M238.17,151.6c0,21.1-18.9, ...\"</code>)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>A config object containing optional properties that affect how the Bezier points are plotted.</p>\n","related_configuration_object":"b6285db341c79d60"}],"returns":{"type":"Array","content":"<p>An array of point objects with x and y properties. <code>[{x:0, y:100}, {x:200, y:400}]</code>.</p>\n"},"details":{"content":"<p>Converts SVG &lt;path&gt; data into an array of cubic Bezier points that can be fed directly into a <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:BezierPlugin\"><span data-link-id=\"43077a47946db3db\"></span></span>-based tween.</p><h3>Watch the video</h3><p><iframe src=\"http://www.youtube.com/embed/nAc9k8sXrUo?rel=0&amp;feature=player_detailpage\" width=\"838\" height=\"471\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></p><h3>Selecting the path to be converted</h3><pre class='pre-container prettyprint'><br />//select path via string selector<br />var bezier = MorphSVGPlugin.pathDataToBezier(\"#myPath\");<br /><br />//or select path using DOM reference<br />var myPath = document.getElementById(\"myPath\");<br />MorphSVGPlugin.pathDataToBezier(myPath);<br /><br />//or pass in a path string<br />MorphSVGPlugin.pathDataToBezier(\"M37,17v15H14V17H37z M50,0H0v50h50V0z\");<br /><br /></pre><h3>Adjusting points</h3><p>The optional vars object recognizes a few properties that can adjust all the resulting points in the Bezier array:</p><pre class='pre-container prettyprint'><br />//each x value will be offset by 100 and each y by 200<br />MorphSVGPlugin.pathDataToBezier(myPath, {offsetX:100, offsetY:200});<br /><br />//each value will be adjusted so that the #balloon element will be moved to the path<br />MorphSVGPlugin.pathDataToBezier(myPath, {align:\"#balloon\"});<br /><br />//each point will use relative values which makes it easy to \"move the path\" to an SVG element.<br />MorphSVGPlugin.pathDataToBezier(myPath, {align:\"relative\"});<br />//resulting path will have points like \"{x:\"+=0\", y:\"+=200\"}<br /><br />//transform the path using a matrix (rotate 45 degrees and move to right by 200px)<br />MorphSVGPlugin.pathDataToBezier(myPath, {matrix:[0.7071, 0.7071, -0.7071, 0.7071, 200, 0]});<br /></pre><p>Don't forget to always set <code>type:\"cubic\"</code> on your bezier tween, like:<br /></p><pre class='pre-container prettyprint'><br />TweenLite.to(\"#id\", 3, {bezier:{values:MorphSVGPlugin.pathDataToBezier(\"#path\", {align:\"#id\"}), type:\"cubic\"}});<br /></pre><h3>Demo</h3><p data-height=\"550\" data-theme-id=\"9446\" data-slug-hash=\"550e4b59c59355eef809658fbce77ee9\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/550e4b59c59355eef809658fbce77ee9/'>pathDataToBezier() docs official</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p>"}},"68bbfcd7d4727cb7":{"name":"squash","returns":{"type":"Number","content":"Controls how long the squash should last (the gap between bounces, when it appears \"stuck\"). Typically 2 is a good number, but 4 (as an example) would make the squash longer in relation to the rest of the ease. Default: 0","contentShort":""}},"179fe104eb1574d0":{"name":"squashID","returns":{"type":"String","content":"The ID that should be assigned to the squash ease. The default is whatever the ID of the bounce is plus \"-squash\" appended to the end. For example, CustomBounce.create(\"hop\", {strength:0.6, squash:2}) would default to a squash ease ID of \"hop-squash\".","contentShort":""}},"307e72098e372787":{"name":"strength","returns":{"type":"Number","content":"A number between 0 and 1 that determines how \"bouncy\" the ease is, so 0.9 will have a lot more bounces than 0.3. Default: 0.7","contentShort":""}},"a5cf84fac5674d10":{"name":"endAtStart","returns":{"type":"Boolean","content":"If true, the ease will end back where it started, allowing you to get an effect like an object sitting on the ground, leaping into the air, and bouncing back down to a stop. Default: false\r\n","contentShort":""}},"2b3bb68a78e65fe7":{"meta":{"keywords":["js.TimelineLite","Animation","Sequencing"],"title":"TimelineLite","description":"TimelineLite is a lightweight, intuitive timeline class for building and managing sequences of TweenLite, TweenMax, TimelineLite, and/or TimelineMax instances. You can think of a TimelineLite instance like a container where you place tweens (or other timelines) over the course of time."},"header":{"content":"<p>TimelineLite is a powerful sequencing tool that acts as a container for tweens and other timelines, making it simple to control them as a whole and precisely manage their timing. Without TimelineLite, building complex sequences would be far more cumbersome because you'd need to use the <code>delay</code> special property for every tween, making future edits far more tedious. Here is a basic example of a sequence <b>without</b> using TimelineLite (the tedious way):<br /></p><pre class='pre-container prettyprint'>TweenLite.to(element, 1, {left:100});<br />TweenLite.to(element, 1, {top:50, delay:1});<br />TweenLite.to(element, 1, {opacity:0, delay:2});</pre><p>The above code animates the element's \"left\" css property to 100, then \"top\" to 50, and finally \"opacity\" to 0 (notice the <code>delay</code> in all but the first tween). But imagine if you wanted to increase the duration of the first tween to 1.5 - you'd need to adjust every delay thereafter. And what if you want to <code>pause()</code> the whole sequence or <code>restart()</code> it or <code>reverse()</code> it on-the-fly or jump to a specific point in the whole animation? This becomes quite messy (or flat-out impossible), but TimelineLite makes it incredibly simple:<br /></p><pre class='pre-container prettyprint'>var tl = new TimelineLite();<br />tl.add( TweenLite.to(element, 1, {left:100}) );<br />tl.add( TweenLite.to(element, 1, {top:50}) );<br />tl.add( TweenLite.to(element, 1, {opacity:0}) );<br /> <br />//then later, control the whole thing...<br />tl.pause();<br />tl.resume();<br />tl.seek(1.5);<br />tl.reverse();<br />...</pre><p>Or use the convenient <code>to()</code> method and chaining to make it even more concise:<br /></p><pre class='pre-container prettyprint'>var tl = new TimelineLite();<br />tl.to(element, 1, {left:100}).to(element, 1, {top:50}).to(element, 1, {opacity:0});</pre><p>Now you can feel free to adjust any of the tweens without worrying about trickle-down changes to delays. Increase the duration of that first tween and everything automatically adjusts.</p><p>Here are some other benefits and features of TimelineLite:</p><ul><li>Things can overlap on the timeline as much as you want. You have complete control over where tweens/timelines are placed. Most other animation tools can only do basic one-after-the-other sequencing but can't allow things to overlap. Imagine appending a tween that moves an object and you want it to start fading out 0.5 seconds before the end of that tween? With TimelineLite it's easy.</li><li>Add labels, play(), stop(), seek(), restart(), and even reverse() smoothly anytime.</li><li>Nest timelines within timelines as deeply as you want. This means you can modularize your code and make it far more efficient. Imagine building your app with common animateIn() and animateOut() methods that return a tween or timeline instance, then you can string things together like <code>myTimeline.append( myObject.animateIn() ).append( myObject.animateOut(), \"+=4\").append( myObject2.animateIn(), \"-=0.5\")...</code></li><li>Speed up or slow down the entire timeline with its <code>timeScale()</code> method. You can even tween it to gradually speed up or slow down the animation smoothly.</li><li>Get or set the progress of the timeline using its <code>progress()</code> method. For example, to skip to the halfway point, set <code>myTimeline.progress(0.5);</code></li><li>Tween the <code>time</code> or <code>progress</code> to fastforward/rewind the timeline. You could even attach a slider to one of these properties to give the user the ability to drag forward/backward through the timeline.</li><li>Add <code>onComplete, onStart, onUpdate,</code> and/or <code>onReverseComplete</code> callbacks using the constructor's <code>vars</code> object like <code>var tl = new TimelineLite({onComplete:myFunction});</code></li><li>Kill the tweens of a particular object inside the timeline with <code>kill(null, target)</code> or get the tweens of an object with <code>getTweensOf()</code> or get all the tweens/timelines in the timeline with <code>getChildren()</code></li><li>By passing <code>useFrames:true</code> in the <code>vars</code> parameter, you can base the timing on frames instead of seconds. Please note, however, that the timeline's timing mode dictates its childrens' timing mode as well.</li><li>You can export all the tween/timelines from the root (master) timeline anytime into a TimelineLite instance using <code>TimelineLite.exportRoot()</code> so that you can <code>pause()</code> them all or<code>reverse()</code> or alter their <code>timeScale</code>, etc. without affecting tweens/timelines that you create in the future. Imagine a game that has all its animation driven by the GreenSock Animation Platform and it needs to pause or slow down while a status screen pops up. Very easy.</li><li>If you need even more features like <code>repeat, repeatDelay, yoyo, currentLabel(), getLabelAfter(), getLabelBefore(), addCallback(), removeCallback(), getActive()</code>, and more, check out TimelineMax which extends TimelineLite.</li></ul><p><b>SPECIAL PROPERTIES, EASES and CALLBACKS</b></p><p>You can optionally use the constructor's <code>vars</code> parameter to define any of the special properties below (syntax example: <code>new TimelineLite({onComplete:myFunction, delay:2});</code></p><p>[config id=\"cd30416934de29e1\"]</p><p><code></code><b>Sample code:</b></p><pre class='pre-container prettyprint'>//create the timeline with an onComplete callback that calls myFunction() when the timeline completes<br />var tl = new TimelineLite({onComplete:myFunction});<br />//add a tween<br />tl.add( TweenLite.to(element, 1, {left:200, top:100}) );<br />        <br />//add another tween at the end of the timeline (makes sequencing easy)<br />tl.add( TweenLite.to(element, 0.5, {opacity:0}) );<br /> <br />//append a tween using the convenience method (shorter syntax) and offset it by 0.5 seconds<br />tl.to(element, 1, {rotation:30}, \"+=0.5\");<br />         <br />//reverse anytime<br />tl.reverse();<br />//Add a \"spin\" label 3-seconds into the timeline<br />tl.addLabel(\"spin\", 3);<br />//insert a rotation tween at the \"spin\" label (you could also define the insertion point as the time instead of a label)<br />tl.add( TweenLite.to(element, 2, {rotation:\"+=360\"}), \"spin\");<br />    <br />//go to the \"spin\" label and play the timeline from there<br />tl.play(\"spin\");<br />//nest another TimelineLite inside your timeline...<br />var nested = new TimelineLite();<br />nested.to(element, 1, {left:400}));<br />tl.append(nested);</pre><p><b>How do timelines work? What are the mechanics like?</b></p><p>Every animation (tween and timeline) is placed on a parent timeline (except the 2 root timelines - there's one for normal tweens and another for \"useFrames\" ones). In a sense, they all have their own playheads (that's what its \"time\" refers to, or \"totalTime\" which is identical except that it includes repeats and repeatDelays) but generally they're not independent because they're sitting on a timeline whose playhead moves. When the parent's playhead moves to a new position, it updates the childrens' too.</p><p>When a timeline renders at a particular time, it loops through its children and says \"okay, you should render as if your playhead is at ____\" and if that child is a timeline with children, it does the same to its children, right on down the line.</p><p>The only exception is when the tween/timeline is paused in which case its internal playhead acts like it's \"locked\". So in that case, it's possible (likely in fact) that the child's playhead would <b>not</b>be synced with the parent's. When you unpause it (<code>resume()</code>), it essentially picks it up and moves it so that its internal playhead is synchronized with wherever the parent's playhead is at that moment, thus things play perfectly smoothly. That is, unless the timeline's <code>smoothChildTiming</code> is to <code>false</code> in which case it won't move - its <code>startTime</code> will remain locked to where it was.</p><p>So basically, when <code>smoothChildTiming</code> is <code>true</code>, the engine will rearrange things on the fly to ensure the playheads line up so that playback is seamless and smooth. The same thing happens when you <code>reverse()</code> or alter the <code>timeScale</code>, etc. But sometimes you might not want that behavior - you prefer to have tight control over exactly where your tweens line up in the timeline - that's when <code>smoothChildTiming:false</code> is handy.</p><p>One more example: let's say you've got a 10-second tween that's just sitting on the root timeline and you're 2-seconds into the tween. Let's assume it started at exactly 0 on the root to make this easy, and then when it's at 2-seconds, you do <code>tween.seek(5)</code>. The playhead of the root isn't affected - it keeps going exactly as it always did, but in order to make that tween jump to 5 seconds and play appropriately, the tween's <code>startTime</code> gets changed to -3. That way, the tween's playhead and the root playhead are perfectly aligned.</p>"}},"cc4d1686bf20a1c4":{"meta":{"keywords":["js.TimelineLite.TimelineLite()"],"title":"TimelineLite()","description":"Constructor"},"header":{"content":"<p>Constructor</p>"},"parameters":[{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — optionally pass in special properties like <code>onComplete, onCompleteParams, onUpdate, onUpdateParams, onStart, onStartParams, tweens, align, stagger, delay, useFrames,</code> and/or <code>autoRemoveChildren</code>. Below is a complete list of all special properties:</p>\n","related_configuration_object":"cd30416934de29e1"}],"returns":{},"details":{"content":"<p>Constructor</p>"}},"fb3630bc7fd65dd2":{"meta":{"keywords":["js.TimelineLite.add()"],"title":"add()","description":"[override] Adds a tween, timeline, callback, or label (or an array of them) to the timeline."},"header":{"content":"<p>[override] Adds a tween, timeline, callback, or label (or an array of them) to the timeline.</p>"},"parameters":[{"name":"value","data_type":"*","description":"<p>The tween, timeline, callback, or label (or array of them) to add</p>\n"},{"name":"position","data_type":"*","description":"<p>(default = <code>+=0</code>)<code></code> — Controls the placement of the object in the timeline (by default, it&#8217;s the end of the timeline, like &#8220;+=0&#8221;). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a &#8220;+=&#8221; or &#8220;-=&#8221; prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the object 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the object inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the object 2 seconds after &#8220;myLabel&#8221; or <code>\"myLabel-=3\"</code> to insert it 3 seconds before &#8220;myLabel&#8221;. If you define a label that doesn&#8217;t exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween there which can be quite convenient.</p>\n<p>Be sure to read our tutorial <a title=\"learning.timelinetips.position\" href=\"/position-parameter\">Understanding the Position Parameter</a> which includes interactive timeline visualizations and a video.</p>\n"},{"name":"align","data_type":"String","description":"<p>(default = <code>normal</code>)<code></code> — <b><i>[only relevant when the first parameter, <code>value</code>, is an array]</i></b> Determines how the tweens/timelines/callbacks/labels in the array that is being added will be aligned in relation to each other before getting inserted. Options are: <code>\"sequence\"</code> (aligns them one-after-the-other in a sequence), <code>\"start\"</code> (aligns the start times of all of the objects (ignoring delays)), and <code>\"normal\"</code> (aligns the start times of all the tweens (honoring delays)). The default is <code>\"normal\"</code>.</p>\n"},{"name":"stagger","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — <b><i>[only relevant when the first parameter, <code>value</code>, is an array]</i></b> Staggers the inserted objects from the array the is being added by a set amount of time (in seconds) (or in frames for frames-based timelines). For example, if the stagger value is 0.5 and the <code>\"align\"</code> parameter is set to <code>\"start\"</code>, the second one will start 0.5 seconds after the first one starts, then 0.5 seconds later the third one will start, etc. If the align property is <code>\"sequence\"</code>, there would be 0.5 seconds added between each tween. Default is 0.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Adds a tween, timeline, callback, or label (or an array of them) to the timeline.</p><p>The <code>position</code> parameter gives you complete control over the insertion point. By default, it's at the end of the timeline. Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a \"+=\" or \"-=\" prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the object 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the object inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the object 2 seconds after \"myLabel\" or <code>\"myLabel-=3\"</code> to insert it 3 seconds before \"myLabel\". If you define a label that doesn't exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween which can be quite convenient.<br /></p><pre class='pre-container prettyprint'>//add a tween to the end of the timeline<br /> tl.add( TweenLite.to(element, 2, {left:100}) );<br /> <br /> //add a callback at 1.5 seconds<br /> tl.add(func, 1.5); <br /> <br /> //add a label 2 seconds after the end of the timeline (with a gap of 2 seconds)<br /> tl.add(\"myLabel\", \"+=2\");<br /> <br /> //add another timeline at \"myLabel\"<br /> tl.add(otherTimeline, \"myLabel\"); <br /> <br /> //add an array of tweens 2 seconds after \"myLabel\"<br /> tl.add([tween1, tween2, tween3], \"myLabel+=2\"); <br /> <br /> //add an array of tweens so that they are sequenced one-after-the-other with 0.5 seconds inbetween them, starting 2 seconds after the end of the timeline<br /> tl.add([tween1, tween2, tween3], \"+=2\", \"sequence\", 0.5);</pre><p>Be sure to read our tutorial <a title=\"learning.timelinetips.position\" href=\"/position-parameter\">Understanding the Position Paramater</a> which includes interactive timeline visualizations and a video.</p>"}},"a3d5652d51086bea":{"meta":{"keywords":["js.TimelineLite.addLabel()"],"title":"addLabel()","description":"Adds a label to the timeline, making it easy to mark important positions/times."},"header":{"content":"<p>Adds a label to the timeline, making it easy to mark important positions/times.</p>"},"parameters":[{"name":"label","data_type":"String","description":"<p>The name of the label</p>\n"},{"name":"position","data_type":"*","description":"<p>Controls the placement of the label in the timeline (by default, it&#8217;s the end of the timeline, like &#8220;+=0&#8221;). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a &#8220;+=&#8221; or &#8220;-=&#8221; prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the label 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the label inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the label 2 seconds after &#8220;myLabel&#8221; or <code>\"myLabel-=3\"</code> to insert it 3 seconds before &#8220;myLabel&#8221;. If you define a label that doesn&#8217;t exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the label there which can be quite convenient. Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Adds a label to the timeline, making it easy to mark important positions/times. You can then reference that label in other methods, like <code>seek(\"myLabel\")</code> or <code>add(myTween, \"myLabel\")</code> or <code>reverse(\"myLabel\")</code>. You could also use the <code><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineLite.add()\"><span data-link-id=\"fb3630bc7fd65dd2\"></span></span></code> method to insert a label.</p><div style=\"width: 838px;\"><p class=\"codepen\" data-height=\"799\" data-theme-id=\"5662\" data-slug-hash=\"1091b66cdb9aa9c7fdd029c82c4d8840\" data-default-tab=\"result\" data-user=\"GreenSock\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/1091b66cdb9aa9c7fdd029c82c4d8840/\">Labels</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script src=\"http://codepen.io/assets/embed/ei.js\" async=\"\"></script></p><p class=\"p1\">Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p></div>"}},"b15c1fc9e7c9418c":{"meta":{"keywords":["js.TimelineLite.addPause()"],"title":"addPause()","description":"Inserts a special callback that pauses playback of the timeline at a particular time or label."},"header":{"content":"<p>Inserts a special callback that pauses playback of the timeline at a particular time or label.</p>"},"parameters":[{"name":"position","data_type":"*","description":"<p>(default = <code>+=0</code>)<code></code> — Controls the placement of the pause in the timeline (by default, it&#8217;s the end of the timeline, like &#8220;+=0&#8221;). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a &#8220;+=&#8221; or &#8220;-=&#8221; prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after &#8220;myLabel&#8221; or <code>\"myLabel-=3\"</code> to insert it 3 seconds before &#8220;myLabel&#8221;. If you define a label that doesn&#8217;t exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween there which can be quite convenient.</p>\n<p class=\"p1\">Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p>\n"},{"name":"callback","data_type":"Function","description":"<p>(default = <code>null</code>)<code></code> — An optional callback that should be called immediately after the timeline is paused.</p>\n"},{"name":"params","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — An optional array of parameters to pass the callback.</p>\n"},{"name":"scope","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The scope in which the callback should be called (basically, what &#8220;this&#8221; refers to in the function). NOTE: this parameter only exists in the JavaScript and AS2 versions.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Inserts a special callback that pauses playback of the timeline at a particular time or label. This method is more accurate than using a simple callback of your own because it ensures that even if the virtual playhead had moved slightly beyond the pause position, it'll get moved back to precisely the correct position.</p><p>Remember, the virtual playhead moves to a new position on each tick (frame) of the core timing mechanism, so it is possible, for example for it to be at 0.99 and then the next render happens at 1.01, so if your callback was at exactly 1 second, the playhead would (in this example) move slightly past where you wanted to pause. Then, if you reverse(), it would run into that callback again and get paused almost immediately. However, if you use the <code>addPause()</code> method, it will calibrate things so that when the callback is hit, it'll move the playhead back to <b>EXACTLY</b> where it should be. Thus, if you reverse() it won't run into the same callback again.<br /></p><pre class='pre-container prettyprint'>//insert a pause at exactly 2 seconds into the timeline<br />timeline.addPause(2);<br /> <br />//insert a pause at \"yourLabel\"<br />timeline.addPause(\"yourLabel\");<br /> <br />//insert a pause 3 seconds after \"yourLabel\" and when that pause occurs, call yourFunction<br />timeline.addPause(\"yourLabel+=3\", yourFunction);<br /> <br />//insert a pause at exactly 4 seconds and then call yourFunction and pass it 2 parameters, \"param1\" and \"param2\" and bind the current scope to the callback<br />timeline.addPause(4, yourFunction, [\"param1\", \"param2\"], this);</pre><p>The special callback is just a zero-duration tween that utilizes an onComplete, so technically this callback is just like any other, and it is considered a child of the timeline. To remove a pause that was added via addPause() use <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineMax.removePause()\"><span data-link-id=\"58e2f543b70f3422\"></span></span>.</p><p class=\"p1\">Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p>"}},"d19482f5b1cfd929":{"meta":{"keywords":["js.TimelineLite.call()"],"title":"call()","description":"Adds a callback to the end of the timeline (or elsewhere using the &quot;position&quot; parameter) - this is a convenience method that accomplishes exactly the same thing as add( TweenLite.delayedCall(...) ) but with less code."},"header":{"content":"<p>Adds a callback to the end of the timeline (or elsewhere using the \"position\" parameter) - this is a convenience method that accomplishes exactly the same thing as add( TweenLite.delayedCall(...) ) but with less code.</p>"},"parameters":[{"name":"callback","data_type":"Function","description":"<p>Function to call</p>\n"},{"name":"params","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — An Array of parameters to pass the function.</p>\n"},{"name":"scope","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The scope in which the callback should be called (basically, what &#8220;this&#8221; refers to in the function). NOTE: this parameter only exists in the JavaScript and AS2 versions.</p>\n"},{"name":"position","data_type":"*","description":"<p>(default = <code>+=0</code>)<code></code> — Controls the placement of the callback in the timeline (by default, it&#8217;s the end of the timeline, like &#8220;+=0&#8221;). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a &#8220;+=&#8221; or &#8220;-=&#8221; prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the callback 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the callback inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the callback 2 seconds after &#8220;myLabel&#8221; or <code>\"myLabel-=3\"</code> to insert it 3 seconds before &#8220;myLabel&#8221;. If you define a label that doesn&#8217;t exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the callback there which can be quite convenient. Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Adds a callback to the end of the timeline (or elsewhere using the \"position\" parameter) - this is a convenience method that accomplishes exactly the same thing as <code>add( TweenLite.delayedCall(...) )</code> but with less code. In other words, the following two lines produce identical results:</p><pre class='pre-container prettyprint'>myTimeline.add( TweenLite.delayedCall(0, myFunction, [\"param1\", \"param2\"]) );<br /> myTimeline.call(myFunction, [\"param1\", \"param2\"]);</pre><p>This is different than using the <code>onComplete</code> special property on the TimelineLite itself because once you append the callback, it stays in place whereas an <code>onComplete</code> is always called at the very end of the timeline. For example, if a timeline is populated with a 1-second tween and then you <code>call(myFunction)</code>, it is placed at the 1-second spot. Then if you append another 1-second tween, the timeline's duration will now be 2 seconds but the myFunction callback will still be called at the 1-second spot. An <code>onComplete</code> would be called at the end (2 seconds).</p><p>Keep in mind that you can chain these calls together and use other convenience methods like <code>to(), fromTo(), set(), staggerTo()</code>, etc. to build out sequences very quickly:<br /></p><pre class='pre-container prettyprint'>//create a timeline that calls myFunction() when it completes<br />var tl = new TimelineLite({onComplete:myFunction});<br /> <br />//now we'll use chaining, but break each step onto a different line for readability...<br />tl.to(element, 1, {left:100})    //tween element's left to 100<br />  .call(myCallback)        //then call myCallback()<br />  .set(element, {opacity:0})    //then set element.opacity to 0.5 immediately<br />  .call(otherFunction, [\"param1\", \"param2\"])    //then call otherFunction(\"param1\", \"param2\")<br />  .staggerTo([element1, element2, element3], 1.5, {rotation:45}, 0.25); //finally tween the rotation of element1, element2, and element3 to 45 and stagger the start times by 0.25 seconds</pre><p><br /></p><pre class='pre-container prettyprint'>tl.call(func, [\"param1\"]);  //appends to the end of the timeline<br />tl.call(func, [\"param1\"], this, 2);  //appends it at exactly 2 seconds into the timeline (absolute position)<br />tl.call(func, [\"param1\"], this, \"+=2\");  //appends it 2 seconds after the end (with a gap of 2 seconds)<br />tl.call(func, [\"param1\"], this, \"myLabel\");  //places it at \"myLabel\" (and if \"myLabel\" doesn't exist yet, it's added to the end and then the tween is inserted there)<br />tl.call(func, [\"param1\"], this, \"myLabel+=2\");  //places it 2 seconds after \"myLabel\"</pre><p>The 4th parameter is the <code>position</code> which controls the placement of the tween in the timeline (by default, it's at the end of the timeline). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a \"+=\" or \"-=\" prefix to offset the insertion point relative to the END of the timeline. For example,<code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after \"myLabel\" or <code>\"myLabel-=3\"</code> to insert it 3 seconds before \"myLabel\". If you define a label that doesn't exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween there which can be quite convenient.</p><p class=\"p1\">Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p>"}},"55a9f099bdcda14c":{"meta":{"keywords":["js.TimelineLite.clear()"],"title":"clear()","description":"Empties the timeline of all tweens, timelines, and callbacks (and optionally labels too)."},"header":{"content":"<p>Empties the timeline of all tweens, timelines, and callbacks (and optionally labels too).</p>"},"parameters":[{"name":"labels","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code> (the default), labels will be cleared too.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Empties the timeline of all tweens, timelines, and callbacks (and optionally labels too). Event callbacks (like onComplete, onUpdate, onStart, etc.) are not removed. If you need to remove event callbacks, use the <code>eventCallback()</code> method and set them to null like <code>myTimeline.eventCallback(\"onComplete\", null);</code></p>"}},"e949a7537e48535a":{"meta":{"keywords":["js.TimelineLite.duration()"],"title":"duration()","description":"[override] Gets the timeline&#039;s duration or, if used as a setter, adjusts the timeline&#039;s timeScale to fit it within the specified duration."},"header":{"content":"<p>[override] Gets the timeline's duration or, if used as a setter, adjusts the timeline's timeScale to fit it within the specified duration.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Gets the timeline's <code>duration</code> or, if used as a setter, adjusts the timeline's <code>timeScale</code> to fit it within the specified duration. <code>duration()</code> is identical to <code>totalDuration()</code> except for TimelineMax instances that have a non-zero <code>repeat</code> in which case <code>totalDuration</code> includes repeats and repeatDelays whereas <code>duration</code> doesn't. For example, if a TimelineMax instance has a <code>duration</code> of 2 and a <code>repeat</code> of 3, its <code>totalDuration</code> would be 8 (one standard play plus 3 repeats equals 4 total cycles).</p><p>Due to the fact that a timeline's <code>duration</code> is dictated by its contents, using this method as a setter will simply cause the <code>timeScale</code> to be adjusted to fit the current contents into the specified <code>duration</code>, but the <code>duration</code> value itself will remain unchanged. For example, if there are 20-seconds worth of tweens in the timeline and you do <code>myTimeline.duration(10)</code>, the <code>timeScale</code> would be changed to 2. If you checked the <code>duration</code> again immediately after that, it would still return 20 because technically that is how long all the child tweens/timelines are but upon playback the speed would be doubled because of the <code>timeScale</code>.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myAnimation.duration(2).play(1);</code><br /></p><pre class='pre-container prettyprint'>var currentDuration = myAnimation.duration(); //gets current duration<br /> myAnimation.duration( 10 ); //adjusts the timeScale of myAnimation so that it fits into exactly 10 seconds on its parent timeline</pre>"}},"3ba39b4db90dc9ba":{"meta":{"keywords":["js.TimelineLite.exportRoot()"],"title":"exportRoot()","description":"[static] Seamlessly transfers all tweens, timelines, and [optionally] delayed calls from the root timeline into a new TimelineLite so that you can perform advanced tasks on a seemingly global basis without affecting tweens/timelines that you create after the export."},"header":{"content":"<p>[static] Seamlessly transfers all tweens, timelines, and [optionally] delayed calls from the root timeline into a new TimelineLite so that you can perform advanced tasks on a seemingly global basis without affecting tweens/timelines that you create after the export.</p>"},"parameters":[{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — The <code>vars</code> parameter that&#8217;s passed to the TimelineLite&#8217;s constructor which allows you to define things like onUpdate, onComplete, etc. The<code>useFrames</code> special property determines which root timeline gets exported. There are two distinct root timelines &#8211; one for frames-based animations (<code>useFrames:true</code>) and one for time-based ones. By default, the time-based timeline is exported.</p>\n"},{"name":"omitDelayedCalls","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code> (the default), delayed calls will be left on the root rather than wrapped into the new TimelineLite. That way, if you<code>pause()</code> or alter the <code>timeScale</code>, or <code>reverse()</code>, they won&#8217;t be affected. However, in some situations it might be very useful to have them included.</p>\n"}],"returns":{"type":"TimelineLite","content":"<p>A new TimelineLite instance containing the root tweens/timelines</p>\n"},"details":{"content":"<p>Seamlessly transfers all tweens, timelines, and [optionally] delayed calls from the root timeline into a new TimelineLite so that you can perform advanced tasks on a seemingly global basis without affecting tweens/timelines that you create after the export. For example, imagine a game that uses the GreenSock Animation Platform for all of its animations and at some point during the game, you want to slow everything down to a stop (tweening the <code>timeScale</code>) while at the same time animating a new popup window into place:<br /></p><pre class='pre-container prettyprint'>var tl = TimelineLite.exportRoot();<br />TweenLite.to(tl, 0.5, {timeScale:0});<br /> <br />//this tween isn't affected because it's created after the export.<br />TweenLite.fromTo(myWindow, 1, {scaleX:0, scaleY:0}, {scaleX:1, scaleY:1});</pre><p>You could then re-animate things when you're ready by tweening the <code>timeScale</code> back to 1. Or you could use <code>exportRoot()</code> to collect all the animations and <code>pause()</code> them and then animate the popup screen (or whatever). Then <code>resume()</code> that instance or even <code>reverse()</code>.</p><p>You can <code>exportRoot()</code> as many times as you want; all it does is wrap all the loose tweens/timelines/delayedCalls into a TimelineLite which itself gets placed onto the root, so if you<code>exportRoot()</code> again, that TimelineLite would get wrapped into another one, etc. Things can be nested as deeply as you want.</p><p>Keep in mind, however, that completed tweens/timelines are removed from the root (for automatic garbage collection), so if you <code>exportRoot()</code> after a tween completes, it won't be included in the export. The only way around that is to set <code>autoRemoveChildren</code> property of the <code>Animation._rootTimeline</code> and <code>Animation._rootFramesTimeline</code> to <code>false</code>, but that is <b>NOT</b> recommended because you'd need to manually <code>kill()</code> your tweens/timelines manually to make them eligible for garbage collection.</p>"}},"078881c6d928c5cf":{"meta":{"keywords":["js.TimelineLite.from()"],"title":"from()","description":"Adds a TweenLite.from() tween to the end of the timeline (or elsewhere using the &quot;position&quot; parameter) - this is a convenience method that accomplishes exactly the same thing as add( TweenLite.from(...) ) but with less code."},"header":{"content":"<p>Adds a TweenLite.from() tween to the end of the timeline (or elsewhere using the \"position\" parameter) - this is a convenience method that accomplishes exactly the same thing as add( TweenLite.from(...) ) but with less code.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties should be affected. When animating DOM elements, the target can be: a single element, an array of elements, a jQuery object (or similar), or a CSS selector string like “#feature” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if the timeline is frames-based)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the starting value for each property that should be tweened as well as any special properties like <code>onComplete</code>, <code>ease</code>, etc. For example, to tween element&#8217;s <code>left</code> from 100 and element&#8217;s <code>top</code> from 200 and then call <code>myFunction</code>, do this: <code>myTimeline.from(element, 1, {left:100, top:200, onComplete:myFunction});</code></p>\n"},{"name":"position","data_type":"*","description":"<p>(default = <code>+=0</code>)<code></code> — Controls the placement of the tween in the timeline (by default, it&#8217;s the end of the timeline, like &#8220;+=0&#8221;). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a &#8220;+=&#8221; or &#8220;-=&#8221; prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after &#8220;myLabel&#8221; or <code>\"myLabel-=3\"</code> to insert it 3 seconds before &#8220;myLabel&#8221;. If you define a label that doesn&#8217;t exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween there which can be quite convenient. Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Adds a <code>TweenLite.from()</code> tween to the end of the timeline (or elsewhere using the \"position\" parameter) - this is a convenience method that accomplishes exactly the same thing as<code>add( TweenLite.from(...) )</code> but with less code. In other words, the following two lines produce identical results:<br /></p><pre class='pre-container prettyprint'>myTimeline.add( TweenLite.from(element, 1, {left:100, opacity:0.5}) );<br />myTimeline.from(element, 1, {left:100, opacity:0.5});</pre><p>Keep in mind that you can chain these calls together and use other convenience methods like <code>to(), call(), set(), staggerTo()</code>, etc. to build out sequences very quickly:<br /></p><pre class='pre-container prettyprint'>//create a timeline that calls myFunction() when it completes<br />var tl:TimelineLite = new TimelineLite({onComplete:myFunction});<br /> <br />//now we'll use chaining, but break each step onto a different line for readability...<br />tl.from(element, 1, {left:-100})    //tween element's left from -100<br />  .to(element, 1, {top:50})    //then tween element's \"top\" to 50<br />  .set(element, {opacity:0})    //then set element's opacity to 0.5 immediately<br />  .call(otherFunction)    //then call otherFunction()<br />  .staggerTo([element1, element2, element3], 1.5, {rotation:45}, 0.25); //finally tween the rotation of element1, element2, and element3 to 45 and stagger the start times by 0.25 seconds<br />         </pre><p>If you don't want to append the tween and would rather have precise control of the insertion point, you can use the additional <code>position</code> parameter. Or use a regular <code>add()</code> like<code>tl.add( TweenLite.from(element, 1, {left:100}), 2.75)</code>.</p><p>The 4th parameter is the <code>position</code> which controls the placement of the tween in the timeline (by default, it's at the end of the timeline). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a \"+=\" or \"-=\" prefix to offset the insertion point relative to the END of the timeline. For example,<code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after \"myLabel\" or <code>\"myLabel-=3\"</code> to insert it 3 seconds before \"myLabel\". If you define a label that doesn't exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween which can be quite convenient.<br /></p><pre class='pre-container prettyprint'>tl.from(element, 1, {left:100});  //appends to the end of the timeline<br />tl.from(element, 1, {left:100}, 2);  //appends it at exactly 2 seconds into the timeline (absolute position)<br />tl.from(element, 1, {left:100}, \"+=2\");  //appends it 2 seconds after the end (with a gap of 2 seconds)<br />tl.from(element, 1, {left:100}, \"myLabel\");  //places it at \"myLabel\" (and if \"myLabel\" doesn't exist yet, it's added to the end and then the tween is inserted there)<br />tl.from(element, 1, {left:100}, \"myLabel+=2\");  //places it 2 seconds after \"myLabel\"</pre><p class=\"p1\">Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p><p><b>NOTE:</b> By default, <code>immediateRender</code> is <code>true</code> in <code>from()</code> tweens, meaning that they immediately render their starting state regardless of any delay that is specified. You can override this behavior by passing <code>immediateRender:false</code> in the <code>vars</code> parameter so that it will wait to render until the tween actually begins.</p>"}},"ab22a377935cb849":{"meta":{"keywords":["js.TimelineLite.fromTo()"],"title":"fromTo()","description":"Adds a TweenLite.fromTo() tween to the end of the timeline - this is a convenience method that accomplishes exactly the same thing as add( TweenLite.fromTo(...) ) but with less code."},"header":{"content":"<p>Adds a TweenLite.fromTo() tween to the end of the timeline - this is a convenience method that accomplishes exactly the same thing as add( TweenLite.fromTo(...) ) but with less code.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties should be affected. When animating DOM elements, the target can be: a single element, an array of elements, a jQuery object (or similar), or a CSS selector string like “#feature” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if the timeline is frames-based)</p>\n"},{"name":"fromVars","data_type":"Object","description":"<p>An object defining the starting value for each property that should be tweened. For example, to tween element&#8217;s <code>left</code> from 100 and element&#8217;s <code>top</code> from 200,<code>fromVars</code> would look like this: <code>{left:100, top:200}</code>.</p>\n"},{"name":"toVars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like <code>onComplete</code>, <code>ease</code>, etc. For example, to tween element&#8217;s <code>left</code> from 0 to 100 and element&#8217;s <code>top</code> from 0 to 200 and then call <code>myFunction</code>, do this: <code>myTimeline.fromTo(element, 1, {left:0, top:0}, {left:100, top:200, onComplete:myFunction});</code></p>\n"},{"name":"position","data_type":"*","description":"<p>(default = <code>+=0</code>)<code></code> — Controls the placement of the tween in the timeline (by default, it&#8217;s the end of the timeline, like &#8220;+=0&#8221;). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a &#8220;+=&#8221; or &#8220;-=&#8221; prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after &#8220;myLabel&#8221; or <code>\"myLabel-=3\"</code> to insert it 3 seconds before &#8220;myLabel&#8221;. If you define a label that doesn&#8217;t exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween there which can be quite convenient. Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Adds a TweenLite.fromTo() tween to the end of the timeline - this is a convenience method that accomplishes exactly the same thing as add( TweenLite.fromTo(...) ) but with less code.<br /></p><pre class='pre-container prettyprint'>myTimeline.add( TweenLite.fromTo(element, 1, {left:0, opacity:1}, {left:100, opacity:0.5}) );<br />myTimeline.fromTo(element, 1, {left:0, opacity:1}, {left:100, opacity:0.5});</pre><p>Keep in mind that you can chain these calls together and use other convenience methods like <code>to(), call(), set(), staggerTo()</code>, etc. to build out sequences very quickly:<br /></p><pre class='pre-container prettyprint'>//create a timeline that calls myFunction() when it completes<br />var tl = new TimelineLite({onComplete:myFunction});<br />         <br />//now we'll use chaining, but break each step onto a different line for readability...<br />tl.fromTo(element, 1, {left:0}, {left:-100})    //tween element's left from 0 to -100<br />  .to(element, 1, {top:50}, \"-=0.25\")        //then tween element's top to 50, starting it 0.25 seconds before the previous tween ends<br />  .set(element, {opacity:0})            //then set element.opacity to 0.5 immediately<br />  .call(otherFunction)            //then call otherFunction()<br />  .staggerTo([element1, element2, element3], 1.5, {rotation:45}, 0.25); //finally tween the rotation of element1, element2, and element3 to 45 and stagger the start times by 0.25 seconds</pre><p>If you don't want to append the tween and would rather have precise control of the insertion point, you can use the additional <code>position</code> parameter. Or use a regular <code>add()</code> like<code>tl.add( TweenLite.fromTo(element, 1, {left:0}, {left:100}), 2.75)</code>.</p><p>The 4th parameter is the <code>position</code> which controls the placement of the tween in the timeline (by default, it's at the end of the timeline). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a \"+=\" or \"-=\" prefix to offset the insertion point relative to the END of the timeline. For example,<code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after \"myLabel\" or <code>\"myLabel-=3\"</code> to insert it 3 seconds before \"myLabel\". If you define a label that doesn't exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween which can be quite convenient.<br /></p><pre class='pre-container prettyprint'>tl.fromTo(element, 1, {left:0}, {left:100});  //appends to the end of the timeline<br />tl.fromTo(element, 1, {left:0}, {left:100}, 2);  //appends it at exactly 2 seconds into the timeline (absolute position)<br />tl.fromTo(element, 1, {left:0}, {left:100}, \"+=2\");  //appends it 2 seconds after the end (with a gap of 2 seconds)<br />tl.fromTo(element, 1, {left:0}, {left:100}, \"myLabel\");  //places it at \"myLabel\" (and if \"myLabel\" doesn't exist yet, it's added to the end and then the tween is inserted there)<br />tl.fromTo(element, 1, {left:0}, {left:100}, \"myLabel+=2\");  //places it 2 seconds after \"myLabel\"</pre><p class=\"p1\">Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p><p><b>NOTE:</b> by default, <code>immediateRender</code> is <code>true</code> in <code>fromTo()</code> tweens, meaning that they immediately render their starting state regardless of any delay that is specified. This is done for convenience because it is often the preferred behavior when setting things up on the screen to animate into place, but you can override this behavior by passing<code>immediateRender:false</code> in the <code>fromVars</code> or <code>toVars</code> parameter so that it will wait to render the starting values until the tween actually begins.</p>"}},"5103496262822a61":{"meta":{"keywords":["js.TimelineLite.getChildren()"],"title":"getChildren()","description":"Returns an array containing all the tweens and/or timelines nested in this timeline."},"header":{"content":"<p>Returns an array containing all the tweens and/or timelines nested in this timeline.</p>"},"parameters":[{"name":"nested","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — Determines whether or not tweens and/or timelines that are inside nested timelines should be returned. If you only want the &#8220;top level&#8221; tweens/timelines, set this to <code>false</code>.</p>\n"},{"name":"tweens","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — Determines whether or not tweens (TweenLite and TweenMax instances) should be included in the results</p>\n"},{"name":"timelines","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — Determines whether or not timelines (TimelineLite and TimelineMax instances) should be included in the results</p>\n"},{"name":"ignoreBeforeTime","data_type":"Number","description":"<p><code>Number</code> (default = <code>-9999999999</code>)<code></code> — All children with start times that are less than this value will be ignored.</p>\n"}],"returns":{"type":"Array","content":""},"details":{"content":"<p>Returns an array containing all the tweens and/or timelines nested in this timeline. Callbacks (delayed calls) are considered zero-duration tweens.</p><h3>Example</h3><pre class='pre-container prettyprint'>//first, let's set up a master timeline and nested timeline:<br />var master = new TimelineLite(),<br />    nestedTimeline = new TimelineLite();<br />//drop 2 tweens into the nested timeline<br />nestedTimeline.to(\"#e1\", 1, {x:100})<br />  .to(\"#e2\", 2, {y:200});<br />//drop 3 tweens into the master timeline<br />master.to(\"#e3\", 1, {top:200})<br />     .to(\"#e4\", 1, {left:100})<br />     .to(\"#e5\", 1, {backgroundColor:\"red\"});<br />//nest the timeline:<br />master.add(nestedTimeline);<br /><br />//now let's get only the direct children of the master timeline:<br />var children = master.getChildren(false, true, true, 0);<br />console.log(children.length); //\"3\" (2 tweens and 1 timeline)<br />//get all of the tweens/timelines (including nested ones) that occur AFTER 0.5 seconds<br />children = master.getChildren(true, true, true, 0.5);<br />console.log(children.length); //\"5\" (4 tweens and 1 timeline)<br />//get only tweens (not timelines) of master (including nested tweens):<br />children = master.getChildren(true, true, false, 0);<br />console.log(children.length); //\"5\" (5 tweens)<br /></pre>"}},"6428cc1a8c9024c6":{"meta":{"keywords":["js.TimelineLite.getLabelTime()"],"title":"getLabelTime()","description":"Returns the time associated with a particular label."},"header":{"content":"<p>Returns the time associated with a particular label.</p>"},"parameters":[{"name":"label","data_type":"String","description":"<p>Label name</p>\n"}],"returns":{"type":"Number","content":"<p>Time associated with the label (or -1 if there is no such label)</p>\n"},"details":{"content":"<p>Returns the time associated with a particular label. If the label isn't found, -1 is returned.</p>"}},"708b2590f2979899":{"meta":{"keywords":["js.TimelineLite.getTweensOf()"],"title":"getTweensOf()","description":"Returns the tweens of a particular object that are inside this timeline."},"header":{"content":"<p>Returns the tweens of a particular object that are inside this timeline.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>The target object of the tweens</p>\n"},{"name":"nested","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — Determines whether or not tweens that are inside nested timelines should be returned. If you only want the &#8220;top level&#8221; tweens/timelines, set this to false.</p>\n"}],"returns":{"type":"Array","content":"<p>an Array of TweenLite and/or TweenMax instances</p>\n"},"details":{"content":"<p>Returns the tweens of a particular object that are inside this timeline.</p>"}},"dd5fed4d3955bfea":{"meta":{"keywords":["js.TimelineLite.invalidate()"],"title":"invalidate()","description":"[override] Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values."},"header":{"content":"<p>[override] Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values.</p>"},"parameters":[],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values. When you <code>invalidate()</code> an animation, it will be re-initialized the next time it renders and its <code>vars</code> object will be re-parsed. The timing of the animation (duration, startTime, delay) will not be affected.</p><p>Another example would be if you have a <code>TweenMax(mc, 1, {x:100, y:100})</code> that ran when mc.x and mc.y were initially at 0, but now mc.x and mc.y are 200 and you want them tween to 100 again, you could simply <code>invalidate()</code> the tween and <code>restart()</code> it. Without invalidating first, restarting it would cause the values jump back to 0 immediately (where they started when the tween originally began). When you invalidate a TimelineLite/TimelineMax, it automatically invalidates all of its children.</p>"}},"d4204b8f13ae9009":{"meta":{"keywords":["js.TimelineLite.recent()"],"title":"recent()","description":"Returns the most recently added child tween/timeline/callback regardless of its position in the timeline. "},"header":{"content":"<p>Returns the most recently added child tween/timeline/callback regardless of its position in the timeline. </p>"},"parameters":[],"returns":{"type":"Animation","content":""},"details":{"content":"<p>Returns the most recently added child tween/timeline/callback regardless of its position in the timeline.<br /></p><pre class='pre-container prettyprint'>var tl = new TimelineLite();<br />tl.to(e1, 999, {x:100, repeat:5}) //very long tween<br />  .to(e2, 1, {y:200}, 0.5); //insert this tween at 0.5 seconds (toward the beginning of the timeline)<br />  .to(e3, 1, {scaleX:2}, tl.recent().endTime() + 3);//inserts the new tween 3 seconds after the e2 tween which was added most recently.</pre>"}},"d49e46f2e8270a08":{"meta":{"keywords":["js.TimelineLite.remove()"],"title":"remove()","description":"Removes a tween, timeline, callback, or label (or array of them) from the timeline."},"header":{"content":"<p>Removes a tween, timeline, callback, or label (or array of them) from the timeline.</p>"},"parameters":[{"name":"value","data_type":"*","description":"<p>The tween, timeline, callback, or label that should be removed from the timeline (or an array of them)</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Removes a tween, timeline, callback, or label (or array of them) from the timeline.</p>"}},"e124272392141d4f":{"meta":{"keywords":["js.TimelineLite.removeLabel()"],"title":"removeLabel()","description":"Removes a label from the timeline and returns the time of that label."},"header":{"content":"<p>Removes a label from the timeline and returns the time of that label.</p>"},"parameters":[{"name":"label","data_type":"String","description":"<p>The name of the label to remove</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"*","content":"<p>Time associated with the label that was removed</p>\n"},"details":{"content":"<p>Removes a label from the timeline and returns the time of that label. You could also use the <code>remove()</code> method to accomplish the same task.</p>"}},"0fc1a8aeb91b3bc5":{"meta":{"keywords":["js.TimelineLite.seek()"],"title":"seek()","description":"[override] Jumps to a specific time (or label) without affecting whether or not the instance is paused or reversed."},"header":{"content":"<p>[override] Jumps to a specific time (or label) without affecting whether or not the instance is paused or reversed.</p>"},"parameters":[{"name":"position","data_type":"*","description":"<p>The position to go to, described in any of the following ways: a numeric value indicates an absolute position, like 3 would be exactly 3 seconds from the beginning of the timeline. A string value can be either a label (i.e. &#8220;myLabel&#8221;) or a relative value using the &#8220;+=&#8221; or &#8220;-=&#8221; prefixes like &#8220;-=2&#8221; (2 seconds before the end of the timeline) or a combination like &#8220;myLabel+=2&#8221; to indicate 2 seconds after &#8220;myLabel&#8221;.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code> (the default), no events or callbacks will be triggered when the playhead moves to the new position defined in the <code>time</code>parameter.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Jumps to a specific time (or label) without affecting whether or not the instance is paused or reversed.</p><p>If there are any events/callbacks inbetween where the playhead was and the new time, they will not be triggered because by default <code>suppressEvents</code> (the 2nd parameter) is <code>true</code>. Think of it like picking the needle up on a record player and moving it to a new position before placing it back on the record. If, however, you do not want the events/callbacks suppressed during that initial move, simply set the <code>suppressEvents</code> parameter to <code>false</code>.<br /></p><pre class='pre-container prettyprint'>//jumps to exactly 2 seconds<br />myAnimation.seek(2);<br /> <br />//jumps to exactly 2 seconds but doesn't suppress events during the initial move:<br />myAnimation.seek(2, false);<br /> <br />//jumps to the \"myLabel\" label<br />myAnimation.seek(\"myLabel\");</pre>"}},"fd9dbda283638161":{"meta":{"keywords":["js.TimelineLite.set()"],"title":"set()","description":"Adds a zero-duration tween to the end of the timeline (or elsewhere using the &quot;position&quot; parameter) that sets values immediately (when the virtual playhead reaches that position on the timeline) - this is a convenience method that accomplishes exactly the same thing as add( TweenLite.to(target, 0, {...}) ) but with less code."},"header":{"content":"<p>Adds a zero-duration tween to the end of the timeline (or elsewhere using the \"position\" parameter) that sets values immediately (when the virtual playhead reaches that position on the timeline) - this is a convenience method that accomplishes exactly the same thing as add( TweenLite.to(target, 0, {...}) ) but with less code.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties will be set.</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the value to which each property should be set. For example, to set element&#8217;s <code>left</code> to 100 and element&#8217;s <code>top</code> to 200, do this:<code>myTimeline.set(element, {left:100, top:200});</code></p>\n"},{"name":"position","data_type":"*","description":"<p>(default = <code>+=0</code>)<code></code> — Controls the placement of the zero-duration tween in the timeline (by default, it&#8217;s the end of the timeline, like &#8220;+=0&#8221;). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a &#8220;+=&#8221; or &#8220;-=&#8221; prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like<code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after &#8220;myLabel&#8221; or <code>\"myLabel-=3\"</code> to insert it 3 seconds before &#8220;myLabel&#8221;. If you define a label that doesn&#8217;t exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween there which can be quite convenient.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Adds a zero-duration tween to the end of the timeline (or elsewhere using the \"position\" parameter) that sets values immediately (when the virtual playhead reaches that position on the timeline) - this is a convenience method that accomplishes exactly the same thing as <code>add( TweenLite.to(target, 0, {...}) )</code> but with less code. In other words, the following two lines produce identical results:<br /></p><pre class='pre-container prettyprint'>myTimeline.add( TweenLite.to(element, 0, {left:100, opacity:0.5, immediateRender:false}) );<br /> myTimeline.set(element, {left:100, opacity:0.5});</pre><p>Keep in mind that you can chain these calls together and use other convenience methods like <code>to(), call(), fromTo(), staggerTo()</code>, etc. to build out sequences very quickly:<br /></p><pre class='pre-container prettyprint'>//create a timeline that calls myFunction() when it completes<br />var tl = new TimelineLite({onComplete:myFunction});<br /> <br />//now we'll use chaining, but break each step onto a different line for readability...<br />tl.to(element, 1, {left:100})    //tween element's left to 100<br />  .set(element, {opacity:0})    //then set element.opacity to 0.5 immediately<br />  .to(element, 1, {top:50})    //then tween element's top to 50<br />  .call(otherFunction)    //then call otherFunction()<br />  .staggerTo([element1, element2, element3], 1.5, {rotation:45}, 0.25); //finally tween the rotation of element1, element2, and element3 to 45 and stagger the start times by 0.25 seconds</pre><p>The 3rd parameter is the <code>position</code> which controls the placement of the tween in the timeline (by default, it's at the end of the timeline). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a \"+=\" or \"-=\" prefix to offset the insertion point relative to the END of the timeline. For example,<code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after \"myLabel\" or <code>\"myLabel-=3\"</code> to insert it 3 seconds before \"myLabel\". If you define a label that doesn't exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween there which can be quite convenient.<br /></p><pre class='pre-container prettyprint'>tl.set(element, {left:100});  //appends to the end of the timeline<br />tl.set(element, {left:100}, 2);  //appends it at exactly 2 seconds into the timeline (absolute position)<br />tl.set(element, {left:100}, \"+=2\");  //appends it 2 seconds after the end (with a gap of 2 seconds)<br />tl.set(element, {left:100}, \"myLabel\");  //places it at \"myLabel\" (and if \"myLabel\" doesn't exist yet, it's added to the end and then the tween is inserted there)<br />tl.set(element, {left:100}, \"myLabel+=2\");  //places it 2 seconds after \"myLabel\"<br />         </pre>"}},"021452ff672b0275":{"meta":{"keywords":["js.TimelineLite.shiftChildren()"],"title":"shiftChildren()","description":"Shifts the startTime of the timeline&#039;s children by a certain amount and optionally adjusts labels too."},"header":{"content":"<p>Shifts the startTime of the timeline's children by a certain amount and optionally adjusts labels too.</p>"},"parameters":[{"name":"amount","data_type":"Number","description":"<p>Number of seconds (or frames for frames-based timelines) to move each child.</p>\n"},{"name":"adjustLabels","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, the timing of all labels will be adjusted as well.</p>\n"},{"name":"ignoreBeforeTime","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — All children that begin at or after the <code>startAtTime</code> will be affected by the shift (the default is 0, causing all children to be affected). This provides an easy way to splice children into a certain spot on the timeline, pushing only the children after that point back to make room.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Shifts the startTime of the timeline's children by a certain amount and optionally adjusts labels too. This can be useful when you want to prepend children or splice them into a certain spot, moving existing ones back to make room for the new ones.</p>"}},"c67479a40fbed683":{"meta":{"keywords":["js.TimelineLite.staggerFrom()"],"title":"staggerFrom()","description":"Tweens an array of targets from a common set of destination values (using the current values as the destination), but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code."},"header":{"content":"<p>Tweens an array of targets from a common set of destination values (using the current values as the destination), but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code.</p>"},"parameters":[{"name":"targets","data_type":"Array","description":"<p>An array of objects whose properties should be affected. When animating DOM elements, the targets can be: an array of elements, a jQuery object (or similar), or a CSS selector string like “.myClass” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if the timeline is frames-based)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the beginning value for each property that should be tweened as well as any special properties like <code>ease</code>. For example, to tween <code>left</code> from 100 and <code>top</code> from 200 for element1, element2, and element3, staggering their start time by 0.25 seconds and then call <code>myFunction</code> when they last one has finished, do this:<code>myTimeline.staggerFrom([element1, element2, element3], 1, {left:100, top:200}, 0.25, 0, null, myFunction})</code>.</p>\n","related_configuration_object":"980585c43a98afd0"},{"name":"stagger","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Amount of time in seconds (or frames if the timeline is frames-based) to stagger the start time of each tween. For example, you might want to have 5 objects move down 100 pixels while fading out, and stagger the start times by 0.2 seconds &#8211; you could do: <code>myTimeline.staggerTo([element1, element2, element3, element4, element5], 1, {top:\"+=100\", opacity:0}, 0.2)</code>.</p>\n"},{"name":"position","data_type":"*","description":"<p>(default = <code>+=0</code>)<code></code> — Controls the placement of the first tween in the timeline (by default, it&#8217;s the end of the timeline, like &#8220;+=0&#8221;). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a &#8220;+=&#8221; or &#8220;-=&#8221; prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after &#8220;myLabel&#8221; or <code>\"myLabel-=3\"</code> to insert it 3 seconds before &#8220;myLabel&#8221;. If you define a label that doesn&#8217;t exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween there which can be quite convenient. Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p>\n"},{"name":"onCompleteAll","data_type":"Function","description":"<p>(default = <code>null</code>)<code></code> — A function to call as soon as the entire sequence of tweens has completed</p>\n"},{"name":"onCompleteAllParams","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — An array of parameters to pass the <code>onCompleteAll</code> method.</p>\n"},{"name":"onCompleteScope","data_type":"*","description":"<p>The scope for the onCompleteAll function call (what &#8220;this&#8221; should refer to inside that function)</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Tweens an array of targets from a common set of destination values (using the current values as the destination), but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code. For example, let's say you have an array containing references to a bunch of text fields that you'd like to drop into place while fading in, all in a staggered fashion with 0.2 seconds between each tween's start time:<br /></p><pre class='pre-container prettyprint'><br />var textFields = [tf1, tf2, tf3, tf4, tf5];<br />myTimeline.staggerFrom(textFields, 1, {top:\"+=150\"}, 0.2);</pre><p><code>staggerFrom()</code> simply loops through the <code>targets</code> array and creates a <code>from()</code> tween for each object and then inserts it at the appropriate place on a new TimelineLite instance whose onComplete corresponds to the <code>onCompleteAll</code> (if you define one) and then appends that TimelineLite to the timeline (as a nested child).</p><p>Note that if you define an <code>onComplete</code> (or any callback for that matter) in the <code>vars</code> parameter, it will be called for each tween rather than the whole sequence. This can be very useful, but if you want to call a function after the entire sequence of tweens has completed, use the <code>onCompleteAll</code> parameter (the 6th parameter).</p><p>The 5th parameter is the <code>position</code> which controls the placement of the tweens in the timeline (by default, it's at the end of the timeline). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a \"+=\" or \"-=\" prefix to offset the insertion point relative to the END of the timeline. For example,<code>\"+=2\"</code> would place the first tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the first tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the first tween 2 seconds after \"myLabel\" or <code>\"myLabel-=3\"</code> to insert it 3 seconds before \"myLabel\". If you define a label that doesn't exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tweens which can be quite convenient.<br /></p><pre class='pre-container prettyprint'>tl.staggerFrom(myArray, 1, {left:100}, 0.25);  //appends to the end of the timeline<br /> tl.staggerFrom(myArray, 1, {left:100}, 0.25, 2);  //appends at exactly 2 seconds into the timeline (absolute position)<br /> tl.staggerFrom(myArray, 1, {left:100}, 0.25, \"+=2\");  //appends 2 seconds after the end (with a gap of 2 seconds)<br /> tl.staggerFrom(myArray, 1, {left:100}, 0.25, \"myLabel\");  //places at \"myLabel\" (and if \"myLabel\" doesn't exist yet, it's added to the end and then the tweens are inserted there)<br /> tl.staggerFrom(myArray, 1, {left:100}, 0.25, \"myLabel+=2\");  //places 2 seconds after \"myLabel\"</pre><p class=\"p1\">Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p><p>By default, <code>immediateRender</code> is <code>true</code> in <code>from()</code> tweens, meaning that they immediately render their starting state regardless of any delay that is specified. You can override this behavior by passing <code>immediateRender:false</code> in the <code>vars</code> parameter so that it will wait to render until the tween actually begins.</p><h2>Cycle through multiple values</h2><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/0HhjSPVuRHA?vq=hd720\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><p>Instead of defining a single value (like <code>x:100, rotation:90</code>), you can define an Array of values to cycle through (like <code>cycle:{x:[100,-100], rotation:[30,60,90]}</code>) or even use function-based values (like <code>cycle:{x:function() { return Math.random() * 200; }}</code>). The amount of functionality you can pack into a single line of code is staggering (pun intended).</p><p data-height=\"390\" data-theme-id=\"3984\" data-slug-hash=\"MKKJeB\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/MKKJeB/'>TimelineLite.staggerFrom() with Cycle</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><p>*note TimelineLite.staggerFrom() and TimelineMax.staggerFrom() use identical syntax.</p><h3>Parameters: index, target</h3><p>When defining cycle values with functions the functions are passed two parameters:</p><ol><li><strong>index</strong> <i>(integer)</i> - the target's position in the array of targets. For example, if there are 3 <code>&lt;div&gt;</code> elements with the class \".box\", and you <code>tl.staggerFrom(\".box\", ...)</code>, the function would get called 3 times (once for each target) and the index would be <code>0</code> first, then <code>1</code>, and finally <code>2</code>.</li><li><strong>target</strong> <i>(object)</i> - the target itself (the <code>&lt;div&gt;</code> element in this case)</li></ol><h3>Caveats</h3><ul><li>The <code>cycle</code> property is available only in the <code>staggerTo()</code>, <code>staggerFrom()</code>, and <code>staggerFromTo()</code> methods in TweenMax, TimelineLite and TimelineMax.</li><li>the cycle property is available in GSAP 1.18.0+</li></ul>"}},"f125e9affad597cc":{"meta":{"keywords":["js.TimelineLite.staggerFromTo()"],"title":"staggerFromTo()","description":"Tweens an array of targets from and to a common set of values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code."},"header":{"content":"<p>Tweens an array of targets from and to a common set of values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code.</p>"},"parameters":[{"name":"targets","data_type":"Array","description":"<p>An array of objects whose properties should be affected. When animating DOM elements, the targets can be: an array of elements, a jQuery object (or similar), or a CSS selector string like “.myClass” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if the timeline is frames-based)</p>\n"},{"name":"fromVars","data_type":"Object","description":"<p>An object defining the starting value for each property that should be tweened. For example, to tween <code>left</code> from 100 and <code>top</code> from 200, <code>fromVars</code> would look like this: <code>{left:100, top:200}</code>.</p>\n"},{"name":"toVars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like <code>ease</code>. For example, to tween <code>left</code> from 0 to 100 and <code>top</code> from 0 to 200, staggering the start times by 0.2 seconds and then call <code>myFunction</code> when they all complete, do this: <code>myTimeline.staggerFromTo([element1, element2, element3], 1, {left:0, top:0}, {left:100, top:200}, 0.2, 0, null, myFunction});</code></p>\n","related_configuration_object":"980585c43a98afd0"},{"name":"stagger","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Amount of time in seconds (or frames if the timeline is frames-based) to stagger the start time of each tween. For example, you might want to have 5 objects move down 100 pixels while fading out, and stagger the start times by 0.2 seconds &#8211; you could do: <code>myTimeline.staggerTo([element1, element2, element3, element4, element5], 1, {top:\"+=100\", opacity:0}, 0.2)</code>.</p>\n"},{"name":"position","data_type":"*","description":"<p>(default = <code>+=0</code>)<code></code> — Controls the placement of the first tween in the timeline (by default, it&#8217;s the end of the timeline, like &#8220;+=0&#8221;). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a &#8220;+=&#8221; or &#8220;-=&#8221; prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after &#8220;myLabel&#8221; or <code>\"myLabel-=3\"</code> to insert it 3 seconds before &#8220;myLabel&#8221;. If you define a label that doesn&#8217;t exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween there which can be quite convenient. Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p>\n"},{"name":"onCompleteAll","data_type":"Function","description":"<p>(default = <code>null</code>)<code></code> — A function to call as soon as the entire sequence of tweens has completed</p>\n"},{"name":"onCompleteAllParams","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — An array of parameters to pass the <code>onCompleteAll</code> method.</p>\n"},{"name":"onCompleteScope","data_type":"*","description":"<p>The scope for the onCompleteAll function call (what &#8220;this&#8221; should refer to inside that function)</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Tweens an array of targets from and to a common set of values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code. For example, let's say you have an array containing references to a bunch of text fields that you'd like to fade from opacity:1 to opacity:0 in a staggered fashion with 0.2 seconds between each tween's start time:</p><pre class='pre-container prettyprint'>var textFields = [tf1, tf2, tf3, tf4, tf5];<br />myTimeline.staggerFromTo(textFields, 1, {opacity:1}, {opacity:0}, 0.2);</pre><p><code>staggerFromTo()</code> simply loops through the <code>targets</code> array and creates a <code>fromTo()</code> tween for each object and then inserts it at the appropriate place on a new TimelineLite instance whose onComplete corresponds to the <code>onCompleteAll</code> (if you define one) and then appends that TimelineLite to the timeline (as a nested child).</p><p>Note that if you define an <code>onComplete</code> (or any callback for that matter) in the <code>vars</code> parameter, it will be called for each tween rather than the whole sequence. This can be very useful, but if you want to call a function after the entire sequence of tweens has completed, use the <code>onCompleteAll</code> parameter (the 7th parameter).</p><p>The 6th parameter is the <code>position</code> which controls the placement of the tweens in the timeline (by default, it's at the end of the timeline). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a \"+=\" or \"-=\" prefix to offset the insertion point relative to the END of the timeline. For example,<code>\"+=2\"</code> would place the first tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the first tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the first tween 2 seconds after \"myLabel\" or <code>\"myLabel-=3\"</code> to insert it 3 seconds before \"myLabel\". If you define a label that doesn't exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tweens there which can be quite convenient.<br /></p><pre class='pre-container prettyprint'>tl.staggerFromTo(myArray, 1, {left:0}, {left:100}, 0.25);  //appends to the end of the timeline<br />tl.staggerFromTo(myArray, 1, {left:0}, {left:100}, 0.25, 2);  //appends at exactly 2 seconds into the timeline (absolute position)<br />tl.staggerFromTo(myArray, 1, {left:0}, {left:100}, 0.25, \"+=2\");  //appends 2 seconds after the end (with a gap of 2 seconds)<br />tl.staggerFromTo(myArray, 1, {left:0}, {left:100}, 0.25, \"myLabel\");  //places at \"myLabel\" (and if \"myLabel\" doesn't exist yet, it's added to the end and then the tweens are inserted there)<br />tl.staggerFromTo(myArray, 1, {left:0}, {left:100}, 0.25, \"myLabel+=2\");  //places 2 seconds after \"myLabel\"</pre><p class=\"p1\">Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p><p><b>NOTE:</b> by default, <code>immediateRender</code> is <code>true</code> in <code>staggerFromTo()</code> tweens, meaning that they immediately render their starting state regardless of any delay that is specified. This is done for convenience because it is often the preferred behavior when setting things up on the screen to animate into place, but you can override this behavior by passing<code>immediateRender:false</code> in the <code>fromVars</code> or <code>toVars</code> parameter so that it will wait to render the starting values until the tweens actually begin.</p><h2>Cycle through multiple values</h2><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/0HhjSPVuRHA?vq=hd720\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><p>Instead of defining a single value (like <code>x:100, rotation:90</code>), you can define an Array of values to cycle through (like <code>cycle:{x:[100,-100], rotation:[30,60,90]}</code>) or even use function-based values (like <code>cycle:{x:function() { return Math.random() * 200; }}</code>). The amount of functionality you can pack into a single line of code is staggering (pun intended).</p><p data-height=\"390\" data-theme-id=\"3984\" data-slug-hash=\"QyydjO\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/QyydjO/'>TimelineMax.staggerFromTo() with Cycle</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><p>*note TimelineLite.staggerFromTo() and TimelineMax.staggerFromTo() use identical syntax.</p><h3>Parameters: index, target</h3><p>When defining cycle values with functions the functions are passed two parameters:</p><ol><li><strong>index</strong> <i>(integer)</i> - the target's position in the array of targets. For example, if there are 3 <code>&lt;div&gt;</code> elements with the class \".box\", and you <code>tl.staggerFromTo(\".box\", ...)</code>, the function would get called 3 times (once for each target) and the index would be <code>0</code> first, then <code>1</code>, and finally <code>2</code>.</li><li><strong>target</strong> <i>(object)</i> - the target itself (the <code>&lt;div&gt;</code> element in this case)</li></ol><h3>Caveats</h3><ul><li>The <code>cycle</code> property is available only in the <code>staggerTo()</code>, <code>staggerFrom()</code>, and <code>staggerFromTo()</code> methods in TweenMax, TimelineLite and TimelineMax.</li><li>the cycle property is available in GSAP 1.18.0+</li></ul>"}},"85fd7bd3a68921cd":{"meta":{"keywords":["js.TimelineLite.staggerTo()"],"title":"staggerTo()","description":"Tweens an array of targets to a common set of destination values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code."},"header":{"content":"<p>Tweens an array of targets to a common set of destination values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code.</p>"},"parameters":[{"name":"targets","data_type":"Array","description":"<p>An array of objects whose properties should be affected. When animating DOM elements, the targets can be: an array of elements, a jQuery object (or similar), or a CSS selector string like “.myClass” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if the timeline is frames-based)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like <code>ease</code>. For example, to tween <code>left</code> to 100 and <code>top</code>to 200 for element1, element2, and element3, staggering their start time by 0.25 seconds and then call <code>myFunction</code> when they last one has finished, do this:<code>myTimeline.staggerTo([element1, element2, element3], 1, {left:100, top:200}, 0.25, 0, null, myFunction})</code>.</p>\n","related_configuration_object":"980585c43a98afd0"},{"name":"stagger","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Amount of time in seconds (or frames if the timeline is frames-based) to stagger the start time of each tween. For example, you might want to have 5 objects move down 100 pixels while fading out, and stagger the start times by 0.2 seconds &#8211; you could do: <code>myTimeline.staggerTo([element1, element2, element3, element4, element5], 1, {top:\"+=100\", opacity:0}, 0.2)</code>.</p>\n"},{"name":"position","data_type":"*","description":"<p>(default = <code>+=0</code>)<code></code> — Controls the placement of the first tween in the timeline (by default, it&#8217;s the end of the timeline, like &#8220;+=0&#8221;). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a &#8220;+=&#8221; or &#8220;-=&#8221; prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after &#8220;myLabel&#8221; or <code>\"myLabel-=3\"</code> to insert it 3 seconds before &#8220;myLabel&#8221;. If you define a label that doesn&#8217;t exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween there which can be quite convenient. Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p>\n"},{"name":"onCompleteAll","data_type":"Function","description":"<p>(default = <code>null</code>)<code></code> — A function to call as soon as the entire sequence of tweens has completed</p>\n"},{"name":"onCompleteAllParams","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — An array of parameters to pass the <code>onCompleteAll</code> method.</p>\n"},{"name":"onCompleteScope","data_type":"*","description":"<p>The scope for the onCompleteAll function call (what &#8220;this&#8221; should refer to inside that function)</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Tweens an array of targets to a common set of destination values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code. For example, let's say you have an array containing references to a bunch of text fields that you'd like to fall away and fade out in a staggered fashion with 0.2 seconds between each tween's start time:</p><pre class='pre-container prettyprint'>var textFields = [tf1, tf2, tf3, tf4, tf5];<br />myTimeline.staggerTo(textFields, 1, {top:\"+=150\", ease:CubicIn.ease}, 0.2);</pre><p><code>staggerTo()</code> simply loops through the <code>targets</code> array and creates a <code>to()</code> tween for each object and then inserts it at the appropriate place on a new TimelineLite instance whose onComplete corresponds to the <code>onCompleteAll</code> (if you define one) and then appends that TimelineLite to the timeline (as a nested child).</p><p>Note that if you define an <code>onComplete</code> (or any callback for that matter) in the <code>vars</code> parameter, it will be called for each tween rather than the whole sequence. This can be very useful, but if you want to call a function after the entire sequence of tweens has completed, use the <code>onCompleteAll</code> parameter (the 6th parameter).</p><p>The 5th parameter is the <code>position</code> which controls the placement of the tweens in the timeline (by default, it's at the end of the timeline). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a \"+=\" or \"-=\" prefix to offset the insertion point relative to the END of the timeline. For example,<code>\"+=2\"</code> would place the first tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the first tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the first tween 2 seconds after \"myLabel\" or <code>\"myLabel-=3\"</code> to insert it 3 seconds before \"myLabel\". If you define a label that doesn't exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tweens which can be quite convenient.<br /></p><pre class='pre-container prettyprint'>tl.staggerTo(myArray, 1, {left:100}, 0.25);  //appends to the end of the timeline<br />tl.staggerTo(myArray, 1, {left:100}, 0.25, 2);  //appends at exactly 2 seconds into the timeline (absolute position)<br />tl.staggerTo(myArray, 1, {left:100}, 0.25, \"+=2\");  //appends 2 seconds after the end (with a gap of 2 seconds)<br />tl.staggerTo(myArray, 1, {left:100}, 0.25, \"myLabel\");  //places at \"myLabel\" (and if \"myLabel\" doesn't exist yet, it's added to the end and then the tweens are inserted there)<br />tl.staggerTo(myArray, 1, {left:100}, 0.25, \"myLabel+=2\");  //places 2 seconds after \"myLabel\"</pre><p class=\"p1\">Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p><p class=\"codepen\" data-height=\"260\" data-theme-id=\"3984\" data-slug-hash=\"JwfvL\" data-default-tab=\"result\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/JwfvL/\">TimelineLite.staggerTo()</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script src=\"http://codepen.io/assets/embed/ei.js\" async=\"\"></script></p><h2>Cycle through multiple values</h2><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/0HhjSPVuRHA?vq=hd720\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><p>Instead of defining a single value (like <code>x:100, rotation:90</code>), you can define an Array of values to cycle through (like <code>cycle:{x:[100,-100], rotation:[30,60,90]}</code>) or even use function-based values (like <code>cycle:{x:function() { return Math.random() * 200; }}</code>). The amount of functionality you can pack into a single line of code is staggering (pun intended).</p><p data-height=\"390\" data-theme-id=\"3984\" data-slug-hash=\"wMMgoe\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/wMMgoe/'>TimelineMax.staggerTo() with Cycle</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><p>*note TimelineLite.staggerTo() and TimelineMax.staggerTo() use identical syntax.</p><h3>Parameters: index, target</h3><p>When defining cycle values with functions the functions are passed two parameters:</p><ol><li><strong>index</strong> <i>(integer)</i> - the target's position in the array of targets. For example, if there are 3 <code>&lt;div&gt;</code> elements with the class \".box\", and you <code>tl.staggerTo(\".box\", ...)</code>, the function would get called 3 times (once for each target) and the index would be <code>0</code> first, then <code>1</code>, and finally <code>2</code>.</li><li><strong>target</strong> <i>(object)</i> - the target itself (the <code>&lt;div&gt;</code> element in this case)</li></ol><h3>Caveats</h3><ul><li>The <code>cycle</code> property is available only in the <code>staggerTo()</code>, <code>staggerFrom()</code>, and <code>staggerFromTo()</code> methods in TweenMax, TimelineLite and TimelineMax.</li><li>the cycle property is available in GSAP 1.18.0+</li></ul>"}},"dd5daf294b523c5b":{"meta":{"keywords":["js.TimelineLite.to()"],"title":"to()","description":"Adds a TweenLite.to() tween to the end of the timeline (or elsewhere using the &quot;position&quot; parameter) - this is a convenience method that accomplishes exactly the same thing as add( TweenLite.to(...) ) but with less code."},"header":{"content":"<p>Adds a TweenLite.to() tween to the end of the timeline (or elsewhere using the \"position\" parameter) - this is a convenience method that accomplishes exactly the same thing as add( TweenLite.to(...) ) but with less code.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties should be affected. When animating DOM elements, the target can be: a single element, an array of elements, a jQuery object (or similar), or a CSS selector string like “#feature” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if the timeline is frames-based)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like <code>onComplete</code>, <code>ease</code>, etc. For example, to tween element&#8217;s <code>left</code> to 100 and element&#8217;s <code>top</code> to 200 and then call <code>myFunction</code>, do this: <code>myTimeline.to(element, 1, {left:100, top:200, onComplete:myFunction})</code>.</p>\n"},{"name":"position","data_type":"*","description":"<p>(default = <code>+=0</code>)<code></code> — Controls the placement of the tween in the timeline (by default, it&#8217;s the end of the timeline, like &#8220;+=0&#8221;). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a &#8220;+=&#8221; or &#8220;-=&#8221; prefix to offset the insertion point relative to the END of the timeline. For example, <code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after &#8220;myLabel&#8221; or <code>\"myLabel-=3\"</code> to insert it 3 seconds before &#8220;myLabel&#8221;. If you define a label that doesn&#8217;t exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween there which can be quite convenient. Be sure to read our tutorial <a href=\"http://greensock.com/position-parameter\"><span class=\"s1\">Understanding the Position Parameter</span></a> which includes interactive timeline visualizations and a video.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Adds a <code>TweenLite.to()</code> tween to the end of the timeline (or elsewhere using the \"position\" parameter) - this is a convenience method that accomplishes exactly the same thing as <code>add( TweenLite.to(...) )</code> but with less code. In other words, the following two lines produce identical results:</p><pre class='pre-container prettyprint'>myTimeline.add( TweenLite.to(element, 1, {left:100, opacity:0.5}) );<br />myTimeline.to(element, 1, {left:100, opacity:0.5});</pre><p>Keep in mind that you can chain these calls together and use other convenience methods like <code>fromTo(), call(), set(), staggerTo()</code>, etc. to build out sequences very quickly:<br /></p><pre class='pre-container prettyprint'>//create a timeline that calls myFunction() when it completes<br />var tl = new TimelineLite({onComplete:myFunction});<br /> <br />tl.to(element, 1, {left:100})        //tween element's \"left\" property to 100<br />  .to(element, 1, {top:50}, \"-=0.25\")    //then tween element's \"top\" property to 50, starting 0.25 seconds before the previous one ends<br />  .set(element, {opacity:0})        //then set element's opacity to 0.5 immediately<br />  .call(otherFunction)        //then call otherFunction()<br />  .staggerTo([e1, e2, e3], 1.5, {rotation:45}, 0.25); //finally tween the rotation of e1, e2, and e3 to 45 and stagger the start times by 0.25 seconds</pre><p>If you don't want to append the tween and would rather have precise control of the insertion point, you can use the additional <code>position</code> parameter. Or use a regular <code>add()</code> like<code>tl.add( TweenLite.to(element, 1, {left:100}), 2.75)</code>.</p><p>The 4th parameter is the <code>position</code> which controls the placement of the tween in the timeline (by default, it's at the end of the timeline). Use a number to indicate an absolute time in terms of seconds (or frames for frames-based timelines), or you can use a string with a \"+=\" or \"-=\" prefix to offset the insertion point relative to the END of the timeline. For example,<code>\"+=2\"</code> would place the tween 2 seconds after the end, leaving a 2-second gap. <code>\"-=2\"</code> would create a 2-second overlap. You may also use a label like <code>\"myLabel\"</code> to have the tween inserted exactly at the label or combine a label and a relative offset like <code>\"myLabel+=2\"</code> to insert the tween 2 seconds after \"myLabel\" or <code>\"myLabel-=3\"</code> to insert it 3 seconds before \"myLabel\". If you define a label that doesn't exist yet, it will <b>automatically be added to the end of the timeline</b> before inserting the tween which can be quite convenient.<br /></p><pre class='pre-container prettyprint'>tl.to(element, 1, {left:100});  //adds to the end of the timeline<br />tl.to(element, 1, {left:100}, 2);  //adds it at exactly 2 seconds into the timeline (absolute position)<br />tl.to(element, 1, {left:100}, \"+=2\");  //adds it 2 seconds after the end (with a gap of 2 seconds)<br />tl.to(element, 1, {left:100}, \"myLabel\");  //places it at \"myLabel\" (and if \"myLabel\" doesn't exist yet, it's added to the end and then the tween is inserted there)<br />tl.to(element, 1, {left:100}, \"myLabel+=2\");  //places it 2 seconds after \"myLabel\"</pre>"}},"e6e77ed616cdbcd0":{"meta":{"keywords":["js.TimelineLite.totalDuration()"],"title":"totalDuration()","description":"[override] Gets the timeline&#039;s total duration or, if used as a setter, adjusts the timeline&#039;s timeScale to fit it within the specified duration."},"header":{"content":"<p>[override] Gets the timeline's total duration or, if used as a setter, adjusts the timeline's timeScale to fit it within the specified duration.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Gets the timeline's <b>total</b> duration or, if used as a setter, adjusts the timeline's <code>timeScale</code> to fit it within the specified duration. For example, if a TimelineMax instance has a <code>duration</code> of 2 and a <code>repeat</code> of 3, its <code>totalDuration</code> would be 8 (one standard play plus 3 repeats equals 4 total cycles).</p><p>Due to the fact that a timeline's <code>totalDuration</code> is dictated by its contents, using this method as a setter will simply cause the <code>timeScale</code> to be adjusted to fit the current contents into the specified <code>totalDuration</code>. For example, if there are 20-seconds worth of tweens in the timeline and you do <code>myTimeline.totalDuration(10)</code>, the <code>timeScale</code> would be changed to 2. If you checked the <code>totalDuration</code> again immediately after that, it would still return 20 because technically that is how long all the child tweens/timelines are but upon playback the speed would be doubled because of the <code>timeScale</code>.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myAnimation.totalDuration(2).play(1);</code><br /></p><pre class='pre-container prettyprint'>var ctd = myAnimation.totalDuration(); //gets current total duration<br />myAnimation.totalDuration( 20 ); //adjusts the timeScale so that myAnimation fits into exactly 20 seconds on its parent timeline</pre>"}},"d3b7ad527e13b7fa":{"meta":{"keywords":["js.TimelineLite.useFrames()"],"title":"useFrames()","description":"[READ-ONLY] If true, the timeline&#039;s timing mode is frames-based instead of seconds."},"header":{"content":"<p>[READ-ONLY] If true, the timeline's timing mode is frames-based instead of seconds.</p>"},"parameters":[],"returns":{"type":"Boolean","content":""},"details":{"content":"<p>[READ-ONLY] If true, the timeline's timing mode is frames-based instead of seconds. This can only be set to true by passing useFrames:true in the vars parameter of the constructor, or by nesting this timeline in another whose timing mode is frames-based. An animation's timing mode is always determined by its parent timeline).</p>"}},"32bc2e8f667c28b7":{"meta":{"keywords":["js.TimelineMax","Animation","Sequencing"],"title":"TimelineMax","description":"TimelineMax extends TimelineLite, offering exactly the same functionality plus useful (but non-essential) features like repeat, repeatDelay, yoyo, currentLabel(), tweenTo(), tweenFromTo(), getLabelAfter(), getLabelBefore(), getActive() and more."},"header":{"content":"<p>TimelineMax extends TimelineLite, offering exactly the same functionality plus useful (but non-essential) features like repeat, repeatDelay, yoyo, currentLabel(), addCallback(), removeCallback(), tweenTo(), tweenFromTo(), getLabelAfter(), getLabelBefore(), getActive() (and probably more in the future). It is the ultimate sequencing tool that acts like a container for tweens and other timelines, making it simple to control them as a whole and precisely manage their timing. Without TimelineMax, building complex sequences would be far more cumbersome because you'd need to use the <code>delay</code> special property for every tween which would make future edits far more tedious. Here is a basic example:<br /></p><pre class='pre-container prettyprint'>TweenLite.to(element, 1, {left:100});<br />TweenLite.to(element, 1, {top:50, delay:1});<br />TweenLite.to(element, 1, {opacity:0, delay:2});</pre><p>The above code animates the element's \"left\" css property to 100, then \"top\" to 50, and finally \"opacity\" to 0 (notice the <code>delay</code> in all but the first tween). But what if you wanted to increase the duration of the first tween to 1.5? You'd need to adjust every delay thereafter. And what if you want to <code>pause()</code> the whole sequence or <code>restart()</code> it or <code>reverse()</code> it on-the-fly or repeat it twice? This becomes quite messy (or flat-out impossible), but TimelineMax makes it incredibly simple:<br /></p><pre class='pre-container prettyprint'>var tl = new TimelineMax({repeat:2, repeatDelay:1});<br />tl.add( TweenLite.to(element, 1, {left:100}) );<br />tl.add( TweenLite.to(element, 1, {top:50}) );<br />tl.add( TweenLite.to(element, 1, {opacity:0}) );<br /> <br />//then later, control the whole thing...<br />tl.pause();<br />tl.resume();<br />tl.seek(1.5);<br />tl.reverse();<br />...</pre><p>Or use the convenient <code>to()</code> method and chaining to make it even shorter:<br /></p><pre class='pre-container prettyprint'>var tl = new TimelineMax();<br />tl.to(element, 1, {left:100}).to(element, 1, {top:50}).to(element, 1, {opacity:0});</pre><p>Now you can feel free to adjust any of the tweens without worrying about trickle-down changes to delays. Increase the duration of that first tween and everything automatically adjusts.</p><p><strong>Here are some other benefits and features of TimelineMax:</strong></p><ul><li>Things can overlap on the timeline as much as you want. You have complete control over where tweens/timelines are placed. Most other animation tools can only do basic one-after-the-other sequencing but can't allow things to overlap. Imagine appending a tween that moves an object and you want it to start fading out 0.5 seconds before the end of that tween? With TimelineMax it's easy.</li><li>Add labels, callbacks, play(), stop(), seek(), restart(), and even reverse() smoothly anytime.</li><li>Nest timelines within timelines as deeply as you want. This means you can modularize your code and make it far more efficient. Imagine building your app with common animateIn() and animateOut() methods that return a tween or timeline instance, then you can string things together like <code>myTimeline.add( myObject.animateIn() ).add( myObject.animateOut(), \"+=4\").add( myObject2.animateIn(), \"-=0.5\")...</code></li><li>Speed up or slow down the entire timeline with its <code>timeScale()</code> method. You can even tween it to gradually speed up or slow down the animation smoothly.</li><li>Get or set the progress of the timeline using its <code>progress()</code> or <code>totalProgress()</code> methods. For example, to skip to the halfway point, set <code>myTimeline.progress(0.5);</code></li><li>Tween the <code>time(), totalTime(), progress(),</code> or <code>totalProgress()</code> to fastforward/rewind the timeline. You could even attach a slider to one of these to give the user the ability to drag forward/backward through the timeline.</li><li>Add <code>onComplete, onStart, onUpdate, onRepeat</code> and/or <code>onReverseComplete</code> callbacks using the constructor's <code>vars</code> object like <code>var tl = new TimelineMax({onComplete:myFunction});</code></li><li>Kill the tweens of a particular object inside the timeline with <code>kill(null, target)</code> or get the tweens of an object with <code>getTweensOf()</code> or get all the tweens/timelines in the timeline with <code>getChildren()</code></li><li>Set the timeline to repeat any number of times or indefinitely. You can even set a delay between each repeat cycle and/or cause the repeat cycles to yoyo, appearing to reverse direction every other cycle.</li><li>get the active tweens in the timeline with getActive().</li><li>By passing <code>useFrames:true</code> in the <code>vars</code> parameter, you can base the timing on frames instead of seconds. Please note, however, that the timeline's timing mode dictates its childrens' timing mode as well.</li><li>Get the <code>currentLabel()</code> or find labels at various positions in the timeline using <code>getLabelAfter()</code> and <code>getLabelBefore()</code></li><li>You can export all the tween/timelines from the root (master) timeline anytime into a TimelineLite instance using <code>TimelineLite.exportRoot()</code> so that you can <code>pause()</code> them all or<code>reverse()</code> or alter their <code>timeScale</code>, etc. without affecting tweens/timelines that you create in the future. Imagine a game that has all its animation driven by the GreenSock Animation Platform and it needs to pause or slow down while a status screen pops up. Very easy.</li></ul><p><b>Special Properties and Callbacks</b></p><p><span style=\"line-height: 1.5em;\">You can optionally use the constructor's </span><code style=\"line-height: 1.5em;\">vars</code><span style=\"line-height: 1.5em;\"> parameter to configure a TimelineMax with a variety of options.</span></p><pre class='pre-container prettyprint'>new TimelineMax({onComplete:myFunction, repeat:2, repeatDelay:1, yoyo:true});</pre><p>All TimelineMax vars' properties are described below.</p><p>[config id=\"7bd7f88198b01fd3\"]</p><p><code></code>Sample code:</p><pre class='pre-container prettyprint'>//create the timeline that repeats 3 times with 1 second between each repeat and then calls myFunction() when it completes<br />var tl = new TimelineMax({repeat:3, repeatDelay:1, onComplete:myFunction});<br />//add a tween<br />tl.add( TweenLite.to(element, 1, {left:200, top:100}) );<br />        <br />//add another tween at the end of the timeline (makes sequencing easy)<br />tl.add( TweenLite.to(element, 0.5, {opacity:0}) );<br /> <br />//append a tween using the convenience method to() (shorter syntax) and offset it by 0.5 seconds<br />tl.to(element, 1, {rotation:30}, \"+=0.5\");<br />         <br />//reverse anytime<br />tl.reverse();<br />//Add a \"spin\" label 3-seconds into the timeline<br />tl.addLabel(\"spin\", 3);<br />//insert a rotation tween at the \"spin\" label (you could also define the insertion point as the time instead of a label)<br />tl.add( new TweenLite(element, 2, {rotation:\"+=360\"}), \"spin\");<br />    <br />//go to the \"spin\" label and play the timeline from there<br />tl.play(\"spin\");<br />//nest another TimelineMax inside your timeline...<br />var nested = new TimelineMax();<br />nested.to(element2, 1, {left:200}));<br />tl.add(nested);</pre><p><b>How do timelines work? What are the mechanics like?</b></p><p>Every animation (tween and timeline) is placed on a parent timeline (except the 2 root timelines - there's one for normal tweens and another for \"useFrames\" ones). In a sense, they all have their own playheads (that's what its \"time\" refers to, or \"totalTime\" which is identical except that it includes repeats and repeatDelays) but generally they're not independent because they're sitting on a timeline whose playhead moves. When the parent's playhead moves to a new position, it updates the childrens' too.</p><p>When a timeline renders at a particular time, it loops through its children and says \"okay, you should render as if your playhead is at ____\" and if that child is a timeline with children, it does the same to its children, right on down the line.</p><p>The only exception is when the tween/timeline is paused in which case its internal playhead acts like it's \"locked\". So in that case, it's possible (likely in fact) that the child's playhead would<b>not</b> be synced with the parent's. When you unpause it (<code>resume()</code>), it essentially picks it up and moves it so that its internal playhead is synchronized with wherever the parent's playhead is at that moment, thus things play perfectly smoothly. That is, unless the timeline's <code>smoothChildTiming</code> is to <code>false</code> in which case it won't move - its <code>startTime</code> will remain locked to where it was.</p><p>So basically, when <code>smoothChildTiming</code> is <code>true</code>, the engine will rearrange things on the fly to ensure the playheads line up so that playback is seamless and smooth. The same thing happens when you <code>reverse()</code> or alter the <code>timeScale</code>, etc. But sometimes you might not want that behavior - you prefer to have tight control over exactly where your tweens line up in the timeline - that's when <code>smoothChildTiming:false</code> is handy.</p><p>One more example: let's say you've got a 10-second tween that's just sitting on the root timeline and you're 2-seconds into the tween. Let's assume it started at exactly 0 on the root to make this easy, and then when it's at 2-seconds, you do <code>tween.seek(5)</code>. The playhead of the root isn't affected - it keeps going exactly as it always did, but in order to make that tween jump to 5 seconds and play appropriately, the tween's <code>startTime</code> gets changed to -3. That way, the tween's playhead and the root playhead are perfectly aligned.</p>"}},"7d83cb2ee0afc5e8":{"meta":{"keywords":["js.TimelineMax.TimelineMax()"],"title":"TimelineMax()","description":"Constructor."},"header":{"content":"<p>Constructor.</p>"},"parameters":[{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — The <code>vars</code> parameter allows you to configure a TimelineMax with a variety of options using the following syntax:</p>\n<p><code>new TimelineMax({repeat:1, onRepeat:repeatHandler, paused:true});</code></p>\n<p>&nbsp;</p>\n","related_configuration_object":"7bd7f88198b01fd3"}],"returns":{},"details":{"content":"<p>Constructor used to instantiate a new TimelineMax instance.</p>"}},"bec60f6cd60ff057":{"meta":{"keywords":["js.TimelineMax.addCallback()"],"title":"addCallback()","description":"Inserts a callback at a particular position."},"header":{"content":"<p>Inserts a callback at a particular position.</p>"},"parameters":[{"name":"callback","data_type":"Function","description":"<p>The function to be called</p>\n"},{"name":"position","data_type":"*","description":"<p>The time in seconds (or frames for frames-based timelines) or label at which the callback should be inserted. For example, <code>myTimeline.addCallback(myFunction, 3)</code> would call myFunction() 3 seconds into the timeline, and <code>myTimeline.addCallback(myFunction, \"myLabel\")</code> would call it at the &#8220;myLabel&#8221; label.<code>myTimeline.addCallback(myFunction, \"+=2\")</code> would insert the callback 2 seconds after the end of the timeline.</p>\n"},{"name":"params","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — An Array of parameters to pass the callback</p>\n"},{"name":"scope","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The scope in which the callback should be called (basically, what &#8220;this&#8221; refers to in the function). NOTE: this parameter only pertains to the JavaScript and AS2 versions; it is omitted in AS3.</p>\n"}],"returns":{"type":"TimelineMax","content":"<p>self (makes chaining easier)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Inserts a callback at a particular position. The callback is technically considered a zero-duration tween, so if you <code>getChildren()</code> there will be a tween returned for each callback. You can discern a callback from other tweens by the fact that its target is a function matching its <code>vars.onComplete</code> and its <code>duration</code> is zero.</p><p>If your goal is to append the callback to the end of the timeline, it would be easier (more concise) to use the <code>call()</code> method. Technically the <code>add()</code> method can accommodate adding a callback too (like <code>myTimeline.add(myFunction, 2)</code> or <code>myTimeline.add(myFunction, \"+=2\")</code>) but <code>add()</code> doesn't accommodate parameters.</p>"}},"6265da364503c653":{"meta":{"keywords":["js.TimelineMax.currentLabel()"],"title":"currentLabel()","description":"Gets the closest label that is at or before the current time, or jumps to a provided label (behavior depends on whether or not you pass a parameter to the method)."},"header":{"content":"<p>Gets the closest label that is at or before the current time, or jumps to a provided label (behavior depends on whether or not you pass a parameter to the method).</p>"},"parameters":[{"name":"value","data_type":"String","description":"<p>(default = <code>null</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Gets the closest label that is at or before the current time, or jumps to a provided label (behavior depends on whether or not you pass a parameter to the method).</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>"}},"10d088592b8a6983":{"meta":{"keywords":["js.TimelineMax.getActive()"],"title":"getActive()","description":"Returns the tweens/timelines that are currently active in the timeline, meaning the timeline&#039;s playhead is positioned on the child tween/timeline and the child isn&#039;t paused."},"header":{"content":"<p>Returns the tweens/timelines that are currently active in the timeline, meaning the timeline's playhead is positioned on the child tween/timeline and the child isn't paused.</p>"},"parameters":[{"name":"nested","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — Determines whether or not tweens and/or timelines that are inside nested timelines should be returned. If you only want the &#8220;top level&#8221; tweens/timelines, set this to <code>false</code>.</p>\n"},{"name":"tweens","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — Determines whether or not tweens (TweenLite and TweenMax instances) should be included in the results</p>\n"},{"name":"timelines","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — Determines whether or not child timelines (TimelineLite and TimelineMax instances) should be included in the results</p>\n"}],"returns":{"type":"Array","content":"<p>an Array of active tweens/timelines</p>\n"},"details":{"content":"<p>Returns the tweens/timelines that are currently active in the timeline, meaning the timeline's playhead is positioned on the child tween/timeline and the child isn't paused.</p>"}},"05f5280e21743f35":{"meta":{"keywords":["js.TimelineMax.getLabelAfter()"],"title":"getLabelAfter()","description":"Returns the next label (if any) that occurs after the time parameter."},"header":{"content":"<p>Returns the next label (if any) that occurs after the time parameter.</p>"},"parameters":[{"name":"time","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Time after which the label is searched for. If you do not pass a time in, the current time will be used.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"String","content":"<p>Name of the label that is after the time passed to getLabelAfter()</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Returns the next label (if any) that occurs <b>after</b> the <code>time</code> parameter. It makes no difference if the timeline is reversed (\"after\" means later in the timeline's local time zone). A label that is positioned exactly at the same time as the <code>time</code> parameter will be ignored.</p><p>You could use <code>getLabelAfter()</code> in conjunction with <code>tweenTo()</code> to make the timeline tween to the next label like this:<br /></p><pre class='pre-container prettyprint'>myTimeline.tweenTo( myTimeline.getLabelAfter() );</pre>"}},"38ba67959f173bc5":{"meta":{"keywords":["js.TimelineMax.getLabelBefore()"],"title":"getLabelBefore()","description":"Returns the previous label (if any) that occurs before the time parameter."},"header":{"content":"<p>Returns the previous label (if any) that occurs before the time parameter.</p>"},"parameters":[{"name":"time","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Time before which the label is searched for. If you do not pass a time in, the current time will be used.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"String","content":"<p>Name of the label that is before the time passed to getLabelBefore()</p>\n"},"details":{"content":"<p>Returns the previous label (if any) that occurs <b>before</b> the <code>time</code> parameter. It makes no difference if the timeline is reversed (\"before\" means earlier in the timeline's local time zone). A label that is positioned exactly at the same time as the <code>time</code> parameter will be ignored.</p><p>You could use <code>getLabelBefore()</code> in conjunction with <code>tweenTo()</code> to make the timeline tween back to the previous label like this:<br /></p><pre class='pre-container prettyprint'>myTimeline.tweenTo( myTimeline.getLabelBefore() );</pre>"}},"22c0e0776a5fa894":{"meta":{"keywords":["js.TimelineMax.getLabelsArray()"],"title":"getLabelsArray()","description":"Returns an Array of label objects, each with a &quot;time&quot; and &quot;name&quot; property, in the order that they occur in the timeline."},"header":{"content":"<p>Returns an Array of label objects, each with a \"time\" and \"name\" property, in the order that they occur in the timeline.</p>"},"parameters":[],"returns":{"type":"Array","content":"<p>An array of generic objects (one for each label) with a &#8220;name&#8221; property and a &#8220;time&#8221; property in the order they occur in the TimelineMax.</p>\n"},"details":{"content":"<p>Returns an Array of label objects, each with a \"time\" and \"name\" property, in the order that they occur in the timeline. For example, to loop through all the labels in order and <code>console.log()</code> them to the screen:</p><div><pre class='pre-container prettyprint'>var labels = myTimeline.getLabelsArray();<br />for (var i = 0; i < labels.length; i++) {<br />    console.log(\"label name: \" + labels[i].name + \", time: \" + labels[i].time);<br />}</pre></div><p>Note: changing the values in this array will have no effect on the actual labels inside the TimelineMax. To add/remove labels, use the corresponding methods (<code>addLabel(), removeLabel()</code>).</p>"}},"7ae217fd46c941b8":{"meta":{"keywords":["js.TimelineMax.invalidate()"],"title":"invalidate()","description":"[override] Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values."},"header":{"content":"<p>[override] Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values.</p>"},"parameters":[],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values. When you <code>invalidate()</code> an animation, it will be re-initialized the next time it renders and its <code>vars</code> object will be re-parsed. The timing of the animation (duration, startTime, delay) will not be affected.</p><p>Another example would be if you have a <code>TweenMax(mc, 1, {x:100, y:100})</code> that ran when mc.x and mc.y were initially at 0, but now mc.x and mc.y are 200 and you want them tween to 100 again, you could simply <code>invalidate()</code> the tween and <code>restart()</code> it. Without invalidating first, restarting it would cause the values jump back to 0 immediately (where they started when the tween originally began). When you invalidate a TimelineLite/TimelineMax, it automatically invalidates all of its children.</p>"}},"e87195ea10d96698":{"meta":{"keywords":["js.TimelineMax.progress()"],"title":"progress()","description":"[override] Gets or sets the timeline&#039;s progress which is a value between 0 and 1 indicating the position of the virtual playhead (excluding repeats) where 0 is at the beginning, 0.5 is halfway complete, and 1 is complete."},"header":{"content":"<p>[override] Gets or sets the timeline's progress which is a value between 0 and 1 indicating the position of the virtual playhead (excluding repeats) where 0 is at the beginning, 0.5 is halfway complete, and 1 is complete.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p><code>Boolean</code> (default = <code>false</code>)<code></code> — If <code>true</code>, no events or callbacks will be triggered when the playhead moves to the new position.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Gets or sets the timeline's progress which is a value between 0 and 1 indicating the position of the virtual playhead (<b>excluding</b> repeats) where 0 is at the beginning, 0.5 is halfway complete, and 1 is complete. If the timeline has a non-zero <code>repeat</code> defined, <code>progress</code> and <code>totalProgress</code> will be different because <code>progress</code> doesn't include any repeats or repeatDelays whereas <code>totalProgress</code> does. For example, if a TimelineMax instance is set to repeat once, at the end of the first cycle <code>totalProgress</code> would only be 0.5 whereas<code>progress</code> would be 1. If you watched both properties over the course of the entire animation, you'd see <code>progress</code> go from 0 to 1 twice (once for each cycle) in the same time it takes the <code>totalProgress</code> to go from 0 to 1 once.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myTimeline.progress(0.5).play();</code><br /></p><pre class='pre-container prettyprint'>var progress = myTimeline.progress(); //gets current progress<br />myTimeline.progress( 0.25 ); //sets progress to one quarter finished</pre>"}},"ba03755004151a9a":{"meta":{"keywords":["js.TimelineMax.removeCallBack()"],"title":"removeCallback()","description":"Removes a callback from a particular position."},"header":{"content":"<p>Removes a callback from a particular position.</p>"},"parameters":[{"name":"callback","data_type":"Function","description":"<p>callback function to be removed</p>\n"},{"name":"timeOrLabel","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — the time in seconds (or frames for frames-based timelines) or label from which the callback should be removed. For example,<code>myTimeline.removeCallback(myFunction, 3)</code> would remove the callback from 3-seconds into the timeline, and <code>myTimeline.removeCallback(myFunction, \"myLabel\")</code>would remove it from the &#8220;myLabel&#8221; label, and <code>myTimeline.removeCallback(myFunction, null)</code> would remove ALL callbacks of that function regardless of where they are on the timeline.</p>\n"}],"returns":{"type":"TimelineMax","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Removes a callback from a particular position. If the <code>timeOrLabel</code> parameter is null, all callbacks of that function are removed from the timeline.</p>"}},"58e2f543b70f3422":{"meta":{"keywords":["js.TimelineMax.removePause()"],"title":"removePause()","description":"Removes pauses that were added to a timeline via TimelineMax.addPause(). "},"header":{"content":"<p>Removes pauses that were added to a timeline via TimelineMax.addPause(). </p>"},"parameters":[{"name":"position","data_type":"*","description":"<p>the time (or label) where the pause should be removed from.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier).</p>\n"},"details":{"content":"<p>Removes pauses that were added to a timeline via <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineMax.addPause()\"><span data-link-id=\"b15c1fc9e7c9418c-inherited-32bc2e8f667c28b7\"></span></span>. </p><pre class='pre-container prettyprint'><br />var tl = new TimelineMax();<br />//insert a pause at exactly 2 seconds into the timeline<br />tl.to(obj, 1, {x:100})<br />  .addPause() //added at time of 1<br />  .to(obj, 1, {opacity:0});<br /> <br />//later on remove the pause<br />tl.removePause(1);<br /></pre><p>*note removePause() is only available in TimelineMax.</p>"}},"01b34bc2697e9225":{"meta":{"keywords":["js.TimelineMax.repeat()"],"title":"repeat()","description":"Gets or sets the number of times that the timeline should repeat after its first iteration."},"header":{"content":"<p>Gets or sets the number of times that the timeline should repeat after its first iteration.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Gets or sets the number of times that the timeline should repeat after its first iteration. For example, if <code>repeat</code> is 1, the timeline will play a total of twice (the initial play plus 1 repeat). To repeat indefinitely, use -1. <code>repeat</code> should always be an integer.</p><p>To cause the repeats to alternate between forward and backward, set <code>yoyo</code> to <code>true</code>. To add a time gap between repeats, use <code>repeatDelay</code>. You can set the initial <code>repeat</code> value via the<code>vars</code> parameter, like:<br /></p><pre class='pre-container prettyprint'>var tl = new TimelineMax({repeat:2});</pre><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myTimeline.repeat(2).yoyo(true).play();</code><br /></p><pre class='pre-container prettyprint'>var repeat = myTimeline.repeat(); //gets current repeat value<br />myTimeline.repeat(2); //sets repeat to 2</pre>"}},"99a791cc5bc34c40":{"meta":{"keywords":["js.TimelineMax.repeatDelay()"],"title":"repeatDelay()","description":"Gets or sets the amount of time in seconds (or frames for frames-based timelines) between repeats.<br />\r\n"},"header":{"content":"<p>Gets or sets the amount of time in seconds (or frames for frames-based timelines) between repeats.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Gets or sets the amount of time in seconds (or frames for frames-based timelines) between repeats. For example, if <code>repeat</code> is 2 and <code>repeatDelay</code> is 1, the timeline will play initially, then wait for 1 second before it repeats, then play again, then wait 1 second again before doing its final repeat. You can set the initial <code>repeatDelay</code> value via the <code>vars</code> parameter, like:<br /></p><pre class='pre-container prettyprint'>var tl = new TimelineMax({repeat:2, repeatDelay:1});</pre><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myTimeline.repeat(2).yoyo(true).repeatDelay(0.5).play();</code><br /></p><pre class='pre-container prettyprint'>var repeatDelay = myTimeline.repeatDelay(); //gets current repeatDelay value<br />myTimeline.repeatDelay(2); //sets repeatDelay to 2</pre>"}},"7b988d27511ca604":{"meta":{"keywords":["js.TimelineMax.time()"],"title":"time()","description":"[override] Gets or sets the local position of the playhead (essentially the current time), not including any repeats or repeatDelays."},"header":{"content":"<p>[override] Gets or sets the local position of the playhead (essentially the current time), not including any repeats or repeatDelays.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining. Negative values will be interpreted from the <b>END</b> of the animation.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, no events or callbacks will be triggered when the playhead moves to the new position defined in the <code>value</code> parameter.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Gets or sets the local position of the playhead (essentially the current time), <b>not</b> including any repeats or repeatDelays. If the timeline has a non-zero <code>repeat</code>, its <code>time</code> goes back to zero upon repeating even though the <code>totalTime</code> continues forward linearly (or if <code>yoyo</code> is <code>true</code>, the <code>time</code> alternates between moving forward and backward). <code>time</code> never exceeds the duration whereas the <code>totalTime</code> reflects the overall time including any repeats and repeatDelays.</p><p>For example, if a TimelineMax instance has a <code>duration</code> of 2 and a repeat of 3, <code>totalTime</code> will go from 0 to 8 during the course of the timeline (plays once then repeats 3 times, making 4 total cycles) whereas <code>time</code> would go from 0 to 2 a total of 4 times.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.<br /></p><pre class='pre-container prettyprint'>var currentTime = myTimeline.time(); //gets current time<br />myTimeline.time(2); //sets time, jumping to new value just like seek().</pre>"}},"60dac61dd3210643":{"meta":{"keywords":["js.TimelineMax.totalDuration()"],"title":"totalDuration()","description":"[override] Gets or sets the total duration of the timeline in seconds (or frames for frames-based timelines) including any repeats or repeatDelays."},"header":{"content":"<p>[override] Gets or sets the total duration of the timeline in seconds (or frames for frames-based timelines) including any repeats or repeatDelays.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining. Negative values will be interpreted from the <b>END</b> of the animation.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the total duration of the timeline in seconds (or frames for frames-based timelines) <b>including</b> any repeats or repeatDelays. <code>duration</code>, by contrast, does <b>NOT</b> include repeats and repeatDelays. For example, if the timeline has a <code>duration</code> of 10, a <code>repeat</code> of 1 and a <code>repeatDelay</code> of 2, the <code>totalDuration</code> would be 22.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.<br /></p><pre class='pre-container prettyprint'>var total = myTimeline.totalDuration(); //gets total duration<br />myTimeline.totalDuration(10); //sets the total duration</pre>"}},"5f4508325a2e0985":{"meta":{"keywords":["js.TimelineMax.totalProgress()"],"title":"totalProgress()","description":"[override] Gets or sets the timeline&#039;s total progress which is a value between 0 and 1 indicating the position of the virtual playhead (including repeats) where 0 is at the beginning, 0.5 is at the halfway point, and 1 is at the end (complete)."},"header":{"content":"<p>[override] Gets or sets the timeline's total progress which is a value between 0 and 1 indicating the position of the virtual playhead (including repeats) where 0 is at the beginning, 0.5 is at the halfway point, and 1 is at the end (complete).</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code>, no events or callbacks will be triggered when the playhead moves to the new position.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the timeline's total progress which is a value between 0 and 1 indicating the position of the virtual playhead (<b>including</b> repeats) where 0 is at the beginning, 0.5 is at the halfway point, and 1 is at the end (complete). If the timeline has a non-zero <code>repeat</code> defined, <code>progress()</code> and <code>totalProgress()</code> will be different because <code>progress()</code> doesn't include the <code>repeat</code> or <code>repeatDelay</code> whereas <code>totalProgress()</code> does. For example, if a TimelineMax instance is set to repeat once, at the end of the first cycle <code>totalProgress()</code> would only be 0.5 whereas <code>progress</code> would be 1. If you watched both properties over the course of the entire animation, you'd see <code>progress</code> go from 0 to 1 twice (once for each cycle) in the same time it takes the <code>totalProgress()</code> to go from 0 to 1 once.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myAnimation.totalProgress(0.5).play();</code><br /></p><pre class='pre-container prettyprint'>var progress = myAnimation.totalProgress(); //gets total progress<br />myAnimation.totalProgress(0.25); //sets total progress to one quarter finished</pre>"}},"a5a0e939a1e15082":{"meta":{"keywords":["js.TimelineMax.tweenFromTo()"],"title":"tweenFromTo()","description":"Creates a linear tween that essentially scrubs the playhead from a particular time or label to another time or label and then stops."},"header":{"content":"<p>Creates a linear tween that essentially scrubs the playhead from a particular time or label to another time or label and then stops.</p>"},"parameters":[{"name":"fromPosition","data_type":"*","description":"<p>The beginning time in seconds (or frame if the timeline is frames-based) or label from which the timeline should play. For example, <code>myTimeline.tweenTo(0, 5)</code> would play from 0 (the beginning) to the 5-second point whereas <code>myTimeline.tweenFromTo(\"myLabel1\", \"myLabel2\")</code> would play from &#8220;myLabel1&#8221; to &#8220;myLabel2&#8221;.</p>\n"},{"name":"toPosition","data_type":"*","description":"<p>The destination time in seconds (or frame if the timeline is frames-based) or label to which the timeline should play. For example, <code>myTimeline.tweenTo(0, 5)</code>would play from 0 (the beginning) to the 5-second point whereas <code>myTimeline.tweenFromTo(\"myLabel1\", \"myLabel2\")</code> would play from &#8220;myLabel1&#8221; to &#8220;myLabel2&#8221;.</p>\n"},{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — An optional vars object that will be passed to the TweenLite instance. This allows you to define an onComplete, ease, delay, or any other TweenLite special property. onInit is the only special property that is not available (<code>tweenFromTo()</code> sets it internally)</p>\n"}],"returns":{"type":"TweenLite","content":"<p>TweenLite instance that handles tweening the timeline between the desired times/labels.</p>\n"},"details":{"content":"<p>Creates a linear tween that essentially scrubs the playhead from a particular time or label to another time or label and then stops. If you plan to sequence multiple playhead tweens one-after-the-other, <code>tweenFromTo()</code> is better to use than <code>tweenTo()</code> because it allows the duration to be determined immediately, ensuring that subsequent tweens that are appended to a sequence are positioned appropriately. For example, to make the TimelineMax play from the label \"myLabel1\" to the \"myLabel2\" label, and then from \"myLabel2\" back to the beginning (a time of 0), simply do:<br /></p><pre class='pre-container prettyprint'>var tl = new TimelineMax(); <br />tl.add( myTimeline.tweenFromTo(\"myLabel1\", \"myLabel2\") );<br />tl.add( myTimeline.tweenFromTo(\"myLabel2\", 0) );</pre><p>If you want advanced control over the tween, like adding an onComplete or changing the ease or adding a delay, just pass in a vars object with the appropriate properties. For example, to tween from the start (0) to the 5-second point on the timeline and then call a function named <code>myFunction</code> and pass in a parameter that references this TimelineMax and use a<code>Strong.easeOut</code> ease, you'd do:<br /></p><pre class='pre-container prettyprint'>myTimeline.tweenFromTo(0, 5, {onComplete:myFunction, onCompleteParams:[myTimeline], ease:Strong.easeOut});</pre><p>Remember, this method simply creates a TweenLite instance that tweens the <code>time()</code> of your timeline. So you can store a reference to that tween if you want, and you can <code>kill()</code> it anytime. Also note that <code>tweenFromTo()</code> does <b>NOT</b> affect the timeline's <code>reversed</code> property. So if your timeline is oriented normally (not reversed) and you tween to a time/label that precedes the current time, it will appear to go backwards but the <code>reversed</code> property will <b>not</b> change to <code>true</code>. Also note that <code>tweenFromTo()</code> pauses the timeline immediately before tweening its <code>time()</code>, and it does not automatically resume after the tween completes. If you need to resume playback, you can always use an onComplete to call the <code>resume()</code> method.</p><p>Like all from-type methods in GSAP, <code>immediateRender</code> is <code>true</code> by default, meaning the timeline will immediately jump to the \"from\" time/label unless you set <code>immediateRender:false</code> (like <code>.tweenFromTo(1, 5, {immediateRender:false})</code>)</p>"}},"7be1802b524c8f27":{"meta":{"keywords":["js.TimelineMax.tweenTo()"],"title":"tweenTo()","description":"Creates a linear tween that essentially scrubs the playhead to a particular time or label and then stops."},"header":{"content":"<p>Creates a linear tween that essentially scrubs the playhead to a particular time or label and then stops.</p>"},"parameters":[{"name":"position","data_type":"*","description":"<p>The destination time in seconds (or frame if the timeline is frames-based) or label to which the timeline should play. For example, <code>myTimeline.tweenTo(5)</code> would play from wherever the timeline is currently to the 5-second point whereas <code>myTimeline.tweenTo(\"myLabel\")</code> would play to wherever &#8220;myLabel&#8221; is on the timeline.</p>\n"},{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — An optional vars object that will be passed to the TweenLite instance. This allows you to define an onComplete, ease, delay, or any other TweenLite special property.</p>\n"}],"returns":{"type":"TweenLite","content":"<p>A TweenLite instance that handles tweening the timeline to the desired time/label.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Creates a linear tween that essentially scrubs the playhead to a particular time or label and then stops. For example, to make the TimelineMax play to the \"myLabel2\" label, simply do:<br /></p><pre class='pre-container prettyprint'>myTimeline.tweenTo(\"myLabel2\");</pre><p>If you want advanced control over the tween, like adding an onComplete or changing the ease or adding a delay, just pass in a <code>vars</code> object with the appropriate properties. For example, to tween to the 5-second point on the timeline and then call a function named <code>myFunction</code> and pass in a parameter that's references this TimelineMax and use a <code>Strong.easeOut</code> ease, you'd do:</p><pre class='pre-container prettyprint'>myTimeline.tweenTo(5, {onComplete:myFunction, onCompleteParams:[myTimeline], ease:Strong.easeOut});</pre><p>Remember, this method simply creates a TweenLite instance that pauses the timeline and then tweens the <code>time()</code> of the timeline. So you can store a reference to that tween if you want, and you can kill() it anytime. Also note that <code>tweenTo()</code> does <b>NOT</b> affect the timeline's <code>reversed</code> state. So if your timeline is oriented normally (not reversed) and you tween to a time/label that precedes the current time, it will appear to go backwards but the <code>reversed</code> state will <b>not</b> change to <code>true</code>. Also note that <code>tweenTo()</code> pauses the timeline immediately before tweening its <code>time()</code>, and it does not automatically resume after the tween completes. If you need to resume playback, you could always use an onComplete to call the timeline's<code>resume()</code> method.</p><p>If you plan to sequence multiple playhead tweens one-after-the-other, it is typically better to use <code>tweenFromTo()</code> so that you can define the starting point and ending point, allowing the duration to be accurately determined immediately.</p>"}},"d2c60e4c72147852":{"meta":{"keywords":["js.TimelineMax.yoyo()"],"title":"yoyo()","description":"Gets or sets the timeline&#039;s yoyo state, where true causes the timeline to go back and forth, alternating backward and forward on each repeat."},"header":{"content":"<p>Gets or sets the timeline's yoyo state, where true causes the timeline to go back and forth, alternating backward and forward on each repeat.</p>"},"parameters":[{"name":"value","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the timeline's <code>yoyo</code> state, where <code>true</code> causes the timeline to go back and forth, alternating backward and forward on each <code>repeat</code>. <code>yoyo</code> works in conjunction with <code>repeat</code>, where <code>repeat</code> controls how many times the timeline repeats, and <code>yoyo</code> controls whether or not each repeat alternates direction. So in order to make a timeline yoyo, you must set its<code>repeat</code> to a non-zero value. Yoyo-ing, has no affect on the timeline's \"<code>reversed</code>\" property. For example, if <code>repeat</code> is 2 and <code>yoyo</code> is <code>false</code>, it will look like: start - 1 - 2 - 3 - 1 - 2 - 3 - 1 - 2 - 3 - end. But if <code>yoyo</code> is <code>true</code>, it will look like: start - 1 - 2 - 3 - 3 - 2 - 1 - 1 - 2 - 3 - end.</p><p>You can set the <code>yoyo</code> property initially by passing <code>yoyo:true</code> in the <code>vars</code> parameter, like: <code>new TimelineMax({repeat:1, yoyo:true});</code></p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myTimeline.yoyo(true).repeat(3).timeScale(2).play(0.5);</code><br /></p><pre class='pre-container prettyprint'>var yoyo = myTimeline.yoyo(); //gets current yoyo state<br />myTimeline.yoyo( true ); //sets yoyo to true</pre>"}},"357645cd3e630097":{"meta":{"keywords":["js.ScrambleTextPlugin","Plugins","Text"],"title":"ScrambleTextPlugin","description":"Scrambles the text in a DOM element with randomized characters, refreshing new randomized characters at regular intervals while gradually revealing your new text over the course of the tween. Great for decryption effects."},"header":{"content":"<p data-height=\"268\" data-theme-id=\"3984\" data-slug-hash=\"dIBbw\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/dIBbw/'>GSAP Scramble Text Plugin - feature plugin page</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://codepen.io/assets/embed/ei.js\"></script></p><p>Scrambles the text in a DOM element with randomized characters (uppercase by default, but you can define lowercase or a set of custom characters), refreshing new randomized characters at regular intervals while gradually revealing your new text over the course of the tween (left to right by default). Visually it looks like a computer decoding a string of text. Great for rollovers.</p><p>You can simply pass a string of text directly as the <code>scrambleText</code> and it'll use the defaults for revealing it, or you can customize the settings by using a generic object with any of the following properties:</p><ul><li><b>text</b> : String - the text that should replace the existing text in the DOM element (required).</li><li><b>chars</b> : String - the characters that should be randomly swapped in to the scrambled portion the text. You can use <code>\"upperCase\"</code>, <code>\"lowerCase\"</code>, <code>\"upperAndLowerCase\"</code>, or a custom string of characters, like <code>\"XO\"</code> or <code>\"TMOWACB\"</code>, or <code>\"jompaWB!^\"</code>, etc. (Default: <code>\"upperCase\"</code>)</li><li><b>tweenLength</b> : Boolean - if the length of the replacement text is different than the original text, the difference will be gradually tweened so that the length doesn't suddenly jump. For example, if the original text is 50 characters and the replacement text is 100 characters, during the tween the number of characters would gradually move from 50 to 100 instead of jumping immediatley to 100. However, if you'd prefer to have it immediately jump, set <code>tweenLength</code> to <code>false</code>. (Default: <code>true</code>)</li><li><b>revealDelay</b> : Number - if you'd like the reveal (unscrambling) of the new text to be delayed for a certain portion of the tween so that the scrambled text is entirely visible for a while, use <code>revealDelay</code> to define the time you'd like to elapse before the reveal begins. For example, if the tween's duration is 3 seconds but you'd like the scrambled text to remain entirely visible for first 1 second of the tween, you'd set <code>revealDelay</code> to <code>1</code>. (Default: <code>0</code>)</li><li><b>newClass</b> : String - if you'd like the <b>new</b> text to have a particular class applied (using a &lt;span&gt; tag wrapped around it), use <code>newClass:\"YOUR_CLASS_NAME\"</code>. This makes it easy to create a distinct look for the new text. (Default: <code>null</code>)</li><li><b>oldClass</b> : String - if you'd like the <b>old</b> (original) text to have a particular class applied (using a &lt;span&gt; tag wrapped around it), use <code>oldClass:\"YOUR_CLASS_NAME\"</code>. This makes it easy to create a distinct look for the old text. (Default: <code>null</code>)</li><li><b>speed</b> : Number - controls how frequently the scrambled characters are refreshed. The default is <code>1</code> but you could slow things down by using <code>0.2</code> for example (or any number). (Default:<code>1</code>)</li><li><b>delimiter</b> : String - by default, each character is replaced one-by-one, but if you'd prefer to have things revealed word-by-word, you could use a delimiter of <code>\" \"</code> (space). (Default: <code>\"\"</code>)</li><li><b>rightToLeft</b> : Boolean (default false) - If true the text will be revealed from right to left.</li></ul><p><b>USAGE:</b><br /></p><pre class='pre-container prettyprint'>//use the defaults<br />TweenLite.to(element, 1, {scrambleText:\"THIS IS NEW TEXT\"}); <br /> <br />//or customize things:<br />TweenLite.to(element, 1, {scrambleText:{text:\"THIS IS NEW TEXT\", chars:\"XO\", revealDelay:0.5, speed:0.3, newClass:\"myClass\"}}); </pre><p><br />ScrambleTextPlugin is a <a href=\"http://www.greensock.com/club/\" target=\"\">Club GreenSock</a> membership benefit. You must have a valid membership to use this class without violating the terms of use. Visit <a href=\"http://www.greensock.com/club/\" target=\"\">http://www.greensock.com/club/</a> to sign up or get more details.</p>"}},"3d0f25beac1906b4":{"meta":{"keywords":["js.CSSRulePlugin","Plugins"],"title":"CSSRulePlugin","description":""},"header":{"content":"Allows TweenLite and TweenMax to animate the raw <b>style sheet rules</b> which affect all objects of a particular selector rather than affecting an individual DOM element's <code>style</code> (that's what the CSSPlugin is for). For example, if you have a CSS class named <code>\".myClass\"</code> that sets <code>background-color</code> to <code>\"#FF0000\"</code>, you could tween that to a different color and ALL of the objects on the page that use <code>\".myClass\"</code> would have their background color change. Typically it is best to use the regular CSSPlugin to animate css-related properties of individual elements so that you can get very precise control over each object, but sometimes it can be useful to tween the global rules themselves instead. For example, pseudo elements (like <code>:after, :before,</code> etc. are impossible to reference directly in JavaScript, but you can animate them using CSSRulePlugin. <b><i>NOTE: CSSRulePlugin requires the CSSPlugin, so please make sure it is loaded too.</i></b><br /><br >The plugin itself actually has a static <b><code>getRule()</code> </b>method that you can use to grab a reference to the style sheet itself based on the selector you used in your CSS. For example, let's say you have CSS like this:<pre class='pre-container prettyprint lang-css'>.myClass {<br />    color:#FF0000;<br />}<br />.myClass:before {<br />    content:\"This content is before.\";<br />    color:#00FF00;<br />}</pre>Now let's say you want to tween the color of the <code>.myClass:before</code> to blue. Make sure you load the CSSRulePlugin and CSSPlugin JavaScript files and then you can do this:<br /><pre class='pre-container prettyprint'>var rule = CSSRulePlugin.getRule(\".myClass:before\"); //get the rule<br />TweenLite.to(rule, 3, {cssRule:{color:\"#0000FF\"}});</pre>And if you want to get <b>ALL</b> of the :before pseudo elements, the <code>getRule()</code> will return an array of them, so I could do this:<br /><pre class='pre-container prettyprint'>TweenLite.to( CSSRulePlugin.getRule(\":before\"), 3, {cssRule:{color:\"#0000CC\"}});</pre>>Keep in mind that it is typically best to tween a property that has already been defined in the specific rule that you're selecting because it cannot perform a calculated style (the combination of styles from other selectors that might pertain to similar elements). For example, if we didn't define any color initially for the <code>.myClass:before</code> and tried to tween its color to blue, it would start transparent and go to blue. One way around this is to simply set your starting values explicitly in the tween by doing a <code>fromTo()</code>. That way there's no having to guess what the starting value should be when it isn't defined previously.<br /><br />Don't forget to wrap the values in a <code>cssRule:{}</code> object.<br /><br />Styles defined inside media queries may not be accessible/tweenable."}},"53a700a8824a8cfc":{"meta":{"keywords":["js.CSSRulePlugin.getRule()"],"title":"getRule()","description":"[static] Provides a simple way to find the style sheet object associated with a particular selector like &quot;.myClass&quot; or &quot;#myID&quot;."},"header":{"content":"<p>[static] Provides a simple way to find the style sheet object associated with a particular selector like \".myClass\" or \"#myID\".</p>"},"parameters":[{"name":"selector","data_type":"String","description":"<p>The name that exactly matches the selector you want to animate (like &#8220;.myClassName&#8221;).</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Object","content":"<p>The style sheet object (or an array of them if you define only a pseudo element selector like :before)</p>\n"},"details":{"content":"Provides a simple way to find the style sheet object associated with a particular selector like \".myClass\" or \"#myID\". You'd use this method to determine the target of your tween. For example, let's say you have CSS like this:<br /><pre class='pre-container prettyprint lang-css'>.myClass {<br />    color:#FF0000;<br />}<br />.myClass:before {<br />    content:\"This content is before.\";<br />    color:#00FF00;<br />}</pre>And you want to tween the color of the <code>.myClass:before</code> to blue. Make sure you load the CSSRulePlugin.js file and then you can do this:<br /><pre class='pre-container prettyprint'>var rule = CSSRulePlugin.getRule(\".myClass:before\"); //get the rule<br />TweenLite.to(rule, 3, {cssRule:{color:\"#0000FF\"}});</pre>Or you can feed the value directly into the tween like this:<br /><pre class='pre-container prettyprint'>TweenLite.to( CSSRulePlugin.getRule(\".myClass:before\"), 3, {cssRule:{color:\"#0000FF\"}});</pre>"}},"3eab3f172dae806f":{"meta":{"keywords":["js.Quart","Easing"],"title":"Quart","description":"Provides an easeIn, easeOut, and easeInOut with a power (or strength) of 3 which is identical to the Power2 ease. The more power, the more exaggerated the easing effect. Using a numeric approach like Power3 instead of Quart makes experimenting easier and the code reads more intuitively."},"header":{"content":"<p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 3 which is identical to the <code>Power2</code> ease. The more power, the more exaggerated the easing effect. Using a numeric approach like Power3 instead of Quart makes experimenting easier and the code reads more intuitively.</p><p>This is one of the eases that is natively accelerated in TweenLite and TweenMax. All of the \"Power\" eases and their counterparts (Linear (0), Quad (1), Cubic (2), Quart (3), Quint (4), and Strong (4)) are accelerated.</p><div class=\"ease-visualizer\" data-ease=\"Power2\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example usage:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Quart.easeOut});</pre>"}},"705ae1ddfe7bf523":{"meta":{"keywords":["js.Quart.easeIn"],"title":"easeIn","description":"[static] Eases in with a power of 3."},"header":{"content":"<p>[static] Eases in with a power of 3.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in with a power of 3.</p>"}},"eeeab17448587b02":{"meta":{"keywords":["js.Quart.easeInOut"],"title":"easeInOut","description":"[static] Eases in and then out with a power of 3."},"header":{"content":"<p>[static] Eases in and then out with a power of 3.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in and then out with a power of 3.</p>"}},"4f68c600370ab277":{"meta":{"keywords":["js.Quart.easeOut"],"title":"easeOut","description":"[static] Eases out with a power of 3."},"header":{"content":"<p>[static] Eases out with a power of 3.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases out with a power of 3.</p>"}},"424d2c8144aca82b":{"meta":{"keywords":["js.Quint","Easing"],"title":"Quint","description":"Provides an easeIn, easeOut, and easeInOut with a power (or strength) of 4 which is identical to the Power4 ease. The more power, the more exaggerated the easing effect. Using a numeric approach like Power4 instead of Quint makes experimenting easier and the code reads more intuitively."},"header":{"content":"<p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 4 which is identical to the <code>Power4</code> ease. The more power, the more exaggerated the easing effect. Using a numeric approach like Power4 instead of Quint makes experimenting easier and the code reads more intuitively.</p><p>This is one of the eases that is natively accelerated in TweenLite and TweenMax. All of the \"Power\" eases and their counterparts (Linear (0), Quad (1), Cubic (2), Quart (3), Quint (4), and Strong (4)) are accelerated.</p><div class=\"ease-visualizer\" data-ease=\"Power4\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example usage:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Quint.easeOut});</pre>"}},"54ae9c54fa1f129c":{"meta":{"keywords":["js.Quint.easeIn"],"title":"easeIn","description":"[static] Eases in with a power of 4."},"header":{"content":"<p>[static] Eases in with a power of 4.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in with a power of 4.</p>"}},"edeb564de2d4abf1":{"meta":{"keywords":["js.Quint.easeInOut"],"title":"easeInOut","description":"[static] Eases in and then out with a power of 4."},"header":{"content":"<p>[static] Eases in and then out with a power of 4.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in and then out with a power of 4.</p>"}},"7824c0e53c911bbe":{"meta":{"keywords":["js.Quint.easeOut"],"title":"easeOut","description":"[static] Eases out with a power of 4."},"header":{"content":"<p>[static] Eases out with a power of 4.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases out with a power of 4.</p>"}},"43077a47946db3db":{"meta":{"keywords":["js.BezierPlugin","Animation","Plugins"],"title":"BezierPlugin","description":"Animate virtually any property (or properties) along a curved Bezier path which you define as an array of points/values."},"header":{"content":"<p><span class=\"inTweenMax\">Included in TweenMax: <span class=\"yes\">YES</span></span></p><p>Animate virtually any property (or properties) along a curved Bezier path which you define as an array of points/values that can be interpreted 4 different ways (described as the Bezier's \"type\", like <code>type:\"soft\"</code>):</p><ul><li><code>\"thru\"</code> (the default) - the plugin figures out how to draw the Bezier naturally through the supplied values using a proprietary algorithm. The values you provide in the array are essentially treated as anchors on the Bezier and the plugin calculates the control points. The target's current/starting values are used as the initial anchor. You can define a <code>curviness</code>special property that allows you to adjust the tension on the Bezier where 0 has no curviness (straight lines), 1 is normal curviness, 2 is twice the normal curviness, etc. Since \"thru\" is the default Bezier type, you don't need to define a <code>type</code> at all if this is the one you want.</li><li><code>\"soft\"</code> - the values that you provide in the array act almost like magnets that attract the curve towards them, but the Bezier doesn't typically travel through them. They are treated as control points on a Quadratic Bezier and the plugin creates the necessary intermediate anchors. The target's current/starting values are used as the initial anchor.</li><li><code>\"quadratic\"</code> - allows you to define standard Quadratic Bezier data (Quadratic Beziers have 1 control point between each anchor). The array should start with the first anchor, then control point, then anchor, control point, etc. for as many iterations as you want, but obviously make sure that it starts and ends with anchors.</li><li><code>\"cubic\"</code> - allows you to define standard Cubic Bezier data (Cubic Beziers have 2 control points between each anchor). The array should start with the first anchor, then 2 control points, then anchor, 2 control points, anchor, etc. for as many iterations as you want, but obviously make sure that it starts and ends with anchors.</li></ul><p>While it is most common to use <code>x</code> and <code>y</code> (or <code>left</code> and <code>top</code>) properties for Bezier tweens, you can use any properties (even ones that are function-based getters/setters).</p><p>Inside the <code>bezier</code> object, you must define at least a <code>values</code> property, and there are several other optional special properties that the BezierPlugin will recognize. Here is a list of them all:</p><ul><li><b>values</b> : Array <i>[REQUIRED]</i> - the array of your Bezier values as generic objects. Each object in the array should have matching property names (like \"x\" and \"y\"). For example, the array might look like: <code>[{x:100, y:250}, {x:300, y:0}, {x:500, y:400}]</code></li><li><b>type</b> : String (default:<code>\"thru\"</code>) - Either <code>\"thru\", \"soft\", \"quadratic\",</code> or <code>\"cubic\"</code> as described above, indicating how the <code>values</code> should be interpreted.</li><li><b>timeResolution</b> : Number (default:6) - due to the nature of Beziers, plotting the progression of an object on the path over time can make it appear to speed up or slow down based on the placement of the control points and the length of each successive segment on the path, so BezierPlugin implements a technique that reduces or eliminates that variance, but it involves breaking the segments down into a certain number of pieces which is what <code>timeResolution</code> controls. The greater the number, the more accurate the time remapping but there is a processing price to pay for greater precision. The default value of 6 is typically fine, but if you notice slight pace changes on the path you can increase the <code>timeResolution</code>value. Or, if you want to prioritize speed you could reduce the number. If you use a <code>timeResolution</code> value of 0, no length measurements will take place internally which delivers maximum processing speed, but you may notice changes in speed during the animation.</li><li><b>curviness</b> : Number (default:1) (only applies to <code>type:\"thru\"</code>) - allows you to adjust the tension on the Bezier where 0 has no curviness (straight lines), 1 is normal curviness, 2 is twice the normal curviness, etc. Use any number, not just integers</li><li><b>autoRotate</b> : Boolean, Number, or Array (default:false) - to automatically rotate the target according to its position on the Bezier path, you can use the <code>autoRotate</code> feature. If your Bezier is affecting the \"x\" and \"y\" (or \"left\" and \"top\") properties of your target and you don't need to offset the rotation by a certain amount more than normal, then you can simply set<code>autoRotate:true</code>. Or if you want to offset the rotation by a certain amount (in degrees), you can define a number like <code>autoRotate:90</code> (adding 90 degrees in this example). Or for more advanced controls, you can define <code>autoRotate</code> as an array. In order to adjust a rotation property accurately, the plugin needs 5 pieces of information:<ol><li>Position property 1 (typically <code>\"x\"</code> or <code>\"left\"</code>)</li><li>Position property 2 (typically <code>\"y\"</code> or <code>\"top\"</code>)</li><li>Rotational property (typically <code>\"rotation\"</code>)</li><li>Number of degrees (or radians) to add to the new rotation (optional - makes it easy to orient your target properly)</li><li>Boolean value indicating whether or not the rotational property should be defined in radians rather than degrees (default is <code>false</code> which results in degrees)</li></ol><p>The <code>autoRotate</code> property should be an Array containing these values, like <code>[\"x\",\"y\",\"rotation\",90*Math.PI/180,true]</code>. And if you need to affect multiple rotational properties (like in 3D tweens where the Bezier is going through x,y,z points which could affect rotationX, rotationY, and rotationZ), you can use an array of arrays, like<code>[[\"x\",\"y\",\"rotationZ\",0,false], [\"z\",\"x\",\"rotationY\",0,false], [\"z\",\"y\",\"rotationX\",0,false]]</code>.</li><li><b>correlate</b> : String (default:\"x,y,z,left,top,right,bottom,marginLeft,marginTop,marginRight,marginBottom,paddingLeft,paddingTop,paddingRight,paddingBottom\") (only applies to<code>type:\"thru\"</code>) - a comma-delimited list of property names whose relative distances should be correlated when calculating the Bezier that travels through the points. Since x, y, z, left, top, etc. are all spacial, it is almost always good to correlate them, but properties like scaleX, scaleY, etc. don't typically need to be correlated. It is rarely necessary to alter the default<code>correlate</code> value, so there's typically no need to even define one at all (let the plugin use its defaults).</li></ul><p><b>IMPORTANT:</b> if you are trying to do a bezier tween of css-related properties, make sure you load the CSSPlugin (it's already included inside TweenMax, but if you're using only TweenLite, you'll need to load the CSSPlugin and BezierPlugin separately)</p><p><b>SYNTAX</b><br /></p><pre class='pre-container prettyprint'>//tween the \"left\" and \"top\" css properties through the supplied values (notice we're passing the array directly to the bezier rather than creating an object with \"values\" because we're accepting the defaults)<br />TweenMax.to(document.getElementById(\"myDiv\"), 5, {bezier:[{left:100, top:250}, {left:300, top:0}, {left:500, top:400}], ease:Power1.easeInOut});<br /> <br />//if we want to customize things, like the curviness and setting autoRotate:true, we need to define the bezier as an object instead, and pass our array as the \"values\" property<br />TweenMax.to(document.getElementById(\"myDiv\"), 5, {bezier:{curviness:1.25, values:[{x:100, y:250}, {x:300, y:0}, {x:500, y:400}], autoRotate:true}, backgroundColor:\"#f00\", ease:Power1.easeInOut});<br /> <br />//let's define the type as \"soft\" instead of using the default \"thru\"<br />TweenMax.to(document.getElementById(\"myDiv\"), 5, {bezier:{type:\"soft\", values:[{x:100, y:250}, {x:300, y:0}, {x:500, y:400}], autoRotate:true}, ease:Power1.easeInOut});<br /> <br />//now we'll do a cubic Bezier and make our target auto rotate but add 45 degrees to the rotation<br />TweenMax.to(document.getElementById(\"myDiv\"), 5, {bezier:{type:\"cubic\", values:[{x:100, y:250}, {x:150, y:100}, {x:300, y:500}, {x:500, y:400}], autoRotate:[\"x\",\"y\",\"rotation\",45,false]}, ease:Power1.easeInOut});<br /> <br />//NON-CSS, generic x/y property tween: animate obj through the points in the array (notice we're passing the array directly to the bezier rather than creating an object with \"values\" because we're accepting the defaults)<br />TweenMax.to(obj, 5, {bezier:[{x:100, y:250}, {x:300, y:0}, {x:500, y:400}], ease:Power1.easeInOut});</pre><p>You can tap into BezierPlugin's Bezier drawing algorithm by passing its <code>bezierThrough()</code> method your array of points/objects and it will spit back and object with all the necessary data, either in Cubic Bezier form or in Quadratic Bezier form so that you could, for example, draw the path using the canvas's drawing API. It also has some useful static <code>cubicToQuadratic()</code> and<code>quadraticToCubic()</code> conversion methods.</p>"}},"8226759a93db7a20":{"meta":{"keywords":["js.BezierPlugin.bezierThrough()"],"title":"bezierThrough()","description":"[static] Takes an array that contains objects (could be Points, could be generic objects with any number of properties but they should all match in terms of the names of properties like [{x:0, y:0, scaleX:0.5}, {x:100, y:-200, scaleX:1.2}, {x:300, y:20, scaleX:0.8}]) and plots Bezier segments THROUGH those values and returns an array containing a generic object for each Bezier segment."},"header":{"content":"<p>[static] Takes an array that contains objects (could be Points, could be generic objects with any number of properties but they should all match in terms of the names of properties like [{x:0, y:0, scaleX:0.5}, {x:100, y:-200, scaleX:1.2}, {x:300, y:20, scaleX:0.8}]) and plots Bezier segments THROUGH those values and returns an array containing a generic object for each Bezier segment.</p>"},"parameters":[{"name":"values","data_type":"Array","description":"<p>An array containing generic objects with matching properties (or Point instances) through which the Beziers should be plotted, like <code>[{x:0, y:0, scaleX:0.5}, {x:100, y:-200, scaleX:1.2}, {x:300, y:20, scaleX:0.8}]</code></p>\n"},{"name":"curviness","data_type":"Number","description":"<p>(default = <code>1</code>)<code></code> — A number (default: 1) that controls the strength of the curves that are plotted through the values. A curviness of 0 would be result in straight lines, 1 is normal curviness, and 2 would be extreme curves. Use any value.</p>\n"},{"name":"quadratic","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — if <code>true</code>, quadratic Bezier information will be returned instead of cubic Bezier data, thus each object in the returned array will only contain a, b, and c properties where b is the control point.</p>\n"},{"name":"correlate","data_type":"String","description":"<p>(default =<code>x, y, z, left, top, right, bottom, marginLeft, marginTop, marginRight, marginBottom, paddingLeft, paddingTop, paddingRight, paddingBottom</code>)<code></code> — a comma-delimited list of property names whose relative distances should be correlated with each other when calculating the curvature of the Bezier through the values (the default is<code>\"x, y, z, left, top, right, bottom, marginLeft, marginTop, marginRight, marginBottom, paddingLeft, paddingTop, paddingRight, paddingBottom\"</code> because those are almost always properties that should be correlated).</p>\n"},{"name":"prepend","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — [optional] an object to treat as though it is the first element in the <code>values</code> array (typically only used internally for adding a tween&#8217;s starting values)</p>\n"},{"name":"calcDifs","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — if <code>true</code>, <code>da, ca,</code> and <code>ba</code> properties will be added to each bezier segment indicating (d &#8211; a), (c &#8211; a), and (b &#8211; a) which is typically only useful for improving animation performance slightly by precalculating those values instead of doing it each time the tween updates.</p>\n"}],"returns":{"type":"Object","content":"<p>An object with properties matching those from the objects in the <code>values</code> array, with an array assigned to each property populated with an object for each Bezier. The Bezier objects will contain <code>a, b, c</code> (and <code>d</code> if <code>quadratic</code> is not <code>true</code>) properties for the anchors and control points.</p>\n"},"details":{"content":"<p>Takes an array that contains objects (could be Points, could be generic objects with any number of properties but they should all match in terms of the names of properties like <code>[{x:0, y:0, scaleX:0.5}, {x:100, y:-200, scaleX:1.2}, {x:300, y:20, scaleX:0.8}]</code>) and plots Bezier segments THROUGH those values and returns an array containing a generic object for each Bezier segment. By default Cubic Beziers (which use 2 control points per segment) are used but you can optionally request Quadratic Beziers (1 control point per segment) instead using the <code>quadratic</code> parameter.</p><p>For Cubic Beziers (the default), each segment object will have <code>a, b, c,</code> and <code>d</code> properties:</p><ul><li><b>a</b> - the starting anchor value of the Cubic Bezier segment. For example, <code>bezierThrough([{x:0, y:0, scaleX:0.5}, {x:100, y:-200, scaleX:1.2}, {x:300, y:20, scaleX:0.8}]);</code> would return an object with \"x\", \"y\", and \"scaleX\" properties, each containing an array of objects, one per Bezier segment and you could access the first Bezier's initial anchor values like: <code>myReturnedObject.x[0].a, myReturnedObject.y[0].a</code>, and <code>myReturnedObject.scaleX[0].a</code></li><li><b>b</b> - the first control point value of the Cubic Bezier segment. For example, <code>bezierThrough([{x:0, y:0, scaleX:0.5}, {x:100, y:-200, scaleX:1.2}, {x:300, y:20, scaleX:0.8}]);</code> would return an object with \"x\", \"y\", and \"scaleX\" properties, each containing an array of objects, one per Bezier segment and you could access the first Bezier's first control point values like: <code>myReturnedObject.x[0].b, myReturnedObject.y[0].b</code>, and <code>myReturnedObject.scaleX[0].b</code></li><li><b>c</b> - the second control point value of the Cubic Bezier segment. For example, <code>bezierThrough([{x:0, y:0, scaleX:0.5}, {x:100, y:-200, scaleX:1.2}, {x:300, y:20, scaleX:0.8}]);</code> would return an object with \"x\", \"y\", and \"scaleX\" properties, each containing an array of objects, one per Bezier segment and you could access the first Bezier's second control point values like: <code>myReturnedObject.x[0].c, myReturnedObject.y[0].c</code>, and <code>myReturnedObject.scaleX[0].c</code></li><li><b>d</b> - the final anchor value of the Cubic Bezier segment. For example, <code>bezierThrough([{x:0, y:0, scaleX:0.5}, {x:100, y:-200, scaleX:1.2}, {x:300, y:20, scaleX:0.8}]);</code> would return an object with \"x\", \"y\", and \"scaleX\" properties, each containing an array of objects, one per Bezier segment and you could access the first Bezier's final anchor values like: <code>myReturnedObject.x[0].d, myReturnedObject.y[0].d</code>, and <code>myReturnedObject.scaleX[0].d</code></li></ul><p>If you set the <code>quadratic</code> parameter to <code>true</code>, all of the Bezier segments will contain <code>a, b,</code> and <code>c</code> properties (<b>NOT</b> <code>d</code>) where <code>b</code> is the only control point. This can be very useful because some drawing APIs only understand Quadratic Beziers. There are 4 times as many Quadratic Beziers returned as Cubic Beziers, though, due to the fact that the internal algorithm uses Cubic Beziers to plot the points (they're much more flexible) and then splits each into 4 Quadratic ones.<br /></p><pre class='pre-container prettyprint'>//input:<br /> var beziers = BezierPlugin.bezierThrough([{x:0, y:0}, {x:250, y:400}, {x:500, y:0}]);<br /> <br /> //output:<br /> {<br />     x:[{a:0, b:0, c:125, d:250}, {a:250, b:375, c:500, d:500}],<br />     y:[{a:0, b:0, c:400, d:400}, {a:400, b:400, c:0, d:0}]<br /> }</pre><p><br /></p><pre class='pre-container prettyprint'>//get quadratic beziers so that we can use the canvas's drawing API...<br /> var beziers = BezierPlugin.bezierThrough([{x:0, y:0}, {x:250, y:400}, {x:500, y:0}], 1, true);<br /> <br /> var bx = beziers.x; //the \"x\" Beziers<br /> var by = beziers.y; //the \"y\" Beziers</pre>"}},"6928377908c249d2":{"meta":{"keywords":["js.BezierPlugin.cubicToQuadratic()"],"title":"cubicToQuadratic()","description":"[static] Using the fixed midpoint approach, we return an array of 4 quadratic Beziers that closely approximates the cubic Bezier data provided."},"header":{"content":"<p>[static] Using the fixed midpoint approach, we return an array of 4 quadratic Beziers that closely approximates the cubic Bezier data provided.</p>"},"parameters":[{"name":"a","data_type":"Number","description":"<p>starting anchor of the cubic Bezier</p>\n"},{"name":"b","data_type":"Number","description":"<p>first control point of the cubic Bezier</p>\n"},{"name":"c","data_type":"Number","description":"<p>second control point of the cubic Bezier</p>\n"},{"name":"d","data_type":"Number","description":"<p>final anchor of the cubic Bezier</p>\n"}],"returns":{"type":"Array","content":"<p> an array of 4 objects, one for each quadratic Bezier with a, b, and c properties</p>\n"},"details":{"content":"<p>Using the fixed midpoint approach, we return an array of 4 quadratic Beziers that closely approximates the cubic Bezier data provided. Each quadratic Bezier object contains <code>a, b,</code> and <code>c </code>properties where <code>a</code> is the starting anchor value, <code>b</code> is the control point, and <code>c</code> is the ending anchor value.</p>"}},"da3bf77d4e5fdbda":{"meta":{"keywords":["js.BezierPlugin.quadraticToCubic()"],"title":"quadraticToCubic()","description":"[static] Returns the Cubic equivalent of a Quadratic Bezier."},"header":{"content":"<p>[static] Returns the Cubic equivalent of a Quadratic Bezier.</p>"},"parameters":[{"name":"a","data_type":"Number","description":"<p>The starting anchor value</p>\n"},{"name":"b","data_type":"Number","description":"<p>The control point value</p>\n"},{"name":"c","data_type":"Number","description":"<p>The ending anchor value</p>\n"}],"returns":{"type":"Object","content":"<p>An object with a, b, c, and d properties representing the starting anchor value (a), first control point (b), second control point (c), and ending anchor value (d) of a Cubic Bezier matching the Quadratic Bezier data passed in.</p>\n"},"details":{"content":"<p>Returns the Cubic equivalent of a Quadratic Bezier. This method returns an object with a, b, c, and d properties representing the starting anchor value (a), first control point (b), second control point (c), and ending anchor value (d) of a Cubic Bezier matching the Quadratic Bezier data passed in.</p>"}},"447e2b0a637eb56f":{"meta":{"keywords":["js.PhysicsPropsPlugin","Plugins"],"title":"PhysicsPropsPlugin","description":""},"header":{"content":"<p>Sometimes it's useful to tween a value at a particular velocity and/or acceleration without a specific end value in mind. PhysicsPropsPlugin allows you to tween <b>any</b> numeric property of <b>any</b>object based on these concepts. Keep in mind that any easing equation you define for your tween will be completely ignored for these properties. Instead, the physics parameters will determine the movement/easing. These parameters, by the way, are not intended to be dynamically updateable, but one unique convenience is that everything is reverseable. So if you create several physics-based tweens, for example, and throw them into a TimelineLite, you could simply call <code>reverse()</code> on the timeline to watch the objects retrace their steps right back to the beginning. Here are the parameters you can define (note that <code>friction</code> and <code>acceleration</code> are both completely optional):</p><ul><li><b>velocity</b> : Number - the initial velocity of the object measured in units per second (or for tweens where <code>useFrames</code> is <code>true</code>, it would be measured per frame). (Default: <code>0</code>)</li><li><b>acceleration</b> : Number - the amount of acceleration applied to the object, measured in units per second (or for tweens where <code>useFrames</code> is <code>true</code>, it would be measured per frame). (Default: 0)</li><li><b>friction</b> : Number - a value between 0 and 1 where 0 is no friction, 0.08 is a small amount of friction, and 1 will completely prevent any movement. This is not meant to be precise or scientific in any way, but it serves as an easy way to apply a friction-like physics effect to your tween. Generally it is best to experiment with this number a bit, starting at a very low value like 0.02. Also note that friction requires more processing than physics tweens without any friction. (Default: <code>0</code>)</li></ul><p><b>USAGE:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(mc, 2, {physicsProps:{<br />                                    x:{velocity:100, acceleration:200},<br />                                    y:{velocity:-200, friction:0.1}<br />                                }<br />                        });</pre><p>PhysicsPropsPlugin is a <a href=\"http://www.greensock.com/club/\" target=\"external\">Club GreenSock</a> membership benefit. You must have a valid membership to use this class without violating the terms of use. Visit <a href=\"http://www.greensock.com/club/\" target=\"external\">http://www.greensock.com/club/</a> to sign up or get more details.</p>"}},"4c5618b6dde74bd2":{"meta":{"keywords":["js.EaselPlugin","Plugins"],"title":"EaselPlugin","description":""},"header":{"content":"<p>Tweens special EaselJS-related properties for things like saturation, contrast, tint, colorize, brightness, exposure, and hue which leverage EaselJS's ColorFilter and ColorMatrixFilter (see<a href=\"http://www.createjs.com/#!/EaselJS\" target=\"external\">http://www.createjs.com/#!/EaselJS</a> for more information about EaselJS). Of course you don't need the plugin to tween normal numeric properties of EaselJS objects (like <code>x</code> and <code>y</code>), but some filters or effects require special manipulation which is what EaselPlugin is for. Currently it only handles special properties related to ColorFilter and ColorMatrixFilter, and it can tween the \"frame\" property of a MovieClip.</p><p>GreenSock's EaselPlugin exposes convenient properties that aren't a part of EaselJS's API like <code>\"tint\", \"tintAmount\", \"exposure\",</code> and <code>\"brightness\"</code> for ColorFilter, as well as<code>\"saturation\", \"hue\", \"contrast\", \"colorize\",</code> and <code>\"colorizeAmount\"</code> for ColorMatrixFilter. Simply wrap the values that you'd like to tween in an \"easel\" object. Here are some examples:</p><pre class='pre-container prettyprint'>//setup stage and create a Shape into which we'll draw a circle later...<br />var canvas = document.getElementById('myCanvas'), <br />    stage = new createjs.Stage(canvas),<br />    circle = new createjs.Shape(),<br />    g = circle.graphics;<br />//draw a red circle in the Shape<br />g.beginFill(createjs.Graphics.getRGB(255, 0, 0));<br />g.drawCircle(0, 0, 100);<br />g.endFill();<br />//in order for the ColorFilter to work, we must cache() the circle<br />circle.cache(-100, -100, 200, 200);<br />//place the circle at 200,200<br />circle.x = 200;<br />circle.y = 200;<br />//add the circle to the stage<br />stage.addChild(circle);<br />//setup a \"tick\" event listener so that the EaselJS stage gets updated on every frame/tick<br />TweenLite.ticker.addEventListener(\"tick\", stage.update, stage);<br />stage.update();<br />//tween the tint of the circle to green and scale it to half-size<br />TweenLite.to(circle, 2, {scaleX:.5, scaleY:.5, easel:{tint:0x00FF00}});<br />//tween to a different tint that is only 50% (mixing with half of the original color) and animate the scale, position, and rotation simultaneously.<br />TweenLite.to(circle, 3, {scaleX:1.5, scaleY:0.8, x:250, y:150, rotation:180, easel:{tint:\"#0000FF\", tintAmount:0.5}, delay:3, ease:Elastic.easeOut});<br />//then animate the saturation down to 0<br />TweenLite.to(circle, 2, {easel:{saturation:0}, delay:6});</pre><p>You can also tween any individual properties of the ColorFilter object like this:</p><pre class='pre-container prettyprint'>TweenLite.to(circle, 3, {easel:{colorFilter:{redMultiplier:0.5, blueMultiplier:0.8, greenOffset:100}}});</pre><p>Or you can tween things like the \"exposure\" of an image which is a value from 0-2 where 1 is normal exposure, 2 is completely overexposed (white) and 0 is completely underexposed (black). Or define a \"brightness\" value which uses the same concept: a value from 0-2. These effects can be very useful for images in particular.</p><p><b>Note:</b> a common mistake is to forget to wrap EaselJS-related properties in an <code>easel</code> object which is essential for specifying your intent. You also must load the EaselJS's ColorFilter and/or ColorMatrixFilter JavaScript files to enable the filters to actually work.</p>"}},"5190c7bdac5c1b1c":{"meta":{"keywords":"","description":"","imagePath":""},"content":"<div class=\"package-feature\"><h1>Easing</h1><img style=\"width: 93%;\" src=\"https://greensock.com/wp-content/themes/greensock/images/divider.png\" class=\"fr-fic fr-dii\"><p><br></p><div class=\"ease-visualizer ease_visualizer enabled\" style=\"padding: 70px 20px 20px; border-radius: 10px; color: rgb(153, 153, 153); background-color: rgb(34, 34, 34);\"><style> \t.custom_edit_bg { \t\tfill:#303030; \t} \t#custom_edit_container { \t\ttop:0; \t\tleft:0; \t\toverflow:visible; \t\tz-index:1001; \t} .ease-instructions { \tposition: absolute; \ttop:38px; \tright: 13px; \twidth: 245px; \tcolor: #777; \tborder-bottom: 1px solid #444; \tpadding-bottom: 10px; \tpointer-events: none; \topacity: 0; \tvisibility: hidden; } .ease-instructions p { \tfont-size: 13px; \tmargin: 0; \tpadding: 2px 0; \tline-height: 16px; } .ease-visualizer .ease-instructions h2 { \tfont-size: 17px; \tcolor: #aaa; \tmargin:0; \tpadding: 2px 0; \tposition: static; }  .ease_visualizer, .ease_visualizer * { \t-webkit-box-sizing: border-box; \t-moz-box-sizing: border-box; \tbox-sizing: border-box; }  .ease-visualizer .custom-warning, .ease-visualizer .custom-warning a { \tcolor: #999; \tfont-size: 12px; \tline-height: 14px; } .ease-visualizer .command .custom-warning { \tdisplay: none; !important; \tpadding: 6px 12px; \tmargin: 8px 0 0 0; \tbackground-color: #333; \tborder-radius: 6px; } .ease_visualizer textarea:focus, .ease_visualizer input:focus, .ease_visualizer button:focus, .ease_visualizer select:focus { \toutline: 0; } .ease_menu { \tposition: absolute; \ttop: 70px; \tright: 20px; \twidth:244px; \tfont-size: 1.5em; \tcolor: #626262; \tz-index:500; \tdisplay: inline-block; } .ease_visualizer h2 { \tposition: absolute; \ttop: 24px; \tfont-size:36px; \tcolor: #999; \tfont-weight: 400; \tpadding: 0; \tmargin: 0; } .ease_menu .ease_class:hover { \tcolor: #888;  background-color: #333; } .ease_menu .ease_class { \tposition: relative; \tpadding: 2px 6px;  border-radius: 4px;  float: left;  clear: both;  cursor: pointer; } .ease_menu .ease_type { \tposition: absolute; \tdisplay: none; } .ease_menu .ease_type_quick_label {  color: #ddd; } .ease_menu .ease_type_section { \tborder-top: 1px solid #444; \tpadding: 6px;  clear:both;  position: relative;  top: 10px; } .ease_visualizer { \twidth: 100%; \tmax-width: 840px; \tpadding: 0; \tpadding-top: 70px; \tmargin-left: auto; \tmargin-right: auto; \tcolor: #999999; \tfont-size: 13px; \tfont-family: \"Signika Negative\", sans-serif; \tposition: relative; }  .ease_visualizer { \tvisibility: hidden; } .ease_visualizer.enabled { \tvisibility: visible; }  .ease_visualizer a { \tcolor: #61AC27; }  .ease_visualizer .go { \twidth: 244px; \tz-index: 5; } .ease_visualizer .command { \tposition: relative; \tpadding: 14px; \tmargin-top: 30px; \tfont-size: 18px; \tline-height: 26px; \tfont-family: consolas, menlo, monaco, \"courier new\", monospace; \tz-index: 2; \tbackground-color: rgba(255,255,255,0.025); \tcolor: #F1F2F3; \tborder-radius: 6px; } .ease_visualizer.light .command { \tbackground-color: rgba(0,0,0,0.855); }  .ease_visualizer .command pre { \tdisplay: inline; }  @media screen and (min-width: 950px) { \t.ease_visualizer .command div { \t\tdisplay: inline; \t} \t.ease_visualizer .command pre { \t\tdisplay: none; \t} }  .ease_visualizer .command .easetype_rough .rough_easeclass, .ease_visualizer .command .easetype_rough .rough_easetype { \tdisplay: inline; }  .ease_visualizer .command .number, .ease_visualizer .command .number + .display { \tcolor: #FACD22; } .ease_visualizer .command .class, .ease_visualizer .command .class + .display, .ease_visualizer .command .main_ease_class_label, .ease_visualizer .command .rough_ease_class_label { \tcolor: #72a5d8; } .ease_visualizer .command .string, .ease_visualizer .command .string + .display, .ease_visualizer .command .rough_taper_label { \tcolor: #EC7600; } .ease_visualizer .command .comment { \tcolor: #999999; \tdisplay: block !important; \tline-height: 24px; \tmargin: 5px 0; } .ease_visualizer .command .comment div { \tdisplay: block; } .ease_visualizer .command .comment .clubgreensock { \tcolor: #F1F2F3; \tpadding: 14px 6px 6px 6px; \tmargin-top: 14px; \tborder-top: 1px solid #61AC27; } .ease_visualizer .command .comment .clubgreensock:before { \tcontent: \"\"; \tfloat: left; \twidth: 62px; \theight: 74px; \tmargin-top: -8px; \tmargin-left: -6px; \tmargin-right: 14px; \tbackground: url(https://www.greensock.com/forums/uploads/packages-0558826001407339622.png) 0 0 no-repeat; \tbackground-size: 62px; } .ease_visualizer .command .keyword, .ease_visualizer .command .slowmo_yoyo_label, .ease_visualizer .command .rough_randomize_label, .ease_visualizer .command .rough_clamp_label { \tcolor: #93C763; }  .ease_visualizer label { \tposition: relative; \ttext-decoration: underline; \tcursor: pointer; } .ease_visualizer label.locked { \ttext-decoration: none; \tcursor: auto; }  .ease_visualizer label input, .ease_visualizer label select { \tposition: absolute; \tleft: 0; \ttop: 0; \tz-index: 1; \tfont: inherit; \tfont-size: inherit; \tline-height: inherit; \theight: 100%; \twidth: 100%; \tcolor: #000000 !important; \topacity: 0; \tbackground: none; \tborder: none; \tpadding: 0; \tmargin: 0; \t-webkit-appearance: none; \t-moz-appearance: none; \tappearance: none; \tcursor: pointer; } .ease_visualizer label input + .display { \tposition: relative; \tz-index: 2; } .ease_visualizer label input:focus + .display, .ease_visualizer label select:focus + .display { \t-webkit-box-shadow: 0 0 0 2px #222222, 0 0 1px 3px #FFFFFF; \t-moz-box-shadow: 0 0 0 2px #222222, 0 0 1px 3px #FFFFFF; \tbox-shadow: 0 0 0 2px #222222, 0 0 1px 3px #FFFFFF; \toutline: none; }  .ease_visualizer span[contenteditable] { \ttext-decoration: underline; \tcursor: pointer; } .ease_visualizer span[contenteditable]:focus { \t-webkit-box-shadow: 0 0 0 2px #222222, 0 0 1px 3px #FFFFFF; \t-moz-box-shadow: 0 0 0 2px #222222, 0 0 1px 3px #FFFFFF; \tbox-shadow: 0 0 0 2px #222222, 0 0 1px 3px #FFFFFF; \toutline: none; } .ease_visualizer .easeclass { \tdirection: rtl; }   .ease_visualizer .controls { \t/* margin: 10px 0; */ \tposition: relative; \tz-index: 5; } @media screen and (min-width: 720px) { \t.ease_visualizer .controls { \t\t/* margin-top: -16px; */ \t} } .ease_visualizer .controls button { \tborder: none; \tmargin: -40px 0 0 0; \tpadding: 0 24px; \tcursor: pointer; \tdisplay: inline-block; \tline-height: 44px; \tfont-size:18px; \tborder-radius: 6px; \ttext-transform: uppercase; \tfloat: right; \tposition:relative; \tcolor: #F1F2F3; \tbackground-color: #414141; \tbackground-image: -webkit-linear-gradient(top, #575757, #414141); \tbackground-image: -moz-linear-gradient(top, #575757, #414141); \tbackground-image: -ms-linear-gradient(top, #575757, #414141); \tbackground-image: -o-linear-gradient(top, #575757, #414141); \tbackground-image: linear-gradient(to bottom, #575757, #414141); \ttext-shadow: 0px 1px 0px #414141; \t-webkit-box-shadow: 0px 1px 0px #414141; \t-moz-box-shadow: 0px 1px 0px #414141; \tbox-shadow: 0px 1px 0px #414141; \t-webkit-user-select: none; \t-moz-user-select: none; \tuser-select: none; } .ease_visualizer .controls button:hover { \tbackground-color: #57a818; \tbackground-image: -webkit-linear-gradient(top, #57a818, #4d9916); \tbackground-image: -moz-linear-gradient(top, #57a818, #4d9916); \tbackground-image: -ms-linear-gradient(top, #57a818, #4d9916); \tbackground-image: -o-linear-gradient(top, #57a818, #4d9916); \tbackground-image: linear-gradient(to bottom, #57a818, #4d9916); \ttext-shadow: 0px 1px 0px #32610e; \t-webkit-box-shadow: 0px 1px 0px #32610e; \t-moz-box-shadow: 0px 1px 0px #32610e; \tbox-shadow: 0px 1px 0px #32610e; }  .ease_visualizer .visualization { \tmax-width: 100%; \theight: auto; \t/* margin-left: auto; */ \t/* margin-right: auto; */ \tz-index: 100; }  .ease_visualizer .fluidwrap { \theight: 0; \twidth: 100%; \tpadding-bottom: 100%; }  .ease_visualizer .graph { \tposition: relative; \twidth: 100%; \tmax-width: 530px; \t-webkit-user-select: none; \t-moz-user-select: none; \tuser-select: none; } .ease_visualizer.editMode.mousedown .graph { \tz-index: 100; } .ease_visualizer .graph .graphwrap { \tposition: absolute; \ttop: 0; \tright: 5.660377358490566%; \tbottom: 5.660377358490566%; \tleft: 0; } \t.ease_visualizer .graph .graph_wrap_inner { \t\tpointer-events: none; \t\toverflow:visible; \t}  .ease_visualizer .graph .svg { \tposition: absolute; \tz-index: 1; \twidth: 100%; \theight: 100%; \tcursor: default; } .ease_visualizer .graph .svg svg { \toverflow: visible; } .ease_visualizer .graph .svg .graph_bg { \tfill: #303030; } .ease_visualizer.light .graph .svg .graph_bg { \tfill: #DDDDDD; } .ease_visualizer .graph .svg .graph_linear { \tfill: none; \tstroke: #1d1d1d; \tstroke-width: 1.5px; } .ease_visualizer.light .graph .svg .graph_linear { \tstroke: #EDEDED; } .ease_visualizer .graph .svg .graph_line { \tfill: none; \tstroke: rgba(255,255,255,0.07); \tstroke-width: 1.5px; } .ease_visualizer.light .graph .svg .graph_line { \tstroke: rgba(0,0,0,0.1); } .ease_visualizer .graph .svg .graph_path, .ease_visualizer .graph .svg .ease_template { \tfill: none; \tstroke: #666666; \tstroke-width: 2px; \tstroke-linecap: round; \tstroke-linejoin: round; } .ease_visualizer .graph .svg .ease_template { \tstroke: #F1F2F3; } .ease_visualizer .graph .svg .ease_template_bg { \tfill: transparent; }  .ease_visualizer.light .graph .svg .graph_path, .ease_visualizer.light .graph .svg .ease_template { \tstroke: #AAAAAA; } .ease_visualizer.light .graph .svg .ease_template { \tstroke: #CCC; } .ease_visualizer .graph .svg .graph_path_reveal { \tfill: none; \tstroke: #F1F2F3; \tstroke-width: 0.4px; \tstroke-linecap: round; \tstroke-linejoin: round; } .ease_visualizer.light .graph .svg .graph_path_reveal { \tstroke: #3C3C3C; }  .ease_visualizer .graph .svg .control, .ease_visualizer .graph .svg .point { \tcursor: pointer; } .ease_visualizer .graph .svg .point, .ease_visualizer .graph .svg .control { \tfill: #61AC27; \tstroke: transparent; \tstroke-width: 2px; } .ease_visualizer .graph .svg .point { \tfill: #61AC27; } .ease_visualizer .graph .svg .line { \tstroke: #61AC27; \tstroke-width: 0.3px; \tstroke-dasharray: 1,0.6; } .ease_visualizer .graph .svg .outside .point, .ease_visualizer .graph .svg .outside .control { \tfill: #E81146; } .ease_visualizer .graph .svg .outside .line { \tstroke: #E81146; } .ease_visualizer .graph .svg .mouse_catch { \tfill: transparent; } .ease_visualizer .graph .custom_edit { \tvisibility: hidden; } .ease_visualizer.editMode .graph .custom_edit { \tvisibility: visible; } .ease_visualizer .graph .progress { \tposition: absolute; \theight: 100%; \twidth: 100%; \tz-index: 0; } .ease_visualizer .graph .progress_bar .label { \tposition: absolute; \tline-height: 30px; } .ease_visualizer .graph .progress_bar.horizontal .label { \tbottom: 1px; \twidth: 100%; \ttext-align: center; } .ease_visualizer .graph .progress_bar.vertical .label { \ttop: 50%; \tleft: 2px; \tmargin-left: -50%; \ttransform-origin: top left; \t-webkit-transform: matrix(0, 1, -1, 0, 0, 0); \t-moz-transform: matrix(0, 1, -1, 0, 0, 0); \ttransform: matrix(0, 1, -1, 0, 0, 0); } .ease_visualizer .graph .progress_bar { \tposition: absolute; \tbackground-color: #2f2f2f; } .ease_visualizer.light .graph .progress_bar { \tbackground-color: #DDDDDD; } .ease_visualizer .graph .progress_bar.horizontal { \theight: 2px; \twidth: auto; \ttop: auto; \tbottom: 0; \tleft: 0; \tright: 5.660377358490566%; } .ease_visualizer .graph .progress_bar.vertical { \twidth: 2px; \ttop: 0; \tbottom: 5.660377358490566%; \tleft: auto; \tright: 0; } .ease_visualizer .graph .progress_fill { \theight: 100%; \twidth: 100%; \tbackground-color: #999999; } .ease_visualizer.light .graph .progress_fill { \tbackground-color: #777777; } .ease_visualizer .graph .progress_bar.vertical .progress_fill { \tbackground-color: #61AC27; } .ease_visualizer .graph .progress_bar.vertical .progress_joint { \tposition: absolute; \twidth: 10px; \theight: 10px; \tmargin-left: -4px; \tmargin-top: -5px; \tborder-radius: 50%; \tbackground-color: rgb(136, 206, 2); } @media screen and (min-width: 560px) { \t.ease_visualizer .graph .progress_bar.vertical .progress_joint { \t\twidth: 25px; \t\theight: 25px; \t\tmargin-left: -11px; \t\tmargin-top: -12px; \t} } .ease_visualizer .graph .progress_number { \tposition: absolute; \tbottom: 0; \tright: -9px; \tline-height: 0.35em; \ttext-align: right; }  @media screen and (max-width: 430px) { \t.ease_visualizer .graph .progress_bar .label { \t\tdisplay: none; \t} \t.ease_visualizer .graph .progress_number { \t\tdisplay: none; \t} }   .ease_visualizer .clock { \tposition: relative; \twidth: 100%; \tmax-width: 530px; \tborder-radius: 50%;  \tbackground-color: #303030; } .ease_visualizer.light .clock { \tbackground-color: #DDDDDD; } .ease_visualizer .clock_ease, .ease_visualizer .clock_linear, .ease_visualizer .clock_guide { \tposition: absolute; \tleft: 50%; \twidth: 2px; \tmargin-left: -1px; } .ease_visualizer .clock_linear { \ttop: 15%; \theight: 35%; \twidth: 2px; \tmargin-left: -1px; \tborder-radius: 2px 2px 0 0; \tbackground-color: #999999; } .ease_visualizer.light .clock_linear { \tbackground-color: #3C3C3C; } .ease_visualizer .clock_ease { \theight: 50%; \tborder-radius: 2px 2px 0 0; \tbackground-color: #61AC27; } .ease_visualizer .clock_guide { \ttop: 0; \theight: 50%; \tbackground-color: #1d1d1d; \twidth: 1px; \tmargin-left: -0.5px; } .ease_visualizer.light .clock_guide { \tbackground-color: #EDEDED; } .ease_visualizer .clock_joint, .ease_visualizer .clock_ease .clock_joint{ \tposition: absolute; \twidth: 10px; \theight: 10px; \ttop: 50%; \tleft: 50%; \tmargin-left: -5px; \tmargin-top: -5px; \tborder-radius: 50%; \tbackground-color: #999999; } .ease_visualizer.light .clock_joint { \tbackground-color: #3C3C3C; } .ease_visualizer .clock_ease .clock_joint { \ttop: -1px; \tbackground-color: #61AC27; } @media screen and (min-width: 560px) { \t.ease_visualizer .clock_ease .clock_joint { \t\twidth: 16px; \t\theight: 16px; \t\tmargin-left: -8px; \t\tmargin-top: -8px; \t} }   .ease_visualizer .box { \tposition: relative; \twidth: 100%; \tmax-width: 530px; \tbackground-color: #303030; } .ease_visualizer.light .box { \tbackground-color: #DDDDDD; } .ease_visualizer .box .boxwrap { \tposition: absolute; \ttop: 0; \tright: 0; \tbottom: 0; \tleft: 0; } .ease_visualizer .boxbox { \tposition: relative; \twidth: 20%; \twhite-space: pre; \ttext-align: center; \tmargin-bottom: .8%; \tborder-radius: 6px; \theight: 16%; \tpadding: 0 0.5em; \tcolor: #ccc; \tbackground-color: #666666;  font-size: 16px;  line-height: 80px; } .ease_visualizer .boxbox.box_custom { \tbackground-color: rgb(136, 206, 2); }   .ease_visualizer .ease_selector { \tposition: absolute; \ttop: 0; \tbottom: 0; \tleft: 0; \tright: 0; \tz-index: 6; \tbackground-color: #222; \toverflow: auto; \tpadding: 4px; } .ease_visualizer .ease_selector .ease_selector_wrap { \twidth: 100%; \theight: auto; \tmargin-left: auto; \tmargin-right: auto; \t-webkit-user-select: none; \t-moz-user-select: none; \tuser-select: none; \tbackground-color: #222222; } .ease_visualizer .ease_selector .ease_class { \toverflow: hidden; \tfloat: left; \twidth: 49.5%; \tmargin: 0 1% 0 0; \tposition: relative; } .ease_visualizer .ease_selector .ease_class:nth-child(even) { \tmargin: 0; } .ease_visualizer.light .ease_selector .ease_class { \tborder-color: #DDDDDD; } @media screen and (max-width: 500px) { \t.ease_visualizer .ease_selector .ease_class { \t\tclear: left; \t\twidth: 100%; \t\tmargin-right: 0; \t} } .ease_visualizer .ease_selector input { \tdisplay: none; } .ease_visualizer .ease_selector .ease_type, .ease_visualizer .ease_selector button { \tfont-family: consolas, menlo, monaco, \"courier new\", monospace; \tfont-weight: normal; \tfont-size: 12px; \ttext-align: center; \tcolor: #FFFFFF; } .ease_visualizer .ease_selector .ease_type { \tposition: absolute; \tz-index: 2; \twidth: 100%; \tfont-size: 22px; \tline-height: 34px; \tcolor: #fff; } .ease_visualizer .ease_selector button { \tborder: none; \tmargin: 1px 0 0 0; \tpadding: 0; \tbackground: url(https://greensock.com/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer-dark.gif) 0 0 no-repeat; \tbackground-size: 700%; \tfont-weight: bold; \tcolor: #3C3C3C; \tfloat: left; \theight: 0; \twidth: 33.33333%; \tpadding-bottom: 33.33333%; \tpadding-top: 28px; \tposition: relative; } .ease_visualizer .ease_selector button span { \tcolor: #999; \tbackground-color: #111; } .ease_visualizer .ease_selector .other button { \twidth: 25%; } .ease_visualizer .ease_selector button:hover { \t-webkit-box-shadow: 0 0 5px #4298ED inset; \t-moz-box-shadow: 0 0 5px #4298ED inset; \tbox-shadow: 0 0 5px #4298ED inset; } .ease_visualizer .ease_selector button:focus, .ease_visualizer .ease_selector button:active { \toutline: 0; \t-webkit-box-shadow: 0 0 8px #4298ED inset; \t-moz-box-shadow: 0 0 8px #4298ED inset; \tbox-shadow: 0 0 8px #4298ED inset; } .ease_visualizer .ease_selector button.Back.easeOut { \tbackground-position: 0% 0%; } .ease_visualizer .ease_selector button.Back.easeInOut { \tbackground-position: 16.6% 0%; } .ease_visualizer .ease_selector button.Back.easeIn { \tbackground-position: 33.3% 0%; }  .ease_visualizer .ease_selector button.Bounce.easeOut { \tbackground-position: 50% 0%; } .ease_visualizer .ease_selector button.Bounce.easeInOut { \tbackground-position: 66.6% 0%; } .ease_visualizer .ease_selector button.Bounce.easeIn { \tbackground-position: 83.3% 0%; }  .ease_visualizer .ease_selector button.Circ.easeOut { \tbackground-position: 100% 0%; } .ease_visualizer .ease_selector button.Circ.easeInOut { \tbackground-position: 0% 24.1%; } .ease_visualizer .ease_selector button.Circ.easeIn { \tbackground-position: 16.6% 24.1%; }  .ease_visualizer .ease_selector button.Elastic.easeOut { \tbackground-position: 33.3% 24.1%; } .ease_visualizer .ease_selector button.Elastic.easeInOut { \tbackground-position: 50% 24.1%; } .ease_visualizer .ease_selector button.Elastic.easeIn { \tbackground-position: 66.6% 24.1%; }  .ease_visualizer .ease_selector button.Expo.easeOut { \tbackground-position: 83.3% 24.1%; } .ease_visualizer .ease_selector button.Expo.easeInOut { \tbackground-position: 100% 24.1%; } .ease_visualizer .ease_selector button.Expo.easeIn { \tbackground-position: 0% 48.2%; }  .ease_visualizer .ease_selector button.Power0.easeOut { \tbackground-position: 16.6% 48.2%; } .ease_visualizer .ease_selector button.Power0.easeInOut { \tbackground-position: 16.6% 48.2%; } .ease_visualizer .ease_selector button.Power0.easeIn { \tbackground-position: 16.6% 48.2%; }  .ease_visualizer .ease_selector button.Power1.easeOut { \tbackground-position: 33.3% 48.2%; } .ease_visualizer .ease_selector button.Power1.easeInOut { \tbackground-position: 50% 48.2%; } .ease_visualizer .ease_selector button.Power1.easeIn { \tbackground-position: 66.6% 48.2%; }  .ease_visualizer .ease_selector button.Power2.easeOut { \tbackground-position: 83.3% 48.2%; } .ease_visualizer .ease_selector button.Power2.easeInOut { \tbackground-position: 100% 48.2%; } .ease_visualizer .ease_selector button.Power2.easeIn { \tbackground-position: 0% 72.4%; }  .ease_visualizer .ease_selector button.Power3.easeOut { \tbackground-position: 16.6% 72.4%; } .ease_visualizer .ease_selector button.Power3.easeInOut { \tbackground-position: 33.3% 72.4%; } .ease_visualizer .ease_selector button.Power3.easeIn { \tbackground-position: 50% 72.4%; }  .ease_visualizer .ease_selector button.Power4.easeOut { \tbackground-position: 66.6% 72.4%; } .ease_visualizer .ease_selector button.Power4.easeInOut { \tbackground-position: 83.3% 72.4%; } .ease_visualizer .ease_selector button.Power4.easeIn { \tbackground-position: 100% 72.4%; }  .ease_visualizer .ease_selector button.Sine.easeOut { \tbackground-position: 0% 96.5%; } .ease_visualizer .ease_selector button.Sine.easeInOut { \tbackground-position: 16.6% 96.5%; } .ease_visualizer .ease_selector button.Sine.easeIn { \tbackground-position: 33.3% 96.5%; }  .ease_visualizer .ease_selector button.CustomEase { \tbackground-position: 50% 96.5%; } .ease_visualizer .ease_selector .other button.CustomEase { \tbackground-position: 50% 99%; } .ease_visualizer .ease_selector button.RoughEase { \tbackground-position: 66.6% 96.5%; } .ease_visualizer .ease_selector .other button.RoughEase { \tbackground-position: 66.6% 99%; } .ease_visualizer .ease_selector button.SlowMo { \tbackground-position: 83.3% 96.5%; } .ease_visualizer .ease_selector .other button.SlowMo { \tbackground-position: 83.3% 99%; } .ease_visualizer .ease_selector button.SteppedEase { \tbackground-position: 100% 96.5%; } .ease_visualizer .ease_selector .other button.SteppedEase { \tbackground-position: 100% 99%; } </style><h2>GreenSock Ease Visualizer</h2><div class=\"ease-instructions\"><h2>Hints</h2><p>Add point: ALT-CLICK on line</p><p>Toggle smooth/corner: ALT-CLICK anchor</p><p>Get handle from corner anchor: ALT-DRAG</p><p>Toggle select: SHIFT-CLICK anchor</p><p>Delete anchor: press DELETE key</p><p>Undo: CTRL-Z</p></div><div class=\"ease_selector\" style=\"display: none; opacity: 0;\"><div class=\"ease_selector_wrap\"><div class=\"ease_class\"><div class=\"ease_type\">Power0 (Linear)</div><button class=\"Power0 easeOut\"><span>easeNone</span></button>\n<button class=\"Power0 easeInOut\"><span>easeNone</span></button>\n<button class=\"Power0 easeIn\"><span>easeNone</span></button></div><div class=\"ease_class\"><div class=\"ease_type\">Power1</div><button class=\"Power1 easeOut\"><span>easeOut</span></button>\n<button class=\"Power1 easeInOut\"><span>easeInOut</span></button>\n<button class=\"Power1 easeIn\"><span>easeIn</span></button></div><div class=\"ease_class\"><div class=\"ease_type\">Power2</div><button class=\"Power2 easeOut\"><span>easeOut</span></button>\n<button class=\"Power2 easeInOut\"><span>easeInOut</span></button>\n<button class=\"Power2 easeIn\"><span>easeIn</span></button></div><div class=\"ease_class\"><div class=\"ease_type\">Power3</div><button class=\"Power3 easeOut\"><span>easeOut</span></button>\n<button class=\"Power3 easeInOut\"><span>easeInOut</span></button>\n<button class=\"Power3 easeIn\"><span>easeIn</span></button></div><div class=\"ease_class\"><div class=\"ease_type\">Power4</div><button class=\"Power4 easeOut\"><span>easeOut</span></button>\n<button class=\"Power4 easeInOut\"><span>easeInOut</span></button>\n<button class=\"Power4 easeIn\"><span>easeIn</span></button></div><div class=\"ease_class\"><div class=\"ease_type\">Back</div><button class=\"Back easeOut tall\"><span>easeOut</span></button>\n<button class=\"Back easeInOut tall\"><span>easeInOut</span></button>\n<button class=\"Back easeIn tall\"><span>easeIn</span></button></div><div class=\"ease_class\"><div class=\"ease_type\">Elastic</div><button class=\"Elastic easeOut tall\"><span>easeOut</span></button>\n<button class=\"Elastic easeInOut tall\"><span>easeInOut</span></button>\n<button class=\"Elastic easeIn tall\"><span>easeIn</span></button></div><div class=\"ease_class\"><div class=\"ease_type\">Bounce</div><button class=\"Bounce easeOut\"><span>easeOut</span></button>\n<button class=\"Bounce easeInOut\"><span>easeInOut</span></button>\n<button class=\"Bounce easeIn\"><span>easeIn</span></button></div><div class=\"ease_class\"><div class=\"ease_type\">Other</div><button class=\"RoughEase\"><span>RoughEase</span></button>\n<button class=\"SlowMo\"><span>SlowMo</span></button>\n<button class=\"SteppedEase\"><span>SteppedEase</span></button></div><div class=\"ease_class\"><div class=\"ease_type\">Circ</div><button class=\"Circ easeOut\"><span>easeOut</span></button>\n<button class=\"Circ easeInOut\"><span>easeInOut</span></button>\n<button class=\"Circ easeIn\"><span>easeIn</span></button></div><div class=\"ease_class\"><div class=\"ease_type\">Expo</div><button class=\"Expo easeOut\"><span>easeOut</span></button>\n<button class=\"Expo easeInOut\"><span>easeInOut</span></button>\n<button class=\"Expo easeIn\"><span>easeIn</span></button></div><div class=\"ease_class\"><div class=\"ease_type\">Sine</div><button class=\"Sine easeOut\"><span>easeOut</span></button>\n<button class=\"Sine easeInOut\"><span>easeInOut</span></button>\n<button class=\"Sine easeIn\"><span>easeIn</span></button></div></div></div><div class=\"visualization graph\"><div class=\"fluidwrap\"><div class=\"graphwrap\"><br></div><div class=\"progress\"><div class=\"progress_bar horizontal\"><div class=\"progress_fill\" style=\"transform-origin: left center 0px; transform: matrix(1, 0, 0, 1, 0, 0);\"><br></div><div class=\"label\">progress</div></div><div class=\"progress_bar vertical\"><div class=\"progress_fill\" style=\"transform-origin: left bottom 0px; transform: matrix(1, 0, 0, 1, 0, 0);\"><br></div><div class=\"progress_joint\" style=\"top: 0%;\"><br></div><div class=\"label\">value</div></div><div class=\"progress_number\">1.00</div></div></div></div><div class=\"visualization clock\" style=\"display: none;\"><div class=\"fluidwrap\"><div class=\"clock_guide\"><br></div><div class=\"clock_linear\"><br></div><div class=\"clock_ease\"><div class=\"clock_joint\"><br></div></div><div class=\"clock_joint\"><br></div></div></div><div class=\"visualization box\" style=\"display: none;\"><div class=\"fluidwrap\"><div class=\"boxwrap\"><div class=\"boxbox box_power0\">Power0</div><div class=\"boxbox box_power1\">Power1</div><div class=\"boxbox box_power2\">Power2</div><div class=\"boxbox box_power3\">Power3</div><div class=\"boxbox box_power4\">Power4</div><div class=\"boxbox box_custom\"><br></div></div></div></div><div class=\"ease_menu\" style=\"color: rgb(98, 98, 98); width: 233px;\"><div class=\"ease_class\">Power0</div><div class=\"ease_class\">Power1</div><div class=\"ease_class\" style=\"color: rgb(0, 0, 0); background-color: rgb(136, 206, 2);\">Power2</div><div class=\"ease_class\">Power3</div><div class=\"ease_class\">Power4</div><div class=\"ease_class\">Back</div><div class=\"ease_class\">Elastic</div><div class=\"ease_class\">Bounce</div><div class=\"ease_class\">Rough</div><div class=\"ease_class\">SlowMo</div><div class=\"ease_class\">Stepped</div><div class=\"ease_class\">Circ</div><div class=\"ease_class\">Expo</div><div class=\"ease_class\">Sine</div><div class=\"ease_class\" style=\"color:#72a5d8;\">Custom</div><div class=\"ease_type_section\" style=\"visibility: visible;\">Type: <label class=\"ease_type_quick_label\"><select class=\"ease_type_quick_select editable\" data-type=\"ease_type_quick\" tabindex=\"-1\"><option value=\"easeIn\">easeIn</option><option value=\"easeInOut\">easeInOut</option><option selected=\"selected\" value=\"easeOut\">easeOut</option></select><span class=\"display\" contenteditable=\"true\" spellcheck=\"true\">easeOut</span></label></div></div><div class=\"controls\"><button class=\"go\" style=\"width: 233px;\">Run</button></div><div class=\"command\"><div class=\"comment\">// click and modify the underlined values</div><div><span class=\"class\">TweenLite</span>.to(<label class=\"target_label\"><select class=\"target_select\" data-type=\"target\"><option selected=\"selected\" value=\"graph\">graph</option><option value=\"clock\">clock</option><option value=\"box\">box</option></select><span class=\"display\">graph</span></label>, <label class=\"duration_label\"><select class=\"number duration editable\" data-type=\"duration\" tabindex=\"-1\"><option value=\"0.5\">0.5    </option><option value=\"1\">1</option><option selected=\"selected\" value=\"2.5\">2.5</option><option value=\"5\">5</option><option value=\"10\">10</option></select><span class=\"display\" contenteditable=\"true\" spellcheck=\"true\">2.5</span></label>, {</div><div><!-- easeline --><pre>  </pre>ease: <label class=\"main_ease_class_label\"><select class=\"main_ease_class_select\" data-type=\"main_ease_class\" style=\"visibility: hidden;\"><option value=\"Back\">Back</option><option value=\"Bounce\">Bounce</option><option value=\"Circ\">Circ</option><option value=\"Elastic\">Elastic</option><option value=\"Expo\">Expo</option><option value=\"Power0\">Linear/Power0</option><option value=\"Power1\">Quad/Power1</option><option selected=\"selected\" value=\"Power2\">Cubic/Power2</option><option value=\"Power3\">Quart/Power3</option><option value=\"Power4\">Strong/Quint/Power4</option><option value=\"Sine\">Sine</option><option value=\"RoughEase\">RoughEase</option><option value=\"SlowMo\">SlowMo</option><option value=\"SteppedEase\">SteppedEase</option><option value=\"CustomEase\">Custom</option></select><span class=\"display\">Power2</span></label>.<!-- start basic --><span class=\"main_ease_type basic_ease elastic_ease back_ease\"><label class=\"main_basic_ease_type_label\"><select class=\"basic_ease_type_select elastic_ease back_ease\" data-type=\"main_basic_ease_type\"><option value=\"easeIn\">easeIn</option><option value=\"easeInOut\">easeInOut</option><option selected=\"selected\" value=\"easeOut\">easeOut</option></select><span class=\"display\">easeOut</span></label><span class=\"main_ease_type basic_ease\">,</span></span><!-- start linear --><span class=\"main_ease_type linear_ease\" style=\"display: none;\">easeNone,</span><!-- start rough --><span class=\"main_ease_type rough_ease\" style=\"display: none;\">ease.config({ <div><pre>    </pre>template: <label class=\"rough_ease_class_label\"><select class=\"rough_ease_class_select\" data-type=\"rough_ease_class\"><option value=\"Back\">Back</option><option value=\"Bounce\">Bounce</option><option value=\"Circ\">Circ</option><option value=\"Elastic\">Elastic</option><option value=\"Expo\">Expo</option><option selected=\"selected\" value=\"Power0\">Linear/Power0</option><option value=\"Power1\">Quad/Power1</option><option value=\"Power2\">Cubic/Power2</option><option value=\"Power3\">Quart/Power3</option><option value=\"Power4\">Strong/Quint/Power4</option><option value=\"Sine\">Sine</option></select><span class=\"display\">Power0</span></label>.<span class=\"rough_ease_type rough_basic_ease\" style=\"display: none;\"><label class=\"rough_basic_ease_type_label\"><select class=\"rough_ease_type_select\" data-type=\"rough_basic_ease_type\"><option value=\"easeIn\">easeIn</option><option value=\"easeInOut\">easeInOut</option><option selected=\"selected\" value=\"easeOut\">easeOut</option></select><span class=\"display\">easeOut</span></label></span><span class=\"rough_ease_type rough_linear_ease\">easeNone</span>,</div><div><pre>    </pre>strength: <label class=\"rough_strength_label\"><select class=\"number rough_strength editable\" data-type=\"rough_strength\" tabindex=\"-1\"><option value=\"0.2\">0.2    </option><option value=\"0.5\">0.5</option><option selected=\"selected\" value=\"1\">1</option><option value=\"1.5\">1.5</option><option value=\"2\">2</option></select><span class=\"display\" contenteditable=\"true\" spellcheck=\"true\">1</span></label>,</div><div><pre>    </pre>points: <label class=\"rough_points_label\"><select class=\"number rough_points editable\" data-type=\"rough_points\" tabindex=\"-1\"><option value=\"10\">10    </option><option selected=\"selected\" value=\"20\">20</option><option value=\"50\">50</option><option value=\"100\">100</option><option value=\"200\">200</option></select><span class=\"display\" contenteditable=\"true\" spellcheck=\"true\">20</span></label>,</div><div><pre>    </pre>taper: <label class=\"rough_taper_label\"><select class=\"rough_taper_select\" data-type=\"rough_taper\"><option selected=\"selected\" value='\"none\"'>none</option><option value='\"in\"'>in</option><option value='\"out\"'>out</option><option value='\"both\"'>both</option></select><span class=\"display\">\"none\"</span></label>,</div><div><pre>    </pre>randomize: <label class=\"rough_randomize_label\"><input type=\"checkbox\" checked=\"checked\" class=\"rough_randomize_checkbox\" data-type=\"rough_randomize\"><span class=\"display\">true</span></label>,</div><div><pre>    </pre>clamp: <label class=\"rough_clamp_label\"><input type=\"checkbox\" class=\"rough_clamp_checkbox\" data-type=\"rough_clamp\"><span class=\"display\">false</span></label></div><div><pre>  </pre>}),</div></span><!-- start slowmo --><span class=\"main_ease_type slowmo_ease\" style=\"display: none;\">ease.config(<label class=\"slowmo_ratio_label\"><select class=\"number slowmo_ratio editable\" data-type=\"slowmo_ratio\" tabindex=\"-1\"><option value=\"0.1\">0.1    </option><option value=\"0.3\">0.3</option><option value=\"0.5\">0.5</option><option selected=\"selected\" value=\"0.7\">0.7</option><option value=\"0.9\">0.9</option></select><span class=\"display\" contenteditable=\"true\" spellcheck=\"true\">0.7</span></label>, <label class=\"slowmo_power_label\"><select class=\"number slowmo_power editable\" data-type=\"slowmo_power\" tabindex=\"-1\"><option value=\"0.1\">0.1    </option><option value=\"0.4\">0.4</option><option selected=\"selected\" value=\"0.7\">0.7</option><option value=\"1\">1</option><option value=\"2\">2</option></select><span class=\"display\" contenteditable=\"true\" spellcheck=\"true\">0.7</span></label>, <label class=\"slowmo_yoyo_label\"><input type=\"checkbox\" class=\"slowmo_yoyo_checkbox\" data-type=\"slowmo_yoyo\"><span class=\"display\">false</span></label>),</span><!-- start stepped --><span class=\"main_ease_type stepped_ease\" style=\"display: none;\">config(<label class=\"stepped_steps_label\"><select class=\"number stepped_steps editable\" data-type=\"stepped_steps\" tabindex=\"-1\"><option value=\"2\">2     </option><option value=\"6\">6</option><option selected=\"selected\" value=\"12\">12</option><option value=\"20\">20</option><option value=\"40\">40</option></select><span class=\"display\" contenteditable=\"true\" spellcheck=\"true\">12</span></label>),</span><!-- start Elastic --><span class=\"main_ease_type elastic_ease\" style=\"display: none;\">.config(<label class=\"elastic_amplitude_label\"><select class=\"number elastic_amplitude editable\" data-type=\"elastic_amplitude\" tabindex=\"-1\"><option selected=\"selected\" value=\"1\">1    </option><option value=\"1.2\">1.2</option><option value=\"1.5\">1.5</option><option value=\"1.75\">1.75</option><option value=\"2\">2</option><option value=\"2.5\">2.5</option></select><span class=\"display\" contenteditable=\"true\" spellcheck=\"true\">1</span></label>, <label class=\"elastic_period_label\"><select class=\"number elastic_period editable\" data-type=\"elastic_period\" tabindex=\"-1\"><option value=\"0.1\">0.1    </option><option value=\"0.2\">0.2</option><option selected=\"selected\" value=\"0.3\">0.3</option><option value=\"0.4\">0.4</option><option value=\"0.5\">0.5</option><option value=\"0.75\">0.75</option><option value=\"1\">1</option></select><span class=\"display\" contenteditable=\"true\" spellcheck=\"true\">0.3</span></label>),</span><!-- start Back --><span class=\"main_ease_type back_ease\" style=\"display: none;\">.config(<label class=\"back_amount_label\"><select class=\"number back_amount editable\" data-type=\"back_amount\" tabindex=\"-1\"><option value=\"1\">1    </option><option value=\"1.4\">1.4</option><option selected=\"selected\" value=\"1.7\">1.7</option><option value=\"2\">2</option><option value=\"3\">3</option><option value=\"4\">4</option></select><span class=\"display\" contenteditable=\"true\" spellcheck=\"true\">1.7</span></label>),</span><!-- start custom --><span class=\"main_ease_type custom_ease\" style=\"display: none;\">create(\"custom\", \"<span class=\"string custom_path\" contenteditable=\"true\" spellcheck=\"true\">M0,0,C0.126,0.382,0.282,0.674,0.44,0.822,0.632,1.002,0.818,1.001,1,1</span>\"),</span>\n<!-- close ease line --></div><div class=\"prop prop_graph\"><pre>  </pre>y: <span class=\"number\">-500</span></div><div class=\"prop prop_clock\" style=\"display: none;\"><pre>  </pre>rotation: <span class=\"number\">360</span></div><div class=\"prop prop_box\" style=\"display: none;\"><pre>  </pre>x: <span class=\"string\">\"400%\"</span></div><div>});</div><div class=\"custom-warning\">// *Requires CustomEase which can be downloaded at <a href=\"http://greensock.com/customease/\">greensock.com/customease</a> (not the CDN or github).</div></div><script src=\"/js/src/plugins/MorphSVGPlugin.min.js\"></script>\n<script src=\"/js/src/utils/PathEditor.min.js\"></script>\n<script src=\"/js/src/easing/CustomEase.min.js\"></script></div><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script><p><br></p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/CustomBounce\"><span data-link-id=\"19160c04837df0bb\"></span></span></h1></div><p>Configure your own bounce ease with squash and stretch</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/CustomWiggle\"><span data-link-id=\"681f9501cd7f99b3\"></span></span></h1></div><p>Creates highly configurable wiggle eases.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/CustomEase\"><span data-link-id=\"1315d24279922963\"></span></span></h1></div><p>Allows you to create literally **ANY** ease by simply drawing it in the Ease Visualizer or by copying/pasting an SVG path. Unlimited control points.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/SteppedEase\"><span data-link-id=\"0879a53eb4051ccf\"></span></span></h1></div><p>Most easing equations give a smooth, gradual transition between the start and end values, but SteppedEase provides an easy way to define a specific number of steps that the transition should take.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/SlowMo\"><span data-link-id=\"830525841e3dd3cb\"></span></span></h1></div><p>SlowMo is a configurable ease that produces a slow-motion effect that decelerates initially, then moves linearly for a certain portion of the ease (which you can choose) and then accelerates again at the end; it's great for effects like zooming text onto the screen, smoothly moving it long enough for people to read it, and then zooming it off the screen</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/RoughEase\"><span data-link-id=\"57d33bbbf0c4c2c2\"></span></span></h1></div><p>Most easing equations give a smooth, gradual transition between the start and end values, but RoughEase provides an easy way to get a rough, jagged effect instead, or you can also get an evenly-spaced back-and-forth movement if you prefer.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Strong\"><span data-link-id=\"c2327a2ee1c89b0c\"></span></span></h1></div><p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 4 which is identical to the <code>Power4</code> ease.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Sine\"><span data-link-id=\"07392828b060a423\"></span></span></h1></div><p>Eases with a relatively low power either at the beginning (easeIn), the end (easeOut), or both (easeInOut).</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Quint\"><span data-link-id=\"424d2c8144aca82b\"></span></span></h1></div><p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 4 which is identical to the <code>Power4</code> ease.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Quart\"><span data-link-id=\"3eab3f172dae806f\"></span></span></h1></div><p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 3 which is identical to the <code>Power2</code> ease.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Quad\"><span data-link-id=\"91943bd05ded63bb\"></span></span></h1></div><p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 1 which is identical to the <code>Power1</code> ease.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Power4\"><span data-link-id=\"c5344f5dcfcf49a3\"></span></span></h1></div><p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 4 which is identical to <code>Quint</code> and <code>Strong</code> but with a more intuitive name.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Power3\"><span data-link-id=\"f8a990bb64a897ea\"></span></span></h1></div><p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 3 which is identical to <code>Quart</code> but with a more intuitive name.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Power2\"><span data-link-id=\"059d5eab36bbdd55\"></span></span></h1></div><p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 2 which is identical to <code>Cubic</code> but with a more intuitive name.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Power1\"><span data-link-id=\"22c860af2d1dbbcb\"></span></span></h1></div><p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 1 which is identical to <code>Quad</code> but with a more intuitive name.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Power0\"><span data-link-id=\"d3b047e7bd016acd\"></span></span></h1></div><p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 0 which is identical to <code>Linear</code> but with a more intuitive name.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Linear\"><span data-link-id=\"0c466d8095583e88\"></span></span></h1></div><p>Linear ease with no acceleration or deceleration. Linear is identical to <code>Power0</code>.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Expo\"><span data-link-id=\"fe7727d7fa29b16b\"></span></span></h1></div><p>Eases in a strong fashion either at the beginning (easeIn), the end (easeOut), or both (easeInOut).</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Elastic\"><span data-link-id=\"f7f7759fe81fd22f\"></span></span></h1></div><p>Eases with an elastic effect either at the beginning (easeIn), the end (easeOut), or both (easeInOut).</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/EaseLookup\"><span data-link-id=\"09af4edb7491fd9e\"></span></span></h1></div><p>EaseLookup enables you to find the easing function associated with a particular name (String), like \"strongEaseOut\" which can be useful when loading in XML data that comes in as Strings but needs to be translated to native function references.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Ease\"><span data-link-id=\"18e2a901c1ec4b19\"></span></span></h1></div><p><br></p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Cubic\"><span data-link-id=\"cb31e7d72b0e7b00\"></span></span></h1></div><p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 2 which is identical to the <code>Power2</code> ease.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Bounce\"><span data-link-id=\"aa9969ee39687902\"></span></span></h1></div><p>Eases, bouncing either at the beginning (easeIn), the end (easeOut), or both (easeInOut).</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Circ\"><span data-link-id=\"723964a4fd3ac4af\"></span></span></h1></div><p>Eases with an abrupt change in velocity either at the beginning (easeIn), the end (easeOut), or both (easeInOut).</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Easing/Back\"><span data-link-id=\"ea91e06b445f4ac7\"></span></span></h1></div><p>Eases with an overshoot either at the beginning (easeIn), the end (easeOut), or both (easeInOut).</p></div>"},"52db442320b34fc1":{"meta":{"keywords":["js.TweenLite","Animation"],"title":"TweenLite","description":"TweenLite is an extremely fast, lightweight, and flexible animation tool that serves as the foundation of the GreenSock Animation Platform (GSAP). A TweenLite instance handles tweening one or more properties of any object (or array of objects) over time."},"header":{"content":"<p>TweenLite is an extremely fast, lightweight, and flexible animation tool that serves as the foundation of the GreenSock Animation Platform (GSAP). A TweenLite instance handles tweening one or more properties of <b>any object</b> (or array of objects) over time. TweenLite can be used on its own to accomplish most animation chores with minimal file size or it can be used in conjunction with advanced sequencing tools like <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineLite\"><span data-link-id=\"2b3bb68a78e65fe7\"></span></span> or <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineMax\"><span data-link-id=\"32bc2e8f667c28b7\"></span></span> to make complex tasks much simpler. With scores of other animation frameworks to choose from, why consider the GSAP?:</p><ul><li><b>SPEED </b>- The platform has been highly optimized for maximum performance. See some speed comparisons yourself at <a href=\"http://greensock.com/js/speed.html\" target=\"\">http://greensock.com/js/speed.html</a></li><li><b>Freakishly robust feature set </b>- In addition to tweening any numeric property of any object, TweenLite has plugins that give it the ability to tween hex colors, beziers, CSS, SVG, do morphing, plus <b>LOTS</b> more. It can round values, use relative values, smoothly <code>reverse()</code> on the fly, automatically detect and accommodate getter/setter functions, employ virtually any easing equation, <code>pause()/resume()</code> anytime, and intelligently manage conflicting tweens of the same object with various overwrite modes. <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenMax\"><span data-link-id=\"7eebd4b20adcaecc\"></span></span> extends TweenLite and adds even more capabilities like repeat, yoyo, repeatDelay, and more.</li><li><b>Sequencing, grouping, and management features </b>- <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineLite\"><span data-link-id=\"2b3bb68a78e65fe7\"></span></span> and <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineMax\"><span data-link-id=\"32bc2e8f667c28b7\"></span></span> make it surprisingly simple to create complex sequences or groups of tweens that you can control as a whole. <code>play()</code>, <code>pause()</code>, <code>restart()</code>, or <code>reverse()</code>. You can even tween a timeline's <code>time()</code> or <code>progress()</code> to fastforward or rewind the entire timeline. Add labels, change the timeline's <code>timeScale()</code>, nest timelines within timelines, and much more. This can revolutionize your animation workflow, making it more modular and concise.</li><li><b>Ease of use </b>- Designers and Developers alike rave about how intuitive the platform is.</li><li><b>Support and reliability </b>- With frequent updates, <a href=\"http://greensock.com/forums/\">dedicated forums</a>, committed authorship, a solid track record, a proven funding mechanism, and a thriving community of users, the platform is a safe long-term bet (unlike many open source projects).</li><li><b>Expandability </b>- With its plugin architecture, you can activate as many (or as few) extra features as your project requires. Write your own plugin to handle particular special properties in custom ways. Minimize bloat and maximize performance.</li></ul><h3>Usage</h3><p><i>To get up and running quickly, check out the <a href=\"http://greensock.com/jump-start-js/\">Jump Start tour</a> which covers the basics in a fun, interactive way.</i></p><p>The most common type of tween is a <code><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenLite.to()\"><span data-link-id=\"6c797b009a65972a\"></span></span></code> tween which allows you to define the destination values:</p><pre class='pre-container prettyprint'>var photo = document.getElementById(\"photo\");<br />TweenLite.to(photo, 2, {width:\"200px\", height:\"150px\"});</pre><p>The above code will tween the width and height properties of the &lt;img&gt; DOM element with an id of \"photo\" from whatever the current values are to 200 and 150 respectively over the course of 2 seconds. Notice the width and height values are defined inside a generic object (between curly braces). Put as many properties there as you want. To animate css properties, you'll need to use the CSSPlugin. The <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:CSSPlugin\"><span data-link-id=\"be137a434f5b4e08\"></span></span> contains special code for deciphering css-related properties and handling them in unique ways, like recognizing colors, transforms, etc. and managing the necessary suffixes (\"px\", \"%\", etc.).</p><p>If you pass a string (text) into a tween as the target (like <code>TweenLite.to(\"#myID\", 1, {left:\"100px\"})</code>) TweenLite will use a selector engine (jQuery if present, or <code>document.querySelectorAll()</code> or lastly, <code>document.getElementById()</code> (automatically removing the \"#\" prefix if it's there)).</p><p>So once TweenLite and <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:CSSPlugin\"><span data-link-id=\"be137a434f5b4e08\"></span></span> are loaded, you can easily animate things like this:</p><pre class='pre-container prettyprint'>//tween the element with ID of \"myID\"<br />TweenLite.to(\"#myID\", 2, {backgroundColor:\"#ff0000\", width:\"50%\", top:\"100px\", ease:Power2.easeInOut});<br /> <br />//or if jQuery is loaded, you can do more advanced selecting like all the elements with the class \"myClass\" like this: <br />TweenLite.to(\".myClass\", 2, {boxShadow:\"0px 0px 20px red\", color:\"#FC0\"});</pre><p data-height=\"135\" data-theme-id=\"3984\" data-slug-hash=\"wsxjv\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/wsxjv/'>Animate Multiple Properties</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://codepen.io/assets/embed/ei.js\"></script></p><p>By default, tweens begin immediately, although you can delay them using the <code>delay</code> special property or pause them initially using the <code>paused</code> special property (see below).</p><p>The <code>target</code> can also be an array of objects. For example, the following tween will tween the <code>opacity</code> css property to 0.5 and the rotation transform property to 45 for obj1, obj2, and obj3:</p><pre class='pre-container prettyprint'>TweenLite.to([obj1, obj2, obj3], 1, {opacity:0.5, rotation:45});</pre><p>Normally, css-specific properties would need to be wrapped in their own object and passed in like <code>TweenLite.to(element, 1, {css:{left:\"100px\", top:\"50px\"}});</code> so that the engine knows that those properties belong to the <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:CSSPlugin\"><span data-link-id=\"be137a434f5b4e08\"></span></span>, but because animating DOM elements in the browser with CSSPlugin is so common, TweenLite automatically checks to see if the target is a DOM element and if it is (and you haven't defined a \"css\" object in the vars), TweenLite creates that css object for you and shifts any properties that aren't already defined directly on the element or reserved (like <code>onComplete, ease, delay</code>, etc. or plugins) into that css object when the tween renders for the first time. </p><p>You can also use a <code><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenLite.from()\"><span data-link-id=\"0f1a0aaf90af74b1\"></span></span></code> tween if you want to define the <b>starting</b> values instead of the ending values so that the target tweens <i>from</i> the defined values to wherever they currently are. Or a <code><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenLite.fromTo()\"><span data-link-id=\"ed553a5b6c412a65\"></span></span></code> lets you define both starting and ending values.</p><p>Although the <code>to()</code>, <code>from()</code>, and <code>fromTo()</code> static methods are popular because they're quick and can avoid some garbage collection hassles, you can also use the more object-oriented syntax like this:</p><pre class='pre-container prettyprint'>var tween = new TweenLite(element, 2, {width:200, height:150});</pre><p>or even:</p><pre class='pre-container prettyprint'>var tween = TweenLite.to(element, 2, {width:200, height:150});</pre><h3>Special properties, eases and callbacks (no plugins required):</h3><p>Typically the <code>vars</code> parameter is used to define ending values for tweening properties of the <code>target</code> (or beginning values for <code>from()</code> tweens) like <code>{left:\"100px\", top:\"200px\", opacity:0}</code>, but the following optional special properties serve other purposes:</p><p>[config id=\"c273be21a6d5d359\"]</p><h3>Plugins:</h3><p>Think of plugins like special properties that are dynamically added, delivering extra abilities without forcing them to be baked into the core engine, keeping it relatively lean and mean. Each plugin is associated with a property name and it takes responsibility for handling that property. For example, the CSSPlugin is associated with the \"css\" property name so if it is activated it will intercept the \"css\" property in the following tween and manage it in a special way so that the tweens affect the element's style object (for manipulating DOM elements):</p><pre class='pre-container prettyprint'>TweenLite.to(element, 1, {css:{top:\"100px\", left:\"50px\", backgroundColor:\"#ff0000\", fontSize:\"12px\"}, delay:0.5});</pre><p>But again, CSSPlugin is a special case where TweenLite (as of version 1.8.0) doesn't require wrapping css-specific properties in a css object (although you can if you want maximum performance).</p><p>If the CSSPlugin wasn't loaded, TweenLite would act as though you were trying to literally tween the <code>element.css</code> property (and there is no such thing).</p><h3>Function-based values</h3><p>Instead of a number (<code>x:100</code>) or string (<code>width:\"300px\"</code>) or relative value (<code>y:\"+=50\"</code>), you can now define most values as a <strong>function</strong> that'll get called once for each target the first time the tween renders, and whatever is returned by that function will be used as the value. This can be very useful for randomizing things or applying conditional logic. See it in action in the demos below.</p><p data-height=\"300\" data-theme-id=\"3984\" data-slug-hash=\"BzmGba\" data-default-tab=\"js,result\" data-user=\"GreenSock\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/BzmGba/\">BzmGba</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><p><strong>Parameters: index, target</strong><br />The function is passed two parameters: </p><ol><li><strong>index</strong> <i>(integer)</i> - the target's position in the array of targets. For example, if there are 3 <code>&lt;div&gt;</code> elements with the class \".box\", and you <code>TweenLite.to(\".box\", ...)</code>, the function would get called 3 times (once for each target) and the index would be <code>0</code> first, then <code>1</code>, and finally <code>2</code>.</li><li><strong>target</strong> <i>(object)</i> - the target itself (the <code>&lt;div&gt;</code> element in this case)</li></ol><p>Using the index parameter makes it easy to increment the value accordingly. There are lots of ways to get creative. The demo below uses the index parameter to tween each element's x value in increments of 100.</p><p data-height=\"300\" data-theme-id=\"3984\" data-slug-hash=\"vKpRWA\" data-default-tab=\"js,result\" data-user=\"GreenSock\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/BzmGba/\">BzmGba</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><h3>Examples:</h3><p>Please see <a href=\"http://greensock.com/gsap-js/\" target=\"\">http://greensock.com/gsap-js/</a> for more examples, tutorials, and interactive demos.</p><h3>Notes / tips:</h3><ul><li>Passing values as Strings and a preceding <code>\"+=\"</code> or <code>\"-=\"</code> will make the tween relative to the current value. For example, if you do <code>TweenLite.to(element, 2, {left:\"-=20px\"});</code> it'll tween <code>left</code> to 20 pixels less than whatever it is when the tween starts. <code>{x:\"+=20\"}</code> would add 20.</li><li>You can change the <code>TweenLite.defaultEase</code> if you prefer something other than <code>Power1.easeOut</code>.</li><li>Kill all tweens of a particular object anytime with <code>TweenLite.killTweensOf(yourObject);</code>. You can also use selector text like <code>TweenLite.killTweensOf(\"#myID\");</code></li><li>You can kill all delayedCalls to a particular function using <code>TweenLite.killDelayedCallsTo(myFunction);</code> or <code>TweenLite.killTweensOf(myFunction);</code></li><li>If you find this class useful, please consider joining <a href=\"http://greensock.com/club/\">Club GreenSock</a> which not only helps to sustain ongoing development, but also gets you bonus plugins, classes and other benefits that are ONLY available to members. Learn more at <a href=\"http://greensock.com/club/\">http://greensock.com/club/</a></li></ul>"}},"7142cfd298705364":{"meta":{"keywords":["js.TweenLite.TweenLite()"],"title":"TweenLite()","description":"TweenLite Constructor creates a tween."},"header":{"content":"<p>TweenLite Constructor creates a tween.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties should be affected. When animating DOM elements, the target can be: a single element, an array of elements, a jQuery object (or similar), or a CSS selector string like “#feature” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if <code>useFrames:true</code> is set in the <code>vars</code> parameter)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like <code>onComplete</code>, <code>ease</code>, etc. For example, to tween <code>mc.x</code> to 100 and <code>mc.y</code> to 200 and then call<code>myFunction</code>, do this:</p>\n<p><code>new TweenLite(mc, 1, {x:100, y:200, onComplete:myFunction})</code>.</p>\n<p>Learn more about the properties that can be passed into the <code>vars</code> object below.</p>\n","related_configuration_object":"c273be21a6d5d359"}],"returns":{},"details":{"content":"<p>TweenLite is an extremely fast, lightweight, and flexible animation tool that serves as the foundation of the GreenSock Animation Platform (GSAP), available in JavaScript, AS2, AS3. A TweenLite instance handles tweening one or more properties of <b>any object</b> (or array of objects) over time. TweenLite can be used on its own to accomplish most animation chores with minimal file size or it can be use in conjuction with advanced sequencing tools like TimelineLite or TimelineMax to make complex tasks much simpler. With scores of other animation frameworks to choose from, why consider the GSAP?</p>"}},"4dd34ae7cc4df452":{"meta":{"keywords":["js.TweenLite.defaultEase"],"title":"defaultEase","description":"[static] Provides An easy way to change the default easing equation."},"header":{"content":"<p>[static] Provides An easy way to change the default easing equation.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Provides An easy way to change the default easing equation. Choose from any of the GreenSock eases in the com.greensock.easing package.</p><p>The default value is <code>Power1.easeOut</code>.</p>"}},"e7f6ebafb382a8cc":{"meta":{"keywords":["js.TweenLite.defaultOverwrite"],"title":"defaultOverwrite","description":"[static] Provides An easy way to change the default overwrite mode."},"header":{"content":"<p>[static] Provides An easy way to change the default overwrite mode.</p>"},"returns":{"type":"String = \"auto\"","content":""},"details":{"content":"<p>Provides An easy way to change the default overwrite mode. Choose from any of the following: <code>\"auto\", \"all\", \"none\", \"allOnStart\", \"concurrent\", \"preexisting\"</code>.</p><p>The default value is <code>\"auto\"</code>.</p>"}},"b030a6a5f8623c77":{"meta":{"keywords":["js.TweenLite.onOverwrite"],"title":"onOverwrite","description":"[static] A function that should be called when any tween gets overwritten by another tween (great for debugging). "},"header":{"content":"<p>[static] A function that should be called when any tween gets overwritten by another tween (great for debugging). </p>"},"returns":{"type":"Function","content":""},"details":{"content":"<p>[static] A function that should be called when any tween gets overwritten by another tween (great for debugging). The following parameters will be passed to that function:</p>\n\n<ol>\n\t<li><strong>overwrittenTween</strong> : Animation - the tween that was just overwritten</li>\n\t<li><strong>overwritingTween</strong> : Animation - the tween did the overwriting</li>\n\t<li><strong>target</strong> : Object [only passed if the overwrite mode was <code>&quot;auto&quot;</code> because that&#39;s the only case when portions of a tween can be overwritten rather than the entire thing] - the target object whose properties were overwritten. This is usually the same as <code>overwrittenTween.target</code> unless that&#39;s an array and the overwriting targeted a sub-element of that array. For example, <code>TweenLite.to([obj1, obj2], 1, {x:100})</code> and then <code>TweenLite.to(obj2, 1, {x:50})</code>, the <code>target</code> would be <code>obj2</code>.</li>\n\t<li><strong>overwrittenProperties</strong> : Array [only passed if the overwrite mode was <code>&quot;auto&quot;</code> because that&#39;s the only case when portions of a tween can be overwritten rather than the entire thing] - an array of property names that were overwritten, like <code>[&quot;x&quot;,&quot;y&quot;,&quot;opacity&quot;]</code>.</li>\n</ol>\n\n<p>Note: there is also an <code>onOverwrite</code> special property that you can apply on a tween-by-tween basis like <code>TweenLite.to(... {x:100, onOverwrite:yourFunction}).</code></p><code> <h3>See it in action</h3> <p>Run this <a href=\"https://codepen.io/GreenSock/pen/VaGZJz\">TweenLite.onOverwrite demo</a> with the browser console open to see the info that gets reported when an overwrite occurs.</p> </code>\n"}},"00b17703b89cfb4b":{"meta":{"keywords":["js.TweenLite.selector"],"title":"selector","description":"[static] The selector engine (like jQuery) that should be used when a tween receives a string as its target, like TweenLite.to(&quot;#myID&quot;, 1, {x:&quot;100px&quot;})."},"header":{"content":"<p>[static] The selector engine (like jQuery) that should be used when a tween receives a string as its target, like TweenLite.to(\"#myID\", 1, {x:\"100px\"}).</p>"},"returns":{"type":"* = document.getElementById()","content":""},"details":{"content":"<p>The selector engine (like jQuery) that should be used when a tween receives a string as its target, like <code>TweenLite.to(\"#myID\", 1, {x:\"100px\"})</code>. By default, TweenLite will look for <code>window.$</code> and then <code>window.jQuery</code> and if neither is found, it will default to <code>document.getElementById()</code> (in which case it will also strip out any leading \"#\" in any IDs it receives). Feel free to use any selector you want: jQuery, Zepto, Sizzle, or your own. Set it like this:<br /></p><pre class='pre-container prettyprint'>TweenLite.selector = YOUR_SELECTOR_ENGINE;</pre><p>If jQuery is loaded (or anything that's defined as the industry standard window.$), you don't need to do anything - TweenLite will automatically sense (and use) it. But TweenLite does <b>NOT</b> have any dependencies on jQuery or any specific selector engine. If you don't load any, TweenLite will use document.getElementById() which will at least allow you to define things with IDs.<br /></p><pre class='pre-container prettyprint'>//tween the element with ID of \"myID\"<br />TweenLite.to(\"#myID\", 2, {backgroundColor:\"#ff0000\", width:\"50%\", top:\"100px\", ease:Power2.easeInOut});<br /><br />//or if jQuery is loaded, you can do more advanced selecting like all the elements with the class \"myClass\" like this: <br />TweenLite.to(\".myClass\", 2, {boxShadow:\"0px 0px 20px red\", color:\"#FC0\"});</pre><p><br />For maximum performance it is typically best to store the results of a selector in a variable if you need to reference the same set multiple times:<br /></p><pre class='pre-container prettyprint'>//slightly slower because the selector engine needs to find the same elements twice:<br />TweenLite.to(\".myClass\", 2, {left:\"100px\"});<br />TweenLite.to(\".myClass\", 2, {top:\"200px\", delay:2});<br /><br />//it's a bit faster to store it in a variable that you reuse like this instead:<br />var target = $(\".myClass\");<br />TweenLite.to(target, 2, {left:\"100px\"});<br />TweenLite.to(target, 2, {top:\"200px\", delay:2});</pre><p><br />The only requirements for the selector engine is that it must have an <b>\"each()\"</b> method that iterates through each element in the results and \"this\" inside the function refers to the DOM element, and it must make the DOM elements accessible via index notation like <code>selectorResults[0], selectorResults[1]</code>, etc. This is pretty standard among selector engines.</p>"}},"d502fa3af383145d":{"meta":{"keywords":["js.TweenLite.target"],"title":"target","description":"[READ-ONLY] Target object (or array of objects) whose properties the tween affects."},"header":{"content":"<p>[READ-ONLY] Target object (or array of objects) whose properties the tween affects.</p>"},"returns":{"type":"Object","content":""},"details":{"content":"<p>[READ-ONLY] Target object (or array of objects) whose properties the tween affects.</p>"}},"823bbb81bdf15585":{"meta":{"keywords":["js.TweenLite.ticker"],"title":"ticker","description":"[static] The object that dispatches a &quot;tick&quot; event each time the engine updates, making it easy for you to add your own listener(s) to run custom logic after each update (great for game developers)."},"header":{"content":"<p>[static] The object that dispatches a \"tick\" event each time the engine updates, making it easy for you to add your own listener(s) to run custom logic after each update (great for game developers).</p>"},"returns":{"type":"Object","content":""},"details":{"content":"<p>The object that dispatches a <code>\"tick\"</code> event each time the engine updates, making it easy for you to add your own listener(s) to run custom logic after each update (great for game developers). Add as many listeners as you want.</p><h3>Basic example:</h3><pre class='pre-container prettyprint'>//add listener<br />TweenLite.ticker.addEventListener(\"tick\", myFunction);<br /> <br />function myFunction(event) {<br />    //executes on every tick after the core engine updates<br />}<br /> <br />//to remove the listener later...<br />TweenLite.ticker.removeEventListener(\"tick\", myFunction);</pre><p>The ticker is driven by <code>requestAnimationFrame</code> events in modern browsers so that the updates are perfectly synchronized with the browser's rendering cycle. It also means that when the user switches to a different tab in the browser, the ticker's updates get throttled back significantly in order to conserve battery power and reduce load on the CPU (this happens because the browser itself throttles back <code>requestAnimationFrame</code> event dispatching). Typically <code>requestAnimationFrame</code> events occur around 60 times per second, but that's up to the browser and depends on system performance as well. If <code>requestAnimationFrame</code> isn't supported, the ticker automatically falls back to using a regular <code>setTimeout()</code> loop which is supported in all browsers.</p><h3>Customizing the ticker</h3><p>To force the ticker to use <code>setTimout()</code> instead of <code>requestAnimationFrame</code>, you can use the ticker's <code>useRAF()</code> method:</p><pre class='pre-container prettyprint'>//turn off requestAnimationFrame, causing ticker to use setTimeout() instead<br />TweenLite.ticker.useRAF(false);]</pre><p>And if you'd like to set a particular frame rate, you can use the <code>fps()</code> method like this:<br /></p><pre class='pre-container prettyprint'>//throttle back the frames-per-second to 30<br />TweenLite.ticker.fps(30);</pre><p>When using <code>requestAnimationFrame</code> (the default), the <code>fps()</code> setting acts like a throttle. Since you cannot tell the browser to crank out<code>requestAnimationFrames</code> at a higher rate than 60fps, you can't do something like <code>TweenLite.ticker.fps(100)</code> (well, you can but it'll still run at around 60fps). You could, however, do <code>TweenLite.ticker.fps(30)</code> and the engine will skip beats when necessary in order to get you as close as possible to 30fps (or whatever fps you set below 60). If you need an fps greater than 60fps (which generally isn't recommended), you should turn off requestAnimationFrame using <code>TweenLite.ticker.useRAF(false)</code> and then set the <code>fps()</code> to whatever you want, like<code>TweenLite.ticker.fps(100)</code></p><h3>Advanced listeners</h3><p>If you need to define the scope (what <code>\"this\"</code> refers to inside the function) or define a particular priority so that the handlers are called in a particular order, you can use the advanced syntax with extra parameters as follows:</p><pre class='pre-container prettyprint'>addEventListener(type, callback, scope, useParam, priority)</pre><h3>Parameters:</h3><ol><li><b>type</b> <i>: String</i> - type of listener, should always be <code>\"tick\"</code></li><li><b>callback</b> <i>: Function</i> - the function to call when the event occurs</li><li><b>scope</b> <i>: Object</i> - binds the scope to a particular object (scope is basically what \"<code>this</code>\" refers to in your function). This can be very useful in JavaScript because scope isn't generally maintained.</li><li><b>useParam</b> <i>: Boolean</i> - if <code>true</code>, an event object will be generated and fed to the callback each time the event occurs. The event is a generic object and has two properties: <code>type</code> (always <code>\"tick\"</code>) and <code>target</code> which refers to the ticker instance. The default for <code>useParam</code> is <code>false</code>because it improves performance.</li><li><b>priority</b> <i>: Integer</i> - influences the order in which the listeners are called. Listeners with lower priorities are called after ones with higher priorities.</li></ol><h3>Advanced Example</h3><pre class='pre-container prettyprint'> //add listener that requests an event object parameter, binds scope to the current scope (this), and sets priority to 1 so that it is called before any other listeners that had a priority lower than 1...<br /> TweenLite.ticker.addEventListener(\"tick\", myFunction, this, true, 1);<br /> <br /> function myFunction(event) {<br />     //executes on every tick after the core engine updates<br /> }<br /> <br /> //to remove the listener later...<br /> TweenLite.ticker.removeEventListener(\"tick\", myFunction);</pre>"}},"6cbc76eab73a1780":{"meta":{"keywords":["js.TweenLite.delayedCall()"],"title":"delayedCall()","description":"[static] Provides a simple way to call a function after a set amount of time (or frames)."},"header":{"content":"<p>[static] Provides a simple way to call a function after a set amount of time (or frames).</p>"},"parameters":[{"name":"delay","data_type":"Number","description":"<p>Delay in seconds (or frames if <code>useFrames</code> is <code>true</code>) before the function should be called</p>\n"},{"name":"callback","data_type":"Function","description":"<p>Function to call</p>\n"},{"name":"params","data_type":"Array ","description":"<p>(default = <code>null</code>)<code></code> — An Array of parameters to pass the function (optional).</p>\n"},{"name":"scope","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The scope in which the callback should be called (basically, what &#8220;this&#8221; refers to in the function).</p>\n"},{"name":"useFrames","data_type":"Boolean","description":"<p>(default = <code>false</code>) — If the delay should be measured in frames instead of seconds, set<code>useFrames</code> to <code>true</code> (default is <code>false</code>)</p>\n"}],"returns":{"type":"TweenLite","content":""},"details":{"content":"<p>Provides a simple way to call a function after a set amount of time (or frames). You can optionally pass any number of parameters to the function too. </p><pre class='pre-container prettyprint'>//calls myFunction after 1 second and passes 2 parameters: <br />TweenLite.delayedCall(1, myFunction, [\"param1\", 2]); <br /><br />function myFunction(param1, param2) { <br />    //do stuff<br />}</pre>"}},"0f1a0aaf90af74b1":{"meta":{"keywords":["js.TweenLite.from()"],"title":"from()","description":"[static] Static method for creating a TweenLite instance that tweens backwards - you define the BEGINNING values and the current values are used as the destination values which is great for doing things like animating objects onto the screen because you can set them up initially the way you want them to look at the end of the tween and then animate in from elsewhere."},"header":{"content":"<p>[static] Static method for creating a TweenLite instance that tweens backwards - you define the BEGINNING values and the current values are used as the destination values which is great for doing things like animating objects onto the screen because you can set them up initially the way you want them to look at the end of the tween and then animate in from elsewhere.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties should be affected. When animating DOM elements, the target can be: a single element, an array of elements, a jQuery object (or similar), or a CSS selector string like “#feature” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if <code>useFrames:true</code> is set in the <code>vars</code> parameter)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the starting value for each property that should be tweened as well as any special properties like <code>onComplete</code>, <code>ease</code>, etc. For example, to tween <code>obj.x</code> from 100 and <code>obj.y</code> from 200 and then call <code>myFunction</code>, do this: <code>TweenLite.from(obj, 1, {x:100, y:200, onComplete:myFunction});</code></p>\n","related_configuration_object":"c273be21a6d5d359"}],"returns":{"type":"TweenLite","content":"<p>TweenLite instance</p>\n"},"details":{"content":"<p>Static method for creating a TweenLite instance that tweens backwards - you define the <b>BEGINNING</b> values and the current values are used as the destination values which is great for doing things like animating objects onto the screen because you can set them up initially the way you want them to look at the end of the tween and then animate in from elsewhere.</p><p><b>NOTE:</b> By default, <code>immediateRender</code> is <code>true</code> in <code>from()</code> tweens, meaning that they immediately render their starting state regardless of any delay that is specified. You can override this behavior by passing <code>immediateRender:false</code> in the <code>vars</code> parameter so that it will wait to render until the tween actually begins (often the desired behavior when inserting into TimelineLite or TimelineMax instances). To illustrate the default behavior, the following code will immediately set the <code>opacity</code> of <code>obj</code> to 0 and then wait 2 seconds before tweening the <code>opacity</code> back to 1 over the course of 1.5 seconds:<br /></p><pre class='pre-container prettyprint'>TweenLite.from(obj, 1.5, {opacity:0, delay:2});</pre><p><br />Since the <code>target</code> parameter can also be an array of objects, the following code will tween the opacity property of obj1, obj2, and obj3 from a value of 0 simultaneously:<br /></p><pre class='pre-container prettyprint'>TweenLite.from([obj1, obj2, obj3], 1.5, {opacity:0});</pre><p><br />Even though 3 objects are animating, there is still only one tween created. In order to stagger or offset the start times of each object animating, please see the <code>staggerFrom()</code> method of TimelineLite or TweenMax.</p><p>For simple sequencing, you can use the <code>delay</code> special property (like <code>TweenLite.from(mc, 1, {opacity:0, delay:0.5})</code>), but it is highly recommended that you consider using TimelineLite (or TimelineMax) for all but the simplest sequencing tasks. It has an identical <code>from()</code> method that allows you to append tweens one-after-the-other and then control the entire sequence as a whole. You can even have the tweens overlap as much as you want.</p><div data-height=\"268\" data-theme-id=\"3984\" data-slug-hash=\"Dqgwn\" class='codepen'><pre><code>/*external jshttp://cdnjs.cloudflare.com/ajax/libs/gsap/latest/TweenLite.min.jshttp://cdnjs.cloudflare.com/ajax/libs/gsap/latest/plugins/CSSPlugin.min.js*/window.onload = function() {  var logo = document.getElementById(&quot;logo&quot;);  TweenLite.from(logo, 2, {opacity:0, left:&quot;300px&quot;});}//run//PC ctnrl-0//MAC cmd-0</code></pre><p>See the Pen <a href='http://codepen.io/GreenSock/pen/Dqgwn/'>From Tweens</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p></div><p><script async src=\"http://codepen.io/assets/embed/ei.js\"></script></p>"}},"ed553a5b6c412a65":{"meta":{"keywords":["js.TweenLite.fromTo()"],"title":"fromTo()","description":"[static] Static method for creating a TweenLite instance that allows you to define both the starting and ending values (as opposed to to() and from() tweens which are based on the target&#039;s current values at one end or the other)."},"header":{"content":"<p>[static] Static method for creating a TweenLite instance that allows you to define both the starting and ending values (as opposed to to() and from() tweens which are based on the target's current values at one end or the other).</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties should be affected. When animating DOM elements, the target can be: a single element, an array of elements, a jQuery object (or similar), or a CSS selector string like “#feature” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if <code>useFrames:true</code> is set in the <code>vars</code> parameter)</p>\n"},{"name":"fromVars","data_type":"Object","description":"<p>An object defining the starting value for each property that should be tweened. For example, to tween <code>mc.x</code> from 100 and <code>mc.y</code> from 200, <code>fromVars</code> would look like this: <code>{x:100, y:200}</code>.</p>\n"},{"name":"toVars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like<code>onComplete</code>, <code>ease</code>, etc. For example, to tween <code>mc.x</code> from 0 to 100 and <code>mc.y</code> from 0 to 200 and then call <code>myFunction</code>, do this:<code>TweenLite.fromTo(mc, 1, {x:0, y:0}, {x:100, y:200, onComplete:myFunction});</code></p>\n","related_configuration_object":"c273be21a6d5d359"}],"returns":{"type":"TweenLite","content":"<p>TweenLite instance</p>\n"},"details":{"content":"<p>Static method for creating a TweenLite instance that allows you to define both the starting and ending values (as opposed to <code>to()</code> and <code>from()</code>tweens which are based on the target's current values at one end or the other).</p><p><b>NOTE</b>: Only put starting values in the <code>fromVars</code> parameter - all special properties for the tween (like onComplete, onUpdate, delay, etc.) belong in the <code>toVars</code> parameter.</p><p>By default, <code>immediateRender</code> is <code>true</code> in <code>fromTo()</code> tweens, meaning that they immediately render their starting state regardless of any delay that is specified. This is done for convenience because it is often the preferred behavior when setting things up on the screen to animate into place, but you can override this behavior by passing <code>immediateRender:false</code> in the <code>fromVars</code> or <code>toVars</code> parameter so that it will wait to render the starting values until the tween actually begins (often the desired behavior when inserting into TimelineLite or TimelineMax instances).</p><p>Since the <code>target</code> parameter can also be an array of objects, the following code will tween the x property of mc1, mc2, and mc3 from 0 to 100 simultaneously:</p><pre class='pre-container prettyprint'>TweenLite.fromTo([mc1, mc2, mc3], 1, {x:0}, {x:100});</pre><p>Even though 3 objects are animating, there is still only one tween created. In order to stagger or offset the start times of each object animating, please see the <code>staggerFromTo()</code> method of TimelineLite or TweenMax.</p><p>For simple sequencing, you can use the <code>delay</code> special property (like <code>TweenLite.fromTo(mc, 1, {x:0}, {x:100, delay:0.5})</code>), but it is highly recommended that you consider using TimelineLite (or TimelineMax) for all but the simplest sequencing tasks. It has an identical <code>fromTo()</code>method that allows you to append tweens one-after-the-other and then control the entire sequence as a whole. You can even have the tweens overlap as much as you want.</p>"}},"2732aa6fd1292931":{"meta":{"keywords":["js.TweenLite.getTweensOf()"],"title":"getTweensOf()","description":"[static] Returns an array containing all the tweens of a particular target (or group of targets) that have not been released for garbage collection yet which typically happens within a few seconds after the tween completes."},"header":{"content":"<p>[static] Returns an array containing all the tweens of a particular target (or group of targets) that have not been released for garbage collection yet which typically happens within a few seconds after the tween completes.</p>"},"parameters":[{"name":"target","data_type":"*","description":"<p>The target whose tweens should be returned, or an array of such targets</p>\n"},{"name":"onlyActive","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, only tweens that are currently active will be returned (a tween is considered &#8220;active&#8221; if the virtual playhead is actively moving across the tween and it is not paused, nor are any of its ancestor timelines paused).</p>\n"}],"returns":{"type":"Array","content":"<p>An array of tweens</p>\n"},"details":{"content":"<p>Returns an array containing all the tweens of a particular target (or group of targets) that have not been released for garbage collection yet which typically happens within a few seconds after the tween completes. For example, <code>TweenLite.getTweensOf(myObject)</code> returns an array of all tweens of <code>myObject</code>, even tweens that haven't begun yet. <code>TweenLite.getTweensOf([myObject1, myObject2]);</code> will return a condensed array of the tweens of <code>myObject1</code> plus all the tweens of <code>myObject2</code> combined into one array with duplicates removed.</p><p>Since the method only finds tweens that haven't been released for garbage collection, if you create a tween and then let it finish and then a while later try to find it with <code>getTweensOf()</code>, it may not be found because it was released by the engine for garbage collection. Remember, one of the best parts of GSAP is that it saves you from the headache of managing gc. Otherwise, you'd need to manually dispose each tween you create, making things much more cumbersome.</p><pre class='pre-container prettyprint'>TweenLite.to(myObject1, 1, {x:100});<br />TweenLite.to(myObject2, 1, {x:100});<br />TweenLite.to([myObject1, myObject2], 1, {alpha:0});<br /> <br />var a1 = TweenLite.getTweensOf(myObject1); //finds 2 tweens<br />var a2 = TweenLite.getTweensOf([myObject1, myObject2]); //finds 3 tweens</pre>"}},"0c45afba50900d5a":{"meta":{"keywords":["js.TweenLite.invalidate()"],"title":"invalidate()","description":"[override] Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values."},"header":{"content":"<p>[override] Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values.</p>"},"parameters":[],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values. When you<code>invalidate()</code> an animation, it will be re-initialized the next time it renders and its <code>vars</code> object will be re-parsed. The timing of the animation (duration, startTime, delay) will not be affected.</p><p>Another example would be if you have a <code>TweenMax(mc, 1, {x:100, y:100})</code> that ran when mc.x and mc.y were initially at 0, but now mc.x and mc.y are 200 and you want them tween to 100 again, you could simply <code>invalidate()</code> the tween and <code>restart()</code> it. Without invalidating first, restarting it would cause the values jump back to 0 immediately (where they started when the tween originally began). When you invalidate a TimelineLite/TimelineMax, it automatically invalidates all of its children.</p>"}},"64346e163a42da5f":{"meta":{"keywords":["js.TweenLite.killDelayedCallsTo()"],"title":"killDelayedCallsTo()","description":"[static] Immediately kills all of the delayedCalls to a particular function."},"header":{"content":"<p>[static] Immediately kills all of the delayedCalls to a particular function.</p>"},"parameters":[{"name":"func","data_type":"Function","description":"<p>The function for which all delayedCalls should be killed/cancelled.</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Immediately kills all of the delayedCalls to a particular function. If, for example, you want to kill all delayedCalls to <code>myFunction</code>, you'd do this:<br /></p><pre class='pre-container prettyprint'>TweenLite.killDelayedCallsTo(myFunction);</pre><p>Since a delayedCall is just a tween that uses the function/callback as both its <code>target</code> and its <code>onComplete</code>, <code>TweenLite.killTweensOf(myFunction)</code> produces exactly the same result as <code>TweenLite.killDelayedCallsTo(myFunction)</code>.</p><p>This method affects all delayedCalls that were created using <code>TweenLite.delayedCall()</code> or <code>TweenMax.delayedCall()</code> or the <code>call()</code> or <code>addCallback()</code> methods of TimelineLite or TimelineMax. Basically, any tween whose target is the function you supply will be killed.</p>"}},"e4776d5c407778cf":{"meta":{"keywords":["js.TweenLite.killTweensOf()"],"title":"killTweensOf()","description":"[static] Kills all the tweens (or specific tweening properties) of a particular object or delayedCalls to a particular function."},"header":{"content":"<p>[static] Kills all the tweens (or specific tweening properties) of a particular object or delayedCalls to a particular function.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Object whose tweens should be killed immediately or selector text to feed the selector engine to find the target(s).</p>\n"},{"name":"onlyActive","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, only tweens that are currently active will be killed (a tween is considered &#8220;active&#8221; if the virtual playhead is actively moving across the tween and it is not paused, nor are any of its ancestor timelines paused).</p>\n"},{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — To kill only specific properties, use a generic object containing enumerable properties corresponding to the ones that should be killed like <code>{x:true, y:true}</code>. The values assigned to each property of the object don&#8217;t matter &#8211; the sole purpose of the object is for iteration over the named properties (in this case, <code>x</code> and <code>y</code>). If no object (or <code>null</code>) is defined, all matched tweens will be killed in their entirety.</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Kills all the tweens (or specific tweening properties) of a particular object or delayedCalls to a particular function. If, for example, you want to kill all tweens of <code>myObject</code>, you'd do this:</p><pre class='pre-container prettyprint'>TweenLite.killTweensOf(myObject);</pre><p>To kill only active (currently animating) tweens of <code>myObject</code>, you'd do this:</p><pre class='pre-container prettyprint'>TweenLite.killTweensOf(myObject, true);</pre><p>To kill only particular tweening properties of the object, use the third parameter. For example, if you only want to kill all the tweens of<code>myObject.opacity</code> and <code>myObject.x</code>, you'd do this:</p><pre class='pre-container prettyprint'>TweenLite.killTweensOf(myObject, false, {opacity:true, x:true});</pre><p>To kill all the delayedCalls that were created like <code>TweenLite.delayedCall(5, myFunction);</code>, you can simply call<code>TweenLite.killTweensOf(myFunction);</code> because delayedCalls are simply tweens that have their <code>target</code> and <code>onComplete</code> set to the same function (as well as a <code>delay</code> of course).</p><p>As of version 1.8.0, you can also pass in a string that defines selector text, like \"#myID\" to kill the tweens of the element with an ID of \"myID\". If you load jQuery, you can do more complex things like \".myClass\" or \"tagname\", etc.</p><p><code>killTweensOf()</code> affects tweens that haven't begun yet too. If, for example, a tween of <code>myObject</code> has a <code>delay</code> of 5 seconds and<code>TweenLite.killTweensOf(mc)</code> is called 2 seconds after the tween was created, it will still be killed even though it hasn't started yet.</p>"}},"01cb3301c2555b06":{"meta":{"keywords":["js.TweenLite.lagSmoothing()"],"title":"lagSmoothing()","description":"Permits you to control what happens when too much time elapses between two ticks (updates) of the engine, adjusting the core timing mechanism to compensate and avoid &quot;jumps&quot;. "},"header":{"content":"<p>Permits you to control what happens when too much time elapses between two ticks (updates) of the engine, adjusting the core timing mechanism to compensate and avoid \"jumps\". </p>"},"parameters":[{"name":"threshold","data_type":"Number","description":"<p>Amount of lag (in millisecond) after which the engine will adjust the internal clock to act like the <code>adjustedLag</code> elapsed instead. The lower the number, the more likely (and frequently) lagSmoothing() will be triggered. For example, if the <code>threshold</code> is 500 and the <code>adjustedLag</code> is 33 (those are the defaults), the only time an adjustment will occur is when <strong>more than</strong> 500ms elapses between two ticks in which case it will act as though only 33ms elapsed. So if the CPU bogs down for 2 full seconds (yikes!), your animations will move 33ms worth of time on the next render instead of jumping a full 2-seconds. <i>Note: this has no affect on the device’s performance or true frame rate – this merely affects how GSAP reacts when the browser drops frames.</i></p>\n"},{"name":"adjustedLag","data_type":"Number","description":"<p>The new (adjusted) amount of time (in milliseconds) from the previous tick. Typically it is best to set this to at least 16 because that&#8217;s the normal amount of time between ticks when the engine is running at 60 frames per second. It is more common to set it to at least 33 (which is 2 normal &#8220;ticks&#8221;). If you set the threshold and the adjustedLag too low, your animations can appear to slow down under heavy pressure. The higher the adjustedLag, the more of a &#8220;jump&#8221; you&#8217;ll see when lagSmoothing kicks in.</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p><iframe width=\"830\" height=\"467\" src=\"http://www.youtube.com/embed/5t6H_x7C2Sc?vq=hd720\" frameborder=\"0\" allowfullscreen=\"\"></iframe></p><p>What happens when the CPU gets bogged down and there's a lag between renders? For example, imagine a 2-second tween that should start right away, but the CPU is busy for a full second before it can render that tween for the first time. Most other animation engines (including CSS animations in some browsers) slide the start time forward to compensate but there's a <strong>major</strong> drawback to that approach: it sacrifices synchronization and can mangle delays so that when you try to neatly stagger animations, they <a href=\"http://codepen.io/GreenSock/full/e3ac33404937de0eb77c789323367da8/\">spew out in clumps/groups</a>. That's no good.</p><p>GSAP has always used a strict timing model that prioritizes perfect synchronization, meaning in the example above, the tween would render as if it's halfway done after the initial 1-second lag. Basically, every animation engine has to pay the lag tax one way or the other - either maintain strict timing and synchronization, or slide the starting times around and lose sync.</p><p>The new <code>TweenLite.lagSmoothing()</code> feature gives you the best of both worlds because when the CPU gets bogged down, it adjusts the core timing mechanism on the next tick which affects <strong>all</strong> animations, thus everything remains <strong>perfectly synchronized</strong>. You can set the threshold (in millisecond) so that whenever there's a lag <strong>greater than</strong> that threshold, the engine will adjust the internal clock to act like the <code>adjustedLag</code> elapsed instead. Even though you call the static method on TweenLite, this one adjustment affects everything in GSAP (tweens, timelines, and delayedCalls because they're all driven by a single timing mechanism at the heart of TweenLite).</p><p>For example, if the <code>threshold</code> is 500 and the <code>adjustedLag</code> is 33 (those are the defaults), the only time an adjustment will occur is when more than 500ms elapses between two ticks in which case it will act as though only 33ms elapsed. So if the CPU bogs down for 2 full seconds (yikes!), your animations will move 33ms worth of time on the next render instead of jumping a full 2-seconds. <i>Note: this has no affect on the device's performance or true frame rate - this merely affects how GSAP reacts when the browser drops frames.</i></p><p>This feature is <strong>already activated by default</strong>, using a <code>threshold</code> of 500ms and a <code>adjustedLag</code> of 33ms, but if you want to change the settings you can do so like this:</p><pre class='pre-container prettyprint'>//compensate only when 1000ms or more elapses between 2 ticks,<br />//and then make it act like only 16ms elapsed:<br />TweenLite.lagSmoothing(1000, 16);</pre><p>Why not set the values super low, like to 10 for both? Because doing so wouldn't allow much breathing room, and it would naturally make your tweens look like they're running more slowly (because technically they are if the time is getting nudged forward on almost every render). Also note that if you've got any delayedCalls, those will be affected as well. That's a good thing - it ensures that you can rely on those to be perfectly synchronized with the rest of the engine, but if the browser is under heavy pressure and is only rendering a few frames per second, it'd seem as if time is literally slowing down and a 2-second tween (or delayedCall) might actually take 8 seconds to complete.</p><p>In most real-world scenarios, the defaults of 500 and 33 are ideal because they protect against significant hiccups in the browser/CPU while allowing minor variations in the frame rate without slowing things down unnecessarily.</p><p>If you're using TweenMax, you can access the lagSmoothing() method via <code>TweenMax.lagSmoothing()</code> too.</p><p>If you'd like to disable lag smoothing, you can simply set it to 0 like <code>TweenLite.lagSmoothing(0)</code> which is the same as setting the threshold to a super large value so that it never kicks in.</p><p style=\"margin-top:30px;\" data-height=\"950\" data-theme-id=\"3984\" data-slug-hash=\"e3ac33404937de0eb77c789323367da8\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/e3ac33404937de0eb77c789323367da8/' target=\"_blank\">Animation Engine Timing Comparison</a> on <a href='http://codepen.io'>CodePen</a>.</p>"}},"a03b81c2162c5416":{"meta":{"keywords":["js.TweenLite.render()"],"title":"render()","description":"Forces a render of all active tweens which can be useful if, for example, you set up a bunch of from() tweens and then you need to force an immediate render (even of \"lazy\" tweens) to avoid a brief delay before things render on the very next tick."},"header":{"content":"<p>Forces a render of all active tweens which can be useful if, for example, you set up a bunch of <code>from()</code> tweens and then you need to force an immediate render (even of \"lazy\" tweens) to avoid a brief delay before things render on the very next tick.</p>"},"parameters":[],"returns":{"type":"","content":""},"details":{"content":"<p>Forces a render of all active tweens which can be useful if, for example, you set up a bunch of <code>from()</code> tweens and then you need to force an immediate render (even of \"lazy\" tweens) to avoid a brief delay before things render on the very next tick.</p>"}},"f9978ca8a660abe5":{"meta":{"keywords":["js.TweenLite.set()"],"title":"set()","description":"[static] Immediately sets properties of the target accordingly - essentially a zero-duration to() tween with a more intuitive name."},"header":{"content":"<p>[static] Immediately sets properties of the target accordingly - essentially a zero-duration to() tween with a more intuitive name.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects or selector text) whose properties will be affected.</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the value for each property that should be set. For example, to set <code>mc.x</code> to 100 and <code>mc.y</code> to 200, do this: <code>TweenLite.set(mc, {x:100, y:200}); </code> You may also define any of the special properties baked into GSAP like delay, onComplete, etc.</p>\n","related_configuration_object":"c273be21a6d5d359"}],"returns":{"type":"TweenLite","content":"<p>A TweenLite instance (with a duration of 0) which can optionally be inserted into a TimelineLite/Max instance (although it&#8217;s typically more concise to just use the timeline&#8217;s <code>set()</code> method).</p>\n"},"details":{"content":"<p>Immediately sets properties of the target accordingly - essentially a zero-duration to() tween with a more intuitive name. So the following lines produce identical results:</p><pre class='pre-container prettyprint'>TweenLite.set(element, {x:100, y:50, opacity:0});<br />TweenLite.to(element, 0, {x:100, y:50, opacity:0});</pre><p>And of course you can use an array to set the properties of multiple targets at the same time, like:</p><pre class='pre-container prettyprint'>TweenLite.set([obj1, obj2, obj3], {x:100, y:50, opacity:0});</pre><p>Or use selector text to target DOM elements that match that criteria. </p>"}},"6c797b009a65972a":{"meta":{"keywords":["js.TweenLite.to()"],"title":"to()","description":"[static] Static method for creating a TweenLite instance that animates to the specified destination values (from the current values)."},"header":{"content":"<p>[static] Static method for creating a TweenLite instance that animates to the specified destination values (from the current values).</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties should be affected. When animating DOM elements, the target can be: a single element, an array of elements, a jQuery object (or similar), or a CSS selector string like “#feature” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if useFrames:true is set in the vars parameter)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like onComplete, ease, etc. For example, to tween mc.x to 100 and mc.y to 200 and then call myFunction, do this: TweenMax.to(mc, 1, {x:100, y:200, onComplete:myFunction});</p>\n<p>Below is a full list of special properties.</p>\n","related_configuration_object":"c273be21a6d5d359"}],"returns":{"type":"TweenLite","content":"<p>TweenLite instance</p>\n"},"details":{"content":"<p>Static method for creating a TweenLite instance that animates to the specified destination values (from the current values). The following lines of code all produce identical results:<br /></p><pre class='pre-container prettyprint'>//all produce the same result:<br />TweenLite.to(element, 1, {x:100});<br />var myTween = new TweenLite(element, 1, {x:100});<br />var myTween = TweenLite.to(element, 1, {x:100});</pre><p>Each line above will tween the <code>\"x\"</code> property of the <code>element</code> object to a value of 100 over the coarse of 1 second. They each use a slightly different syntax, all of which are valid. If you don't need to store a reference of the tween, just use the static <code>TweenLite.to( )</code> call.</p><p>Since the <code>target</code> parameter can also be an array of objects, the following code will tween the x property of mc1, mc2, and mc3 to a value of 100 simultaneously:<br /></p><pre class='pre-container prettyprint'>TweenLite.to([mc1, mc2, mc3], 1, {x:100});</pre><p>Even though 3 objects are animating, there is still only one tween created. In order to stagger or offset the start times of each object animating, please see the <code>staggerTo()</code> method of TimelineLite or TweenMax.</p><p>For simple sequencing, you can use the <code>delay</code> special property (like <code>TweenLite.to(element, 1, {x:100, delay:0.5})</code>), but it is highly recommended that you consider using TimelineLite (or TimelineMax) for all but the simplest sequencing tasks. It has an identical <code>to()</code> method that allows you to append tweens one-after-the-other and then control the entire sequence as a whole. You can even have the tweens overlap as much as you want.</p><h3>Example</h3><div data-height=\"300\" data-theme-id=\"5663\" data-slug-hash=\"dgmia\" data-default-tab=\"js\" class='codepen'><pre><code>/*external jshttp://cdnjs.cloudflare.com/ajax/libs/gsap/latest/TweenLite.min.jshttp://cdnjs.cloudflare.com/ajax/libs/gsap/latest/plugins/CSSPlugin.min.js*/window.onload = function(){  var logo = document.getElementById(&quot;logo&quot;);  TweenLite.to(logo, 1, {left:&quot;632px&quot;});}//run//PC ctnrl-0//MAC cmd-0</code></pre><p>See the Pen <a href='http://codepen.io/GreenSock/pen/dgmia/'>Basic Tween</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p></div><p><script async src=\"http://codepen.io/assets/embed/ei.js\"></script></p><p data-height=\"100\" data-theme-id=\"5662\" data-slug-hash=\"dgmia\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/dgmia/'>Basic Tween</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://codepen.io/assets/embed/ei.js\"></script></p>"}},"b047280f767c4b7b":{"name":"type","returns":{"type":"String","content":"a comma-delimited list of the split type(s) which can be any of the following: <b>chars, words,</b> or <b>lines</b>. This indicates the type of components you'd like split apart into distinct &lt;div&gt; elements. For example, to split apart the characters <b>and</b> words (not lines), you'd use <code>type:\"chars,words\"</code> or to only split apart lines, you'd do <code>type:\"lines\"</code>. In order to avoid odd line breaks, it is best to <b>not</b> split by <code>chars</code> alone (always include <code>words</code> or <code>lines</code> too if you're splitting by characters). Note: spaces are not considered characters. <i>[default: \"chars,words,lines\"]</i>","contentShort":""}},"484a9cd6847057ea":{"name":"charsClass","returns":{"type":"String","content":"a css class to apply to each character's &lt;div&gt;, making it easy to select. If you add <code>\"++\"</code> to the end of the class name, SplitText will append an incremented number to each character's &lt;div&gt;, starting at 1. For example, if charsClass is <code>\"char++\"</code>, the div's class for the first character would be <code>\"char1\"</code>, the next would be <code>\"char2\"</code>, then <code>\"char3\"</code>, etc.<i>[default: undefined]</i>","contentShort":""}},"99dd4e1976eda5e5":{"name":"linesClass","returns":{"type":"String","content":"a css class to apply to each line's &lt;div&gt;, making it easy to select. If you add <code>\"++\"</code> to the end of the class name, SplitText will append an incremented number to each line's &lt;div&gt;, starting at 1. For example, if linesClass is <code>\"line++\"</code>, the div's class for the first line would be <code>\"line1\"</code>, the next would be <code>\"line2\"</code>, then <code>\"line3\"</code>, etc. <i>[default: undefined]</i>","contentShort":""}},"435f9b9c59d62464":{"name":"position","returns":{"type":"String","content":"if <code>\"absolute\"</code>, the <code>position</code> css style for all of the resulting &lt;div&gt; elements will be <code>\"absolute\"</code> and their <code>\"top\", \"left\", \"width\",</code> and <code>\"height\"</code> css properties will be calculated and applied inline which can be useful for certain effects. In IE8 and earlier, this provides better support for 2D transforms like rotation, scale, etc. It costs a bit more to split initially performance-wise, but it can improve performance during animation because the browser doesn't have to do as many reflow calculations (in most cases). Keep in mind that once you split things using <code>position:\"absolute\"</code>, if the containing element is resized, the split text chunks won't reflow. And if position is not specifically set to<code>\"absolute\"</code>, it will be <code>\"relative\"</code> <i>[default: \"relative\"]</i>","contentShort":""}},"601ce401aa4b786e":{"name":"wordDelimiter","returns":{"type":"String","content":"normally words are split at every space character. The wordDelimiter property allows you to specify your own delimiter. If you want to split a hashtag like #IReallyLoveGSAP into words you could format the text like: #I*Really*Love*GSAP and set <code>wordDelimiter:\"*\"</code> in the SplitText config object. ","contentShort":""}},"f1164c1177ade869":{"name":"wordsClass","returns":{"type":"String","content":"a css class to apply to each word's &lt;div&gt;, making it easy to select. If you add <code>\"++\"</code> to the end of the class name, SplitText will append an incremented number to each word's &lt;div&gt;, starting at 1. For example, if wordsClass is <code>\"word++\"</code>, the div's class for the first word would be <code>\"word1\"</code>, the next would be <code>\"word2\"</code>, then <code>\"word3\"</code>, etc. <i>[default: undefined]</i>","contentShort":""}},"54a27bdcea66a8b2":{"meta":{"keywords":"","description":"","imagePath":""},"content":"<div class=\"package-feature\">\n\n\t<h1>Utilities</h1><img style=\"width: 93%;\" src=\"https://greensock.com/wp-content/themes/greensock/images/divider.png\" class=\"fr-fic fr-dii\">\n\n\t<p>Summary for Utilities</p>\n</div>\n<div class=\"class-item\">\n\t<div class=\"top\">\n\n\t\t<h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Utilities/VelocityTracker\"><span data-link-id=\"eb1821730d324359\"></span></span>\n\t\t</h1>\n\t</div>\n<p></p>\n</div>\n<div class=\"class-item\">\n\t<div class=\"top\">\n\n\t\t<h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Utilities/SplitText\"><span data-link-id=\"9927ce1237a8b0b1\"></span></span>\n\t\t</h1>\n\t</div>\n\n\t<p>SplitText makes it easy to break apart the text in an HTML element so that each character, word, and/or line is in its own &lt;div&gt;, making complex animation simple.</p>\n</div>\n<div class=\"class-item\">\n\t<div class=\"top\">\n\n\t\t<h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Utilities/Draggable\"><span data-link-id=\"27ffcb75af705686\"></span></span>\n\t\t</h1>\n\t</div>\n\n\t<p>Draggable provides a surprisingly simple way to make virtually any DOM element draggable, spinnable, tossable, and even flick-scrollable using mouse and/or touch events, plus Draggable integrates beautifully (and optionally) withThrowPropsPlugin so that the user can flick and have the motion decelerate smoothly based on momentum.</p>\n</div>\n"},"57d33bbbf0c4c2c2":{"meta":{"keywords":["js.RoughEase","Easing"],"title":"RoughEase","description":"Most easing equations give a smooth, gradual transition between the start and end values, but RoughEase provides an easy way to get a rough, jagged effect instead, or you can also get an evenly-spaced back-and-forth movement if you prefer."},"header":{"content":"<p>Most easing equations give a smooth, gradual transition between the start and end values, but RoughEase provides an easy way to get a rough, jagged effect instead, or you can also get an evenly-spaced back-and-forth movement if you prefer. Configure the RoughEase by passing an object to the constructor or <code>config()</code> method with any of the following properties (all are optional):</p><p>[config id=\"ea05af7191454490\"]</p><div class=\"ease-visualizer\" data-ease=\"RoughEase\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example code</b><br /></p><pre class='pre-container prettyprint'>//use the default values<br />TweenLite.from(element, 1, {opacity:0, ease:RoughEase.ease});<br /> <br />//or customize the configuration<br />TweenLite.to(element, 3, {y:300, ease:RoughEase.ease.config({strength:3, points:50, template:Strong.easeInOut, taper:\"both\", randomize:false}) });<br /> <br />//or create a RoughEase that we can pass in to multiple tweens later<br />var rough = new RoughEase({strength:3, points:50, template:Strong.easeInOut, taper:\"both\", randomize:false});<br />TweenLite.to(element1, 3, {y:300, ease:rough});<br />TweenLite.to(element2, 5, {x:500, ease:rough});</pre>"}},"10948e3702698b9c":{"meta":{"keywords":["js.RoughEase.RoughEase()"],"title":"RoughEase()","description":"Constructor"},"header":{"content":"<p>Constructor</p>"},"parameters":[{"name":"vars","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — a generic object with any of the following properties (all are completely optional):</p>\n","related_configuration_object":"ea05af7191454490"}],"returns":{},"details":{"content":"<p>Constructor</p>"}},"cca5b92a93c91acc":{"meta":{"keywords":["js.RoughEase.ease"],"title":"ease","description":"[static] The default ease instance which can be reused many times in various tweens in order to conserve memory and improve performance slightly compared to creating a new instance each time."},"header":{"content":"<p>[static] The default ease instance which can be reused many times in various tweens in order to conserve memory and improve performance slightly compared to creating a new instance each time.</p>"},"returns":{"type":"RoughEase","content":""},"details":{"content":"<p>The default ease instance which can be reused many times in various tweens in order to conserve memory and improve performance slightly compared to creating a new instance each time.</p>"}},"677955a5f3bdfcb4":{"meta":{"keywords":["js.RoughEase.config()"],"title":"config()","description":"Permits customization of the ease with various parameters."},"header":{"content":"<p>Permits customization of the ease with various parameters.</p>"},"parameters":[{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — a generic object with any of the following properties (all are completely optional):</p>\n","related_configuration_object":"ea05af7191454490"}],"returns":{"type":"RoughEase","content":"<p>new RoughEase instance that is configured according to the parameters provided</p>\n"},"details":{"content":"<p>Permits customization of the ease with various parameters.</p>"}},"4c00a0ea1a2df967":{"meta":{"keywords":["js.RoughEase.getRatio()"],"title":"getRatio()","description":"[override] Translates the tween&#039;s progress ratio into the corresponding ease ratio."},"header":{"content":"<p>[override] Translates the tween's progress ratio into the corresponding ease ratio.</p>"},"parameters":[{"name":"p","data_type":"Number","description":"<p>progress ratio (a value between 0 and 1 indicating the progress of the tween/ease)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Number","content":"<p>translated number</p>\n"},"details":{"content":"<p>Translates the tween's progress ratio into the corresponding ease ratio. This is the heart of the Ease, where it does all its work.</p>"}},"5b09c1a25bf1df7e":{"meta":{"keywords":["js.RaphaelPlugin","Plugins"],"title":"RaphaelPlugin","description":""},"header":{"content":"<p>Enables TweenLite and TweenMax to animate properties of Raphael JavaScript objects (see <a href=\"http://www.raphaeljs.com/\" target=\"external\">http://www.raphaeljs.com/</a>). Raphael is a JavaScript framework that simplifies work with vector graphics on the web. For example:</p><pre class='pre-container prettyprint'>// creates canvas 550 × 400 at 10, 50<br />var paper = Raphael(10, 50, 550, 400);<br />// creates rectangle at x = 50, y = 40, with a width of 200 and height of 100<br />var rect = paper.rect(50, 40, 200, 100);<br />// sets the fill attribute of the rectangle to red (#f00)<br />rect.attr(\"fill\", \"#f00\");<br />// tween the fill to blue (#00f) and x to 100, y to 100, width to 100 and height to 50 over the course of 3 seconds using an ease of Power1.easeInOut<br />TweenLite.to(rect, 3, {raphael:{fill:\"#00f\", x:100, y:100, width:100, height:50}, ease:Power1.easeInOut});</pre><p><i><b>Note:</b> a common mistake is to forget to wrap Raphael-related properties in a \"raphael\" object which is essential for helping TweenLite/Max understand your intent.</i></p><p>You can tween any of the properties that you would normally set using raphael's <code>attr()</code> method as well as the following transformation properties: <code>rotation, scaleX, scaleY, skewX, skewY, tx and ty</code> and even <code>shortRotation</code> which will rotate in the shortest direction to the destination value. <code>tx</code> and <code>ty</code> refer to the translation x and y properties (<code>e</code> and <code>f</code> from the element's matrix). This gives you a lot of control, even beyond what's easily accomplished through Raphael's own methods.</p><p><b>globalPivot or localPivot</b> - You can define a custom pivot point around which transforms will be made (rotation, skewX, skewY, scaleX, scaleY, tx, and ty) using either <code>globalPivot</code> or<code>localPivot</code>. The difference between the two is that <code>localPivot</code> uses coordinates according to the object's local coordinate system which is always the same regardless of its scale/rotation/position. Think of it like a point \"inside\" the object. <code>globalPivot</code>, on the other hand, uses global coordinates according to the Raphael object that contains the tween's target. You can define the pivot point either as an object with x and y properties like: <code>globalPivot:{x:50, y:25}</code> or a comma-delimited string like <code>globalPivot:\"50,25\"</code>.</p><pre class='pre-container prettyprint'>// tween the rotation to 270 degrees and scaleX to 0.5 using a global pivot point of x:120, y:80 over the course of 3 seconds using an ease of Power1.easeInOut<br />TweenLite.to(rect, 3, {raphael:{rotation:270, scaleX:0.5, globalPivot:{x:120, y:80}}, ease:Power1.easeInOut});</pre><p>Note that <code>tx</code> and <code>ty</code> are automatically adjusted to accommodate any rotation or skew during the tween. So, for example, if you tween the rotation and tx and ty, it will work fine but at the end, tx and ty may be slightly different than what you defined for the tween because they had to be adjusted to prevent the object's rotation from throwing off the visual position.</p><p>RaphaelPlugin doesn't support tweening Raphael <b>\"sets\"</b> (which are basically like groups of Raphael objects). To tween a set, you should loop through its elements and create a tween for each one.</p>"}},"681f9501cd7f99b3":{"meta":{"keywords":["js.CustomWiggle","Easing"],"title":"CustomWiggle","description":"Creates highly configurable wiggle eases."},"header":{"content":"<p><span class=\"inTweenMax\">Included in TweenMax: <span class=\"no\">NO</span></span></p><p>CustomWiggle extends <a href=\"/customease/\">CustomEase</a> (think of it like a wrapper that creates a CustomEase under the hood based on the variables you pass in), allowing you to not only set the number of wiggles, but also the <code>type</code> of wiggle (there are 5 types; see demo below). Advanced users can even alter the plotting of the wiggle curves along either axis using <code>amplitudeEase</code> and <code>timingEase</code> special properties. </p><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/5lk5sLTd6N4?rel=0&feature=player_detailpage?rel=0\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><h3>Demo: CustomWiggle Types</h3><p data-height=\"450\" data-theme-id=\"9446\" data-slug-hash=\"GrggOL\" data-default-tab=\"result\" data-user=\"GreenSock\" data-embed-version=\"2\" data-pen-title=\"CustomWiggle Demo : resized\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/GrggOL/\">CustomWiggle Demo : resized</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script></p><h3>Options</h3><ul><li><strong><code>wiggles</code></strong> (Integer) - number of oscillations back and forth. Default: 10</li><li><strong><code>type</code></strong> (String) \"easeOut\" | \"easeInOut\" | \"anticipate\" | \"uniform\" | \"random\" - the type (or style) of wiggle (see demo above). Default: \"easeOut\"</li><li><strong><code>amplitudeEase</code></strong> (Ease) - provides advanced control over the shape of the amplitude (y-axis in the <a href=\"/ease-visualizer\">ease visualizer</a>). You define an ease that controls the amplitude's progress from 1 toward 0 over the course of the tween. Defining an amplitudeEase (or timingEase) will override the \"type\" (think of the 5 \"types\" as convenient presets for amplitudeEase and timingEase combinations). See the <a href=\"http://codepen.io/GreenSock/pen/a8a7bc33cf80a74165dd966244a6cc00?editors=0010\">example codepen</a> to play around and visualize how it works.</li><li><strong><code>timingEase</code></strong> (Ease) - provides advanced control over how the waves are plotted over time (x-axis in the <a href=\"/ease-visualizer\">ease visualizer</a>). Defining an timingEase (or amplitudeEase) will override the \"type\" (think of the 5 \"types\" as convenient presets for amplitudeEase and timingEase combinations). See the <a href=\"http://codepen.io/GreenSock/pen/a8a7bc33cf80a74165dd966244a6cc00?editors=0010\">example codepen</a> to play around and visualize how it works.</li></ul><p>How do you control the strength of the wiggle (or how far it goes)? Simply by setting the tween property values themselves. For example, a wiggle to rotation:30 would be stronger than rotation:10. Remember, and ease just controls the ratio of movement toward whatever value you supply for each property in your tween. </p><h3>Sample code</h3><pre class='pre-container prettyprint'>//Create a wiggle with 6 oscillations (default type:\"easeOut\")<br />CustomWiggle.create(\"myWiggle\", {wiggles:6});<br />//now use it in an ease. \"rotation\" will wiggle to 30 and back just as much in the opposite direction, ending where it began. <br />TweenMax.to(\".class\", 2, {rotation:30, ease:\"myWiggle\"});<br /><br />//Create a 10-wiggle anticipation ease:<br />CustomWiggle.create(\"funWiggle\", {wiggles:10, type:\"anticipate\"});<br />TweenMax.to(\".class\", 2, {rotation:30, ease:\"funWiggle\"}); </pre><p>Wiggling isn't just for \"rotation\"; you can use it for any property. For example, you could create a swarm effect by using just 2 randomized wiggle tweens on \"x\" and \"y\", as <a href=\"http://codepen.io/GreenSock/pen/wzkBYZ\">demonstrated here</a>.</p>"}},"54ddb48cbc201e21":{"meta":{"keywords":["js.CustomWiggle.create()"],"title":"create()","description":"Create a wiggle ease by just adjusting a few parameters.<br />\r\n<br />\r\n"},"header":{"content":"<p>Create a wiggle ease by just adjusting a few parameters.</p>"},"parameters":[{"name":"ID","data_type":"String","description":"<p>An ID (name) that can be used to identify this CustomWiggle instance, like <code>\"shake\".</code></p>\n"},{"name":"vars","data_type":"Object","description":"<p>A config object containing properties that affect how the ease is rendered (number of wiggles, distribution of wiggles).</p>\n","related_configuration_object":"c06d77ded54b7881"}],"returns":{"type":"CustomWiggle","content":"<p>Returns a new CustomWiggle instance</p>\n"},"details":{"content":"<p>It's easy to create the perfect wiggle by just tweaking a few parameters. You control the strength of the wiggle (or how far it goes) by setting the tween property values themselves. For example, a wiggle to rotation:30 would be stronger than rotation:10. Remember, an ease just controls the ratio of movement toward whatever value you supply for each property in your tween. </p><h3>Sample code</h3><pre class='pre-container prettyprint'>//Create a wiggle with 6 oscillations (default type:\"easeOut\")<br />CustomWiggle.create(\"myWiggle\", {wiggles:6});<br />//now use it in an ease. \"rotation\" will wiggle to 30 and back just as much in the opposite direction, ending where it began. <br />TweenMax.to(\".class\", 2, {rotation:30, ease:\"myWiggle\"});<br /><br />//Create a 10-wiggle anticipation ease:<br />CustomWiggle.create(\"funWiggle\", {wiggles:10, type:\"anticipate\"});<br />TweenMax.to(\".class\", 2, {rotation:30, ease:\"funWiggle\"}); </pre><h3>Wiggle types</h3><p data-height=\"450\" data-theme-id=\"9446\" data-slug-hash=\"GrggOL\" data-default-tab=\"result\" data-user=\"GreenSock\" data-embed-version=\"2\" data-pen-title=\"CustomWiggle Demo : resized\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/GrggOL/\">CustomWiggle Demo : resized</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script></p><h3>CustomWiggle Playground</h3><p>Edit the wiggles, type, amplitudeEase and timingEase values below:</p><p data-height=\"300\" data-theme-id=\"3984\" data-slug-hash=\"rjaOEe\" data-default-tab=\"js,result\" data-user=\"GreenSock\" data-embed-version=\"2\" data-pen-title=\"CustomWiggle Graph Playground (embed in docs)\" data-editable=\"true\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/rjaOEe/\">CustomWiggle Graph Playground (embed in docs)</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script></p>"}},"723964a4fd3ac4af":{"meta":{"keywords":["js.Circ","Easing"],"title":"Circ","description":"Eases with an abrupt change in velocity either at the beginning (easeIn), the end (easeOut), or both (easeInOut)."},"header":{"content":"<p>Eases with an abrupt change in velocity either at the beginning (easeIn), the end (easeOut), or both (easeInOut). <code>Circ</code> is a convenience class that congregates the 3 types of Circ eases (CircIn, CircOut, and CircInOut) as static properties so that they can be referenced using the standard synatax, like <code>Circ.easeIn</code>, <code>Circ.easeOut</code>, and <code>Circ.easeInOut</code>.</p><div class=\"ease-visualizer\" data-ease=\"Circ\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p>"}},"f4af2f5c548d7079":{"meta":{"keywords":["js.Circ.easeIn"],"title":"easeIn","description":"[static] Eases in with an abrupt change in velocity."},"header":{"content":"<p>[static] Eases in with an abrupt change in velocity.</p>"},"returns":{"type":"CircIn","content":""},"details":{"content":"<p>Eases in with an abrupt change in velocity.</p>"}},"fc5f2508dcf8e967":{"meta":{"keywords":["js.Circ.easeInOut"],"title":"easeInOut","description":"[static] Eases in and out with an abrupt change in velocity."},"header":{"content":"<p>[static] Eases in and out with an abrupt change in velocity.</p>"},"returns":{"type":"CircInOut","content":""},"details":{"content":"<p>Eases in and out with an abrupt change in velocity.</p>"}},"81c4e914fdcf1d68":{"meta":{"keywords":["js.Circ.easeOut"],"title":"easeOut","description":"[static] Eases out with an abrupt change in velocity."},"header":{"content":"<p>[static] Eases out with an abrupt change in velocity.</p>"},"returns":{"type":"CircOut","content":""},"details":{"content":"<p>Eases out with an abrupt change in velocity.</p>"}},"8f60177180297349":{"name":"width","returns":{"type":"Number","content":"The width of the area in which the SVG <code>&lt;path&gt;</code> should be drawn. Default: 100","contentShort":""}},"a8f8b61a98efe26d":{"name":"height","returns":{"type":"Number","content":"The height of the area in which the SVG <code>&lt;path&gt;</code> should be drawn. Default: 100","contentShort":""}},"778cf2b0b9ce7ce9":{"name":"x","returns":{"type":"Number","content":"The x position at which the SVG <code>&lt;path&gt;</code> should start. Default: 0","contentShort":""}},"45862563ed327e51":{"name":"y","returns":{"type":"Number","content":"The y position at which the SVG <code>&lt;path&gt;</code> should start. Default: 0","contentShort":""}},"bf3cb25451cdb408":{"name":"path","returns":{"type":"Number","content":"The SVG <code>&lt;path&gt;</code> instance that should be populated resulting data. This can be a selector string like <code>\"#ease\"</code> or the path element itself. If defined, its <code>\"d\"</code> attribute will be populated with the resulting data (a convenience so that you don't need to take the results from <code>getSVGData()</code> and feed it into that attribute manually).","contentShort":""}},"7913694fbfa93c13":{"meta":{"keywords":["js.Physics2DPlugin","Plugins"],"title":"Physics2DPlugin","description":"Apply physics properties to your animations. "},"header":{"content":"<p>Provides simple physics functionality for tweening an Object's x and y coordinates (or \"left\" and \"top\") based on a combination of velocity, angle, gravity, acceleration, accelerationAngle, and/or friction. It is not intended to replace a full-blown physics engine and does not offer collision detection, but serves as a way to easily create interesting physics-based effects with the GreenSock animation platform. Parameters are not intended to be dynamically updateable, but one unique convenience is that everything is reverseable. So if you spawn a bunch of particle tweens, for example, and throw them into a TimelineLite, you could simply call <code>reverse()</code> on the timeline to watch the particles retrace their steps right back to the beginning. Keep in mind that any easing equation you define for your tween will be completely ignored for these properties.</p><ul><li><b>velocity</b> : Number - the initial velocity of the object measured in pixels per time unit (usually seconds, but for tweens where useFrames is true, it would be measured in frames). (Default:<code>0</code>)</li><li><b>angle</b> : Number - the initial angle (in degrees) at which the object should travel. This only matters when a <code>velocity</code> is defined. For example, if the object should start out traveling at -60 degrees (towards the upper right), the <code>angle</code> would be -60. (Default: <code>0</code>)</li><li><b>gravity</b> : Number - the amount of downward acceleration applied to the object, typically measured in pixels per second (or for tweens where <code>useFrames</code> is <code>true</code>, it would be measured per frame). You can <b>either</b> use <code>gravity</code> <b>or</b> <code>acceleration</code>, not both because gravity is the same thing as acceleration applied at an <code>accelerationAngle</code> of 90. Think of <code>gravity</code> as a convenience property that automatically sets the <code>accelerationAngle</code> for you. (Default: <code>null</code>)</li><li><b>acceleration</b> : Number - the amount of acceleration applied to the object, typically measured in pixels per second (or for tweens where <code>useFrames</code> is <code>true</code>, it would be measured per frame). To apply the acceleration in a specific direction that is different than the <code>angle</code>, use the <code>accelerationAngle</code> property. You can <b>either</b> use <code>gravity</code> <b>or</b> <code>acceleration</code>, not both because gravity is the same thing as acceleration applied at an <code>accelerationAngle</code> of 90. (Default: <code>null</code>)</li><li><b>accelerationAngle</b> : Number - the angle at which acceleration is applied (if any), measured in degrees. So if, for example, you want the object to accelerate towards the left side of the screen, you'd use an <code>accelerationAngle</code> of 180. If you define a <code>gravity</code> value, it will automatically set the <code>accelerationAngle</code> to 90 (downward). (Default: <code>null</code>)</li><li><b>friction</b> : Number - a value between 0 and 1 where 0 is no friction, 0.08 is a small amount of friction, and 1 will completely prevent any movement. This is not meant to be precise or scientific in any way, but it serves as an easy way to apply a friction-like physics effect to your tween. Generally it is best to experiment with this number a bit - start with very small values like 0.02. Also note that friction requires more processing than physics tweens without any friction. (Default: <code>0</code>)</li><li><b>xProp</b> : String - By default, the <code>\"x\"</code> property of the target object is used to control x-axis movement, but if you'd prefer to use a different property name, use <code>xProp</code> like<code>xProp:\"left\"</code>. (Default: <code>\"x\"</code>)</li><li><b>yProp</b> : String - By default, the <code>\"y\"</code> property of the target object is used to control y-axis movement, but if you'd prefer to use a different property name, use <code>yProp</code> like <code>yProp:\"top\"</code>. (Default: <code>\"y\"</code>)</li></ul><p><b>USAGE:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(element, 2, {physics2D:{velocity:300, angle:-60, gravity:400}});<br /> <br />//--OR--<br /> <br />TweenLite.to(element, 2, {physics2D:{velocity:300, angle:-60, friction:0.1}}); <br /> <br />//--OR--<br /> <br />TweenLite.to(element, 2, {physics2D:{velocity:300, angle:-60, acceleration:50, accelerationAngle:180}}); </pre><p data-height=\"345\" data-theme-id=\"9446\" data-slug-hash=\"emjgxw\" data-default-tab=\"result\" data-user=\"GreenSock\" data-embed-version=\"2\" data-pen-title=\"Physics2D Demo\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/emjgxw/\">Physics2D Demo</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script></p><p>Physics2DPlugin is a <a href=\"http://www.greensock.com/club/\" target=\"external\">Club GreenSock</a> membership benefit. You must have a valid membership to use this class without violating the terms of use. Visit <a href=\"http://www.greensock.com/club/\" target=\"external\">http://www.greensock.com/club/</a> to sign up or get more details.</p>"}},"7bc5a8cd3cf25890":{"meta":{"keywords":["js.TextPlugin","Plugins","Text"],"title":"TextPlugin","description":""},"header":{"content":"<p>Tweens the text content of a DOM element, replacing it one character at a time (or one word at a time if you set the <code>delimiter</code> to \" \" (a space) or you can even use a custom delimiter). So when the tween is finished, the DOM element's text has been completely replaced. This also means that if you rewind/restart the tween, the text will be reverted.</p><p>Here is a simple example of replacing the text in <code>yourElement</code>:<br /></p><pre class='pre-container prettyprint'>//replaces yourElement's text with \"This is the new text\" over the course of 2 seconds<br />TweenLite.to(yourElement, 2, {text:\"This is the new text\", ease:Linear.easeNone});</pre><p>If you'd like to use a different delimiter so that instead of replacing character-by-character, it gets replaced word-by-word, just pass an object with configuration properties like this:<br /></p><pre class='pre-container prettyprint'>//replaces word-by-word because the delimiter is \" \" (a space)<br />TweenLite.to(yourElement, 2, {text:{value:\"This is the new text\", delimiter:\" \"}, ease:Linear.easeNone});</pre><p>Sometimes it's useful to have the new text differentiated visually from the old text, so TextPlugin allows you to define a css class to the new and/or old content, like this:<br /></p><pre class='pre-container prettyprint'>//wraps the old text in <span class=\"class1\"></span> and the new text in a <span class=\"class2\"></span><br />TweenLite.to(yourElement, 2, {text:{value:\"This is the new text\", newClass:\"class2\", oldClass:\"class1\"}, ease:Power2.easeIn});</pre><p>As indicated, defining a <code>newClass</code> and/or <code>oldClass</code> will result in wrapping a &lt;span&gt; tag around the associated text.</p><p>The <code>delimiter</code>, <code>newClass</code>, and <code>oldClass</code> special properties are all completely optional. If you use them, make sure you put them inside their own object, not inside the main vars object, like this:<br /></p><pre class='pre-container prettyprint'>//GOOD:<br />TweenLite.to(yourElement, 1, {text:{value:\"Your new text\", oldClass:\"class1\", newClass:\"class2\", delimiter:\" \"}});<br /> <br />//BAD:<br />TweenLite.to(yourElement, 1, {text:\"Your new text\", oldClass:\"class1\", newClass:\"class2\", delimiter:\" \"});</pre><p>If the new text is shorter than the old text, it can sometimes be useful to pad the trailing space with non-breaking space HTML characters so that the old text doesn't collapse. If that's the effect you want, set the <code>padSpace</code> to <code>true</code> inside the text object like this:<br /></p><pre class='pre-container prettyprint'>TweenLite.to(yourElement, 1, {text:{value:\"shorter new text\", padSpace:true}});</pre>"}},"c0ab38e528d80db5":{"name":"delay","returns":{"type":"Number","content":"Amount of delay in seconds (or frames for frames-based tweens) before the animation should begin.","contentShort":""}},"4c4c055e0d1b3ef4":{"name":"paused","returns":{"type":"Boolean","content":"If <code>true</code>, the animation will pause itself immediately upon creation.","contentShort":""}},"6fb092df021a71b8":{"name":"onComplete","returns":{"type":"Function ","content":"A function that should be called when the animation has completed.","contentShort":""}},"1bc824ce6dc34487":{"name":"onCompleteScope","returns":{"type":"Object ","content":"Defines the scope of the onComplete function (what <code>\"this\"</code> refers to inside that function).","contentShort":""}},"4502dc942c2f6ad3":{"name":"useFrames","returns":{"type":"Boolean","content":"If <code>useFrames</code> is <code>true</code>, the tweens's timing will be based on frames instead of seconds because it is intially added to the root frames-based timeline. This causes both its <code>duration</code> and <code>delay</code> to be based on frames. An animations's timing mode is always determined by its parent <code>timeline</code>.","contentShort":"If <code>useFrames</code> is <code>true</code>, the animation's timing will be based on frames instead of seconds because it is initially added to the root frames-based timeline."}},"197338cafda956a7":{"name":"tweens","returns":{"type":"Array","content":"To immediately insert several tweens into the timeline, use the tweens special property to pass in an Array of TweenLite/TweenMax/TimelineLite/TimelineMax instances. You can use this in conjunction with the align and stagger special properties to set up complex sequences with minimal code. These values simply get passed to the add() method.","contentShort":"To immediately insert several tweens into the timeline, use the tweens special property to pass in an Array of TweenLite/TweenMax/TimelineLite/TimelineMax instances."}},"2df6109eebc75958":{"name":"stagger","returns":{"type":"Number","content":"Only used in conjunction with the tweens special property when multiple tweens are to be inserted immediately. It staggers the tweens by a set amount of time in seconds (or in frames if useFrames is true). For example, if the stagger value is 0.5 and the \"align\" property is set to \"start\", the second tween will start 0.5 seconds after the first one starts, then 0.5 seconds later the third one will start, etc. If the align property is \"sequence\", there would be 0.5 seconds added between each tween. This value simply gets passed to the add() method. Default is 0.","contentShort":"When the <code>tweens</code> special property is used in a timeline's constructor the <code>stagger</code> is the amount of time between the start times of those tweens."}},"91440e0dbaa1e01d":{"name":"align","returns":{"type":"String","content":"Only used in conjunction with the tweens special property when multiple tweens are to be inserted immediately. The value simply gets passed to the add() method. The default is \"normal\". Options are:\r\n<ul>\r\n\t<li>\"sequence\" : aligns the tweens one-after-the-other in a sequence</li>\r\n\t<li>\"start\" : aligns the start times of all of the tweens (ignores delays)</li>\r\n\t<li>\"normal\" : aligns the start times of all the tweens (honors delays)</li>\r\n</ul>\r\nThe align special property does not force all child tweens/timelines to maintain relative positioning, so for example, if you use \"sequence\" and then later change the duration of one of the nested tweens, it does not force all subsequent timelines to change their position. The align special property only affects the alignment of the tweens that are initially placed into the timeline through the tweens special property of the vars object.","contentShort":"When the <code>tweens</code> special property is used in a timeline's constructor align allows you to configure the spacing of those tweens."}},"b415f9c3aaa120c7":{"name":"onStart","returns":{"type":"Function ","content":"A function that should be called when the animation begins (when its <code>time</code> changes from 0 to some other value which can happen more than once if the tween is restarted multiple times).","contentShort":""}},"67683f3825ed6254":{"name":"onStartScope","returns":{"type":"Object","content":"Defines the scope of the onStart function (what <code>\"this\"</code> refers to inside that function).","contentShort":""}},"1d0471f0541e51f6":{"name":"onUpdate","returns":{"type":"Function","content":"A function that should be called every time the animation updates (on every frame while the animation is active).","contentShort":""}},"0671715f6c9c297a":{"name":"onUpdateScope","returns":{"type":"Object","content":"Defines the scope of the onUpdate function (what <code>\"this\"</code> refers to inside that function).","contentShort":""}},"634ca2f9b61c71ba":{"name":"onRepeat","returns":{"type":"Function","content":"A function that should be called each time the animation repeats.","contentShort":""}},"14f7b2ab2306d25d":{"name":"onRepeatScope","returns":{"type":"Object","content":"Defines the scope of the onRepeat function (what \"<code>this</code>\" refers to inside that function).","contentShort":""}},"710eec28580f52cc":{"name":"onReverseComplete","returns":{"type":"Function","content":"A function that should be called when the animation has reached its beginning again from the reverse direction. For example, if <code>reverse()</code> is called the tween will move back towards its beginning and when its<code>time</code> reaches 0, <code>onReverseComplete</code> will be called. This can also happen if the animation is placed in a TimelineLite or TimelineMax instance that gets reversed and plays the animation backwards to (or past) the beginning.","contentShort":"A function that should be called when the animation has reached its beginning again from the reverse direction."}},"31d511c03f29c247":{"name":"onReverseCompleteScope","returns":{"type":"Object","content":"Defines the scope of the onReverseComplete function (what <code>\"this\"</code> refers to inside that function).","contentShort":""}},"35d0319919c01f84":{"name":"autoRemoveChildren","returns":{"type":"Boolean","content":"If autoRemoveChildren is set to true, as soon as child tweens/timelines complete, they will automatically get killed/removed. This is normally undesireable because it prevents going backwards in time (like if you want to reverse() or set the progress lower, etc.). It can, however, improve speed and memory management. The root timelines use autoRemoveChildren:true.","contentShort":"Automatically removes child tweens / timelines from a timeline upon completion."}},"22750cc8867b561e":{"name":"smoothChildTiming","returns":{"type":"Boolean","content":"Controls whether or not child tweens/timelines are repositioned automatically (changing their startTime) in order to maintain smooth playback when properties are changed on-the-fly. For example, imagine that the timeline's playhead is on a child tween that is 75% complete, moving element's left from 0 to 100 and then that tween's reverse() method is called. If smoothChildTiming is false (the default except for the root timelines), the tween would flip in place, keeping its startTime consistent. Therefore the playhead of the timeline would now be at the tween's 25% completion point instead of 75%. Remember, the timeline's playhead position and direction are unaffected by child tween/timeline changes. element's left would jump from 75 to 25, but the tween's position in the timeline would remain consistent. However, if smoothChildTiming is true, that child tween's startTime would be adjusted so that the timeline's playhead intersects with the same spot on the tween (75% complete) as it had immediately before reverse() was called, thus playback appears perfectly smooth. element's left would still be 75 and it would continue from there as the playhead moves on, but since the tween is reversed now element's left will travel back towards 0 instead of 100. Ultimately it's a decision between prioritizing smooth on-the-fly playback (true) or consistent position(s) of child tweens/timelines (false). Some examples of on-the-fly changes to child tweens/timelines that could cause their startTime to change when smoothChildTiming is true are: reversed, timeScale, progress, totalProgress, time, totalTime, delay, pause, resume, duration, and totalDuration.","contentShort":"Controls whether or not child tweens/timelines are repositioned automatically (changing their startTime) in order to maintain smooth playback when properties are changed on-the-fly."}},"c0912704078628d1":{"name":"repeat","returns":{"type":"Number","content":"Number of times that the animation should repeat after its first iteration. For example, if <code>repeat</code> is 1, the animation will play a total of twice (the initial play plus 1 repeat). To repeat indefinitely, use -1. <code>repeat</code> should always be an integer.","contentShort":"Number of times that the animation should repeat after its first iteration."}},"ce8ef82d428fb818":{"name":"repeatDelay","returns":{"type":"Number","content":"<i>Number</i> - Amount of time in seconds (or frames for frames-based tweens) between repeats. For example, if <code>repeat</code> is 2 and <code>repeatDelay</code> is 1, the animation will play initially, then wait for 1 second before it repeats, then play again, then wait 1 second again before doing its final repeat.","contentShort":"<i>Number</i> - Amount of time in seconds (or frames for frames-based tweens) between repeats."}},"0e1883e99856fe87":{"name":"yoyo","returns":{"type":"Boolean","content":"If <code>true</code>, every other <code>repeat</code> cycle will run in the opposite direction so that the tween appears to go back and forth (forward then backward). This has no affect on the \"<code>reversed</code>\" property though. So if <code>repeat</code> is 2 and <code>yoyo</code> is<code>false</code>, it will look like: start - 1 - 2 - 3 - 1 - 2 - 3 - 1 - 2 - 3 - end. But if <code>yoyo</code> is <code>true</code>, it will look like: start - 1 - 2 - 3 - 3 - 2 - 1 - 1 - 2 - 3 - end.","contentShort":"If <code>true</code>, every other <code>repeat</code> cycle will run in the opposite direction so that the tween appears to go back and forth (forward then backward)."}},"515611f1e4226fa9":{"name":"onCompleteParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onComplete</code> function. For example, <code>new TimelineMax({onComplete:myFunction, onCompleteParams:[\"param1\", \"param2\"]});</code> To self-reference the timeline instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onCompleteParams:[\"{self}\", \"param2\"]</code>","contentShort":"An Array of parameters to pass the <code>onComplete</code> function."}},"7463e08533f9efec":{"name":"onReverseCompleteParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onReverseComplete</code> function. For example, <code>new TimelineMax({onReverseComplete:myFunction, onReverseCompleteParams:[\"param1\", \"param2\"]});</code> To self-reference the timeline instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onReverseCompleteParams:[\"{self}\", \"param2\"]</code>","contentShort":"An Array of parameters to pass the <code>onReverseComplete</code> function"}},"71e998538c325aca":{"returns":{"type":"Array","contentShort":"An Array of parameters to pass the <code>onRepeat</code> function.","content":"An Array of parameters to pass the <code>onRepeat</code> function. For example, <code>new TimelineMax({onRepeat:myFunction, onRepeatParams:[\"param1\", \"param2\"]});</code> To self-reference the timeline instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onRepeatParams:[\"{self}\", \"param2\"]</code>"}},"34877b494cd68df3":{"name":"onStartParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onStart</code> function. For example, <code>new TimelineMax({onStart:myFunction, onStartParams:[\"param1\", \"param2\"]});</code> To self-reference the timeline instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onStartParams:[\"{self}\", \"param2\"]</code>","contentShort":"An Array of parameters to pass the <code>onStart</code> function."}},"6c2a5ea7a2235260":{"name":"onUpdateParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onUpdate</code> function. For example, <code>new TimelineMax({onUpdate:myFunction, onUpdateParams:[\"param1\", \"param2\"]});</code> To self-reference the timeline instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onUpdateParams:[\"{self}\", \"param2\"]</code>","contentShort":"An Array of parameters to pass the <code>onUpdate</code> function."}},"47f712d4a2ca9bd6":{"name":"callbackScope","returns":{"type":"Object","content":"The scope to be used for all of the callbacks (onStart, onUpdate, onComplete, etc.). The scope is what \"this\" refers to inside any of the callbacks. The older callback-specific scope properties (onStartScope, onUpdateScope, onCompleteScope, onReverseComplete, etc.) are deprecated but still work.","contentShort":"The scope to be used for all of the callbacks (onStart, onUpdate, onComplete, etc.)."}},"7eebd4b20adcaecc":{"meta":{"keywords":["js.TweenMax","Animation"],"title":"TweenMax","description":"TweenMax extends TweenLite, adding many useful (but non-essential) features like repeat(), repeatDelay(), yoyo(), updateTo(), and more. It also includes many extra plugins by default, making it extremely full-featured. Any of the plugins can work with TweenLite too, but TweenMax saves you the step of loading the common ones like CSSPlugin, RoundPropsPlugin, BezierPlugin, AttrPlugin, DirectionalRotationPlugin as well as EasePack, TimelineLite, and TimelineMax."},"header":{"content":"<p>TweenMax extends <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenLite\"><span data-link-id=\"52db442320b34fc1\"></span></span>, adding many useful (but non-essential) features like <code>repeat()</code>, <code>repeatDelay()</code>, <code>yoyo()</code>, and more. It also includes many extra plugins by default, making it extremely full-featured. Any of the plugins can work with <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenLite\"><span data-link-id=\"52db442320b34fc1\"></span></span> too, but TweenMax saves you the step of loading the common ones like <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:CSSPlugin\"><span data-link-id=\"be137a434f5b4e08\"></span></span>, <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:RoundPropsPlugin\"><span data-link-id=\"bac828fc726d4d82\"></span></span>, <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:BezierPlugin\"><span data-link-id=\"43077a47946db3db\"></span></span>, <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:AttrPlugin\"><span data-link-id=\"27db5e20e8bbb9ae\"></span></span>, <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:DirectionalRotationPlugin\"><span data-link-id=\"0a6e62faf0a53059\"></span></span> as well as EasePack, <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineLite\"><span data-link-id=\"2b3bb68a78e65fe7\"></span></span>, and <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineMax\"><span data-link-id=\"32bc2e8f667c28b7\"></span></span>. Since TweenMax extends TweenLite, it can do&nbsp;<strong>ANYTHING</strong>&nbsp;TweenLite can do plus more. The syntax is identical. You can mix and match TweenLite and TweenMax in your project as you please, but if file size is a concern it is best to stick with TweenLite unless you need a particular TweenMax-only feature.</p><p>Like TweenLite, a TweenMax instance handles tweening one or more properties of&nbsp;<strong>any object</strong>&nbsp;(or array of objects) over time. TweenMax can be used on its own or in conjunction with advanced sequencing tools like TimelineLite or TimelineMax to make complex tasks much simpler. With scores of other animation frameworks to choose from, why consider the GreenSock Animation Platform?:</p><ul><li><strong>SPEED&nbsp;</strong>- The platform has been highly optimized for maximum performance. See some speed comparisons yourself at&nbsp;<a href=\"http://www.greensock.com/js/speed.html\" target=\"\">http://greensock.com/js/speed.html</a></li><li><strong>Freakishly robust feature set&nbsp;</strong>- In addition to tweening any numeric property of any object, plugins can be activated to tween hex colors, beziers, css, plus&nbsp;<strong>LOTS</strong>&nbsp;more. It can round values, use relative values, smoothly <code>reverse()</code> on the fly, automatically detect and accommodate getter/setter functions, employ virtually any easing equation,&nbsp;<code>pause()/resume()</code>anytime, and intelligently manage conflicting tweens of the same object with various overwrite modes.</li><li><strong>Sequencing, grouping, and management features&nbsp;</strong>- TimelineLite and TimelineMax make it surprisingly simple to create complex sequences or groups of tweens that you can control as a whole. <code>play()</code>, <code>pause()</code>, <code>restart()</code>, or <code>reverse()</code>. You can even tween a timeline&#39;s&nbsp;<code>time()</code>&nbsp;or&nbsp;<code>progress()</code>&nbsp;to fastforward or rewind the entire timeline. Add labels, change the timeline&#39;s timeScale, nest timelines within timelines, and much more. This can revolutionize your animation workflow, making it more modular and concise.</li><li><strong>Ease of use&nbsp;</strong>- Designers and developers alike rave about how intuitive the platform is.</li><li><strong>Support and reliability&nbsp;</strong>- With frequent updates,&nbsp;<a href=\"http://greensock.com/forums/\" target=\"\">dedicated forums</a>, committed authorship, a solid track record, a proven funding mechanism, and a thriving community of users, the platform is a safe long-term bet (unlike many open source projects).</li><li><strong>Expandability&nbsp;</strong>- With its plugin architecture, you can activate as many (or as few) extra features as your project requires. Write your own plugin to handle particular special properties in custom ways. Minimize bloat and maximize performance.</li></ul><h3>Getting started</h3><p><span class=\"fr-video fr-draggable\" contenteditable=\"false\"><iframe width=\"828\" height=\"465\" src=\"http://www.youtube.com/embed/tMP1PCErrmE?vq=hd720\" frameborder=\"0\" allowfullscreen=\"\"></iframe></span></p><h3>Usage</h3><p>The most common type of tween is a&nbsp;<code><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenMax.to()\"><span data-link-id=\"a52aa2ad91d4ef68\"></span></span></code>&nbsp;tween which allows you to define the destination values:<br></p><pre class=\"pre-container prettyprint\">var photo = document.getElementById(&quot;photo&quot;);\nTweenMax.to(photo, 2, {width:&quot;200px&quot;, height:&quot;150px&quot;});</pre><p>The above code will tween the width and height properties of the &lt;img&gt; DOM element with an id of &quot;photo&quot; from whatever the current values are to 200 and 150 respectively over the course of 2 seconds. Notice the width and height values are defined inside a generic object (between curly braces). Put as many properties there as you want.</p><p>If you pass a string (text) into a tween as the target (like&nbsp;<code>TweenMax.to(&quot;#myID&quot;, 1, {left:&quot;100px&quot;})</code>) TweenMax will use a selector engine (jQuery if present, or <code>document.querySelectorAll()</code> or lastly, <code>document.getElementById()</code>&nbsp;(automatically removing the &quot;#&quot; prefix if it&#39;s there)).</p><p>So once TweenMax is loaded, you can easily animate things like this:<br></p><pre class=\"pre-container prettyprint\">//tween the element with ID of &quot;myID&quot;\nTweenMax.to(&quot;#myID&quot;, 2, {backgroundColor:&quot;#ff0000&quot;, width:&quot;50%&quot;, top:&quot;100px&quot;, ease:Power2.easeInOut});\n \n//or you can do more advanced selecting like all the elements with the class &quot;myClass&quot; like this: \nTweenMax.to(&quot;.myClass&quot;, 2, {boxShadow:&quot;0px 0px 20px red&quot;, color:&quot;#FC0&quot;});</pre><p>By default, tweens begin immediately, although you can delay them using the&nbsp;<code>delay</code>&nbsp;special property or pause them initially using the&nbsp;<code>paused</code>&nbsp;special property (see below).</p><p>The&nbsp;<code>target</code>&nbsp;can also be an array of objects. For example, the following tween will tween the&nbsp;<code>opacity</code>&nbsp;css property to 0.5 and the rotation transform property to 45 for obj1, obj2, and obj3:</p><pre class=\"pre-container prettyprint\">TweenMax.to([obj1, obj2, obj3], 1, {opacity:0.5, rotation:45});</pre><p>Normally, css-specific properties would need to be wrapped in their own object and passed in like&nbsp;<code>TweenMax.to(element, 1, {css:{left:&quot;100px&quot;, top:&quot;50px&quot;}});</code>&nbsp;so that the engine knows that those properties belong to the <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:CSSPlugin\"><span data-link-id=\"be137a434f5b4e08\"></span></span>, but because animating DOM elements in the browser with CSSPlugin is so common, TweenMax automatically checks to see if the target is a DOM element and if it is (and you haven&#39;t defined a &quot;css&quot; object in the vars), TweenMax creates that css object for you and shifts any properties that aren&#39;t directly defined on the element or reserved (like&nbsp;<code>onComplete, ease, delay</code>, etc. or plugins) into that css object when the tween renders for the first time.</p><p>You can also use a&nbsp;<code><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenMax.from()\"><span data-link-id=\"0d0b160bf173886b\"></span></span></code>&nbsp;tween if you want to define the&nbsp;<strong>starting</strong>&nbsp;values instead of the ending values so that the target tweens&nbsp;<em>from</em>&nbsp;the defined values to wherever they currently are. Or a <code><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenMax.fromTo()\"><span data-link-id=\"8ecc7c0172b03069\"></span></span></code>&nbsp;lets you define both starting and ending values.</p><p>Although the&nbsp;<code>to()</code>,&nbsp;<code>from()</code>, and&nbsp;<code>fromTo()</code>&nbsp;static methods are popular because they&#39;re quick and can avoid some garbage collection hassles, you can also use the more object-oriented syntax like this:</p><pre class=\"pre-container prettyprint\">var tween = new TweenMax(myObject, 2, {width:200, height:150});</pre><p>or even:</p><pre class=\"pre-container prettyprint\">var tween = TweenMax.to(myObject, 2, {width:200, height:150});</pre><h3>Special Properties, callbacks and eases</h3><p>In addition to handling the destination values of a tween, the vars object allows you to configure your tween with a variety of options.</p><pre class=\"pre-container prettyprint\">TweenMax.to(element, 1, {opacity:0, onComplete:completeHandler, ease:Back.easeOut, useFrames:true});</pre><p>All TweenMax vars&#39; properties are described below.</p><p>[config id=&quot;bf3441936fcd04fd&quot;]</p><h3>Plugins</h3><p>Think of plugins like special properties that are dynamically added, delivering extra abilities without forcing them to be baked into the core engine, keeping it relatively lean and mean. Each plugin is associated with a property name and it takes responsibility for handling that property. For example, the CSSPlugin is associated with the &quot;css&quot; property name so if it is activated it will intercept the &quot;css&quot; property in the following tween and manage it in a special way so that the tweens affect the element&#39;s style object (for manipulating DOM elements):</p><pre class=\"pre-container prettyprint\">TweenMax.to(element, 1, {css:{top:&quot;100px&quot;, left:&quot;50px&quot;, backgroundColor:&quot;#ff0000&quot;, fontSize:&quot;12px&quot;}, delay:0.5});</pre><p>But again, CSSPlugin is a special case where TweenMax (as of version 1.8.0) doesn&#39;t require wrapping css-specific properties in a css object (although you can if you want maximum performance).</p><p>If the CSSPlugin wasn&#39;t loaded, TweenMax would act as though you were trying to literally tween the&nbsp;<code>element.css</code>&nbsp;property (and there is no such thing).</p><p>The following plugins are automatically activated by TweenMax:</p><ul><li><strong>css&nbsp;</strong>:<em>&nbsp;Object</em>&nbsp;- handles tweening almost any css-related value including backgroundColor, width, height, fontSize, color, top, left, marginTop, etc. Plus it can do transformations like rotation, scaleX, scaleY, skewX, skewY, x, y, xPercent, yPercent and even directionalRotation and autoAlpha. It recognizes transformOrigin and backgroundPosition too. Transformations work in IE7 and later (although those browsers are rather slow at rendering transformations).&nbsp;<code>TweenMax.to(myElement, 1, {width:&quot;50%&quot;, height:&quot;300px&quot;, backgroundColor:&quot;#ff0000&quot;, delay:1});</code></li><li><strong>roundProps&nbsp;</strong>:<em>&nbsp;String</em>&nbsp;- A comma-delimited list of property names whose value should be rounded to the nearest integer anytime they are updated during the tween. For example, if you&#39;re tweening the x, y, and opacity properties of mc and you want to round the x and y values (not opacity) every time the tween is rendered, do:&nbsp;<code>TweenMax.to(mc, 2, {x:300, y:200, opacity:0.5, roundProps:&quot;x,y&quot;});</code></li><li><strong>bezier&nbsp;</strong><em>Object&nbsp;</em>- Allows you to animate along a Bezier curve/path. It will even draw a Bezier curve through a set of values that you provide, ensuring that it is smooth. Control the &quot;curviness&quot; too. Or define the Bezier as cubic or quadratic values. This plugin is extremely flexible. It even distributes motion across the Bezier proportionally so that it doesn&#39;t suffer from the common problem in most Bezier animation systems where things speed up or slow down at various spots along the path. See the docs for the BezierPlugin for specifics about the syntax and example code.</li></ul><h3>Function-based values</h3><p>Instead of a number (<code>x:100</code>) or string (<code>width:&quot;300px&quot;</code>) or relative value (<code>y:&quot;+=50&quot;</code>), you can now define most values as a <strong>function</strong> that&#39;ll get called once for each target the first time the tween renders, and whatever is returned by that function will be used as the value. This can be very useful for randomizing things or applying conditional logic. See it in action in the demos below.</p><div class=\"cp_embed_wrapper\"><iframe id=\"cp_embed_QEQXrY\" src=\"http://codepen.io/GreenSock/embed/QEQXrY?default-tab=js%2Cresult&embed-version=2&height=300&slug-hash=QEQXrY&theme-id=3984&user=GreenSock\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed 2\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"></iframe></div><p><script async=\"\" src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><p><strong>Parameters: index, target</strong><br>The function is passed two parameters:</p><ol><li><strong>index</strong>\n<em>(integer)</em> - the target&#39;s position in the array of targets. For example, if there are 3 <code>&lt;div&gt;</code> elements with the class &quot;.box&quot;, and you <code>TweenMax.to(&quot;.box&quot;, ...)</code>, the function would get called 3 times (once for each target) and the index would be <code>0</code> first, then <code>1</code>, and finally <code>2</code>.</li><li><strong>target</strong>\n<em>(object)</em> - the target itself (the <code>&lt;div&gt;</code> element in this case)</li></ol><p>Using the index parameter makes it easy to increment the value accordingly. There are lots of ways to get creative. The demo below uses the index parameter to tween each element&#39;s x value in increments of 100.</p><div class=\"cp_embed_wrapper\"><iframe id=\"cp_embed_akqgLN\" src=\"http://codepen.io/GreenSock/embed/akqgLN?default-tab=js%2Cresult&embed-version=2&height=300&slug-hash=akqgLN&theme-id=3984&user=GreenSock\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CodePen Embed 1\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"></iframe></div><p><script async=\"\" src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><h3>Examples</h3><p>Please see&nbsp;<a href=\"http://greensock.com/gsap-js/\" target=\"\">http://greensock.com/gsap-js/</a>&nbsp;for examples, tutorials, and interactive demos.</p><h3>Notes / Tips</h3><ul><li>Passing values as Strings and a preceding <code>&quot;+=&quot;</code> or <code>&quot;-=&quot;</code> will make the tween relative to the current value. For example, if you do&nbsp;<code>TweenMax.to(element, 2, {left:&quot;-=20px&quot;});</code>&nbsp;it&#39;ll tween&nbsp;<code>left</code>&nbsp;to 20 pixels less than whatever it is when the tween starts.&nbsp;<code>{x:&quot;+=20&quot;}</code>&nbsp;would add 20.</li><li>You can change the default ease by setting the&nbsp;<code>TweenLite.defaultEase</code>&nbsp;static property. The default is&nbsp;<code>Power1.easeOut</code>.</li><li>You can kill all tweens of a particular object anytime with&nbsp;<code>TweenMax.killTweensOf(yourObject);&nbsp;</code>You can also use selector text like&nbsp;<code>TweenMax.killTweensOf(&quot;#someID&quot;);</code></li><li>You can kill all delayedCalls to a particular function with&nbsp;<code>TweenMax.killDelayedCallsTo(myFunction)</code>&nbsp;or&nbsp;<code>TweenMax.killTweensOf(myFunction);</code></li><li>If you find this class useful, please consider joining&nbsp;<a href=\"http://greensock.com/club/\" target=\"\">Club GreenSock</a>&nbsp;which not only helps to sustain ongoing development, but also gets you bonus plugins, classes and other benefits that are ONLY available to members. Learn more at&nbsp;<a href=\"http://greensock.com/club/\" target=\"\">http://greensock.com/club/</a></li></ul>"}},"0443695353538039":{"meta":{"keywords":["js.TweenMax.TweenMax()"],"title":"TweenMax()","description":" Constructor"},"header":{"content":"<p> Constructor</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties should be affected. When animating DOM elements, the target can be: a single element, an array of elements, a jQuery object (or similar), or a CSS selector string like “#feature” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if <code>useFrames:true</code> is set in the <code>vars</code> parameter)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like<code>onComplete</code>, <code>ease</code>, etc. For example, to tween <code>mc.x</code> to 100 and <code>mc.y</code> to 200 and then call <code>myFunction</code>, do this: <code>new TweenMax(mc, 1, {x:100, y:200, onComplete:myFunction})</code>. Below is a list of all special properties.</p>\n","related_configuration_object":"bf3441936fcd04fd"}],"returns":{},"details":{"content":"<p>Constructor</p>"}},"0840452593dd9b59":{"meta":{"keywords":["js.TweenMax.ticker"],"title":"ticker","description":"[static] The object that dispatches a &quot;tick&quot; event each time the engine updates, making it easy for you to add your own listener(s) to run custom logic after each update (great for game developers)."},"header":{"content":"<p>[static] The object that dispatches a \"tick\" event each time the engine updates, making it easy for you to add your own listener(s) to run custom logic after each update (great for game developers).</p>"},"returns":{"type":"Object","content":""},"details":{"content":"<p>The object that dispatches a <code>\"tick\"</code> event each time the engine updates, making it easy for you to add your own listener(s) to run custom logic after each update (great for game developers). Add as many listeners as you want.</p><h3>Basic example</h3><pre class='pre-container prettyprint'>//add listener<br />TweenMax.ticker.addEventListener(\"tick\", myFunction);<br /><br />function myFunction(event) {<br />//executes on every tick after the core engine updates<br />}<br /><br />//to remove the listener later...<br />TweenMax.ticker.removeEventListener(\"tick\", myFunction);</pre><p>The ticker is driven by <code>requestAnimationFrame</code> events in modern browsers so that the updates are perfectly synchronized with the browser's rendering cycle. It also means that when the user switches to a different tab in the browser, the ticker's updates get throttled back significantly in order to conserve battery power and reduce load on the CPU (this happens because the browser itself throttles back <code>requestAnimationFrame</code> event dispatching). Typically <code>requestAnimationFrame</code> events occur around 60 times per second, but that's up to the browser and depends on system performance as well. If <code>requestAnimationFrame</code> isn't supported, the ticker automatically falls back to using a regular <code>setTimeout()</code> loop which is supported in all browsers.</p><h3>Customizing the ticker</h3><p>To force the ticker to use <code>setTimout()</code> instead of <code>requestAnimationFrame</code>, you can use the ticker's <code>useRAF()</code> method:</p><pre class='pre-container prettyprint'>//turn off requestAnimationFrame, causing ticker to use setTimeout() instead<br />TweenMax.ticker.useRAF(false);]</pre><p>And if you'd like to set a particular frame rate, you can use the <code>fps()</code> method like this:<br /></p><pre class='pre-container prettyprint'>//throttle back the frames-per-second to 30<br />TweenMax.ticker.fps(30);</pre><p>When using <code>requestAnimationFrame</code> (the default), the <code>fps()</code> setting acts like a throttle. Since you cannot tell the browser to crank out<code>requestAnimationFrames</code> at a higher rate than 60fps, you can't do something like <code>TweenMax.ticker.fps(100)</code> (well, you can but it'll still run at around 60fps). You could, however, do <code>TweenMax.ticker.fps(30)</code> and the engine will skip beats when necessary in order to get you as close as possible to 30fps (or whatever fps you set below 60). If you need an fps greater than 60fps (which generally isn't recommended), you should turn off requestAnimationFrame using <code>TweenMax.ticker.useRAF(false)</code> and then set the <code>fps()</code> to whatever you want, like<code>TweenMax.ticker.fps(100)</code></p><h3>Advanced listeners</h3><p>If you need to define the scope (what <code>\"this\"</code> refers to inside the function) or define a particular priority so that the handlers are called in a particular order, you can use the advanced syntax with extra parameters as follows:</p><pre class='pre-container prettyprint'>addEventListener(type, callback, scope, useParam, priority)</pre><h3>Parameters:</h3><ol><li><b>type</b> <i>: String</i> - type of listener, should always be <code>\"tick\"</code></li><li><b>callback</b> <i>: Function</i> - the function to call when the event occurs</li><li><b>scope</b> <i>: Object</i> - binds the scope to a particular object (scope is basically what \"<code>this</code>\" refers to in your function). This can be very useful in JavaScript because scope isn't generally maintained.</li><li><b>useParam</b> <i>: Boolean</i> - if <code>true</code>, an event object will be generated and fed to the callback each time the event occurs. The event is a generic object and has two properties: <code>type</code> (always <code>\"tick\"</code>) and <code>target</code> which refers to the ticker instance. The default for <code>useParam</code> is <code>false</code>because it improves performance.</li><li><b>priority</b> <i>: Integer</i> - influences the order in which the listeners are called. Listeners with lower priorities are called after ones with higher priorities.</li></ol><h3>Advanced Example</h3><pre class='pre-container prettyprint'> //add listener that requests an event object parameter, binds scope to the current scope (this), and sets priority to 1 so that it is called before any other listeners that had a priority lower than 1...<br /> TweenMax.ticker.addEventListener(\"tick\", myFunction, this, true, 1);<br /> <br /> function myFunction(event) {<br />     //executes on every tick after the core engine updates<br /> }<br /> <br /> //to remove the listener later...<br /> TweenMax.ticker.removeEventListener(\"tick\", myFunction);</pre>"}},"6f77f2839c53472f":{"meta":{"keywords":["js.TweenMax.delayedCall()"],"title":"delayedCall()","description":"[static] Provides a simple way to call a function after a set amount of time (or frames)."},"header":{"content":"<p>[static] Provides a simple way to call a function after a set amount of time (or frames).</p>"},"parameters":[{"name":"delay","data_type":"Number","description":"<p>Delay in seconds (or frames if <code>useFrames</code> is <code>true</code>) before the function should be called</p>\n"},{"name":"callback","data_type":"Function","description":"<p>Function to call</p>\n"},{"name":"params","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — An Array of parameters to pass the function (optional).</p>\n"},{"name":"scope","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The scope in which the callback should be called (basically, what &#8220;this&#8221; refers to in the function). NOTE: this parameter only pertains to the JavaScript and AS2 versions; it is omitted in AS3.</p>\n"},{"name":"useFrames","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If the delay should be measured in frames instead of seconds, set <code>useFrames</code> to <code>true</code></p>\n"}],"returns":{"type":"TweenMax","content":"<p>TweenMax instance</p>\n"},"details":{"content":"<p>Provides a simple way to call a function after a set amount of time (or frames). You can optionally pass any number of parameters to the function too.</p><p><b>Note:</b> - Due to the way JavaScript doesn't maintain scope (what \"<code>this</code>\" refers to, or the context) in function calls, it can be useful to define the scope specifically. Therefore, the 4th parameter allows you to define the <code>scope</code>.</p><pre class='pre-container prettyprint'>//calls myFunction after 1 second and passes 2 parameters:<br />TweenMax.delayedCall(1, myFunction, [\"param1\", \"param2\"]);<br /><br />function myFunction(param1, param2) {<br />    //do stuff<br />}</pre>"}},"0d0b160bf173886b":{"meta":{"keywords":["js.TweenMax.from()"],"title":"from()","description":"[static] Static method for creating a TweenMax instance that tweens backwards - you define the BEGINNING values and the current values are used as the destination values which is great for doing things like animating objects onto the screen because you can set them up initially the way you want them to look at the end of the tween and then animate in from elsewhere."},"header":{"content":"<p>[static] Static method for creating a TweenMax instance that tweens backwards - you define the BEGINNING values and the current values are used as the destination values which is great for doing things like animating objects onto the screen because you can set them up initially the way you want them to look at the end of the tween and then animate in from elsewhere.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties should be affected. When animating DOM elements, the target can be: a single element, an array of elements, a jQuery object (or similar), or a CSS selector string like “#feature” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if <code>useFrames:true</code> is set in the <code>vars</code> parameter)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the starting value for each property that should be tweened as well as any special properties like <code>onComplete</code>, <code>ease</code>, etc. For example, to tween <code>mc.x</code> from 100 and <code>mc.y</code> from 200 and then call <code>myFunction</code>, do this:<code>TweenMax.from(mc, 1, {x:100, y:200, onComplete:myFunction});</code></p>\n","related_configuration_object":"bf3441936fcd04fd"}],"returns":{"type":"TweenMax","content":"<p>TweenMax instance</p>\n"},"details":{"content":"<p>Static method for creating a TweenMax instance that tweens backwards - you define the <b>BEGINNING</b> values and the current values are used as the destination values which is great for doing things like animating objects onto the screen because you can set them up initially the way you want them to look at the end of the tween and then animate in from elsewhere.</p><p><b>NOTE:</b> By default, <code>immediateRender</code> is <code>true</code> in <code>from()</code> tweens, meaning that they immediately render their starting state regardless of any delay that is specified. You can override this behavior by passing <code>immediateRender:false</code> in the <code>vars</code> parameter so that it will wait to render until the tween actually begins (often the desired behavior when inserting into TimelineLite or TimelineMax instances). To illustrate the default behavior, the following code will immediately set the <code>opacity</code> of <code>mc</code> to 0 and then wait 2 seconds before tweening the <code>opacity</code> back to 1 over the course of 1.5 seconds:</p><p><pre class='pre-container prettyprint'>TweenMax.from(mc, 1.5, {opacity:0, delay:2});</pre></p><p>Since the <code>target</code> parameter can also be an array of objects, the following code will tween the opacity property of mc1, mc2, and mc3 from a value of 0 simultaneously:</p><pre class='pre-container prettyprint'>TweenMax.from([mc1, mc2, mc3], 1.5, {opacity:0});</pre><p>Even though 3 objects are animating, there is still only one tween that is created. In order to stagger or offset the start times of each object animating, please see the <code>staggerFrom()</code> method (TimelineLite has one too).</p><p>For simple sequencing, you can use the <code>delay</code> special property (like <code>TweenMax.from(mc, 1, {opacity:0, delay:0.5})</code>), but it is highly recommended that you consider using TimelineLite (or TimelineMax) for all but the simplest sequencing tasks. It has an identical <code>from()</code> method that allows you to append tweens one-after-the-other and then control the entire sequence as a whole. You can even have the tweens overlap as much as you want.</p>"}},"8ecc7c0172b03069":{"meta":{"keywords":["js.TweenMax.fromTo()"],"title":"fromTo()","description":"[static] Static method for creating a TweenMax instance that allows you to define both the starting and ending values (as opposed to to() and from() tweens which are based on the target&#039;s current values at one end or the other)."},"header":{"content":"<p>[static] Static method for creating a TweenMax instance that allows you to define both the starting and ending values (as opposed to to() and from() tweens which are based on the target's current values at one end or the other).</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties should be affected. When animating DOM elements, the target can be: a single element, an array of elements, a jQuery object (or similar), or a CSS selector string like “#feature” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if <code>useFrames:true</code> is set in the <code>vars</code> parameter)</p>\n"},{"name":"fromVars","data_type":"Object","description":"<p>An object defining the starting value for each property that should be tweened. For example, to tween <code>mc.x</code>from 100 and <code>mc.y</code> from 200, <code>fromVars</code> would look like this: <code>{x:100, y:200}</code>.</p>\n"},{"name":"toVars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like<code>onComplete</code>, <code>ease</code>, etc. For example, to tween <code>mc.x</code> from 0 to 100 and <code>mc.y</code> from 0 to 200 and then call <code>myFunction</code>, do this:<code>TweenMax.fromTo(mc, 1, {x:0, y:0}, {x:100, y:200, onComplete:myFunction});</code></p>\n","related_configuration_object":"bf3441936fcd04fd"}],"returns":{"type":"TweenMax","content":"<p>TweenMax instance</p>\n"},"details":{"content":"<p>Static method for creating a TweenMax instance that allows you to define both the starting and ending values (as opposed to <code>to()</code>and <code>from()</code> tweens which are based on the target's current values at one end or the other).</p><p><b>NOTE</b>: Only put starting values in the <code>fromVars</code> parameter - all special properties for the tween (like onComplete, onUpdate, delay, etc.) belong in the <code>toVars</code> parameter.</p><p>By default, <code>immediateRender</code> is <code>true</code> in <code>fromTo()</code> tweens, meaning that they immediately render their starting state regardless of any delay that is specified. This is done for convenience because it is often the preferred behavior when setting things up on the screen to animate into place, but you can override this behavior by passing <code>immediateRender:false</code> in the <code>fromVars</code> or <code>toVars</code>parameter so that it will wait to render the starting values until the tween actually begins (often the desired behavior when inserting into TimelineLite or TimelineMax instances).</p><p>Since the <code>target</code> parameter can also be an array of objects, the following code will tween the x property of element1 and element2 from 0 to 100 simultaneously:</p><pre class='pre-container prettyprint'>TweenMax.fromTo([element1, element2], 1, {x:0}, {x:100});</pre><p>Even though 2 objects are animating, there is still only one tween created. In order to stagger or offset the start times of each object animating, please see the <code><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenMax.staggerFromTo()\"><span data-link-id=\"edb1ee784263b5b1\"></span></span></code> method (TimelineLite has one too).</p><p>For simple sequencing, you can use the <code>delay</code> special property (like <code>TweenMax.fromTo(element, 1, {x:0}, {x:100, delay:0.5})</code>), but it is highly recommended that you consider using TimelineLite (or TimelineMax) for all but the simplest sequencing tasks. It has an identical <code>fromTo()</code> method that allows you to append tweens one-after-the-other and then control the entire sequence as a whole. You can even have the tweens overlap as much as you want.</p>"}},"c799d800af33aa6a":{"meta":{"keywords":["js.TweenMax.getAllTweens()"],"title":"getAllTweens()","description":"[static] Returns an array containing all tweens (and optionally timelines too, excluding the root timelines)."},"header":{"content":"<p>[static] Returns an array containing all tweens (and optionally timelines too, excluding the root timelines).</p>"},"parameters":[{"name":"includeTimelines","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, TimelineLite and TimelineMax instances will also be included.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Array","content":"<p>Array of tweens/timelines</p>\n"},"details":{"content":"<p>Returns an array containing all tweens (and optionally timelines too, excluding the root timelines). If your goal is to affect all of the tweens/timelines/delayedCalls (like to <code>pause()</code> them or <code>reverse()</code> or alter their <code>timeScale</code>), you might want to consider using the static <code>TimelineLite.exportRoot()</code> method instead because it provides a single instance that you can use to control everything.</p>"}},"c100119126b4d17b":{"meta":{"keywords":["js.TweenMax.getTweensOf()"],"title":"getTweensOf()","description":"[static] Returns an array containing all the tweens of a particular target (or group of targets) that have not been released for garbage collection yet which typically happens within a few seconds after the tween completes."},"header":{"content":"<p>[static] Returns an array containing all the tweens of a particular target (or group of targets) that have not been released for garbage collection yet which typically happens within a few seconds after the tween completes.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>The target whose tweens should be returned, or an array of such targets</p>\n"},{"name":"onlyActive","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, only tweens that are currently active will be returned (a tween is considered &#8220;active&#8221; if the virtual playhead is actively moving across the tween and it is not paused, nor are any of its ancestor timelines paused).</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Returns an array containing all the tweens of a particular target (or group of targets) that have not been released for garbage collection yet which typically happens within a few seconds after the tween completes. For example,<code>TweenMax.getTweensOf(myObject)</code> returns an array of all tweens of <code>myObject</code>, even tweens that haven't begun yet.<code>TweenMax.getTweensOf([myObject1, myObject2]);</code> will return a condensed array of the tweens of <code>myObject1</code> plus all the tweens of <code>myObject2</code> combined into one array with duplicates removed.</p><p>Since the method only finds tweens that haven't been released for garbage collection, if you create a tween and then let it finish and then a while later try to find it with <code>getTweensOf()</code>, it may not be found because it was released by the engine for garbage collection. Remember, one of the best parts of GSAP is that it saves you from the headache of managing gc. Otherwise, you'd need to manually dispose each tween you create, making things much more cumbersome.</p><pre class='pre-container prettyprint'>TweenMax.to(myObject1, 1, {x:100});<br />TweenMax.to(myObject2, 1, {x:100});<br />TweenMax.to([myObject1, myObject2], 1, {opacity:0});<br /><br />var a1 = TweenMax.getTweensOf(myObject1); //finds 2 tweens<br />var a2 = TweenMax.getTweensOf([myObject1, myObject2]); //finds 3 tweens</pre>"}},"9e2dfbcd4b851bdb":{"meta":{"keywords":["js.TweenMax.globalTimeScale()"],"title":"globalTimeScale()","description":"Gets or sets the global timeScale which is a multiplier that affects ALL animations equally. This is a great way to globally speed up or slow down all animations at once."},"header":{"content":"<p>[static] Gets or sets the global timeScale which is a multiplier that affects <strong>ALL</strong> animations equally.  This is a great way to globally speed up or slow down all animations at once.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>A multiplier that affects all animations, so 1 is normal speed, 0.5 is half-speed, 2 is double-speed, etc. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter).</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Gets or sets the global timeScale which is a multiplier that affects <strong>ALL</strong> animations equally. This doesn't actually set the <code>timeScale()</code> of each individual tween/timeline, but rather it affects the rate at which the root timeline plays (that timeline contains all other animations). This is a great way to globally speed up or slow down all animations at once. For example:</p><pre class='pre-container prettyprint'>TweenMax.globalTimeScale(0.5); //plays at half-speed<br />TweenMax.globalTimeScale(2); //plays twice the normal speed<br />var currentTimeScale = TweenMax.globalTimeScale(); //returns the current global timeScale</pre>"}},"14102df5f069df3e":{"meta":{"keywords":["js.TweenMax.invalidate()"],"title":"invalidate()","description":"[override] Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values."},"header":{"content":"<p>[override] Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values.</p>"},"parameters":[],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Clears any initialization data (like starting/ending values in tweens) which can be useful if, for example, you want to restart a tween without reverting to any previously recorded starting values. When you <code>invalidate()</code> an animation, it will be re-initialized the next time it renders and its <code>vars</code> object will be re-parsed. The timing of the animation (duration, startTime, delay) will not be affected.</p><p>Another example would be if you have a <code>TweenMax(mc, 1, {x:100, y:100})</code> that ran when mc.x and mc.y were initially at 0, but now mc.x and mc.y are 200 and you want them tween to 100 again, you could simply <code>invalidate()</code> the tween and <code>restart()</code> it. Without invalidating first, restarting it would cause the values jump back to 0 immediately (where they started when the tween originally began). When you invalidate a TimelineLite/TimelineMax, it automatically invalidates all of its children.</p>"}},"748acc1d9c528534":{"meta":{"keywords":["js.TweenMax.isTweening()"],"title":"isTweening","description":"[static] Reports whether or not a particular object is actively tweening."},"header":{"content":"<p>[static] Reports whether or not a particular object is actively tweening.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object whose tweens you&#8217;re checking</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Boolean","content":"<p>Value indicating whether or not any active tweens were found</p>\n"},"details":{"content":"<p>Reports whether or not a particular object is actively tweening. If a tween is paused, is completed, or hasn't started yet, it isn't considered active.</p>"}},"e191a597bfccb4b6":{"meta":{"keywords":["js.TweenMax.killAll()"],"title":"killAll()","description":"[static] Kills all tweens and/or delayedCalls/callbacks, and/or timelines, optionally forcing them to completion first."},"header":{"content":"<p>[static] Kills all tweens and/or delayedCalls/callbacks, and/or timelines, optionally forcing them to completion first.</p>"},"parameters":[{"name":"complete","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — Determines whether or not the tweens/delayedCalls/timelines should be forced to completion before being killed.</p>\n"},{"name":"tweens","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code>, all tweens will be killed (TweenLite and TweenMax instances)</p>\n"},{"name":"delayedCalls","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code>, all delayedCalls will be killed. TimelineMax callbacks are treated the same as delayedCalls.</p>\n"},{"name":"timelines","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code>, all delayedCalls will be killed. TimelineMax callbacks are treated the same as delayedCalls.</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Kills all tweens and/or delayedCalls/callbacks, and/or timelines, optionally forcing them to completion first. The various parameters provide a way to specify exactly which types you want to kill</p><pre class='pre-container prettyprint'>//kill everything<br />TweenMax.killAll();<br />//kill only tweens, but not delayedCalls or timelines<br />TweenMax.killAll(false, true, false, false);<br />//kill only delayedCalls<br />TweenMax.killAll(false, false, true, false);</pre>"}},"109ea284ffe68190":{"meta":{"keywords":["js.TweenMax.killChildTweensOf()"],"title":"killChildTweensOf()","description":"[static] Kills all tweens of the children of a particular DOM element, optionally forcing them to completion first."},"header":{"content":"<p>[static] Kills all tweens of the children of a particular DOM element, optionally forcing them to completion first.</p>"},"parameters":[{"name":"parent","data_type":"Object","description":"<p>The parent DOM element whose children&#8217;s tweens should be killed. Or selector text that gets passed to TweenLite.selector. For example, if &#8220;.myClass&#8221; is used (and jQuery or similar is used as TweenLite.selector), tweens of the children of any elements with the &#8220;myClass&#8221; class applied would be killed.</p>\n"},{"name":"complete","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, the tweens will be forced to completion before being killed.</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"Kills all tweens of the children of a particular DOM element, optionally forcing them to completion first. For example, if you have the following HTML:<pre class='pre-container prettyprint lang-html'></pre>And then let's say you create a tween of each of the elements (d1, d2, image, and d3) and then later you want to kill only the tweens of DOM elements that are children of d1 (which would be d2 and image in this example), you'd call <code>TweenMax.killChildTweensOf( document.getElementById(\"d1\") )</code>.<br /><br /><pre class='pre-container prettyprint'>TweenMax.to( document.getElementById(\"d2\"), 1, {css:{left:100}});TweenMax.to( document.getElementById(\"image\"), 1, {css:{left:100}});TweenMax.to( document.getElementById(\"d3\"), 1, {css:{left:100}});//only kills the first 2 tweens because those targets are child elements of the \"d1\" DOM element.TweenMax.killChildTweensOf( document.getElementById(\"d1\") ); </pre>"}},"0b7f1e0ec646b3a7":{"meta":{"keywords":["js.TweenMax.killDelayedCallsTo()"],"title":"killDelayedCallsTo()","description":"[static] Immediately kills all of the delayedCalls to a particular function."},"header":{"content":"<p>[static] Immediately kills all of the delayedCalls to a particular function.</p>"},"parameters":[{"name":"function","data_type":"Function","description":"<p>The function for which all delayedCalls should be killed/cancelled.</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Immediately kills all of the delayedCalls to a particular function. If, for example, you want to kill all delayedCalls to myFunction, you'd do this:</p><pre class='pre-container prettyprint'>TweenMax.killDelayedCallsTo(myFunction);</pre><p>Since a delayedCall is just a tween that uses the function/callback as both its <code>target</code> and its <code>onComplete</code>, <code>TweenMax.killTweensOf(myFunction)</code> produces exactly the same result as <code>TweenMax.killDelayedCallsTo(myFunction)</code>.</p><p>This method affects all delayedCalls that were created using <code>TweenLite.delayedCall()</code> or <code>TweenMax.delayedCall()</code> or the <code>call()</code> or <code>addCallback()</code> methods of TimelineLite or TimelineMax. Basically, any tween whose target is the function you supply will be killed.</p>"}},"5520cb7c254b2de6":{"meta":{"keywords":["js.TweenMax.killTweensOf()"],"title":"killTweensOf()","description":"[static] Kills all the tweens (or specific tweening properties) of a particular object or the delayedCalls to a particular function."},"header":{"content":"<p>[static] Kills all the tweens (or specific tweening properties) of a particular object or the delayedCalls to a particular function.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Object whose tweens should be killed immediately or selector text to feed the selector engine to find the target(s). You may also pass in an array of targets.</p>\n"},{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — To kill only specific properties, use a generic object containing enumerable properties corresponding to the ones that should be killed like <code>{x:true, y:true}</code>. The values assigned to each property don&#8217;t matter &#8211; the sole purpose of the object is for iteration over the named properties (in this case, <code>x</code> and <code>y</code>). If no object (or <code>null</code>) is defined, all matched tweens will be killed in their entirety.</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Kills all the tweens (or specific tweening properties) of a particular object or the delayedCalls to a particular function. If, for example, you want to kill all tweens of <code>myObject</code>, you'd do this:</p><p><pre class='pre-container prettyprint'>TweenMax.killTweensOf(myObject);</pre></p><p>To kill only particular tweening properties of the object, use the second parameter. For example, if you only want to kill all the tweens of <code>myObject.opacity</code> and <code>myObject.x</code>, you'd do this:</p><p><pre class='pre-container prettyprint'>TweenMax.killTweensOf(myObject, {opacity:true, x:true});</pre></p><p>To kill all the delayedCalls (like ones created using <code>TweenMax.delayedCall(5, myFunction);</code>), you can simply call<code>TweenMax.killTweensOf(myFunction);</code> because delayedCalls are simply tweens that have their <code>target</code> and <code>onComplete</code> set to the same function (as well as a <code>delay</code> of course).</p><p>As of version 1.8.0, you can also pass in a string that defines selector text, like \"#myID\" to kill the tweens of the element with an ID of \"myID\". You may also pass in an array of targets.</p><p><code>killTweensOf()</code> affects tweens that haven't begun yet too. If, for example, a tween of <code>myObject</code> has a <code>delay</code> of 5 seconds and<code>TweenLite.killTweensOf(mc)</code> is called 2 seconds after the tween was created, it will still be killed even though it hasn't started yet.</p>"}},"3d2718e5d3fe06be":{"meta":{"keywords":["js.TweenMax.pauseAll()"],"title":"pauseAll()","description":"[static] [deprecated] Pauses all tweens and/or delayedCalls/callbacks and/or timelines."},"header":{"content":"<p>[static] [deprecated] Pauses all tweens and/or delayedCalls/callbacks and/or timelines.</p>"},"parameters":[{"name":"tweens","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code>, all tweens will be paused.</p>\n"},{"name":"delayedCalls","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code>, all delayedCalls will be paused. timeline callbacks are treated the same as delayedCalls.</p>\n"},{"name":"timelines","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code>, all TimelineLite and TimelineMax instances will be paused (at least the ones who haven&#8217;t finished and been removed from their parent timeline)</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>[deprecated] Pauses all tweens and/or delayedCalls/callbacks and/or timelines. This literally changes the <code>paused</code> state of all affected tweens/delayedCalls/timelines, but a more flexible way to globally control things is to use the <code>TimelineLite.exportRoot()</code> method which essentially wraps all of the tweens/timelines/delayedCalls on the root timeline into a TimelineLite instance so that you can <code>pause(), resume()</code>, or even <code>reverse()</code> or alter the <code>timeScale</code> without affecting animations that you create after the export. This also avoids having to alter the <code>paused</code>state of every individual tween/delayedCall/timeline - controlling the TimelineLite that contains the exported animations delivers the same effect visually, but does so in a more elegant and flexible way.</p>"}},"9555ceafd00d82bd":{"meta":{"keywords":["js.TweenMax.progress()"],"title":"progress()","description":"[override] Gets or sets the tween&#039;s progress which is a value between 0 and 1 indicating the position of the virtual playhead (excluding repeats) where 0 is at the beginning, 0.5 is halfway complete, and 1 is complete."},"header":{"content":"<p>[override] Gets or sets the tween's progress which is a value between 0 and 1 indicating the position of the virtual playhead (excluding repeats) where 0 is at the beginning, 0.5 is halfway complete, and 1 is complete.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, no events or callbacks will be triggered when the playhead moves to the new position.</p>\n"}],"returns":{"type":"*","content":"<p> Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the tween's progress which is a value between 0 and 1 indicating the position of the virtual playhead (excluding repeats) where 0 is at the beginning, 0.5 is halfway complete, and 1 is complete. If the tween has a non-zero <code>repeat</code> defined, <code>progress</code> and<code>totalProgress</code> will be different because <code>progress</code> doesn't include any repeats or repeatDelays whereas <code>totalProgress</code> does. For example, if a TweenMax instance is set to repeat once, at the end of the first cycle <code>totalProgress</code> would only be 0.5 whereas<code>progress</code> would be 1. If you watched both properties over the course of the entire animation, you'd see <code>progress</code> go from 0 to 1 twice (once for each cycle) in the same time it takes the <code>totalProgress</code> to go from 0 to 1 once.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myTween.progress(0.5).play();</code></p><pre class='pre-container prettyprint'>var progress = myTween.progress(); //gets current progress<br />myTween.progress( 0.25 ); //sets progress to one quarter finished</pre>"}},"1b0dafbb2fcc15bd":{"meta":{"keywords":["js.TweenMax.repeat()"],"title":"repeat()","description":"Gets or sets the number of times that the tween should repeat after its first iteration."},"header":{"content":"<p>Gets or sets the number of times that the tween should repeat after its first iteration.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p> Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the number of times that the tween should repeat after its first iteration. For example, if <code>repeat</code> is 1, the tween will play a total of twice (the initial play plus 1 repeat). To repeat indefinitely, use -1. <code>repeat</code> should always be an integer.</p><p>To cause the repeats to alternate between forward and backward, set <code>yoyo</code> to <code>true</code>. To add a time gap between repeats, use<code>repeatDelay</code>. You can set the initial <code>repeat</code> value via the <code>vars</code> parameter, like:</p><p><code>TweenMax.to(mc, 1, {x:100, repeat:2});</code></p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like <code>myTween.repeat(2).yoyo(true).play();</code></p><p><pre class='pre-container prettyprint'>var repeat = myTween.repeat(); //gets current repeat value<br /><br />myTween.repeat(2); //sets repeat to 2</pre></p>"}},"86085ac31cb14a44":{"meta":{"keywords":["js.TweenMax.repeatDelay()"],"title":"repeatDelay()","description":"Gets or sets the amount of time in seconds (or frames for frames-based tweens) between repeats."},"header":{"content":"<p>Gets or sets the amount of time in seconds (or frames for frames-based tweens) between repeats.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p> Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the amount of time in seconds (or frames for frames-based tweens) between repeats. For example, if <code>repeat</code> is 2 and<code>repeatDelay</code> is 1, the tween will play initially, then wait for 1 second before it repeats, then play again, then wait 1 second again before doing its final repeat. You can set the initial <code>repeatDelay</code> value via the <code>vars</code> parameter, like:</p><p><code>TweenMax.to(mc, 1, {x:100, repeat:2, repeatDelay:1});</code></p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like<code>myTween.repeat(2).yoyo(true).repeatDelay(0.5).play();</code></p><pre class='pre-container prettyprint'>var repeatDelay = myTween.repeatDelay(); //gets current repeatDelay value<br />myTween.repeatDelay(2); //sets repeatDelay to 2</pre>"}},"1989613671fc0074":{"meta":{"keywords":["js.TweenMax.resumeAll()"],"title":"resumeAll()","description":"[static] [deprecated] Resumes all paused tweens and/or delayedCalls/callbacks and/or timelines."},"header":{"content":"<p>[static] [deprecated] Resumes all paused tweens and/or delayedCalls/callbacks and/or timelines.</p>"},"parameters":[{"name":"tweens","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code>, all tweens will be resumed.</p>\n"},{"name":"delayedCalls","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code>, all delayedCalls will be resumed. timeline callbacks are treated the same as delayedCalls.</p>\n"},{"name":"timelines","data_type":"Boolean","description":"<p>(default = <code>true</code>)<code></code> — If <code>true</code>, all TimelineLite and TimelineMax instances will be resumed (at least the ones who haven&#8217;t finished and been removed from their parent timeline)</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>[deprecated] Resumes all paused tweens and/or delayedCalls/callbacks and/or timelines. This literally changes the <code>paused</code> state of all affected tweens/delayedCalls/timelines, but a more flexible way to globally control things is to use the <code>TimelineLite.exportRoot()</code>method which essentially wraps all of the tweens/timelines/delayedCalls on the root timeline into a TimelineLite instance so that you can <code>pause(), resume()</code>, or even <code>reverse()</code> or alter the <code>timeScale</code> without affecting animations that you create after the export. This also avoids having to alter the <code>paused</code> state of every individual tween/delayedCall/timeline - controlling the TimelineLite that contains the exported animations delivers the same effect visually, but does so in a more elegant and flexible way.</p>"}},"04a1993cebf0c4d6":{"meta":{"keywords":["js.TweenMax.set()"],"title":"set()","description":"[static] Immediately sets properties of the target accordingly - essentially a zero-duration to() tween with a more intuitive name."},"header":{"content":"<p>[static] Immediately sets properties of the target accordingly - essentially a zero-duration to() tween with a more intuitive name.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects or selector text) whose properties will be affected.</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the value for each property that should be set. For example, to set <code>mc.x</code> to 100 and <code>mc.y</code> to 200, do this: <code>TweenMax.set(mc, {x:100, y:200});</code> You may also define any of the special properties baked into GSAP like delay, onComplete, etc.</p>\n","related_configuration_object":"bf3441936fcd04fd"}],"returns":{"type":"TweenMax","content":"<p>A TweenMax instance (with a duration of 0) which can optionally be inserted into a TimelineLite/Max instance (although it&#8217;s typically more concise to just use the timeline&#8217;s <code>set()</code> method).</p>\n"},"details":{"content":"<p>Immediately sets properties of the target accordingly - essentially a zero-duration <code>to()</code> tween with a more intuitive name. So the following lines produce identical results:</p><pre class='pre-container prettyprint'>TweenMax.set(myObject, {x:100, y:50, opacity:0});<br />TweenMax.to(myObject, 0, {x:100, y:50, opacity:0});</pre><p>And of course you can use an array to set the properties of multiple targets at the same time, like:</p><pre class='pre-container prettyprint'>TweenMax.set([obj1, obj2, obj3], {x:100, y:50, opacity:0});</pre><p>You can also use selector text to target DOM elements that match that criteria.</p>"}},"7e006fa58303b1cc":{"meta":{"keywords":["js.TweenMax.staggerFrom()"],"title":"staggerFrom()","description":"[static] Tweens an array of targets from a common set of destination values (using the current values as the destination), but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code."},"header":{"content":"<p>[static] Tweens an array of targets from a common set of destination values (using the current values as the destination), but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code.</p>"},"parameters":[{"name":"targets","data_type":"Array","description":"<p>An array of objects whose properties should be affected. When animating DOM elements, the targets can be: an array of elements, a jQuery object (or similar), or a CSS selector string like “.myClass” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if <code>useFrames:true</code> is defined in the <code>vars</code> parameter)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like<code>ease</code>. For example, to tween <code>x</code> to 100 and <code>y</code> to 200 for mc1, mc2, and mc3, staggering their start time by 0.25 seconds and then call <code>myFunction</code> when they last one has finished, do this: <code>TweenMax.staggerTo([mc1, mc2, mc3], 1, {x:100, y:200}, 0.25, myFunction})</code>.</p>\n","related_configuration_object":"980585c43a98afd0"},{"name":"stagger","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Amount of time in seconds (or frames for frames-based tweens) to stagger the start time of each tween. For example, you might want to have 5 objects move down 100 pixels while fading out, and stagger the start times by 0.2 seconds &#8211; you could do: <code>TweenMax.staggerTo([mc1, mc2, mc3, mc4, mc5], 1, {y:\"+=100\", opacity:0}, 0.2)</code>.</p>\n"},{"name":"onCompleteAll","data_type":"Function","description":"<p>(default = <code>null</code>)<code></code> — A function to call as soon as the entire sequence of tweens has completed</p>\n"},{"name":"onCompleteAllParams","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — An array of parameters to pass the <code>onCompleteAll</code> method.</p>\n"},{"name":"onCompleteAllScope","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The scope in which the onCompleteAll callback should be called (basically, what &#8220;this&#8221; refers to in the function). NOTE: this parameter only pertains to the JavaScript and AS2 versions; it is omitted in AS3.</p>\n"}],"returns":{"type":"Array","content":"<p>An array of TweenMax instances (one for each object in the targets array)</p>\n"},"details":{"content":"<p>Tweens an array of targets from a common set of destination values (using the current values as the destination), but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code. For example, let's say you have an array containing references to a bunch of objects that you'd like to drop into place while fading in, all in a staggered fashion with 0.2 seconds between each tween's start time:</p><pre class='pre-container prettyprint'>var objects = [obj1, obj2, obj3, obj4, obj5];<br />TweenMax.staggerFrom(objects, 1, {y:\"+=150\"}, 0.2);</pre><p><code>staggerFrom()</code> simply loops through the <code>targets</code> array and creates a <code>from()</code> tween for each object and then returns an array containing all of the resulting tweens (one for each object).</p><p>If you can afford the slight increase in file size, it is usually better to use TimelineLite's <code>staggerFrom()</code> method because it wraps the tweens in a TimelineLite instead of an array which makes controlling the group as a whole much easier. That way you could pause(), resume(), reverse(), restart() or change the timeScale of everything at once.</p><p>Note that if you define an <code>onComplete</code> (or any callback for that matter) in the <code>vars</code> parameter, it will be called for each tween rather than the whole sequence. This can be very useful, but if you want to call a function after the entire sequence of tweens has completed, use the <code>onCompleteAll</code> parameter (the 5th parameter).</p><p>By default, <code>immediateRender</code> is <code>true</code> in <code>from()</code> tweens, meaning that they immediately render their starting state regardless of any delay that is specified. You can override this behavior by passing <code>immediateRender:false</code> in the <code>vars</code> parameter so that it will wait to render until the tween actually begins.</p><h2>Cycle through multiple values</h2><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/0HhjSPVuRHA?vq=hd720\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><p>Instead of defining a single value (like <code>x:100, rotation:90</code>), you can define an Array of values to cycle through (like <code>cycle:{x:[100,-100], rotation:[30,60,90]}</code>) or even use function-based values (like <code>cycle:{x:function() { return Math.random() * 200; }}</code>). The amount of functionality you can pack into a single line of code is staggering (pun intended).</p><p data-height=\"390\" data-theme-id=\"3984\" data-slug-hash=\"KVVNjy\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/KVVNjy/'>TweenMax.staggerFrom() with Cycle</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><h3>Parameters: index, target</h3><p>When defining cycle values with functions the functions are passed two parameters:</p><ol><li><strong>index</strong> <i>(integer)</i> - the target's position in the array of targets. For example, if there are 3 <code>&lt;div&gt;</code> elements with the class \".box\", and you <code>TweenMax.staggerFrom(\".box\", ...)</code>, the function would get called 3 times (once for each target) and the index would be <code>0</code> first, then <code>1</code>, and finally <code>2</code>.</li><li><strong>target</strong> <i>(object)</i> - the target itself (the <code>&lt;div&gt;</code> element in this case)</li></ol><h3>Caveats</h3><ul><li>The <code>cycle</code> property is available only in the <code>staggerTo()</code>, <code>staggerFrom()</code>, and <code>staggerFromTo()</code> methods in TweenMax, TimelineLite and TimelineMax.</li><li>the cycle property is available in GSAP 1.18.0+</li></ul>"}},"edb1ee784263b5b1":{"meta":{"keywords":["js.TweenMax.staggerFromTo()"],"title":"staggerFromTo()","description":"[static] Tweens an array of targets from a common set of destination values to a common set of destination values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code."},"header":{"content":"<p>[static] Tweens an array of targets from a common set of destination values to a common set of destination values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code.</p>"},"parameters":[{"name":"targets","data_type":"Array","description":"<p>An array of objects whose properties should be affected. When animating DOM elements, the targets can be: an array of elements, a jQuery object (or similar), or a CSS selector string like “.myClass” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll(</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if <code>useFrames:true</code> is defined in the <code>vars</code> parameter)</p>\n"},{"name":"fromVars","data_type":"Object","description":"<p>An object defining the starting value for each property that should be tweened. For example, to tween <code>x</code>from 100 and <code>y</code> from 200, <code>fromVars</code> would look like this: <code>{x:100, y:200}</code>.</p>\n"},{"name":"toVars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like<code>ease</code>. For example, to tween <code>x</code> to 100 and <code>y</code> to 200 for mc1, mc2, and mc3, staggering their start time by 0.25 seconds and then call <code>myFunction</code> when they last one has finished, do this: <code>TweenMax.staggerTo([mc1, mc2, mc3], 1, {x:100, y:200}, 0.25, myFunction})</code>.</p>\n","related_configuration_object":"980585c43a98afd0"},{"name":"stagger","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Amount of time in seconds (or frames for frames-based tweens) to stagger the start time of each tween. For example, you might want to have 5 objects move down 100 pixels while fading out, and stagger the start times by 0.2 seconds &#8211; you could do: <code>TweenMax.staggerTo([mc1, mc2, mc3, mc4, mc5], 1, {y:\"+=100\", opacity:0}, 0.2)</code>.</p>\n"},{"name":"onCompleteAll","data_type":"Function","description":"<p>(default = <code>null</code>)<code></code> — A function to call as soon as the entire sequence of tweens has completed</p>\n"},{"name":"onCompleteAllParams","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — An array of parameters to pass the <code>onCompleteAll</code> method.</p>\n"},{"name":"onCompleteAllScope","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The scope in which the onCompleteAll callback should be called (basically, what &#8220;this&#8221; refers to in the function). NOTE: this parameter only pertains to the JavaScript and AS2 versions; it is omitted in AS3.</p>\n"}],"returns":{"type":"Array","content":"<p>An array of TweenMax instances (one for each object in the targets array)</p>\n"},"details":{"content":"<p>Tweens an array of targets from and to a common set of values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code. For example, let's say you have an array containing references to a bunch of objects that you'd like to fade from opacity:1 to opacity:0 in a staggered fashion with 0.2 seconds between each tween's start time:</p><pre class='pre-container prettyprint'>var objects = [obj1, obj2, obj3, obj4, obj5];<br />TweenMax.staggerFromTo(objects, 1, {opacity:1}, {opacity:0}, 0.2);</pre><p><code>staggerFromTo()</code> simply loops through the <code>targets</code> array and creates a <code>fromTo()</code> tween for each object and then returns an array containing all of the resulting tweens (one for each object).</p><p>If you can afford the slight increase in file size, it is usually better to use TimelineLite's <code>staggerFromTo()</code> method because it wraps the tweens in a TimelineLite instead of an array which makes controlling the group as a whole much easier. That way you could pause(), resume(), reverse(), restart() or change the timeScale of everything at once.</p><p>Note that if you define an <code>onComplete</code> (or any callback for that matter) in the <code>vars</code> parameter, it will be called for each tween rather than the whole sequence. This can be very useful, but if you want to call a function after the entire sequence of tweens has completed, use the <code>onCompleteAll</code> parameter (the 6th parameter).</p><p>By default, <code>immediateRender</code> is <code>true</code> in <code>staggerFromTo()</code> tweens, meaning that they immediately render their starting state regardless of any delay that is specified. This is done for convenience because it is often the preferred behavior when setting things up on the screen to animate into place, but you can override this behavior by passing <code>immediateRender:false</code> in the <code>fromVars</code> or<code>toVars</code> parameter so that it will wait to render the starting values until the tweens actually begin (often the desired behavior when inserting into TimelineLite or TimelineMax instances).</p><p><b>JavaScript and AS2 note:</b> - Due to the way JavaScript and AS2 don't maintain scope (what \"<code>this</code>\" refers to, or the context) in function calls, it can be useful to define the scope specifically. Therefore, in the JavaScript and AS2 versions accept an 8th parameter for<code>onCompleteAllScope</code>, but that parameter is omitted in the AS3 version.</p><h2>Cycle through multiple values</h2><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/0HhjSPVuRHA?vq=hd720\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><p>Instead of defining a single value (like <code>x:100, rotation:90</code>), you can define an Array of values to cycle through (like <code>cycle:{x:[100,-100], rotation:[30,60,90]}</code>) or even use function-based values (like <code>cycle:{x:function() { return Math.random() * 200; }}</code>). The amount of functionality you can pack into a single line of code is staggering (pun intended).</p><p data-height=\"390\" data-theme-id=\"3984\" data-slug-hash=\"QyydLM\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/KVVNjy/'>TweenMax.staggerFromTo() with Cycle</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><h3>Parameters: index, target</h3><p>When defining cycle values with functions the functions are passed two parameters:</p><ol><li><strong>index</strong> <i>(integer)</i> - the target's position in the array of targets. For example, if there are 3 <code>&lt;div&gt;</code> elements with the class \".box\", and you <code>TweenMax.staggerFromTo(\".box\", ...)</code>, the function would get called 3 times (once for each target) and the index would be <code>0</code> first, then <code>1</code>, and finally <code>2</code>.</li><li><strong>target</strong> <i>(object)</i> - the target itself (the <code>&lt;div&gt;</code> element in this case)</li></ol><h3>Caveats</h3><ul><li>The <code>cycle</code> property is available only in the <code>staggerTo()</code>, <code>staggerFrom()</code>, and <code>staggerFromTo()</code> methods in TweenMax, TimelineLite and TimelineMax.</li><li>the cycle property is available in GSAP 1.18.0+</li></ul>"}},"65d8dcc6c6cabcbd":{"meta":{"keywords":["js.TweenMax.staggerTo()"],"title":"staggerTo()","description":"[static] Tweens an array of targets to a common set of destination values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code."},"header":{"content":"<p>[static] Tweens an array of targets to a common set of destination values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code.</p>"},"parameters":[{"name":"targets","data_type":"Array","description":"<p>An array of objects whose properties should be affected. When animating DOM elements, the targets can be: an array of elements, a jQuery object (or similar), or a CSS selector string like “.myClass” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll(</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if <code>useFrames:true</code> is defined in the <code>vars</code> parameter)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like<code>ease</code>. For example, to tween <code>x</code> to 100 and <code>y</code> to 200 for mc1, mc2, and mc3, staggering their start time by 0.25 seconds and then call <code>myFunction</code> when they last one has finished, do this: <code>TweenMax.staggerTo([mc1, mc2, mc3], 1, {x:100, y:200}, 0.25, myFunction})</code>.</p>\n","related_configuration_object":"980585c43a98afd0"},{"name":"stagger","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Amount of time in seconds (or frames for frames-based tweens) to stagger the start time of each tween. For example, you might want to have 5 objects move down 100 pixels while fading out, and stagger the start times by 0.2 seconds &#8211; you could do: <code>TweenMax.staggerTo([mc1, mc2, mc3, mc4, mc5], 1, {y:\"+=100\", opacity:0}, 0.2)</code>.</p>\n"},{"name":"onCompleteAll","data_type":"Function","description":"<p>(default = <code>null</code>)<code></code> — A function to call as soon as the entire sequence of tweens has completed</p>\n"},{"name":"onCompleteAllParams","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — An array of parameters to pass the <code>onCompleteAll</code> method.</p>\n"},{"name":"onCompleteAllScope","data_type":"*","description":"<p>(default = <code>null</code>)<code></code> — The scope in which the onCompleteAll callback should be called (basically, what &#8220;this&#8221; refers to in the function). NOTE: this parameter only pertains to the JavaScript and AS2 versions; it is omitted in AS3.</p>\n"}],"returns":{"type":"Array","content":"<p>An array of TweenMax instances (one for each object in the targets array)</p>\n"},"details":{"content":"<p>Tweens an array of targets to a common set of destination values, but staggers their start times by a specified amount of time, creating an evenly-spaced sequence with a surprisingly small amount of code. For example, let's say you have an array containing references to a bunch of objects that you'd like to fall away and fade out in a staggered fashion with 0.2 seconds between each tween's start time:</p><pre class='pre-container prettyprint'>var objects = [obj1, obj2, obj3, obj4, obj5];<br />TweenMax.staggerTo(objects, 1, {y:\"+=150\", opacity:0}, 0.2);</pre><p><code>staggerTo()</code> simply loops through the <code>targets</code> array and creates a <code>to()</code> tween for each object and then returns an array containing all of the resulting tweens (one for each object).</p><p><code>staggerTo()</code> can also work on a jQuery collection as shown below:</p><p data-height=\"320\" data-theme-id=\"3984\" data-slug-hash=\"HxzEl\" data-default-tab=\"result\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/HxzEl/'>TweenMax.staggerTo()</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://codepen.io/assets/embed/ei.js\"></script></p><p>If you can afford the slight increase in file size, it is usually better to use TimelineLite's <code>staggerTo()</code> method because it wraps the tweens in a TimelineLite instead of an array which makes controlling the group as a whole much easier. That way you could pause(), resume(), reverse(), restart() or change the timeScale of everything at once.</p><p>Note that if you define an <code>onComplete</code> (or any callback for that matter) in the <code>vars</code> parameter, it will be called for each tween rather than the whole sequence. This can be very useful, but if you want to call a function after the entire sequence of tweens has completed, use the <code>onCompleteAll</code> parameter (the 5th parameter).</p><p data-height=\"400\" data-theme-id=\"3984\" data-slug-hash=\"Eoedn\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/Eoedn/'>TweenMax.staggerTo() with callbacks</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://codepen.io/assets/embed/ei.js\"></script></p><p>Due to the way JavaScript doesn't maintain scope (what \"<code>this</code>\" refers to, or the context) in function calls, it can be useful to define the scope specifically, using the 7th parameter, <code>onCompleteAllScope</code>.</p><h2>Cycle through multiple values</h2><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/0HhjSPVuRHA?vq=hd720\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><p>Instead of defining a single value (like <code>x:100, rotation:90</code>), you can define an Array of values to cycle through (like <code>cycle:{x:[100,-100], rotation:[30,60,90]}</code>) or even use function-based values (like <code>cycle:{x:function() { return Math.random() * 200; }}</code>). The amount of functionality you can pack into a single line of code is staggering (pun intended).</p><p data-height=\"390\" data-theme-id=\"3984\" data-slug-hash=\"LpGLYQ\" data-default-tab=\"result\" data-user=\"GreenSock\" class='codepen'>See the Pen <a href='http://codepen.io/GreenSock/pen/LpGLYQ/'>TweenMax.staggerTo() with Cycle</a> by GreenSock (<a href='http://codepen.io/GreenSock'>@GreenSock</a>) on <a href='http://codepen.io'>CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><h3>Parameters: index, target</h3><p>When defining cycle values with functions the functions are passed two parameters:</p><ol><li><strong>index</strong> <i>(integer)</i> - the target's position in the array of targets. For example, if there are 3 <code>&lt;div&gt;</code> elements with the class \".box\", and you <code>TweenMax.staggerTo(\".box\", ...)</code>, the function would get called 3 times (once for each target) and the index would be <code>0</code> first, then <code>1</code>, and finally <code>2</code>.</li><li><strong>target</strong> <i>(object)</i> - the target itself (the <code>&lt;div&gt;</code> element in this case)</li></ol><h3>Caveats</h3><ul><li>The <code>cycle</code> property is available only in the <code>staggerTo()</code>, <code>staggerFrom()</code>, and <code>staggerFromTo()</code> methods in TweenMax, TimelineLite and TimelineMax.</li><li>the cycle property is available in GSAP 1.18.0+</li></ul>"}},"22d710f5e23c3b66":{"meta":{"keywords":["js.TweenMax.time()"],"title":"time()","description":"[override] Gets or sets the local position of the playhead (essentially the current time), not including any repeats or repeatDelays."},"header":{"content":"<p>[override] Gets or sets the local position of the playhead (essentially the current time), not including any repeats or repeatDelays.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining. Negative values will be interpreted from the <b>END</b> of the animation.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, no events or callbacks will be triggered when the playhead moves to the new position defined in the <code>value</code> parameter.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the local position of the playhead (essentially the current time), <b>not</b> including any repeats or repeatDelays. If the tween has a non-zero <code>repeat</code>, its <code>time</code> goes back to zero upon repeating even though the <code>totalTime</code> continues forward linearly (or if <code>yoyo</code>is <code>true</code>, the <code>time</code> alternates between moving forward and backward). <code>time</code> never exceeds the duration whereas the <code>totalTime</code>reflects the overall time including any repeats and repeatDelays.</p><p>For example, if a TweenMax instance has a <code>duration</code> of 2 and a repeat of 3, <code>totalTime</code> will go from 0 to 8 during the course of the tween (plays once then repeats 3 times, making 4 total cycles) whereas <code>time</code> would go from 0 to 2 a total of 4 times.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p><pre class='pre-container prettyprint'>var currentTime = myTween.time(); //gets current time<br />myTween.time(2);<br />//sets time, jumping to new value just like seek().</pre>"}},"a52aa2ad91d4ef68":{"meta":{"keywords":["js.TweenMax.to()"],"title":"to()","description":"[static] Static method for creating a TweenMax instance that animates to the specified destination values (from the current values)."},"header":{"content":"<p>[static] Static method for creating a TweenMax instance that animates to the specified destination values (from the current values).</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>Target object (or array of objects) whose properties should be affected. When animating DOM elements, the target can be: a single element, an array of elements, a jQuery object (or similar), or a CSS selector string like “#feature” or “h2.author”. GSAP will pass selector strings to a selector engine like jQuery or Sizzle (if one is detected or defined through TweenLite.selector), falling back to document.querySelectorAll().</p>\n"},{"name":"duration","data_type":"Number","description":"<p>Duration in seconds (or frames if <code>useFrames:true</code> is set in the <code>vars</code> parameter)</p>\n"},{"name":"vars","data_type":"Object","description":"<p>An object defining the end value for each property that should be tweened as well as any special properties like<code>onComplete</code>, <code>ease</code>, etc. For example, to tween obj<code>.x</code> to 100 and obj<code>.y</code> to 200 and then call <code>myFunction</code>, do this:<code>TweenMax.to(obj, 1, {x:100, y:200, onComplete:myFunction});</code></p>\n","related_configuration_object":"bf3441936fcd04fd"}],"returns":{"type":"TweenMax","content":"<p>TweenMax instance</p>\n"},"details":{"content":"<p>Static method for creating a TweenMax instance that animates to the specified destination values (from the current values). This static method can be more intuitive for some developers and shields them from potential garbage collection issues that could arise when assigning a tween instance to a persistent variable. The following lines of code produce identical results:</p><pre class='pre-container prettyprint'>TweenMax.to(obj, 1, {x:100}); <br />var myTween = new TweenMax(obj, 1, {x:100}); <br />var myTween = TweenMax.to(obj, 1, {x:100});</pre><p>Each line above will tween the <code>\"x\"</code> property of the <code>mc</code> object to a value of 100 over the coarse of 1 second. They each use a slightly different syntax, all of which are valid. If you don't need to store a reference of the tween, just use the static <code>TweenMax.to( )</code> call.</p><p>Since the <code>target</code> parameter can also be an array of objects, the following code will tween the x property of obj1, obj2, and obj3 to a value of 100 simultaneously:</p><pre class='pre-container prettyprint'>TweenMax.to([obj1, obj2, obj3], 1, {x:100});</pre><p>Even though 3 objects are animating, there is still only one tween created. In order to stagger or offset the start times of each object animating, please see the <code><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenMax.staggerTo()\"><span data-link-id=\"65d8dcc6c6cabcbd\"></span></span></code> method (TimelineLite has one too).</p><p>For simple sequencing, you can use the <code>delay</code> special property (like <code>TweenMax.to(obj, 1, {x:100, delay:0.5})</code>), but it is highly recommended that you consider using TimelineLite (or TimelineMax) for all but the simplest sequencing tasks. It has an identical <code>to()</code>method that allows you to append tweens one-after-the-other and then control the entire sequence as a whole. You can even have the tweens overlap as much as you want.</p>"}},"8b14bde95693efa6":{"meta":{"keywords":["js.TweenMax.totalDuration()"],"title":"totalDuration()","description":"[override] Gets or sets the total duration of the tween in seconds (or frames for frames-based tweens) including any repeats or repeatDelays."},"header":{"content":"<p>[override] Gets or sets the total duration of the tween in seconds (or frames for frames-based tweens) including any repeats or repeatDelays.</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining. Negative values will be interpreted from the <b>END</b> of the animation.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the total duration of the tween in seconds (or frames for frames-based tweens) <b>including</b> any repeats or repeatDelays.<code>duration</code>, by contrast, does <b>NOT</b> include repeats and repeatDelays. For example, if the tween has a <code>duration</code> of 10, a <code>repeat</code> of 1 and a <code>repeatDelay</code> of 2, the <code>totalDuration</code> would be 22.</p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p><pre class='pre-container prettyprint'>var total = myTween.totalDuration(); //gets total duration <br />myTween.totalDuration(10); //sets the total duration</pre>"}},"3783d0a065069766":{"meta":{"keywords":["js.TweenMax.totalProgress()"],"title":"totalProgress()","description":"totalProgress()"},"header":{"content":"<p>totalProgress()</p>"},"parameters":[{"name":"value","data_type":"Number","description":"<p>(default = <code>NaN</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},{"name":"suppressEvents","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, no events or callbacks will be triggered when the playhead moves to the new position.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>[override] Gets or sets the tween's totalProgress which is a value between 0 and 1 indicating the position of the virtual playhead (including repeats) where 0 is at the beginning, 0.5 is halfway complete, and 1 is complete.</p>"}},"149cf67b4ca81773":{"meta":{"keywords":["js.TweenMax.updateTo()"],"title":"updateTo()","description":"Updates tweening values on the fly so that they appear to seamlessly change course even if the tween is in-progress."},"header":{"content":"<p>Updates tweening values on the fly so that they appear to seamlessly change course even if the tween is in-progress.</p>"},"parameters":[{"name":"vars","data_type":"object","description":"<p>Object containing properties with the destination values that should be udpated. You do <b>NOT</b> need to redefine all of the original <code>vars</code> values &#8211; only the ones that should be updated (although if you change a plugin value, you will need to fully define it). For example, to update the destination <code>x</code> value to 300 and the destination <code>y</code> value to 500, pass: <code>{x:300, y:500}</code>.</p>\n"},{"name":"resetDuration","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If the tween has already started (or finished) and <code>resetDuration</code> is <code>true</code>, the tween will restart. If <code>resetDuration</code> is <code>false</code>, the tween&#8217;s timing will be honored (no restart) and each tweening property&#8217;s starting value will be adjusted so that it appears to seamlessly redirect to the new destination value.</p>\n"}],"returns":{"type":"*","content":"<p>self (makes chaining easier)</p>\n"},"details":{"content":"<p>Updates tweening values on the fly so that they appear to seamlessly change course even if the tween is in-progress. Think of it like dynamically updating the <code>vars</code> object that was passed in to the tween when it was originally created. You do <b>NOT</b> need to redefine all of the <code>vars</code> properties/values - only the ones that you want to update. You can even define new properties that you didn't define in the original <code>vars</code> object.</p><p>If the <code>resetDuration</code> parameter is <code>true</code> and the tween has already started (or finished), <code>updateTo()</code> will restart the tween. Otherwise, the tween's timing will be honored. And if <code>resetDuration</code> is <code>false</code> and the tween is in-progress, the starting values of each property will be adjusted so that the tween appears to seamlessly redirect to the new destination values. This is typically not advisable if you plan to reverse the tween later on or jump to a previous point because the starting values would have been adjusted.</p><p><code>updateTo()</code> is only meant for non-plugin values. It's much more complicated to dynamically update values that are being handled inside plugins - that is not what this method is intended to do.</p><pre class='pre-container prettyprint'>//a generic JavaScript object (not a DOM element)<br />var obj = {x:0, y:0, age:18, weight:180}<br /><br />//create a tween that modifies properties of obj<br />var tween = new TweenMax(obj, 2, {x:100, y:200, age:40, weight:250});<br />//then later, update the destination x and y values, restarting the tween <br />tween.updateTo({x:300, y:0}, true);<br />//or to update the values mid-tween without restarting, do this:<br />tween.updateTo({x:300, y:0}, false);</pre>"}},"2810d7a52bbf48a8":{"meta":{"keywords":["js.TweenMax.yoyo()"],"title":"yoyo()","description":"Gets or sets the tween&#039;s yoyo state, where true causes the tween to go back and forth, alternating backward and forward on each repeat."},"header":{"content":"<p>Gets or sets the tween's yoyo state, where true causes the tween to go back and forth, alternating backward and forward on each repeat.</p>"},"parameters":[{"name":"value","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"}],"returns":{"type":"*","content":"<p>Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining.</p>\n"},"details":{"content":"<p>Gets or sets the tween's <code>yoyo</code> state, where <code>true</code> causes the tween to go back and forth, alternating backward and forward on each<code>repeat</code>. <code>yoyo</code> works in conjunction with <code>repeat</code>, where <code>repeat</code> controls how many times the tween repeats, and <code>yoyo</code> controls whether or not each repeat alternates direction. So in order to make a tween yoyo, you must set its <code>repeat</code> to a non-zero value. Yoyo-ing, has no affect on the tween's \"<code>reversed</code>\" property. For example, if <code>repeat</code> is 2 and <code>yoyo</code> is <code>false</code>, it will look like: start - 1 - 2 - 3 - 1 - 2 - 3 - 1 - 2 - 3 - end. But if <code>yoyo</code> is <code>true</code>, it will look like: start - 1 - 2 - 3 - 3 - 2 - 1 - 1 - 2 - 3 - end.</p><p>You can set the <code>yoyo</code> property initially by passing <code>yoyo:true</code> in the <code>vars</code> parameter, like: <code>TweenMax.to(mc, 1, {x:100, repeat:1, yoyo:true});</code></p><p>This method serves as both a getter and setter. Omitting the parameter returns the current value (getter), whereas defining the parameter sets the value (setter) and returns the instance itself for easier chaining, like<code>myAnimation.yoyo(true).repeat(3).timeScale(2).play(0.5);</code></p><pre class='pre-container prettyprint'>var yoyo = myAnimation.yoyo(); //gets current yoyo state<br><br />myAnimation.yoyo( true ); //sets yoyo to true</pre>"}},"82b95bb606c34e2f":{"meta":{"keywords":["js.ModifiersPlugin","Plugins"],"title":"ModifiersPlugin","description":"ModifiersPlugin intercepts values that GSAP would normally apply on each update (&quot;tick&quot;), passes them to your function which can run custom logic and return a new value (great for snapping, clamping, wrapping, or other dynamic effects)."},"header":{"content":"<p><span class=\"inTweenMax\">Included in TweenMax: <span class=\"no\">NO</span></span></p><p>You can define a \"modifier\" function for almost any property; this modifier intercepts the value that GSAP would normally apply on each update (\"tick\"), feeds it to your function as the first parameter and lets you run custom logic, returning a new value that GSAP should then apply. This is perfect for tasks like snapping, clamping, wrapping, or other dynamic effects. It's completely up to you!</p><h3>Parameters: value, target</h3><p>The modifier functions are passed two parameters: </p><ol><li><strong>value</strong> <i>(number | string)</i> - the about-to-be-applied value from the regular tween. This is often a number, but could be a string based on whatever the property requires. For example if you're animating the <code>x</code> property, it would be a number, but if you're animating the <code>left</code> property it could be something like <code>\"212px\"</code>, or for the <code>boxShadow</code> property it could be <code>\"10px 5px 10px rgb(255,0,0)\"</code>. </li><li><strong>target</strong> <i>(object)</i> - the target itself</li></ol><p>For example, change the x of one object based on the y of another object or change rotation based on the direction it is moving. Below are some examples that will help you get familiarized with the syntax.</p><h3>Snap rotation</h3><p>The tween below animates 360 degrees but the modifier function forces the value to jump to the closest 45-degree increment. Take note how the modifier function gets passed the value of the property that is being modified, in this case a <code>rotation</code> number. </p><p data-height=\"300\" data-theme-id=\"3984\" data-slug-hash=\"BzJxBB\" data-default-tab=\"js,result\" data-user=\"GreenSock\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/BzmGba/\">BzJxBB</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><h3>Clamp with Modulus</h3><p>The tween below animates <code>x</code> to 500 but the modifier function forces the value to wrap so that it's always between 0 and 100. </p><p data-height=\"300\" data-theme-id=\"3984\" data-slug-hash=\"rLJmOv\" data-default-tab=\"js,result\" data-user=\"GreenSock\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/BzmGba/\">BzJxBB</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><h3>Carousel Wrap</h3><p>Have you ever built a carousel and wrestled with making it loop seamlessly? Perhaps you duplicated each asset or wrote some code that moved each item back to the beginning when it reached the end. With ModifiersPlugin you can get a seamless repeating carousel with <strong>a single <code>staggerTo()</code>!</strong> The example below tweens each box to a relative x position of <code>\"+=500\"</code>. Click the \"show overflow\" button to see each box get reset to x:0 when it goes beyond 500...</p><p data-height=\"300\" data-theme-id=\"3984\" data-slug-hash=\"QEdpLe\" data-default-tab=\"result\" data-user=\"GreenSock\" data-embed-version=\"2\" data-preview=\"true\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/QEdpLe/\">QEdpLe</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><h3>Advanced demos</h3><p><a href=\"http://codepen.io/collection/AWxOyk/2/\" rel=\"attachment wp-att-7342\"><img src=\"http://greensock.com/wp-content/uploads/2016/07/blake-collection-modifiersplugin.jpg\" alt=\"blake-collection-modifiersplugin\" width=\"840\" height=\"167\" class=\"alignleft size-full wp-image-7342\" /></a></p><p>We've only scratched the surface of what ModifiersPlugin can do. Our moderator <a href=\"http://codepen.io/osublake/\">Blake Bowen</a> has been putting this new plugin to the test and has an <a href=\"http://codepen.io/osublake/pen/vKdGAy?editors=0010\">impressive collection of demos</a> that will surely inspire you. </p><p><strong>Caveats:</strong></p><ul class=\"compact\"><li><i>ModifiersPlugin requires TweenLite or TweenMax version 1.19.0 or later.</i></li><li><i>ModifiersPlugin is <strong>not</strong> included inside of TweenMax; you need to load it separately for it to work.</i></li><li><i>RoundPropsPlugin taps into the same mechanism internally as ModifiersPlugin (to maximize efficiency, minimize memory, and keep kb down). Think of a <code>roundProps</code> tween as just a shortcut that creates a modifier that applies <code>Math.round()</code>, thus you cannot do <strong>BOTH</strong> roundProps and a modifier on the same property. It's easy to get that functionality, though, by just doing Math.round() inside the modifier function.</i></li></ul>"}},"830525841e3dd3cb":{"meta":{"keywords":["js.SlowMo","Easing"],"title":"SlowMo","description":"SlowMo is a configurable ease that produces a slow-motion effect that decelerates initially, then moves linearly for a certain portion of the ease (which you can choose) and then accelerates again at the end; it&#039;s great for effects like zooming text onto the screen, smoothly moving it long enough for people to read it, and then zooming it off the screen"},"header":{"content":"<p>SlowMo is a configurable ease that produces a slow-motion effect that decelerates initially, then moves linearly for a certain portion of the ease (which you can choose) and then accelerates again at the end; it's great for effects like zooming text onto the screen, smoothly moving it long enough for people to read it, and then zooming it off the screen. Without SlowMo, animators would often try to get the same effect by sequencing 3 tweens, one with an easeOut, then another with a Linear.easeNone, and finally an easeIn but the problem was that the eases didn't smoothly transition into one another, so you'd see sudden shifts in velocity at the joints. SlowMo solves this problem and gives you complete control over how strong the eases are on each end and what portion of the movement in the middle is linear.</p><div class=\"ease-visualizer\" data-ease=\"SlowMo\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p>The first parameter, <code>linearRatio</code>, determines the proportion of the ease during which the rate of change will be linear (steady pace). This should be a number between 0 and 1. For example, 0.5 would be half, so the first 25% of the ease would be easing out (decelerating), then 50% would be linear, then the final 25% would be easing in (accelerating). If you choose 0.8, that would mean 80% of the ease would be linear, leaving 10% on each end to ease. The default is 0.7.</p><p>The second parameter, <code>power</code>, determines the strength of the ease at each end. If you define a value greater than 1, it will actually reverse the linear portion in the middle which can create interesting effects. The default is 0.7.</p><p>The third parameter, <code>yoyoMode</code>, provides an easy way to create companion tweens that sync with normal SlowMo tweens. For example, let's say you have a SlowMo tween that is zooming some text onto the screen and moving it linearly for a while and then zooming off, but you want to tween that alpha of the text at the beginning and end of the positional tween. Normally, you'd need to create 2 separate alpha tweens, 1 for the fade-in at the beginning and 1 for the fade-out at the end and you'd need to calculate their durations manually to ensure that they finish fading in by the time the linear motion begins and then they start fading out at the end right when the linear motion completes. But to make this whole process much easier, all you'd need to do is create a separate tween for the alpha and use the same duration but a SlowMo ease that has its <code>yoyoMode</code> parameter set to <code>true</code>.<br /></p><pre class='pre-container prettyprint'>//use the default SlowMo ease (linearRatio of 0.7 and power of 0.7)<br />TweenLite.to(myText, 5, {x:600, ease:SlowMo.ease});<br /> <br />//use a new SlowMo ease with 50% of the tween being linear (2.5 seconds) and a power of 0.8<br />TweenLite.to(myText, 5, {x:600, ease:new SlowMo(0.5, 0.8)});<br /> <br />//this gives the exact same effect as the line above, but uses a different syntax<br />TweenLite.to(myText, 5, {x:600, ease:SlowMo.ease.config(0.5, 0.8)});<br /> <br />//now let's create an opacity tween that syncs with the above positional tween, fading it in at the beginning and out at the end<br />TweenLite.from(myText, 5, {opacity:0, ease:SlowMo.ease.config(0.5, 0.8, true)});</pre>"}},"ed459aa1a80c9521":{"meta":{"keywords":["js.SlowMo.SlowMo()"],"title":"SlowMo()","description":"Constructor"},"header":{"content":"<p>Constructor</p>"},"parameters":[{"name":"linearRatio","data_type":"Number","description":"<p>(default = <code>0.7</code>)<code></code> — the proportion of the ease during which the rate of change will be linear (steady pace). This should be a number between 0 and 1. For example, 0.5 would be half, so the first 25% of the ease would be easing out (decelerating), then 50% would be linear, then the final 25% would be easing in (accelerating). If you choose 0.8, that would mean 80% of the ease would be linear, leaving 10% on each end to ease. The default is 0.7.</p>\n"},{"name":"power","data_type":"Number","description":"<p>(default = <code>0.7</code>)<code></code> — The strength of the ease at each end. If you define a value above 1, it will actually reverse the linear portion in the middle which can create interesting effects. The default is 0.7.</p>\n"},{"name":"yoyoMode","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, the ease will reach its destination value mid-tween and maintain it during the entire linear mode and then go back to the original value at the end (like a yoyo of sorts). This can be very useful if, for example, you want the alpha (or some other property) of some text to fade at the front end of a SlowMo positional ease and then back down again at the end of that positional SlowMo tween. Otherwise you would need to create separate tweens for the beginning and ending fades that match up with that positional tween. Example: <code>TweenLite.to(myText, 5, {x:600, ease:SlowMo.ease.config(0.7, 0.7, false)}); TweenLite.from(myText, 5, {alpha:0, ease:SlowMo.ease.config(0.7, 0.7, true)});</code></p>\n"}],"returns":{},"details":{"content":"<p>Constructor</p>"}},"ba16ab89ebee23c0":{"meta":{"keywords":["js.SlowMo.ease"],"title":"ease","description":"[static] The default ease instance which can be reused many times in various tweens in order to conserve memory and improve performance slightly compared to creating a new instance each time."},"header":{"content":"<p>[static] The default ease instance which can be reused many times in various tweens in order to conserve memory and improve performance slightly compared to creating a new instance each time.</p>"},"returns":{"type":"SlowMo","content":""},"details":{"content":"<p>The default ease instance which can be reused many times in various tweens in order to conserve memory and improve performance slightly compared to creating a new instance each time.</p>"}},"4e307cf9f4bf2f9f":{"meta":{"keywords":["js.SlowMo.config()"],"title":"config()","description":"Permits customization of the ease with various parameters."},"header":{"content":"<p>Permits customization of the ease with various parameters.</p>"},"parameters":[{"name":"linearRatio","data_type":"Number","description":"<p>(default = <code>0.7</code>)<code></code> — the proportion of the ease during which the rate of change will be linear (steady pace). This should be a number between 0 and 1. For example, 0.5 would be half, so the first 25% of the ease would be easing out (decelerating), then 50% would be linear, then the final 25% would be easing in (accelerating). If you choose 0.8, that would mean 80% of the ease would be linear, leaving 10% on each end to ease. The default is 0.7.</p>\n"},{"name":"power","data_type":"Number","description":"<p>(default = <code>0.7</code>)<code></code> — The strength of the ease at each end. If you define a value above 1, it will actually reverse the linear portion in the middle which can create interesting effects. The default is 0.7.</p>\n"},{"name":"yoyoMode","data_type":"Boolean","description":"<p>(default = <code>false</code>)<code></code> — If <code>true</code>, the ease will reach its destination value mid-tween and maintain it during the entire linear mode and then go back to the original value at the end (like a yoyo of sorts). This can be very useful if, for example, you want the alpha (or some other property) of some text to fade at the front end of a SlowMo positional ease and then back down again at the end of that positional SlowMo tween. Otherwise you would need to create separate tweens for the beginning and ending fades that match up with that positional tween. Example: <code>TweenLite.to(myText, 5, {x:600, ease:SlowMo.ease.config(0.7, 0.7, false)}); TweenLite.from(myText, 5, {alpha:0, ease:SlowMo.ease.config(0.7, 0.7, true)});</code></p>\n"}],"returns":{"type":"SlowMo","content":"<p>new SlowMo instance that is configured according to the parameters provided</p>\n"},"details":{"content":"<p>Permits customization of the ease with various parameters.</p>"}},"7fa11166b5591c60":{"meta":{"keywords":["js.SlowMo.getRatio()"],"title":"getRatio()","description":"[override] Translates the tween&#039;s progress ratio into the corresponding ease ratio."},"header":{"content":"<p>[override] Translates the tween's progress ratio into the corresponding ease ratio.</p>"},"parameters":[{"name":"p","data_type":"Number","description":"<p>progress ratio (a value between 0 and 1 indicating the progress of the tween/ease)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Number","content":"<p>translated number</p>\n"},"details":{"content":"<p>Translates the tween's progress ratio into the corresponding ease ratio. This is the heart of the Ease, where it does all its work.</p>"}},"8510bec84f8f5ab3":{"meta":{"keywords":"","description":"","imagePath":""},"content":"<div class=\"package-feature\"><h1>Core</h1><img style=\"width: 93%;\" src=\"https://greensock.com/wp-content/themes/greensock/images/divider.png\" class=\"fr-fic fr-dii\"><p>Package Summary.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Core/SimpleTimeline\"><span data-link-id=\"211a71fb195b2819\"></span></span></h1></div><p><br></p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Core/Animation\"><span data-link-id=\"11f92408d2609969\"></span></span></h1></div><p><br></p></div>"},"91943bd05ded63bb":{"meta":{"keywords":["js.Quad","Easing"],"title":"Quad","description":"Provides an easeIn, easeOut, and easeInOut with a power (or strength) of 1 which is identical to the Power1 ease. The more power, the more exaggerated the easing effect. Using a numeric approach like Power1 instead of Quad makes experimenting easier and the code reads more intuitively."},"header":{"content":"<p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 1 which is identical to the <code>Power1</code> ease. The more power, the more exaggerated the easing effect. Using a numeric approach like Power1 instead of Quad makes experimenting easier and the code reads more intuitively.</p><p>This is one of the eases that is natively accelerated in TweenLite and TweenMax. All of the \"Power\" eases and their counterparts (Linear (0), Quad (1), Cubic (2), Quart (3), Quint (4), and Strong (4)) are accelerated.</p><div class=\"ease-visualizer\" data-ease=\"Power1\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example usage:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Quad.easeOut});</pre>"}},"6c323162f3657de1":{"meta":{"keywords":["js.Quad.easeIn"],"title":"easeIn","description":"[static] Eases in with a power of 1."},"header":{"content":"<p>[static] Eases in with a power of 1.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in with a power of 1.</p>"}},"f878aae254cc6211":{"meta":{"keywords":["js.Quad.easeInOut"],"title":"easeInOut","description":"[static] Eases in and then out with a power of 1."},"header":{"content":"<p>[static] Eases in and then out with a power of 1.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in and then out with a power of 1.</p>"}},"c9e6d8a4b4e56614":{"meta":{"keywords":["js.Quad.easeOut"],"title":"easeOut","description":"[static] Eases out with a power of 1."},"header":{"content":"<p>[static] Eases out with a power of 1.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases out with a power of 1.</p>"}},"0516dafc90c83002":{"name":"cycle","returns":{"type":"*","content":"Instead of defining a single value (like <code>x:100, rotation:90</code>), you can define an Array of values to cycle through (like <code>cycle:{x:[100,-100], rotation:[30,60,90]}</code>) or even use function-based values (like <code>cycle:{x:function() { return Math.random() * 200; }}</code>).","contentShort":""}},"5362451ab9c301de":{"name":"ease","returns":{"type":"Ease (or Function or String)","content":"You can choose from various eases to control the rate of change during the animation, giving it a specific \"feel\". For example, <code>Elastic.easeOut</code> or <code>Strong.easeInOut</code>. For best performance, use one of the GreenSock eases (<code>Linear, Power0, Power1, Power2, Power3, Power4, Quad, Cubic, Quart, Quint</code>, and <code>Strong</code>, each with their <code>.easeIn, .easeOut</code>, and <code>.easeInOut</code> variants are included in the TweenLite, and you can load EasePack to get extras like <code>Elastic, Back, Bounce, SlowMo, SteppedEase, Circ, Expo</code>, and <code>Sine</code>). For linear animation, use the GreenSock <code>Linear.easeNone</code> ease. You can also define an ease by name (string) like \"<code>Strong.easeOut</code>\" or reverse style (like jQuery uses) <code>\"easeOutStrong\"</code>. The default is <code>Quad.easeOut</code>.","contentShort":"You can choose from various eases to control the rate of change during the animation, giving it a specific \"feel\"."}},"12bc54ae2abf7f69":{"name":"overwrite","returns":{"type":"String (or integer) ","content":"Controls how (and if) other tweens of the same target are overwritten. There are several modes to choose from, but <code>\"auto\"</code> is the default (although you can change the default mode using the<code>TweenLite.defaultOverwrite</code> property):\r\n<ul>\r\n\t<li><code>\"none\"</code> (0) (or <code>false</code>) - no overwriting will occur.</li>\r\n\t<li><code>\"all\"</code> (1) (or <code>true</code>) - immediately overwrites all existing tweens of the same target even if they haven't started yet or don't have conflicting properties.</li>\r\n\t<li><code>\"auto\"</code> (2) - when the tween renders for the first time, it will analyze tweens of the same target that are currently active/running and only overwrite individual tweening properties that overlap/conflict. Tweens that haven't begun yet are ignored. For example, if another active tween is found that is tweening 3 properties, only 1 of which it shares in common with the new tween, the other 2 properties will be left alone. Only the conflicting property gets overwritten/killed. This is the default mode and typically the most intuitive for developers.</li>\r\n\t<li><code>\"concurrent\"</code> (3) - when the tween renders for the first time, it kills only the active (in-progress) tweens of the same target regardless of whether or not they contain conflicting properties. Like a mix of <code>\"all\"</code> and <code>\"auto\"</code>. Good for situations where you only want one tween controling the target at a time.</li>\r\n\t<li><code>\"allOnStart\"</code> (4) - Identical to <code>\"all\"</code> but waits to run the overwrite logic until the tween begins (after any delay). Kills tweens of the same target even if they don't contain conflicting properties or haven't started yet.</li>\r\n\t<li><code>\"preexisting\"</code> (5) - when the tween renders for the first time, it kills only the tweens of the same target that existed BEFORE this tween was created regardless of their scheduled start times. So, for example, if you create a tween with a delay of 10 and then a tween with a delay of 1 and then a tween with a delay of 2 (all of the same target), the 2nd tween would overwrite the first but not the second even though scheduling might seem to dictate otherwise. <code>\"preexisting\"</code> only cares about the order in which the instances were actually created. This can be useful when the order in which your code runs plays a critical role.</li>\r\n</ul>","contentShort":"Controls how (and if) other tweens of the same target are overwritten. There are several modes to choose from."}},"c0b2819eb45d22fa":{"name":"immediateRender","returns":{"type":"Boolean","content":"Normally when you create a tween, it begins rendering on the very next frame (update cycle) unless you specify a <code>delay</code>. However, if you prefer to force the tween to render immediately when it is created, set<code>immediateRender</code> to <code>true</code>. Or to prevent a <code>from()</code> from rendering immediately, set <code>immediateRender</code> to <code>false</code>. By default, <code>from()</code> tweens set <code>immediateRender</code> to <code>true</code>.","contentShort":"Normally when you create a tween, it begins rendering on the very next frame (update cycle) unless you specify a <code>delay</code>. However, if you prefer to force the tween to render immediately when it is created, set<code>immediateRender</code> to <code>true</code>."}},"3858c3c0e131d9f9":{"name":"onCompleteParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onComplete</code> function. For example,<code>TweenLite.to(element, 1, {left:\"100px\", onComplete:myFunction, onCompleteParams:[element, \"param2\"]});</code> To self-reference the tween instance itself in one of the parameters, use <code>\"{self}\"</code>, like:<code>onCompleteParams:[\"{self}\", \"param2\"]</code>","contentShort":"An Array of parameters to pass the <code>onComplete</code> function."}},"001be8077e6e9763":{"name":"onRepeatParams","returns":{"type":"Array","content":"An Array of parameters to pass the onRepeat function. For example, <code>TweenMax.to(mc, 1, {x:100, onRepeat:myFunction, onRepeatParams:[mc, \"param2\"]});</code> To self-reference the tween instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onRepeatParams:[\"{self}\", \"param2\"]</code>","contentShort":"An Array of parameters to pass the onRepeat function."}},"cb1dfa66a7a72a20":{"name":"onReverseCompleteParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onReverseComplete</code> function. For example,<code>TweenLite.to(element, 1, {left:\"100px\", onReverseComplete:myFunction, onReverseCompleteParams:[mc, \"param2\"]});</code> To self-reference the tween instance itself in one of the parameters, use <code>\"{self}\"</code>, like:<code>onReverseCompleteParams:[\"{self}\", \"param2\"].</code>","contentShort":"An Array of parameters to pass the <code>onReverseComplete</code> function."}},"5831c58b3d824f56":{"name":"onStartParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onStart</code> function. For example, <code>TweenLite.to(element, 1, {left:\"100px\", delay:1, onStart:myFunction, onStartParams:[mc, \"param2\"]});</code> To self-reference the tween instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onStartParams:[\"{self}\", \"param2\"].</code>","contentShort":"An Array of parameters to pass the <code>onStart</code> function."}},"08db63c99851dad9":{"name":"onUpdateParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onUpdate</code> function. For example, <code>TweenLite.to(element, 1, {left:\"100px\", onUpdate:myFunction, onUpdateParams:[mc, \"param2\"]});</code> To self-reference the tween instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onUpdateParams:[\"{self}\", \"param2\"].</code>","contentShort":"An Array of parameters to pass the <code>onUpdate</code> function."}},"7f77859ab3515047":{"name":"startAt","returns":{"type":"Object","content":"Allows you to define the starting values for tweening properties. Typically, TweenMax uses the current value (whatever it happens to be at the time the tween begins) as the starting value, but <code>startAt</code> allows you to override that behavior. Simply pass an object in with whatever properties you'd like to set just before the tween begins. For example, if <code>mc.x</code> is currently 100, and you'd like to tween it from 0 to 500, do <code>TweenMax.to(mc, 2, {x:500, startAt:{x:0}});</code>","contentShort":"Allows you to define the starting values for tweening properties."}},"b11dc6cdb0b25ad4":{"name":"lazy","returns":{"type":"Boolean","content":"When a tween renders for the very first time and reads its starting values, GSAP will automatically \"lazy render\" that particular tick by default, meaning it will try to delay the rendering (writing of values) until the very end of the \"tick\" cycle which can improve performance because it avoids the read/write/read/write layout thrashing that <a href=\"http://codepen.io/GreenSock/pen/16438623257ec198107d561a9456e95d?editors=001\">some browsers do</a>. If you would like to disable lazy rendering for a particular tween, you can set <code>lazy:false</code>. Or, since zero-duration tweens do <b>not</b> lazy-render by default, you can specifically give it permission to lazy-render by setting <code>lazy:true</code> like <code>TweenLite.set(element, {opacity:0, lazy:true});</code>. In most cases, you <strong>won't</strong> need to set <code>lazy</code>. To learn more, watch the video at <a href=\"http://www.youtube.com/embed/TMHJptqnDpU?vq=hd720\">http://www.youtube.com/embed/TMHJptqnDpU?vq=hd720</a>","contentShort":"Helps avoid performance problems caused by read / write layout thrashing."}},"23dd15a5cb01a73a":{"name":"onOverwrite","returns":{"type":"Function","content":"A function that should be called when the tween gets overwritten by another tween. The following parameters will be passed to that function: \r\n<ol>\r\n  <li><strong>overwrittenTween</strong> : Animation - the tween that was just overwritten</li>\r\n  <li><strong>overwritingTween</strong> : Animation - the tween did the overwriting</li>\r\n  <li><strong>target</strong> : Object [only passed if the overwrite mode was <code>\"auto\"</code> because that's the only case when portions of a tween can be overwritten rather than the entire thing] - the target object whose properties were overwritten. This is usually the same as <code>overwrittenTween.target</code> unless that's an array and the overwriting targeted a sub-element of that array. For example, <code>TweenLite.to([obj1, obj2], 1, {x:100})</code> and then <code>TweenLite.to(obj2, 1, {x:50})</code>, the <code>target</code> would be <code>obj2</code>.</li>\r\n  <li><strong>overwrittenProperties</strong> : Array [only passed if the overwrite mode was <code>\"auto\"</code> because that's the only case when portions of a tween can be overwritten rather than the entire thing] - an array of property names that were overwritten, like <code>[\"x\",\"y\",\"opacity\"]</code>.</li>\r\n</ol>\r\nNote: there is also a static <code>TweenLite.onOverwrite</code> that you can use if you want a quick and easy way to be notified when any tween is overwritten (great for debugging). This saves you the hassle of defining an <code>onOverwrite</code> on a tween-by-tween basis. (available since version 1.14.0)","contentShort":"A function that should be called when the tween gets overwritten by another tween."}},"a7dacb5385dc0208":{"name":"autoCSS","returns":{"type":"Boolean","content":"Animating css-related properties of DOM elements requires the CSSPlugin which means that normally you'd need to wrap css-related properties in a <code>css:{}</code> object like <code>TweenLite.to(element, 2, {css:{left:\"200px\", top:\"100px\"}, ease:Linear.easeNone});</code> to indicate your intent (and to tell GSAP to feed those values to the CSSPlugin), but since animating css-related properties is so common, GSAP implements some logic internally that allows you to omit the <code>css:{}</code> wrapper (meaning you could rewrite the above tween as <code>TweenLite.to(element, 2, {left:\"200px\", top:\"100px\", ease:Linear.easeNone});</code>). By default, it will check to see if the target is a DOM element. If so, and if you haven't defined a <code>css:{}</code> object, it will create one for you and populate it with any properties that aren't reserved (like onComplete, ease, etc. or other plugin properties) and that don't already exist directly on the target itself (like if you created a custom \"xpos\" property on your element, that won't get added to the <code>css:{}</code> object). To prevent GSAP from automatically creating the css wrapper for you, simply set <code>autoCSS:false</code>. This is rarely useful, but if you suspect that GSAP is interpreting certain properties as css-related when it shouldn't be, try setting <code>autoCSS:false</code> or manually define your own <code>css:{}</code> object. It is perfectly acceptable to always create <code>css:{}</code> wrappers for your css-related properties. In fact, that results in a slight speed boost because it avoids some parsing logic when the tween gets rendered for the first time (the speed boost is probably imperceptible unless you're tweening thousands of DOM elements simultaneously).","contentShort":"An optimization that allows CSSPlugin to automatically parse CSS properties from the <code>vars :{} </code>object when the target of a tween is a DOM element."}},"9927ce1237a8b0b1":{"meta":{"keywords":["js.SplitText","Text","Utilities"],"title":"SplitText","description":"SplitText makes it easy to break apart the text in an HTML element so that each character, word, and/or line is in its own <div> making complex animation simple."},"header":{"content":"<p>SplitText makes it easy to break apart the text in an HTML element so that each character, word, and/or line is in its own &lt;div&gt;, making complex animation simple. For example, maybe you'd like to make each character or word fade into place in a staggered fashion. SplitText automatically works around various browser inconsistencies and recognizes line breaks appropriately. Plus it is highly configurable.</p><p><b>Watch overview video</b><br /><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/C7Z62o2GQB0?vq=hd720\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><p><b>FEATURES</b></p><p>There are a few things about SplitText that set it apart from some of the other popular libraries/plugins out there:</p><ul><li><b>No dependencies</b> - no jQuery dependency. Keep things lightweight (less than 2k gzipped and minified).</li><li><b>Compatibility</b> - even works in IE8! Plus it doesn't force non-breaking spaces into the divs like many other solutions on the web do, because those can alter the line breaks in some situations.</li><li><b>Uses divs, not spans</b> - some browsers won't render transforms like rotation, scale, skew, etc. on spans. Actually, it's related to <code>display:inline</code> (the default for spans) which is why we're using divs with <code>display:inline-block</code> for better animation flexibility.</li><li><b>Nested elements</b> - The element you are splitting can contain nested elements such as <code>&lt;span&gt;</code>, <code>&lt;strong&gt;</code>, <code>&lt;a&gt;</code>, etc. Requires version 0.5.4+.<li><b>Permits position:absolute</b> - this can improve performance and enable effects that would otherwise be impossible. With SplitText, you can choose if you want the divs to remain in the document flow or not.</li><li><b>Honors line breaks</b> - some other libraries force you to use a &lt;br&gt; to define line breaks, but SplitText doesn't. Of course you're welcome to use those if you prefer, but SplitText can recognize natural line breaks in the normal document flow. That's handy because you don't always know how the text will flow in every environment at various sizes.</li><li><b>Extremely flexible class assignment</b> - use no classes at all, or define a different one for characters, words, and/or lines. They don't need to be incremented (like \"char1\", \"char2\", \"char3\"...) but they can if you prefer (simply append \"++\" to the class name like <code>charsClass:\"yourCharClass++\"</code>).</li><li><b>Works with arrays and selectors</b> - a single SplitText instance can manage multiple elements; you can feed in a regular array like <code>new SplitText([element1, element2])</code> or a selector object (think jQuery), like <code>new SplitText( $(\".yourClass\") )</code>. In fact, you can define a <code>SplitText.selector</code> just like <code>TweenLite.selector</code> so that you can feed in selector text directly and have it use whatever selector you want! It will use jQuery by default (if it is loaded), or whatever window.$ is. For example, <code>new SplitText(\"#yourID\", {wordsClass:\"word\"})</code> would find the element with the ID <code>\"yourID\"</code> and split its text, applying a \"word\" class to every resulting word.</li><li><b>revert() anytime</b> - allows you to get back to the original content (swaps in the innerHTML that was recorded when the split occurred).</li></ul><p><b>BASIC USAGE</b></p><p>Start by creating a new SplitText instance and pass any of the following to the constructor to indicate which element(s) to split apart: a DOM element, an array of DOM elements, a selector object (like a jQuery object), or selector text. For example:<br /></p><pre class='pre-container prettyprint'>//a DOM element:<br />var yourElement = document.getElementById(\"yourID\");<br />var split = new SplitText(yourElement);<br /> <br />//or selector text which will use jQuery by default (if loaded) to get the selection:<br />var split = new SplitText(\"#yourID\");<br /> <br />//or a selector object, like jQuery:<br />var split = new SplitText( $(\".yourClass\") );<br /> <br />//or an array of DOM elements:<br />var split = new SplitText([element1, element2, element3]);</pre><pre class=\"codepen\" data-height=\"400\" data-type=\"result\" data-href=\"mvhak\" data-user=\"GreenSock\" data-safe=\"true\"><code></code><a href=\"http://codepen.io/GreenSock/pen/mvhak\">Check out this Pen!</a></pre><p><b>CONFIGURATION</b></p><p>By default, SplitText will split by characters, words, and lines which may be overkill for you. To control exactly which components are split apart (chars, words, and/or lines), or apply your own classes or set positioning to <code>absolute</code>, pass a <code>vars</code> configuration object as the second parameter to the constructor like <code>new SplitText(\"#yourID\", {type:\"words,lines\", wordsClass:\"word++\", position:\"absolute\"})</code>.</p><p><span style=\"background-color: #ffffff;\">[config id=\"53ab3440dc93284a\"]</span></p><p>Then, once the SplitText has been created, you can access an array of the split-apart <code>&lt;div&gt;</code> elements of each type by using the SplitText's <code>\"chars\"</code>, <code>\"words\"</code>, and/or <code>\"lines\"</code> properties. For example:</p><pre class='pre-container prettyprint'>//create a SplitText instance for the element with ID \"yourElementID\" that splits apart characters, words, and lines, and uses absolute positioning:<br />var split = new SplitText(\"#yourElementID\", {type:\"chars,words,lines\", position:\"absolute\"});<br /> <br />//now animate each character into place from 100px above, fading in:<br />TweenMax.staggerFrom(split.chars, 1, {y:100, autoAlpha:0}, 0.05);<br /> <br />//or animate each word<br />TweenMax.staggerFrom(split.words, 1, {x:200, autoAlpha:0, ease:Elastic.easeOut}, 0.1);<br /> <br />//or animate each line<br />TweenMax.staggerFrom(split.lines, 1, {x:200, autoAlpha:0, ease:Power3.easeOut}, 0.1);</pre><p><b>NESTED ELEMENTS AND EMOJI</b></p><p>SplitText (version 0.5.4+) will honor nested elements such as <code>&lt;span&gt;</code>, <code>&lt;strong&gt;</code>, <code>&lt;a&gt;</code>, etc. Want to have some fun with emoji? No problem: 🐳 🍔 ❤️. Watch the video below.</p><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/gh9eIGYFuE4?vq=hd720\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><p data-height=\"500\" data-theme-id=\"pEKYVz\" data-slug-hash=\"pEKYVz\" data-default-tab=\"result\" data-user=\"GreenSock\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/pbWwLZ/\">SplitText - delimeter</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><p><b>CUSTOM WORD DELIMITERS</b><br />Ever need to split a long string of text into words but didn't want any spaces? Custom word delimiters to the rescue! As of SplitText version 0.4.0, you can place any character you want to mark where words should be split and SplitText will remove them during the split. <code>#AwesomeForLongHashTags</code>. </p><p data-height=\"300\" data-theme-id=\"3984\" data-slug-hash=\"pbWwLZ\" data-default-tab=\"result\" data-user=\"GreenSock\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"http://codepen.io/GreenSock/pen/pbWwLZ/\">SplitText - delimeter</a> by GreenSock (<a href=\"http://codepen.io/GreenSock\">@GreenSock</a>) on <a href=\"http://codepen.io\">CodePen</a>.</p><p><script async src=\"http://assets.codepen.io/assets/embed/ei.js\"></script></p><p><b>NOTES / LIMITATIONS</b></p><ul><li>In order to maintain proper line breaks, don't just split the characters - split by words too and/or lines.</li><li>If you are using custom fonts, make sure they load BEFORE you split (otherwise all the splitting will be based on the default font which could throw off how things get aligned and sized)</li><li>If your goal is to animate 2D transforms in IE8, make sure you set <code>position:\"absolute\"</code> because otherwise IE will clip the content using the original size of the character/word/line.</li><li>Some inline css styles are set on the resulting div elements in order to position them correctly, so if you apply classes and don't see some styles taking effect, that could be why (the inline styles are overriding the class styles). Feel free to clear those inline styles manually or use <code>TweenLite.set([elements], {clearProps:\"all\"})</code> to clear them (of course that would affect positioning, so beware).</li><li>To maximize performance, only split the components you need. Don't split characters if you don't need to.</li><li>IE8 doesn't allow &lt;div&gt; tags to be nested inside &lt;p&gt; elements, so if you need IE8 compatability, don't try splitting &lt;p&gt; elements. Instead, build your HTML using &lt;div&gt; tags.</li><li>If the element uses justified text (<code>text-align:justify</code>), you must use <code>position:\"absolute\"</code> for the SplitText because divs that remain in the document flow cannot be justified.</li><li>Some browsers (like Safari) apply custom kerning by default between letters, so when characters are split apart and put into their own divs, the spacing is slightly different. A bug has been filed with the Safari team (it's a browser issue, not SplitText) but you can typically eliminate the differences by setting these CSS properties: <br /><pre class='pre-container prettyprint'>font-kerning: none;<br />-webkit-text-rendering: optimizeSpeed;<br />text-rendering: optimizeSpeed;<br />-webkit-transform: translateZ(0);<br />transform: translateZ(0);</pre><p></li><li>SplitText is <strong>not</strong> designed to work with SVG &lt;text&gt; nodes.</li></ul><p><b>GETTING ODD LINEBREAKS WITH NESTED ELEMENTS?<b></p><p>Nested elements can produce some odd results when you split text into lines. The issue arises when a nested elements like <code>&lt;span&gt;</code> wrap onto multiple lines. SplitText must place the entire nested elements within the line that first appears on. At times this can make it appear that lines are breaking in the wrong place.</p><p>In most cases adding <code>display:inline-block</code> to the nested element will yield better results. For a detailed explanation watch the video below.</p><p><iframe width=\"838\" height=\"471\" src=\"http://www.youtube.com/embed/1gLdsdDJF4g?vq=hd720\" frameborder=\"0\" allowfullscreen=\"true\"></iframe></p><p>Please visit our <a href=\"http://codepen.io/collection/KiEhr\" target=\"_blank\">SplitText Codepen Collection</a> for more demos of SplitText in action.</p><p>SplitText is a <a href=\"http://greensock.com/club/\">Club GreenSock</a> membership benefit. You must have a valid membership to use this class without violating the terms of use. Visit <a href=\"http://greensock.com/club/\" target=\"\">http://greensock.com/club/</a> to sign up or get more details.</p>"}},"17115da28b40d682":{"meta":{"keywords":["js.SplitText.SplitText()"],"title":"SplitText()","description":"Creates a SplitText object."},"header":{"content":"<p>Creates a SplitText object.</p>"},"parameters":[{"name":"target","data_type":"*","description":"<p>The source element (or array of elements or selector object or selector text) whose text should be split apart. For example, <code>yourElement</code> or <code>\"#yourElementID\"</code> or<code>$(\".yourClass\")</code> or <code>[element1, element2, element3]</code> are all valid.</p>\n"},{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — a configuration object defining any of the following values: <code>type, charsClass, wordsClass, linesClass</code>, or <code>position</code>.</p>\n","related_configuration_object":"53ab3440dc93284a"}],"returns":{},"details":{"content":"<p>Creates a SplitText object.</p>"}},"0ea9e67b512c6662":{"meta":{"keywords":["js.SplitText.chars"],"title":"chars","description":"An array containing all of the characters&#039; raw DOM elements that were split apart."},"header":{"content":"<p>An array containing all of the characters' raw DOM elements that were split apart.</p>"},"returns":{"type":"Array","content":""},"details":{"content":"<p>An array containing all of the characters' raw DOM elements that were split apart. For example, if the original text was <code>\"my split text\"</code>, the <code>chars</code> array would contain 11 elements.</p>"}},"dadae713b9b4342e":{"meta":{"keywords":["js.SplitText.lines"],"title":"lines","description":"An array containing all of the lines&#039; raw DOM element that were split apart."},"header":{"content":"<p>An array containing all of the lines' raw DOM element that were split apart.</p>"},"returns":{"type":"Array","content":""},"details":{"content":"<p>An array containing all of the lines' raw DOM element that were split apart. For example, if the original text was broken onto 4 lines vertically, the <code>lines</code> array would contain 4 elements.</p>"}},"490bfb425778129e":{"meta":{"keywords":["js.SplitText.selector"],"title":"selector","description":"[static] When you pass a string to a SplitText (as the first parameter), it will feed that to its selector engine internally to find the element(s), and jQuery is used by default if it happens to be loaded."},"header":{"content":"<p>[static] When you pass a string to a SplitText (as the first parameter), it will feed that to its selector engine internally to find the element(s), and jQuery is used by default if it happens to be loaded.</p>"},"returns":{"type":"*","content":""},"details":{"content":"<p>When you pass a string to a SplitText (as the first parameter), it will feed that to its selector engine internally to find the element(s), and jQuery is used by default if it happens to be loaded. If jQuery isn't loaded, SplitText falls back to simply using <code>document.getElementById()</code> and strips out any leading <code>\"#\"</code>, so IDs are always safe to use. You can define a custom selector engine like Sizzle or Zepto or your own like this:<br /></p><pre class='pre-container prettyprint'>//use Zepto<br />SplitText.selector = Zepto;<br />//use Sizzle:<br />SplitText.selector = Sizzle;<br />//or use your own:<br />SplitText.selector = function(text) {<br />   var list = document.querySelector(text),<br />       a = [];<br />    if (list) {<br />        for (var i = 0; i < list.length; i++) {<br />            a.push(list[i]);<br />        }<br />    }<br />    return a;<br />}</pre>"}},"1a7ff1a6dbe597e1":{"meta":{"keywords":["js.SplitText.words"],"title":"words","description":"An array containing all of the words&#039; raw DOM elements that were split apart."},"header":{"content":"<p>An array containing all of the words' raw DOM elements that were split apart.</p>"},"returns":{"type":"Array","content":""},"details":{"content":"<p>An array containing all of the words' raw DOM elements that were split apart. For example, if the original text was \"my split text\", the words array would contain 3 elements.</p>"}},"ccf8d9233484488a":{"meta":{"keywords":["js.SplitText.revert()"],"title":"revert()","description":"Reverts to the original content (the innerHTML before the split)."},"header":{"content":"<p>Reverts to the original content (the innerHTML before the split).</p>"},"parameters":[],"returns":{"type":"","content":""},"details":{"content":"<p>Reverts to the original content (the innerHTML before the split).</p>"}},"a4be9362b50f3a83":{"meta":{"keywords":["js.SplitText.split()"],"title":"split()","description":"[static] Splits the text in the target element(s) according to the provided config properties."},"header":{"content":"<p>[static] Splits the text in the target element(s) according to the provided config properties.</p>"},"parameters":[{"name":"vars","data_type":"Object","description":"<p>(default = <code>null</code>)<code></code> — a configuration object defining any of the following values: <code>type, charsClass, wordsClass, linesClass</code>, or <code>position</code>. (see the constructor description for details)</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Splits the text in the target element(s) according to the provided config properties. Normally you don't need to use this method because it is called in the constructor automatically, but if you want to <b>change</b> the way the text is split after the SplitText instance is created, you can use this method. It will automatically call <code>revert()</code> first if necessary.</p>"}},"aa9969ee39687902":{"meta":{"keywords":["js.Bounce","Easing"],"title":"Bounce","description":"Eases, bouncing either at the beginning (easeIn), the end (easeOut), or both (easeInOut)."},"header":{"content":"<p>Eases, bouncing either at the beginning (easeIn), the end (easeOut), or both (easeInOut). <code>Bounce</code> is a convenience class that congregates the 3 types of Bounce eases (BounceIn, BounceOut, and BounceInOut) as static properties so that they can be referenced using the standard synatax, like <code>Bounce.easeIn</code>, <code>Bounce.easeOut</code>, and <code>Bounce.easeInOut</code>.</p><div class=\"ease-visualizer\" data-ease=\"Bounce\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p>"}},"507a069e7c771a21":{"meta":{"keywords":["js.Bounce.easeIn"],"title":"easeIn","description":"[static] Bounces slightly at first, then to a greater degree over time, accelerating as the ease progresses."},"header":{"content":"<p>[static] Bounces slightly at first, then to a greater degree over time, accelerating as the ease progresses.</p>"},"returns":{"type":"BounceIn","content":""},"details":{"content":"<p>Bounces slightly at first, then to a greater degree over time, accelerating as the ease progresses.</p>"}},"012753da17253cb9":{"meta":{"keywords":["js.Bounce.easeInOut"],"title":"easeInOut","description":"[static] Bounces in increasing degree towards the center of the ease, then eases out, bouncing to the end (decreasing in degree at the end)."},"header":{"content":"<p>[static] Bounces in increasing degree towards the center of the ease, then eases out, bouncing to the end (decreasing in degree at the end).</p>"},"returns":{"type":"BounceInOut","content":""},"details":{"content":"<p>Bounces in increasing degree towards the center of the ease, then eases out, bouncing to the end (decreasing in degree at the end).</p>"}},"dec74fd87bb63197":{"meta":{"keywords":["js.Bounce.easeOut"],"title":"easeOut","description":"[static] Eases out, bouncing at the end."},"header":{"content":"<p>[static] Eases out, bouncing at the end.</p>"},"returns":{"type":"BounceOut","content":""},"details":{"content":"<p>Eases out, bouncing at the end.</p>"}},"b40bb6a3fc06daa2":{"meta":{"keywords":"Pixi, PixiJS, pixi.js, PixiPlugin, plugin, GSAP","description":"PixiPlugin makes it much easier to animate things in PixiJS, a canvas-based rendering library.","imagePath":""},"content":"sample content for FOLDER","header":{"content":"<p>PixiPlugin makes it much easier to animate things in <a href=\"http://www.pixijs.com/\">PixiJS</a>,&nbsp;a popular canvas library that&#39;s <strong>extremely</strong> performant. Without the plugin, it&#39;s a tad cumbersome with certain properties because they&#39;re tucked inside sub-objects in PixiJS&#39;s API, like <code>object.position.x</code>, <code>object.scale.y</code>, <code>object.skew.x</code>, etc. Plus PixiJS defines rotational values in radians instead of degrees which isn&#39;t as intuitive for most developers/designers. PixiPlugin saves you a bunch of headaches:</p><pre class=\"pre-container prettyprint\">//old way (without plugin): \nTweenMax.to(pixiObject.scale, 1, {x:2, y:1.5});\nTweenMax.to(pixiObject.skew, 1, {x:30 * Math.PI / 180});\nTweenMax.to(pixiObject, 1, {rotation:60 * Math.PI / 180});\n\n//new way (with plugin):\nTweenMax.to(pixiObject, 1, {pixi:{scaleX:2, scaleY:1.5, skewX:30, rotation:60}});</pre>\n\n<p>Notice <strong>rotational values are defined in degrees, not radians</strong>.</p>\n\n<h2>Colors</h2>\n\n<p><a href=\"http://pixijs.com\">PixiJS</a> requires that you define color-related values in a format like <code>0xFF0000</code> but with PixiPlugin, you can define them the same way you would in CSS, like <code>&quot;red&quot;</code> | <code>&quot;#F00&quot;</code> | <code>&quot;#FF0000&quot;</code> | <code>&quot;rgb(255,0,0)&quot;</code> | <code>&quot;hsl(0, 100%, 50%)&quot;</code> | <code>0xFF0000</code>. <strong>You can even do relative HSL values!</strong>\n\t<code>&quot;hsl(+=180, +=0%, +=0%)&quot;</code>.</p><pre class=\"pre-container prettyprint\">//named colors\nTweenMax.to(graphics, 2, {pixi:{lineColor:&quot;purple&quot;}});\n//relative hsl() color that reduces brightness but leaves the hue and saturation the same:\nTweenMax.to(graphics, 2, {pixi:{fillColor:&quot;hsl(+=0, +=0%, -=30%)&quot;}});</pre>\n\n<h2>ColorMatrixFilter</h2>\n\n<p>Another big convenience is that PixiPlugin recognizes some special values like <code>saturation</code>, <code>brightness</code>, <code>contrast</code>, <code>hue</code>, and <code>colorize</code> (which all leverage a ColorMatrixFilter under the hood).</p>\n<div><pre class=\"pre-container prettyprint\">var image = new PIXI.Sprite.fromImage(&quot;http://pixijs.github.io/examples/required/assets/panda.png&quot;);\napp.stage.addChild(image);\n\nvar tl = new TimelineMax();\n//colorize fully red. Change colorAmount to 0.5 to make it only halfway colorized, for example:\ntl.to(image, 2, { pixi: { colorize:&quot;red&quot;, colorizeAmount:1 } })\n//change the hue 180 degrees (opposite)\n  .to(image, 2, { pixi: { hue:180 } })\n//completely desaturate\n  .to(image, 2, { pixi: { saturation:0 } })\n//blow out the brightness to double the normal amount\n  .to(image, 2, { pixi: { brightness: 2 } })\n//increase the contrast \n  .to(image, 2, { pixi: { contrast: 1.5 } })\n</pre></div>\n<div class=\"cp_embed_wrapper\">\n\t<iframe id=\"cp_embed_e1f256723ce102d6b9a776fa7f6da9f4\" src=\"http://codepen.io/GreenSock/embed/e1f256723ce102d6b9a776fa7f6da9f4?default-tab=result&embed-version=2&height=750&pen-title=PixiFilter%20(shortcodes%20and%20combineCMF)&slug-hash=e1f256723ce102d6b9a776fa7f6da9f4&theme-id=3984&user=GreenSock\" scrolling=\"no\" frameborder=\"0\" height=\"800\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"PixiFilter (shortcodes and combineCMF)\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"></iframe>\n</div>\n<script async=\"\" src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n<p>Or if you have a custom ColorMatrixFilter, just pass that in as the <code>colorMatrixFilter</code> property and it&#39;ll handle animating between states:</p><pre class=\"pre-container prettyprint\">var filter = new PIXI.filters.ColorMatrixFilter();\nfilter.sepia(); \nTweenMax.to(image, 2, { pixi: { colorMatrixFilter: filter } });</pre>\n\n<h2>BlurFilter</h2>\n\n<p>PixiPlugin recognizes <code>blur</code>, <code>blurX</code>, and <code>blurY</code> properties, so it&#39;s very simple to apply a blur without having to create a new BlurFilter instance, add it to the filters array, and animate its properties separately.</p>\n<div><pre class=\"pre-container prettyprint\">//blur on both the x and y axis to a blur amount of 15\nTweenMax.to(image, 2, { pixi: { blurX: 15, blurY: 15 } });</pre></div>\n\n<h2>Other properties</h2>\n\n<p>PixiPlugin can handle almost any other property as well - there is no pre-determined list of &quot;allowed&quot; properties. PixiPlugin simply improves developer ergonomics for anyone animating in PixiJS. Less code, fewer headaches, and faster production.</p>\n\n<p>\n\t<br>\n</p>\n"},"misc":{"version":"1.20.0"}},"43cdb51b9b63b1b9":{"meta":{"keywords":"","description":"","imagePath":""},"content":"sample content for ELEMENT","header":{"content":""},"parameters":[{"name":"color","data_type":"string | number","description":"The color value the should be parsed which could be a string like #9F0 or rgb(255,102,51) or rgba(255,0,0,0.5) or it could be a number like 0xFF00CC or even a named color like red, blue, purple, etc.","related_configuration_object":""},{"name":"format","data_type":"string","description":"By default, an rgb-based value will be returned, but if the format parameter is set to \"hsl\", an hsl() or hsla() value will be returned instead. Or if format is \"number\", then a numeric value will be returned, like 0xFF0000.","related_configuration_object":""}],"returns":{"type":"array | number","content":"By default, an array containing red, green, and blue (and optionally alpha) in that order, or if the format parameter was \"hsl\", the array will contain hue, saturation and lightness (and optionally alpha) in that order. Or if format is defined as \"number\", it'll return a number like 0xFF0000. "},"details":{"content":"Parses a color (like #9F0, #FF9900, rgb(255,51,153) or hsl(108, 50%, 10%))&nbsp;into an array with 3 elements (red, green, and blue, or if format parameter is &quot;hsl&quot;, it will populate the array with hue, saturation, and lightness). Or if format parameter is &quot;number&quot;, it&#39;ll return a numeric value like 0xFF0000 instead of an array. If a relative value is found in an hsl() or hsla() string, it will preserve those relative prefixes and all the values in the array will be strings instead of numbers (in all other cases the array will be populated with numbers). This is a useful method for converting color-related values into data that&#39;s more useful. PixiJS, for example, requires numeric values for most of its color-related values so it would be cumbersome to use &quot;purple&quot; or &quot;#F00&quot;, for example, without this method.&nbsp;"},"misc":{"version":"1.20.0"}},"6590258193b0bcbc":{"name":"align","returns":{"type":"String","content":"a value of <code>align:\"relative\"</code> effectively moves the path to the SVG element, giving each point a \"+=\" prefix (e.g. <code>{x:\"+=100\", y:\"+=200\"}</code>). To have the opposite effect and adjust the values so that a particular element gets repositioned onto the path, simply pass in an SVG DOM element or string selector (e.g. <code>align:\"#mySVGElement\"</code>).","contentShort":""}},"1e30866acfaa806d":{"name":"offsetX","returns":{"type":"Number","content":"number to offset all of the points along the x axis. So if normally one of the points is <code>{x:0, y:100}</code> and you set <code>offsetX:20</code>, it would become <code>{x:20, y:100}</code> (and all of the other points would also be affected similarly, adding 20 to the x value)","contentShort":""}},"146a504063bb6ab7":{"name":"offsetY","returns":{"type":"Number","content":"number to offset all of the points along the y axis. So if normally one of the points is <code>{x:0, y:100}</code> and you set <code>offsetY:30</code>, it would become <code>{x:0, y:130}</code> (and all of the other points would also be affected similarly, adding 30 to the y value)","contentShort":""}},"0e3c0b29fc38903c":{"name":"matrix","returns":{"type":"Array","content":"a 2D matrix array (e.g. <code>matrix:[1.5,0,0,1.5,120,-30]</code>) that should be applied to all coordinates in the path. This can be helpful if you want to scale, rotate, skew and/or translate the path advanced ways.","contentShort":""}},"bac828fc726d4d82":{"meta":{"keywords":["js.RoundPropsPlugin","Plugins"],"title":"RoundPropsPlugin","description":"Rounds the tweened values to the nearest integer."},"header":{"content":"<p><span class=\"inTweenMax\">Included in TweenMax: <span class=\"yes\">YES</span></span></p><p>RoundProps ensures that the property values always get rounded to the nearest integer during the tween. Just pass in a comma-delimited list of property names that should be rounded. For example, if you're tweening the x, y, and opacity properties of \"#someID\" element and you want to round the x and y values (not opacity) every time the tween is rendered, you'd do:</p><pre class='pre-container prettyprint'>TweenMax.to(mc, 2, {x:300, y:200, opacity:0.5, roundProps:\"x,y\"});</pre><p>Note: as of <a href=\"/1-19-0/\">GSAP 1.19.0</a>, RoundPropsPlugin leverages the same plumbing internally as <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:ModifiersPlugin\"><span data-link-id=\"82b95bb606c34e2f\"></span></span> (roundProps is just a modifier that applies <code>Math.round()</code>), thus you cannot do <strong>BOTH</strong> a modifier <strong>and</strong> roundProps on the same property in the same tween. It's easy to get that functionality, though, by just doing <code>Math.round()</code> inside your modifier function.</p>"}},"be137a434f5b4e08":{"meta":{"keywords":["js.CSSPlugin","Plugins"],"title":"CSSPlugin","description":"CSSPlugin enables animation of a DOM element&#039;s CSS properties like &quot;top&quot;, &quot;left&quot;, &quot;backgroundColor&quot;, as well as 2D and 3D transforms and many others."},"header":{"content":"<p><span class=\"inTweenMax\">Included in TweenMax: <span class=\"yes\">YES</span></span>\n</p>\n\n<p>With the help of the CSSPlugin,&nbsp;<strong>GSAP can animate almost any css-related property</strong>&nbsp;of DOM elements including the obvious things like width, height, margin, padding, top, left, and more plus more interesting things like transforms (rotation, scaleX, scaleY, skewX, skewY, x, y, rotationX, and rotationY), colors, opacity, and lots more.</p>\n\n<p><em><strong>Note:</strong>&nbsp;a common mistake is to forget to use camel case representations of the properties, so instead of &quot;font-size&quot;, you&#39;d use &quot;fontSize&quot;. &quot;background-color&quot; should be &quot;backgroundColor&quot;.</em></p>\n\n<p>You can even define properties that are not generally tweenable and GSAP will apply the property for you (like <code>position:&quot;absolute&quot;</code> or <code>borderStyle:&quot;solid&quot;</code>). These non-tweenable properties will be set at the beginning of the tween (except&nbsp;<code>display:&quot;none&quot;</code>&nbsp;which will be applied at the end of the tween for obvious reasons).</p>\n\n<p>It is typically a good idea to define a unit of measurement (like &quot;24px&quot; instead of &quot;24&quot; or &quot;50%&quot; rather than &quot;50&quot;) but the default in most cases is pixels (px), so you can omit the unit if you prefer. And even if the unit of measurement doesn&#39;t match the current one, GSAP will attempt to convert them for you. So, for example, you could tween a width from &quot;50%&quot; to &quot;200px&quot;.</p>\n\n<p>CSSPlugin can animate complex values like&nbsp;<code>boxShadow:&quot;0px 0px 20px 20px red&quot;</code>&nbsp;and&nbsp;<code>borderRadius:&quot;50% 50%&quot;</code>&nbsp;and&nbsp;<code>border:&quot;5px solid rgb(0,255,0)&quot;</code>. When necessary, it attempts to figure out if the property needs a&nbsp;<strong>vendor prefix</strong>&nbsp;and applies it accordingly. There may be a very small subset of complex or bleeding-edge css properties that CSSPlugin can&#39;t handle yet, but that&#39;s rare - it handles virtually all css properties you throw at it.</p>\n\n<p>In addition to almost all of the standard css properties, CSSPlugin recognizes some special ones that can be quite convenient:</p>\n\n<h2 id=\"2DTransforms\">2D Transforms</h2>\n\n<p><strong>rotation</strong>,&nbsp;<strong>scaleX</strong>,&nbsp;<strong>scaleY</strong>,&nbsp;<strong>scale</strong>,&nbsp;<strong>skewX</strong>,&nbsp;<strong>skewY</strong>,&nbsp;<strong>x</strong>,&nbsp;<strong>y</strong>, <strong>xPercent</strong> and <strong>yPercent</strong>&nbsp;- one of the most convenient things about the CSSPlugin is that it greatly simplifies transforms in the various browsers&nbsp;<strong>including IE back through version 6!</strong>&nbsp;No need to mess with various browser prefixes or funky matrix filters in IE. <strong>GSAP exclusive:</strong> they even work on SVG elements! You can animate 2D transform properties intuitively:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">//much simpler\nTweenLite.to(element, 2, {rotation:30, scaleX:0.8});</pre>\n\n<p>\n\t<br>By default, <code>rotation</code>, <code>skewX</code>, and <code>skewY</code> use degrees but you can use radians if you prefer. Simply append one of the standard suffixes (&quot;rad&quot; or &quot;deg&quot;) like this:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">//use &quot;deg&quot; or &quot;rad&quot;\nTweenLite.to(element, 2, {rotation:&quot;1.25rad&quot;, skewX:&quot;30deg&quot;});</pre>\n\n<p>\n\t<br>To be clear, this is like setting the element&#39;s css to:&nbsp;<code>transform:rotate(1.25rad) skewX(30deg)</code>&nbsp;along with all the other browser prefix values and the necessary IE filter which would be much more verbose.</p>\n\n<h3>Notes about transforms</h3>\n\n<ol>\n\t<li>To do percentage-based translation use <code>xPercent</code> and <code>yPercent</code> (added in version 1.13.0) instead of <code>x</code> or <code>y</code> which are typically px-based. Why does GSAP have special properties just for percentage-based translation? Because it allows you to <strong><em>COMBINE</em></strong> them to accomplish useful tasks, like perhaps you want to build your own &quot;world&quot; where everything has its origin in the very center of the world and then you move things in a px-based fashion from there - you could set <code>xPercent</code> and <code>yPercent</code> to <code>-50</code> and <code>position:&quot;absolute&quot;</code> so that everything starts with their centers in the same spot, and then use <code>x</code> and <code>y</code> to move them from there. If you set <code>x</code> or <code>y</code> to a percent-based value like <code>50%&quot;</code>, GSAP will recognize that and funnel that value to <code>xPercent</code> or <code>yPercent</code> appropriately as a convenience. Our <a href=\"http://greensock.com/gsap-1-13-1\">1.13.1 Release Notes</a> have some great demos showing how xPercent and yPercent can help with responsive layouts.</li>\n\t<li>You can use <code>scale</code> as a shortcut to control both the <code>scaleX</code> and <code>scaleY</code> properties identically.</li>\n\t<li>You can define relative values, like&nbsp;<code>rotation:&quot;+=30&quot;</code></li>\n\t<li>The order in which you declare the transform properties makes no difference.</li>\n\t<li>GSAP has nothing to do with the rendering quality of the element in the browser. Some browsers seem to render transformed elements beautifully while others don&#39;t handle anti-aliasing as well.</li>\n\t<li>IE6, IE7, and IE8 transforms don&#39;t apply to child elements (that&#39;s a browser limitation).</li>\n\t<li>By default, CSSPlugin uses a <code>skewType</code> of <code>&quot;compensated&quot;</code> which affects the <code>skewX</code>/<code>skewY</code> values in a slightly different (arguably more intuitive) way because visually the object isn&#39;t stretched. For example, if you set&nbsp;<code>transform:skewX(85deg)</code>&nbsp;in the browser via CSS, the object would become EXTREMELY long (stretched) whereas with <code>skewType:&quot;compensated&quot;</code>, it would look more like it sheared in 3D space. This was a purposeful design decision because this behavior is more likely what animators desire. If you prefer the uncompensated behavior, you can set <code>CSSPlugin.defaultSkewType = &quot;simple&quot;</code> which affects the default for all skew tweens, or for an individual tween you can set the special property <code>skewType:&quot;simple&quot;</code>.</li>\n\t<li>Percentage-based x/y translations also work on SVG elements. Caveat: it&#39;s calculated and then baked into the matrix(), so it&#39;s not &quot;live&quot; meaning if you later change the width/height of the SVG element, it doesn&#39;t alter the translation but you could certainly just re-apply the translation if you need to.</li>\n\t<li>For more info on how CSSPlugin handles transforms on SVG elements be sure to read our <a href=\"//greensock.com/svg-tips\">SVG Tips</a> article.</li>\n</ol>\n\n<h2 id=\"3DTransforms\">3D Transforms</h2>\n\n<p>In addition to all of the regular 2D properties (<code>x</code>, <code>y</code>, <code>scaleX</code>, <code>scaleY</code>, <code>scale</code>, <code>rotation</code>, <code>skewX</code>, <code>skewY</code>, <code>xPercent</code>, and <code>yPercent</code>) that work in all browsers, you can animate 3D properties too like&nbsp;<code>rotationX</code>,&nbsp;<code>rotationY</code>,&nbsp;<code>rotationZ</code>&nbsp;(identical to regular <code>rotation</code>),&nbsp;<code>z</code>,&nbsp;<code>perspective</code>, and&nbsp;<code>transformPerspective</code>&nbsp;in all modern browsers (see <a href=\"http://caniuse.com/transforms3d\" target=\"external\">http://caniuse.com/transforms3d</a>&nbsp;for details about browser support for 3D transforms). To see 3D transforms demonstrated visually in GSAP, see&nbsp;<a href=\"//greensock.com/css3/\" target=\"external\">http://greensock.com/css3/</a>. Again, there is no need to use browser prefixes; CSSPlugin handles all of that for you under the hood. You can animate 3D transform properties and 2D properties together intuitively:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">TweenLite.to(element, 2, {rotationX:45, scaleX:0.8, z:-300});</pre>\n\n<p>\n\t<br>To get your elements to have a true 3D visual perspective applied, you must either set the&nbsp;<code>perspective</code>&nbsp;property of the parent element or set the special <code>transformPerspective</code> of the element itself (common values range from around 200 to 1000, the lower the number the stronger the perspective distortion). The <code>transformPerspective</code> is like adding a <code>perspective()</code>&nbsp;directly inside the css &quot;transform&quot; style, like:&nbsp;<code>transform: perspective(500px) rotateX(45deg)</code>&nbsp;which only applies to that specific element whereas if you want to a group of elements share a common perspective (the same vanishing point), you should set the regular <code>perspective</code> property on the parent/container of those elements. For more information about perspective, see&nbsp;<a href=\"http://desandro.github.com/3dtransforms/docs/perspective.html\" target=\"external\">this article</a>.\n\t<br>\n</p><pre class=\"pre-container prettyprint\">//apply a perspective to the PARENT element (the container) to make the perspective apply to all child elements (typically best)\nTweenLite.set(container, {perspective:500});\n \n//or set a default perspective that will be applied to every individual element that you tween in 3D:\nCSSPlugin.defaultTransformPerspective = 500;\n \n//or apply perspective to a single element using &quot;transformPerspective&quot;\nTweenLite.set(element, {transformPerspective:500});</pre>\n\n<p>\n\t<br>In regular CSS, the order that you list the transforms matters but GSAP always applies them in the same order for consistency: translation (<code>x</code>, <code>y</code>, <code>z</code>), then <code>scale</code>, then <code>rotationX</code>, then <code>rotationY</code>, then <code>skew</code>, then <code>rotation</code> (same as <code>rotationZ</code>) although in terms of constructing the matrix, the math is technically done in the reverse of that order. If you want to rotate the element around a point in 3D space other than its center, use the&nbsp;<code>transformOrigin</code>&nbsp;property (see below).\n\t<br>\n</p><pre class=\"pre-container prettyprint\">//sample css:\n.myClass {\n    transform: translate3d(10px, 0px, -200px) rotateY(45deg) scale(1.5, 1.5);\n}\n \n//corresponding GSAP transform (tweened over 2 seconds):\nTweenLite.to(element, 2, {scale:1.5, rotationY:45, x:10, y:0, z:-200});\n \n//sample css that uses a perspective():\n.myClass {\n    transform: perspective(500px) translateY(50px) rotate(120deg)\n}\n \n//corresponding GSAP transform (set, not tweened):\nTweenLite.set(element, {transformPerspective:500, rotation:120, y:50});</pre>\n\n<h3>Notes about 3D transforms</h3>\n\n<ol>\n\t<li>In browsers that don&#39;t support 3D transforms, they&#39;ll be ignored. For example, <code>rotationX</code> may not work, but rotation would. See&nbsp;<a href=\"http://caniuse.com/transforms3d\" target=\"external\">http://caniuse.com/transforms3d</a>&nbsp;for a chart of which browser versions support 3D transforms.</li>\n\t<li>All transforms are cached in a <code>_gsTransform</code> object attached to the element, so you can tween individual properties without worrying that they&#39;ll be lost. You don&#39;t need to define all of the transform properties on every tween - only the ones you want to animate. You can read the transform-related values anytime, like <code>element._gsTransform.scaleX</code>. If you&#39;d like to clear those values (including the transform applied to the inline style of the element), you can do&nbsp;<code>TweenLite.set(element, {clearProps:&quot;transform&quot;});</code>. If you&#39;d like to force GSAP to re-parse the transform data from the css (rather than use the data it had recorded from previous tweens), you can pass&nbsp;<code>parseTransform:true</code>&nbsp;into the config object.</li>\n\t<li>GSAP has nothing to do with the rendering quality of the element in the browser. Some browsers seem to render transformed elements beautifully while others don&#39;t handle anti-aliasing as well.</li>\n\t<li>To learn more about css 3D transforms, see&nbsp;<a href=\"http://coding.smashingmagazine.com/2012/01/06/adventures-in-the-third-dimension-css-3-d-transforms/\" target=\"external\">this article</a></li>\n\t<li>IE10 supports 3D transforms, but it does&nbsp;<strong>not</strong>&nbsp;support transformStyle of &quot;preserve-3d&quot; (see&nbsp;<a href=\"http://msdn.microsoft.com/en-us/library/ie/hh673529(v=vs.85).aspx#the_ms_transform_style_property\" target=\"external\">Microsoft&#39;s site</a>&nbsp;for details).</li>\n</ol>\n\n<h2 id=\"force3D\">force3D</h2>\n\n<p>As of 1.15.0, <code>force3D</code> defaults to <code>&quot;auto&quot;</code> mode which means transforms are automatically optimized for speed by using matrix3d() instead of matrix(), or translate3d() instead of translate(). This typically results in the browser putting that element onto its own compositor layer, making animation updates more efficient. In <code>&quot;auto&quot;</code> mode, GSAP will automatically switch back to 2D when the tween is done (if 3D isn&#39;t necessary) to free up more GPU memory. If you&#39;d prefer to keep it in 3D mode, you can set <code>force3D:true</code>. Or, to stay in 2D mode whenever possible, set <code>force3D:false</code>. See&nbsp;<a href=\"//css-tricks.com/myth-busting-css-animations-vs-javascript/\">http://css-tricks.com/myth-busting-css-animations-vs-javascript/</a>&nbsp;for more details about performance.</p>\n<a name=\"transformOrigin\"></a>\n\n<h2 id=\"transformOrigin\">transformOrigin</h2>\n\n<p>Sets the origin around which all transforms (2D and/or 3D) occur. By default, it is in the center of the element (<code>&quot;50% 50%&quot;</code>). You can define the values using the keywords <code>&quot;top&quot;</code>, <code>&quot;left&quot;</code>, <code>&quot;right&quot;</code>, or <code>&quot;bottom&quot;</code> or you can use percentages (bottom right corner would be <code>&quot;100% 100%&quot;</code>) or pixels. If, for example, you want an object to spin around its top left corner you can do this:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">//spins around the element&#39;s top left corner\nTweenLite.to(element, 2, {rotation:360, transformOrigin:&quot;left top&quot;});</pre>\n\n<p>\n\t<br>The first value in the quotes corresponds to the x-axis and the second corresponds to the y-axis, so to make the object transform around exactly 50px in from its left edge and 20px from its top edge, you could do:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">//spins/scales around a point offset from the top left by 50px, 20px\nTweenLite.to(element, 2, {rotation:270, scale:0.5, transformOrigin:&quot;50px 20px&quot;});</pre>\n\n<p>\n\t<br><strong>GSAP exclusive</strong>: this even works with SVG elements!</p>\n\n<p>You can define a transformOrigin as a&nbsp;<strong>3D value</strong>&nbsp;by adding a 3rd number, like to rotate around the y-axis from a point that is offset 400px in the distance, you could do:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">//rotates around a point that is 400px back in 3D space, creating an interesting effect:\nTweenLite.to(element, 2, {rotationY:360, transformOrigin:&quot;50% 50% -400px&quot;});</pre>\n\n<h3>Notes about transformOrigin:</h3>\n\n<ol>\n\t<li>CSSPlugin automatically works around a bug in Safari that causes 3D transformOrigin values to incorrectly act as though they affect translateZ(). To work around the bug, when you perform a 3D tween that has a transformOrigin with a non-zero z component (like&nbsp;<code>transformOrigin:&quot;50% 50% -100px&quot;</code>), CSSPlugin will record the z-component (-100px in this example) internally and remove it from the transformOrigin that gets applied to the css. Everything will render correctly because the z-axis origin offset is calculated internally and applied to the matrix3d(). Just keep in mind that if you check the css value of the <code>transformOrigin</code> after the tween has started, it won&#39;t have the z component but that&#39;s by design.</li>\n\t<li><code>transformOrigin</code> even works in Internet Explorer back to version 6 in 2D, although it is recommended that you set the element&#39;s <code>position</code> to <code>&quot;absolute&quot;</code> to avoid clipping.</li>\n\t<li>GSAP does make transformOrigin work on SVG elements consistently across browsers (<strong>GSAP exclusive</strong>) but keep in mind that SVG elements don&#39;t officially support 3D transforms according to the spec.</li>\n</ol>\n\n<h2 id=\"svgOrigin\">svgOrigin</h2>\n\n<p>[Only for SVG elements] Works exactly like <code>transformOrigin</code> but it uses the SVG&#39;s global coordinate space instead of the element&#39;s local coordinate space. This can be very useful if, for example, you want to make a bunch of SVG elements rotate around a common point. You can <em>either</em> define an <code>svgOrigin</code>\n\t<em>or</em> a <code>transformOrigin</code>, not both (for obvious reasons). So you can do <code>TweenLite.to(svgElement, 1, {rotation:270, svgOrigin:&quot;250 100&quot;})</code> if you&#39;d like to rotate svgElement as though its origin is at x:250, y:100 in the SVG canvas&#39;s global coordinates. Units are not required. It also records the value in a <code>data-svg-origin</code> attribute so that it can be parsed back in. <code>svgOrigin</code> doesn&#39;t accommodate percentage-based values. <a href=\"http://codepen.io/GreenSock/pen/06716224865c2c536cee5b4222d771ee\">See an example here</a>.</p>\n\n<h2 id=\"smoothOrigin\">smoothOrigin (for SVG only)</h2>\n\n<p>When changing the transformOrigin (or svgOrigin) of an SVG element, CSSPlugin will now automatically record/apply some offsets to ensure that the element doesn&#39;t &quot;jump&quot;. You can disable this by setting CSSPlugin.defaultSmoothOrigin = false, or you can control it on a per-tween basis using smoothOrigin:true | false. Explanation: The way transforms and transform-origins work in the browser (and according to the official spec), changing the origin causes the element jump in a jarring way. For example, if you rotate 180 degrees when the transform-origin is in the element&#39;s top left corner, it ends up at a very different position than if you applied the same rotation around its bottom right corner. Since GSAP is focused on solving real-world problems for animators (most of whom prefer to smoothly alter the transformOrigin), the new smoothOrigin feature in GSAP solves this issue. This also means that if you create SVG artwork in an authoring program like Adobe Flash where it may not be easy/obvious to control where the element&#39;s origin is, things will &quot;just work&quot; when you define a transformOrigin via GSAP. Currently, this feature only applies to SVG elements, as that is where it is more commonly a pain-point, and we&#39;re eager to see how GSAP users employ the feature and share their feedback/suggestions before we consider adding it to &quot;regular&quot; DOM elements.</p>\n\n<p>Video explaining smoothOrigin</p>\n\n<p><span class=\"fr-video fr-draggable\" contenteditable=\"false\"><iframe src=\"http://www.youtube.com/embed/GsniGDilKtI?rel=0&feature=player_detailpage\" width=\"830\" height=\"460\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></span></p>\n\n<h2 id=\"directionalRotation\">directionalRotation</h2>\n\n<p>Tweens rotation in a particular direction which can be either&nbsp;<strong>clockwise</strong>&nbsp;(<code>&quot;_cw&quot;</code>&nbsp;suffix),&nbsp;<strong>counter-clockwise</strong>&nbsp;(<code>&quot;_ccw&quot;</code>&nbsp;suffix), or in the shortest direction (<code>&quot;_short&quot;</code>&nbsp;suffix) in which case the plugin chooses the direction for you based on the shortest path. For example, if the element&#39;s rotation is currently 170 degrees and you want to tween it to -170 degrees, a normal rotation tween would travel a total of 340 degrees in the counter-clockwise direction, but if you use the <code>_short</code> suffix, it would travel 20 degrees in the clockwise direction instead. Example:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">TweenLite.to(element, 2, {rotation:&quot;-170_short&quot;});\n \n//or even use it on 3D rotations and use relative prefixes:\nTweenLite.to(element, 2, {rotation:&quot;-170_short&quot;, rotationX:&quot;-=30_cw&quot;, rotationY:&quot;1.5rad_ccw&quot;});</pre>\n\n<p>\n\t<br>Notice that the value is in quotes, thus a string with a particular suffix indicating the direction (<code>_cw</code>, <code>_ccw</code>, or <code>_short</code>). You can also use the&nbsp;<code>&quot;+=&quot;</code>&nbsp;or&nbsp;<code>&quot;-=&quot;</code>&nbsp;prefix to indicate relative values. Directional rotation suffixes are supported in all rotational properties (<code>rotation</code>, <code>rotationX</code>, and <code>rotationY</code>); you don&#39;t need to use <code>directionalRotation</code> as the property name. There is a <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:DirectionalRotationPlugin\"><span data-link-id=\"0a6e62faf0a53059\"></span></span> that you can use to animate objects that aren&#39;t DOM elements, but there&#39;s no need to load that plugin if you&#39;re just animating css-related properties with CSSPlugin because it has <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:DirectionalRotationPlugin\"><span data-link-id=\"0a6e62faf0a53059\"></span></span>&#39;s capabilities baked-in.</p>\n\n<p>Check out an&nbsp;<a href=\"http://codepen.io/GreenSock/pen/jiEyG\" target=\"\">interactive example here</a>.</p>\n\n<p><em>Prior to version 1.9.0, <code>directionalRotation</code> was called <code>shortRotation</code> and it only handled going in the shortest direction. The new <code>directionalRotation</code> functionality is much more flexible and easy to use (just slap a suffix on the regular property).</em></p>\n\n<h2 id=\"autoAlpha\">autoAlpha</h2>\n\n<p>Identical to <code>opacity</code> except that when the value hits <code>0</code> the <code>visibility</code> property will be set to <code>&quot;hidden&quot;</code> in order to improve browser rendering performance and prevent clicks/interactivity on the target. When the value is anything other than 0, <code>visibility</code> will be set to <code>&quot;inherit&quot;</code>. It is not set to <code>&quot;visible&quot;</code> in order to honor inheritance (imagine the parent element is hidden - setting the child to visible explicitly would cause it to appear when that&#39;s probably not what was intended). And for convenience, if the element&#39;s <code>visibility</code> is initially set to <code>&quot;hidden&quot;</code> and <code>opacity</code> is <code>1</code>, it will assume opacity should also start at <code>0</code>. This makes it simple to start things out on your page as invisible (set your css <code>visibility:hidden</code>) and then fade them in whenever you want.\n\t<br>\n</p><pre class=\"pre-container prettyprint\">//fade out and set visibility:hidden\nTweenLite.to(element, 2, {autoAlpha:0});\n \n//in 2 seconds, fade back in with visibility:visible\nTweenLite.to(element, 2, {autoAlpha:1, delay:2});</pre>\n\n<h2 id=\"className\">className</h2>\n\n<p>Allows you to morph between classes on an element. For example, let&#39;s say <code>myElement</code> has a class of <code>&quot;class1&quot;</code> currently and you want to change to <code>&quot;class2&quot;</code> and animate the differences, you could do this:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">TweenLite.to(myElement, 1, {className:&quot;class2&quot;});</pre>\n\n<p>\n\t<br>And if you want to ADD the class to the existing one, you can simply use the <code>&quot;+=&quot;</code> prefix. To remove a class, use the <code>&quot;-=&quot;</code> prefix like this:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">TweenLite.to(myElement, 1, {className:&quot;+=class2&quot;});</pre>\n\n<p>\n\t<br><em>Note: there are some css-related properties that don&#39;t tween like IE filters, but almost every css property is recognized and animates great. Also, there is a slight speed penalty when a <code>className</code> tween initializes because the engine needs to loop through all of the css properties to see which ones are different.</em></p>\n\n<h2 id=\"bezier\">bezier</h2>\n\n<p>Animate virtually any property (or properties) along a Bezier (curved) path which you define as an array of points/values that can be interpreted in several different ways, like as points through which a Bezier should be drawn, or cubic or quadratic Bezier control and anchor points, etc. See the&nbsp;<span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:BezierPlugin\"><span data-link-id=\"43077a47946db3db\"></span></span>&#39;s documentation&nbsp;for details and an explanation of all the features available. Don&#39;t forget to load the <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:BezierPlugin\"><span data-link-id=\"43077a47946db3db\"></span></span> JavaScript file in order to utilize its features from within CSSPlugin. Here is an example of a bezier tween that makes an element curve through 3 points using <code>x</code> and <code>y</code> transform properties and also automatically rotates it along the path as it goes:\n\t<br>\n</p><pre class=\"pre-container prettyprint\">TweenLite.to(element, 5, {bezier:{curviness:1.25, values:[{x:100, y:200}, {x:250, y:400}, {x:500, y:50}], autoRotate:true}, ease:Power1.easeOut});</pre>\n\n<h2 id=\"CSSvariables\">CSS variables</h2>\n\n<p>As of version 1.20.0, GSAP can animate CSS variables in browsers that support them.</p>\n\n<p><span class=\"fr-video fr-draggable\" contenteditable=\"false\"><iframe src=\"http://www.youtube.com/embed/chL0Pb7Yesw?rel=0&feature=player_detailpage\" width=\"838\" height=\"471\" frameborder=\"0\" allowfullscreen=\"allowfullscreen\"></iframe></span></p>\n<div class=\"cp_embed_wrapper\">\n\t<iframe id=\"cp_embed_e1a338a481c001eb5f8654c8d155170f\" src=\"http://codepen.io/GreenSock/embed/e1a338a481c001eb5f8654c8d155170f?default-tab=js%2Cresult&embed-version=2&height=300&pen-title=CSS%20Variables%20Demo&slug-hash=e1a338a481c001eb5f8654c8d155170f&theme-id=3984&user=GreenSock\" scrolling=\"no\" frameborder=\"0\" height=\"300\" allowtransparency=\"true\" allowfullscreen=\"true\" name=\"CodePen Embed\" title=\"CSS Variables Demo\" class=\"cp_embed_iframe \" style=\"width: 100%; overflow: hidden;\"></iframe>\n</div>\n<script async=\"\" src=\"https://production-assets.codepen.io/assets/embed/ei.js\"></script>\n\n<h2 id=\"clearProps\">clearProps</h2>\n\n<p>A comma-delimited list of property names that you want to clear from the element&#39;s &quot;style&quot; property when the tween completes (or use <code>&quot;all&quot;</code> to clear all properties). This can be useful if, for example, you have a class (or some other selector) that should apply certain styles to an element when the tween is over that would otherwise get overridden by the element.style-specific data that was applied during the tween. Typically you do&nbsp;<strong>not</strong>&nbsp;need to include vendor prefixes.\n\t<br>\n</p><pre class=\"pre-container prettyprint\">//tweens 3 properties and then clears only &quot;left&quot; and &quot;transform&quot; (because &quot;scale&quot; affects the &quot;transform&quot; css property. CSSPlugin automatically applies the vendor prefix if necessary too)\n TweenLite.from(element, 5, {scale:0, left:200, backgroundColor:&quot;red&quot;, clearProps:&quot;scale,left&quot;});</pre>\n\n<h2 id=\"autoRound\">autoRound</h2>\n\n<p>By default, CSSPlugin will round pixel values and zIndex to the closest integer during the tween (the inbetween values) because it improves browser performance, but if you&#39;d rather disable that behavior, pass&nbsp;<code>autoRound:false</code>&nbsp;in the css object. You can still use the <span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:RoundPropsPlugin\"><span data-link-id=\"bac828fc726d4d82\"></span></span> to manually define properties that you want rounded.</p>\n\n<p>If you need to animate numeric attributes (rather than css-related properties), you can use the&nbsp;<span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:AttrPlugin\"><span data-link-id=\"27db5e20e8bbb9ae\"></span></span>. And to replace the text in a DOM element, use the&nbsp;<span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TextPlugin\"><span data-link-id=\"7bc5a8cd3cf25890\"></span></span>.</p>\n\n<h3>Note about css:{} wrapper</h3>\n\n<p>Originally, css-specific properties needed to be wrapped in their own object and passed in like&nbsp;<code>TweenLite.to(element, 1, {css:{left:&quot;100px&quot;, top:&quot;50px&quot;}});</code>&nbsp;so that the engine could determine the properties that should be funneled to CSSPlugin, but because animating DOM elements in the browser is so common, TweenLite and TweenMax (as of version 1.8.0) automatically check to see if the target is a DOM element and if so, it creates that css object for you and shifts any properties that aren&#39;t defined directly on the element or reserved (like&nbsp;<code>onComplete</code>, <code>ease</code>, <code>delay</code>, etc. or plugin keywords like&nbsp;<code>scrollTo</code>, <code>easel</code>, etc.) into that css object when the tween renders for the first time. In the code examples below, we&#39;ll use the more concise style that omits the&nbsp;<code>css:{}</code>&nbsp;object but be aware that either style is acceptable.\n\t<br>\n</p><pre class=\"pre-container prettyprint\">//as of 1.8.0 the following lines produce identical results:\nTweenLite.to(element, 1, {top:&quot;20px&quot;, backgroundColor:&quot;#FF0000&quot;, ease:Power2.easeOut});\n//longer, less convenient syntax:\nTweenLite.to(element, 1, {css:{top:&quot;20px&quot;, backgroundColor:&quot;#FF0000&quot;}, ease:Power2.easeOut});</pre>\n"}},"c928fdd09fd62a63":{"returns":{"type":"Ease | Boolean","contentShort":"Specify an ease for the yoyo (backwards) portion of a repeating TweenMax animation.","content":"You can set <code>yoyoEase</code> to a specific ease like <code>Power2.easeOut</code> or to simply flip the existing ease, use the shortcut <code>yoyoEase:true</code>. Note: TweenMax is smart enough to automatically set <code>yoyo:true</code> if you define any yoyoEase, so there's less code for you to write. (Added in GSAP 1.20.0)"}},"b32d8d5efb278d20":{"returns":{"type":"Array","contentShort":"An Array of parameters to pass the onReverseComplete function.","content":"An Array of parameters to pass the onReverseComplete function. For example, <code>TweenMax.to(mc, 1, {x:100, onReverseComplete:myFunction, onReverseCompleteParams:[mc, \"param2\"]});</code> To self-reference the tween instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onReverseCompleteParams:[\"{self}\", \"param2\"]</code>"}},"f5404cc3146549c8":{"returns":{"type":"Array","contentShort":"An Array of parameters to pass the onStart function.","content":"An Array of parameters to pass the onStart function. For example, <code>TweenMax.to(mc, 1, {x:100, onStart:myFunction, onStartParams:[mc, \"param2\"]});</code> To self-reference the tween instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onStartParams:[\"{self}\", \"param2\"]</code>"}},"e4bce09225a62234":{"returns":{"type":"Array","contentShort":"An Array of parameters to pass the onUpdate function.","content":"An Array of parameters to pass the onUpdate function. For example, <code>TweenMax.to(mc, 1, {x:100, onUpdate:myFunction, onUpdateParams:[mc, \"param2\"]});</code> To self-reference the tween instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onUpdateParams:[\"{self}\", \"param2\"]</code>"}},"73ed096fbb4733b1":{"name":"wiggles","returns":{"type":"Integer","content":"Number of oscillations back and forth. Default: 10","contentShort":""}},"e62bf18e77fe7fef":{"name":"type","returns":{"type":"String","content":"\"easeOut\" | \"easeInOut\" | \"anticipate\" | \"uniform\" | \"random\" - the type (or style) of wiggle. Default: \"easeOut\"","contentShort":""}},"6c7082f81905820b":{"name":"amplitudeEase","returns":{"type":"Ease","content":"Provides advanced control over the shape of the amplitude (y-axis in the ease visualizer). You define an ease that controls the amplitude's progress from 1 toward 0 over the course of the tween. Defining an amplitudeEase (or timingEase) will override the \"type\" (think of the 5 \"types\" as convenient presets for amplitudeEase and timingEase combinations).","contentShort":""}},"1b58719563b939ae":{"name":"timingEase","returns":{"type":"Ease","content":"Provides advanced control over how the waves are plotted over time (x-axis in the ease visualizer). Defining an timingEase (or amplitudeEase) will override the \"type\" (think of the 5 \"types\" as convenient presets for amplitudeEase and timingEase combinations).","contentShort":""}},"c2327a2ee1c89b0c":{"meta":{"keywords":["js.Strong","Easing"],"title":"Strong","description":"Provides an easeIn, easeOut, and easeInOut with a power (or strength) of 4 which is identical to the Power4 ease. The more power, the more exaggerated the easing effect. Using a numeric approach like Power4 instead of Strong makes experimenting easier and the code reads more intuitively."},"header":{"content":"<p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 4 which is identical to the <code>Power4</code> ease. The more power, the more exaggerated the easing effect. Using a numeric approach like Power4 instead of Strong makes experimenting easier and the code reads more intuitively.</p><p>This is one of the eases that is natively accelerated in TweenLite and TweenMax. All of the \"Power\" eases and their counterparts (Linear (0), Quad (1), Cubic (2), Quart (3), Quint (4), and Strong (4)) are accelerated.</p><div class=\"ease-visualizer\" data-ease=\"Power4\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example usage:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Strong.easeOut});</pre>"}},"7e1eddf0750f462e":{"meta":{"keywords":["js.Strong.easeIn"],"title":"easeIn","description":"[static] Eases in with a power of 4."},"header":{"content":"<p>[static] Eases in with a power of 4.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in with a power of 4.</p>"}},"72e083392b443236":{"meta":{"keywords":["js.Strong.easeInOut"],"title":"easeInOut","description":"[static] Eases in and then out with a power of 4."},"header":{"content":"<p>[static] Eases in and then out with a power of 4.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in and then out with a power of 4.</p>"}},"9f6a01699fc50e73":{"meta":{"keywords":["js.Strong.easeOut"],"title":"easeOut","description":"[static] Eases out with a power of 4."},"header":{"content":"<p>[static] Eases out with a power of 4.</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases out with a power of 4.</p>"}},"c5344f5dcfcf49a3":{"meta":{"keywords":["js.Power4","Easing"],"title":"Power4","description":"Provides an easeIn, easeOut, and easeInOut with a power (or strength) of 4 which is identical to Quint and Strong but with a more intuitive name. The more power, the more exaggerated the easing effect. Using a numeric approach like this in the name makes experimenting easier."},"header":{"content":"<p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 4 which is identical to <code>Quint</code> and <code>Strong</code> but with a more intuitive name. The more power, the more exaggerated the easing effect. Using a numeric approach like this in the name makes experimenting easier.</p><p>This is one of the eases that is natively accelerated in TweenLite and TweenMax. All of the \"Power\" eases and their counterparts (Linear (0), Quad (1), Cubic (2), Quart (3), Quint (4), and Strong (4)) are accelerated.</p><div class=\"ease-visualizer\" data-ease=\"Power4\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example usage:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Power4.easeOut});</pre>"}},"db8d74151be49b20":{"meta":{"keywords":["js.Power4.easeIn"],"title":"easeIn","description":"[static] Eases in with a power of 4"},"header":{"content":"<p>[static] Eases in with a power of 4</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in with a power of 4</p>"}},"83a96a07388dba2e":{"meta":{"keywords":["js.Power4.easeInOut"],"title":"easeInOut","description":"[static] Eases in and then out with a power of 4"},"header":{"content":"<p>[static] Eases in and then out with a power of 4</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in and then out with a power of 4</p>"}},"c059f076d35f6211":{"meta":{"keywords":["js.Power4.easeOut"],"title":"easeOut","description":"[static] Eases out with a power of 4"},"header":{"content":"<p>[static] Eases out with a power of 4</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases out with a power of 4</p>"}},"cb31e7d72b0e7b00":{"meta":{"keywords":["js.Cubic","Easing"],"title":"Cubic","description":"Provides an easeIn, easeOut, and easeInOut with a power (or strength) of 2 which is identical to the Power2 ease. The more power, the more exaggerated the easing effect. Using a numeric approach like Power2 instead of Cubic makes experimenting easier and the code reads more intuitively."},"header":{"content":"<p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 2 which is identical to the <code>Power2</code> ease. The more power, the more exaggerated the easing effect. Using a numeric approach like Power2 instead of Cubic makes experimenting easier and the code reads more intuitively.</p><p>This is one of the eases that is natively accelerated in TweenLite and TweenMax. All of the \"Power\" eases and their counterparts (Linear (0), Quad (1), Cubic (2), Quart (3), Quint (4), and Strong (4)) are accelerated.</p><div class=\"ease-visualizer\" data-ease=\"Power2\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example usage:</b></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Cubic.easeOut});</pre>"}},"3abce597eeda187e":{"meta":{"keywords":["js.Cubic.easeIn"],"title":"easeIn","description":"[static] Eases in with a power of 2"},"header":{"content":"<p>[static] Eases in with a power of 2</p>"},"returns":{"type":"CubicIn","content":""},"details":{"content":"<p>Eases in with a power of 2</p>"}},"a34d8ad8d2f59e97":{"meta":{"keywords":["js.Cubic.easeInOut"],"title":"easeInOut","description":"[static] Eases in and then out with a power of 2"},"header":{"content":"<p>[static] Eases in and then out with a power of 2</p>"},"returns":{"type":"CubicInOut","content":""},"details":{"content":"<p>Eases in and then out with a power of 2</p>"}},"f6d4c1c141e1b351":{"meta":{"keywords":["js.Cubic.easeOut"],"title":"easeOut","description":"[static] Eases out with a power of 2"},"header":{"content":"<p>[static] Eases out with a power of 2</p>"},"returns":{"type":"CubicEaseOut","content":""},"details":{"content":"<p>Eases out with a power of 2</p>"}},"9b26fbd793cd0dd0":{"name":"onCompleteParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onComplete</code> function. For example, <code>new TimelineLite({onComplete:myFunction, onCompleteParams:[\"param1\", \"param2\"]});</code> To self-reference the timeline instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onCompleteParams:[\"{self}\", \"param2\"]</code>","contentShort":"An Array of parameters to pass the <code>onComplete</code> function. "}},"98e0cdd165137d37":{"name":"onStartParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onStart</code> function. For example, <code>new TimelineLite({onStart:myFunction, onStartParams:[\"param1\", \"param2\"]});</code> To self-reference the timeline instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onStartParams:[\"{self}\", \"param2\"]</code>","contentShort":"An Array of parameters to pass the <code>onStart</code> function."}},"4b93e7c32eaa5f45":{"name":"onUpdateParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onUpdate</code> function. For example, <code>new TimelineLite({onUpdate:myFunction, onUpdateParams:[\"param1\", \"param2\"]});</code> To self-reference the timeline instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onUpdateParams:[\"{self}\", \"param2\"]</code>","contentShort":"An Array of parameters to pass the <code>onUpdate</code> function."}},"16a4b49f868715de":{"name":"onReverseCompleteParams","returns":{"type":"Array","content":"An Array of parameters to pass the <code>onReverseComplete</code> function. For example, <code>new TimelineLite({onReverseComplete:myFunction, onReverseCompleteParams:[\"param1\", \"param2\"]});</code> To self-reference the timeline instance itself in one of the parameters, use <code>\"{self}\"</code>, like: <code>onReverseCompleteParams:[\"{self}\", \"param2\"]</code>","contentShort":"An Array of parameters to pass the <code>onReverseComplete</code> function."}},"ced2d2c7aaaa4d5f":{"meta":{"keywords":["js.Ease","Easing"],"title":"Ease","description":""},"header":{"content":"<p>Base class for all GreenSock easing equations. In its simplest form, an Ease is responsible for translating linear time (typically represented as a number between 0 and 1 where 0 is the beginning, 0.5 is halfway complete, and 1 is the end) into a value that has a different rate of change but still starts at 0 and ends at 1. In the GreenSock platform, eases are used to give tweens/animations the look and feel that the animator desires. For example, a ball rolling to a stop would decelerate over time (easeOut) rather than using a linear velocity. An Elastic ease could be used to make an object appear as though it is loosely attached somewhere and is snapping into place with loose (or tight) tension.</p><p>All Ease instances have a <code>getRatio()</code> method that is responsible for the translation of the progress ratio which the tween typically feeds in. End users almost never need to directly feed any values to or get any values from an Ease instance - the tweens will do that internally.</p><p>The base Ease class handles most of the common power-based easeIn/easeOut/eaesInOut calculations (like Linear, Quad, Cubic, Quart, Quint, and Strong) internally. You can define a separate function that uses what was considered the 4 standard easing parameters by Adobe and many others (time, start, change, duration) and Ease will serve as a proxy in order to maximize backwards compatibility and usability. For example, if you have a custom method that you created like this:<br /></p><pre class='pre-container prettyprint'>function myEase(t, s, c, d) {<br />    return s+(t=t/d);<br />}</pre><p>You could still use that by wrapping Ease around it like this:<br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 5, {x:600, ease:new Ease(myEase)});</pre><p>In the above example, the anytime the Ease's <code>getRatio()</code> method is called, it would feed the first parameter as a ratio between 0 and 1 and the rest of the 3 parameters would always be 0, 1, 1. This is all done transparently by TweenLite/TweenMax, so you really shouldn't need to worry about this.</p>"}},"cbfeda9e3ee6bc0e":{"meta":{"keywords":["js.Ease.Ease()"],"title":"Ease()","description":"Constructor"},"header":{"content":"<p>Constructor</p>"},"parameters":[{"name":"func","data_type":"Function","description":"<p>(default = <code>null</code>)<code></code> — Function (if any) that should be proxied. This is completely optional and is in fact rarely used except when you have your own custom ease function that follows the standard ease parameter pattern like time, start, change, duration.</p>\n"},{"name":"extraParams","data_type":"Array","description":"<p>(default = <code>null</code>)<code></code> — If any extra parameters beyond the standard 4 (time, start, change, duration) need to be fed to the <code>func</code> function, define them as an array here. For example, the old Elastic.easeOut accepts 2 extra parameters in its standard equation (although the newer GreenSock version uses the more modern <code>config()</code> method for configuring the ease and doesn&#8217;t require any extraPrams here)</p>\n"},{"name":"type","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Integer indicating the type of ease where 1 is easeOut, 2 is easeIn, 3 is easeInOut, and 0 is none of these.</p>\n"},{"name":"power","data_type":"Number","description":"<p>(default = <code>0</code>)<code></code> — Power of the ease where Linear is 0, Quad is 1, Cubic is 2, Quart is 3, Quint (and Strong) is 4, etc.</p>\n"}],"returns":{},"details":{"content":"<p>Constructor</p>"}},"56b233da235302db":{"meta":{"keywords":["js.Ease.getRatio()"],"title":"getRatio()","description":"Translates the tween&#039;s progress ratio into the corresponding ease ratio."},"header":{"content":"<p>Translates the tween's progress ratio into the corresponding ease ratio.</p>"},"parameters":[{"name":"p","data_type":"Number","description":"<p>progress ratio (a value between 0 and 1 indicating the progress of the tween/ease)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Number","content":"<p>translated number</p>\n"},"details":{"content":"<p>Translates the tween's progress ratio into the corresponding ease ratio. This is the heart of the Ease, where it does all its work.</p>"}},"d3b047e7bd016acd":{"meta":{"keywords":["js.Power0","Easing"],"title":"Power0","description":"Provides an easeIn, easeOut, and easeInOut with a power (or strength) of 0 which is identical to Linear but with a more intuitive name. The more power, the more exaggerated the easing effect. So Power0 actually has no power at all, providing a linear transition."},"header":{"content":"<p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 0 which is identical to <code>Linear</code> but with a more intuitive name. The more power, the more exaggerated the easing effect. So Power0 actually has no power at all, providing a linear transition.</p><p>This is one of the eases that is natively accelerated in TweenLite and TweenMax. All of the \"Power\" eases and their counterparts (Linear (0), Quad (1), Cubic (2), Quart (3), Quint (4), and Strong (4)) are accelerated.</p><div class=\"ease-visualizer\" data-ease=\"Power0\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example usage:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Power0.easeOut});</pre>"}},"1d489de3c6de961d":{"meta":{"keywords":["js.Power0.easeIn"],"title":"easeIn","description":"[static] Eases in with a power of 0 (linear)."},"header":{"content":"<p>[static] Eases in with a power of 0 (linear).</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in with a power of 0 (linear). Power0.easeIn, Power0.easeOut, and Power0.easeInOut are all identical because there is no power - they're all linear but use the common naming convention for ease of use.</p>"}},"23bff1d0d1d4314b":{"meta":{"keywords":["js.Power0.easeInOut"],"title":"easeInOut","description":"[static] eases in and then out with a power of 0 (linear)."},"header":{"content":"<p>[static] eases in and then out with a power of 0 (linear).</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in and then out with a power of 0 (linear). Power0.easeIn, Power0.easeOut, and Power0.easeInOut are all identical because there is no power - they're all linear but use the common naming convention for ease of use.</p>"}},"18fc5255c4712aae":{"meta":{"keywords":["js.Power0.easeOut"],"title":"easeOut","description":"[static] Eases out with a power of 0 (linear)."},"header":{"content":"<p>[static] Eases out with a power of 0 (linear).</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases out with a power of 0 (linear). Power0.easeIn, Power0.easeOut, and Power0.easeInOut are all identical because there is no power - they're all linear but use the common naming convention for ease of use.</p>"}},"4056e396f43ce90d":{"name":"clamp","returns":{"type":"Boolean","content":"setting <code>clamp</code> to <code>true</code> will prevent points from exceeding the end value or dropping below the starting value. For example, if you're tweening the x property from 0 to 100, the RoughEase would force all random points to stay between 0 and 100 if <code>clamp</code> is <code>true</code>, but if it is <code>false</code>, x could potentially jump above 100 or below 0 at some point during the tween (it would always end at 100 though in this example) (Default: <code>false</code>).","contentShort":""}},"d0461dff035b44f9":{"name":"points","returns":{"type":"Number","content":"the number of points to be plotted along the ease, making it jerk more or less frequently. (Default: <code>20</code>)","contentShort":""}},"6c1ff8e4bba97b5b":{"name":"randomize","returns":{"type":"Boolean","content":"by default, the placement of points will be randomized (creating the roughness) but you can set <code>randomize</code> to <code>false</code> to make the points zig-zag evenly across the ease. Using this in conjunction with a <code>taper</code> value can create a nice effect. (Default: <code>true</code>)","contentShort":""}},"a2e04ec469211693":{"name":"strength","returns":{"type":"Number","content":"controls how far from the template ease the points are allowed to wander (a small number like 0.1 keeps it very close to the template ease whereas a larger number like 5 creates much bigger variations). (Default: <code>1</code>)","contentShort":""}},"b47d6ea25d670878":{"name":"taper","returns":{"type":"String","content":"(<code>\"in\" | \"out\" | \"both\" | \"none\"</code>) - to make the strength of the roughness taper towards the end or beginning or both, use <code>\"out\"</code>, <code>\"in\"</code>, or <code>\"both\"</code> respectively. (Default: <code>\"none\"</code>)","contentShort":""}},"d3baed1556229a6c":{"name":"template","returns":{"type":"Ease","content":"an ease that should be used as a template, like a general guide. The RoughEase will plot points that wander from that template. You can use this to influence the general shape of the RoughEase. (Default: <code>Linear.easeNone</code>)","contentShort":""}},"ea91e06b445f4ac7":{"meta":{"keywords":["js.Back","Easing"],"title":"Back","description":"Eases with an overshoot either at the beginning (easeIn), the end (easeOut), or both (easeInOut)."},"header":{"content":"<p>Eases with an overshoot either at the beginning (easeIn), the end (easeOut), or both (easeInOut). <code>Back</code> is a convenience class that congregates the 3 types of Back eases (BackIn, BackOut, and BackInOut) as static properties so that they can be referenced using the standard synatax, like <code>Back.easeIn</code>, <code>Back.easeOut</code>, and <code>Back.easeInOut</code>.</p><p>You can configure the amount of overshoot using the <code>config()</code> method, like <code>TweenLite.to(obj, 1, {x:100, ease:Back.easeOut.config(3)});</code></p><div class=\"ease-visualizer\" data-ease=\"Back\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p>"}},"18e2a901c1ec4b19":{"meta":{"keywords":["js.Back.easeIn"],"title":"easeIn","description":"[static] Eases in with an overshoot, initially dipping below the starting value before accelerating towards the end."},"header":{"content":"<p>[static] Eases in with an overshoot, initially dipping below the starting value before accelerating towards the end.</p>"},"returns":{"type":"BackIn","content":""},"details":{"content":"<p>Eases in with an overshoot, initially dipping below the starting value before accelerating towards the end.</p>"}},"655846b8e15c420b":{"meta":{"keywords":["js.Back.easeInOut"],"title":"easeInOut","description":"[static] Eases in and out with an overshoot, initially dipping below the starting value before accelerating towards the end, overshooting it and easing out."},"header":{"content":"<p>[static] Eases in and out with an overshoot, initially dipping below the starting value before accelerating towards the end, overshooting it and easing out.</p>"},"returns":{"type":"BackInOut","content":""},"details":{"content":"<p>Eases in and out with an overshoot, initially dipping below the starting value before accelerating towards the end, overshooting it and easing out.</p>"}},"633ffc00de2e0c33":{"meta":{"keywords":["js.Back.easeOut"],"title":"easeOut","description":"[static] Eases out with an overshoot."},"header":{"content":"<p>[static] Eases out with an overshoot.</p>"},"returns":{"type":"BackOut","content":""},"details":{"content":"<p>Eases out with an overshoot.</p>"}},"eb1821730d324359":{"meta":{"keywords":["js.VelocityTracker","Utilities"],"title":"VelocityTracker","description":""},"header":{"content":"<p>Allows you to have the velocity of particular properties automatically tracked for you so that you can access them anytime using the VelocityTracker's <code>getVelocity()</code> method, like<code>myTracker.getVelocity(\"y\")</code>. For example, let's say there's an object that the user interacts with by dragging it or maybe it is being tweened and then at some point you want to create a tween based on that velocity. Normally, you'd need to write your own tracking code that records that object's <code>x</code> and <code>y</code> properties (as well as time stamps) so that when it comes time to feed the<code>velocity</code> into whatever other code you need to run, you'd have the necessary data to calculate it. But let's face it: that can be cumbersome to do manually, and that's precisely why VelocityTracker exists.</p><p>VelocityTracker is in the ThrowPropsPlugin JavaScript file and it's a membership benefit of <a href=\"http://www.greensock.com/club/\" target=\"\">Club GreenSock</a> (so it's not in the public downloads). You can access the important methods directly through ThrowPropsPlugin, like <code>ThrowPropsPlugin.track()</code>.</p><p>Use the static <code>VelocityTracker.track()</code> method to start tracking properties. <i>You generally should <b>not</b> use the VelocityTracker's constructor because there needs to only be one VelocityTracker instance associated with any particular object.</i> The <code>track()</code> method will return the instance that you can then use to <code>getVelocity()</code> like:<br /></p><pre class='pre-container prettyprint'>//first, start tracking \"x\" and \"y\":<br />var tracker = VelocityTracker.track(obj, \"x,y\");<br /> <br />//then, after at least 100ms and 2 \"ticks\", we can get the velocity of each property:<br />var vx = tracker.getVelocity(\"x\");<br />var vy = tracker.getVelocity(\"y\");</pre><p><b>What kinds of properties can be tracked?</b></p><p>Pretty much any numeric property of any object can be tracked, including function-based ones. For example, <code>obj.x</code> or <code>obj.rotation</code> or even <code>obj.myCustomProp()</code>. In fact, for getters and setters that start with the word \"get\" or \"set\" (like <code>getCustomProp()</code> and <code>setCustomProp()</code>), it will automatically find the matching counterpart method and use the getter appropriately, so you can track the getter or setter and it'll work. You <b>cannot</b>, however, track custom plugin-related values like \"directionalRotation\" or \"autoAlpha\" or \"physics2D\" because those aren't real properties of the object. You should instead track the real properties that those plugins affect, like \"rotation\" or \"alpha\" or \"x\" or \"y\".</p><p>This class is used in <code>ThrowPropsPlugin</code> to make it easy to create velocity-based tweens that smoothly transition an object's movement (or rotation or whatever) and glide to a stop.</p><p>Note: In order to report accurately, at least 100ms and 2 ticks of the core tweening engine must have been elapsed before you check velocity.</p>"}},"57b9279b6277c124":{"meta":{"keywords":["js.VelocityTracker.target"],"title":"target","description":"Returns the target object with which the VelocityTracker is associated."},"header":{"content":"<p>Returns the target object with which the VelocityTracker is associated.</p>"},"returns":{"type":"Object","content":""},"details":{"content":"<p>Returns the target object with which the VelocityTracker is associated.</p>"}},"bbc69448cde56863":{"meta":{"keywords":["js.VelocityTracker.addProp()"],"title":"addProp()","description":"Adds a property to track"},"header":{"content":"<p>Adds a property to track</p>"},"parameters":[{"name":"prop","data_type":"String","description":"<p>the property name, like <code>\"x\"</code> or <code>\"y\"</code></p>\n"},{"name":"type","data_type":"String","description":"<p>(default = <code>num</code>)<code></code> — <code>\"rad\"</code> for radian-based rotation or <code>\"deg\"</code> for degree-based rotation &#8211; this is only useful to define if the property is rotation-related and you&#8217;d like to have VelocityTracker compensate for artificial jumps in the value when the rotational midline is crossed, like when rotation goes from 179 to -178 degrees it would interpret that as a change of 3 instead of 357 degrees. Leave this blank unless you want the rotational compensation.</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Adds a property to track</p>"}},"b179b41393276f8a":{"meta":{"keywords":["js.VelocityTracker.getByTarget()"],"title":"getByTarget()","description":"[static] Returns the VelocityTracker associated with a particular object."},"header":{"content":"<p>[static] Returns the VelocityTracker associated with a particular object.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>The object whose VelocityTracker should be returned</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"VelocityTracker","content":"<p>the VelocityTracker associated with the object (or <code>null</code> if none exists)</p>\n"},"details":{"content":"<p>Returns the VelocityTracker associated with a particular object. If none exists, <code>null</code> will be returned.</p>"}},"6c68e64d09faf182":{"meta":{"keywords":["js.VelocityTracker.getVelocity()"],"title":"getVelocity()","description":"Returns the current velocity of the given property."},"header":{"content":"<p>Returns the current velocity of the given property.</p>"},"parameters":[{"name":"prop","data_type":"String","description":"<p>Property name (like <code>\"x\"</code>)</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Number","content":"<p>The current velocity</p>\n"},"details":{"content":"<p>Returns the current velocity of the given property.</p>"}},"c573b4d50cc3ef87":{"meta":{"keywords":["js.VelocityTracker.isTracking()"],"title":"isTracking()","description":"[static] Allows you to discern whether the velocity of a particular target or one of its properties is being tracked (typically initiated using the VelocityTracker.track() method)."},"header":{"content":"<p>[static] Allows you to discern whether the velocity of a particular target or one of its properties is being tracked (typically initiated using the VelocityTracker.track() method).</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>The target object</p>\n"},{"name":"prop","data_type":"String","description":"<p>(default = <code>null</code>)<code></code> — the name of the property to check, like <code>\"x\"</code> or <code>\"y\"</code>.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Boolean","content":"<p><code>true</code> if the target/property is being tracked, <code>false</code> if not.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Allows you to discern whether the velocity of a particular target or one of its properties is being tracked (typically initiated using the <code>VelocityTracker.track()</code> method).</p>"}},"eee6bf3e1eda7652":{"meta":{"keywords":["js.VelocityTracker.isTrackingProp()"],"title":"isTrackingProp()","description":"Allows you to discern whether the velocity of a particular property is being tracked."},"header":{"content":"<p>Allows you to discern whether the velocity of a particular property is being tracked.</p>"},"parameters":[{"name":"prop","data_type":"String","description":"<p>the name of the property to check, like <code>\"x\"</code> or <code>\"y\"</code>.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"Boolean","content":"<p><code>true</code> if the target/property is being tracked, <code>false</code> if not.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Allows you to discern whether the velocity of a particular property is being tracked.</p>"}},"daa700409ba890e6":{"meta":{"keywords":["js.VelocityTracker.removeProp()"],"title":"removeProp()","description":"Stops tracking a particular property"},"header":{"content":"<p>Stops tracking a particular property</p>"},"parameters":[{"name":"prop","data_type":"String","description":"<p>the property name to stop tracking</p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Stops tracking a particular property</p>"}},"dc81ae0b3f16fa34":{"meta":{"keywords":["js.VelocityTracker.track()"],"title":"track()","description":"[static] Allows you to have the velocity of particular properties automatically tracked for you so that you can access them anytime using the VelocityTracker&#039;s getVelocity() method, like myTracker.getVelocity(&quot;y&quot;)."},"header":{"content":"<p>[static] Allows you to have the velocity of particular properties automatically tracked for you so that you can access them anytime using the VelocityTracker's getVelocity() method, like myTracker.getVelocity(\"y\").</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>the target object whose properties will be tracked</p>\n"},{"name":"props","data_type":"String","description":"<p>(default = <code>null</code>)<code></code> — a comma-delimited list of property names, like <code>\"y\"</code> or <code>\"x,y\"</code></p>\n"},{"name":"type","data_type":"String","description":"<p>(default = <code>num</code>)<code></code> — a comma-delimited list of property types (only helpful if they are rotation-based), <code>\"rad\"</code> for radian-based rotation or <code>\"deg\"</code> for degree-based rotation &#8211; this is only useful you&#8217;d like to have VelocityTracker compensate for artificial jumps in rotational values when the rotational midline is crossed, like when rotation goes from 179 to -178 degrees it would interpret that as a change of 3 instead of 357 degrees. Leave this blank unless you want the rotational compensation. You can use <code>\"num\"</code> to indicate normal numeric behavior (or leave it blank).</p>\n"}],"returns":{"type":"VelocityTracker","content":"<p>a VelocityTracker object that&#8217;s responsible for doing the tracking.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"},"details":{"content":"<p>Allows you to have the velocity of particular properties automatically tracked for you so that you can access them anytime using the VelocityTracker's <code>getVelocity()</code> method, like<code>myTracker.getVelocity(\"y\")</code>. For example, let's say there's an object that the user interacts with by dragging it or maybe it is being tweened and then at some point you want to create a tween that smoothly continues that motion and glides to a rest. Normally, you'd need to write your own tracking code that records that object's <code>x</code> and <code>y</code> properties (as well as time stamps) so that when it comes time to feed the <code>velocity</code> into the tween, you'd have the necessary data to calculate it. But let's face it: that can be cumbersome to do manually, and that's precisely why the <code>track()</code> method exists.</p><p>Just feed in the <code>target</code> and a comma-delimited list of properties that you want tracked like this:<br /></p><pre class='pre-container prettyprint'>var tracker = VelocityTracker.track(obj, \"x,y\");</pre><p>Then every time the core tweening engine updates (at whatever frame rate you're running), the <code>x</code> and <code>y</code> values (or whichever properties you define) will be recorded along with time stamps (it keeps a maximum of 2 of these values and keeps writing over the previous ones, so don't worry about memory buildup). This even works with properties that are function-based, like getters and setters.</p><p>Then, after at least 100ms and 2 \"ticks\" of the core engine have elapsed (so that some data has been recorded), you can use the VelocityTracker's <code>getVelocity()</code> method to get the current velocity of a particular property.<br /></p><pre class='pre-container prettyprint'>//first, start tracking \"x\" and \"y\":<br />var tracker = VelocityTracker.track(obj, \"x,y\");<br /> <br />//then, after at least 100ms, we can get the velocity:<br />var vx = tracker.getVelocity(\"x\");<br />var vy = tracker.getVelocity(\"y\");</pre><p><b>IMPORTANT:</b> you should <code>untrack()</code> properties when you no longer need them tracked in order to maximize performance and ensure things are released for garbage collection. To untrack, simply use the <code>untrack()<br /></code> method:<br /></p><pre class='pre-container prettyprint'>//stop tracking only the \"x\" property: <br />VelocityTracker.untrack(obj, \"x\");<br /> <br />//stop tracking \"x\" and \"y\":<br />VelocityTracker.untrack(obj, \"x,y\");<br /> <br />//stop tracking all properties of obj:<br />VelocityTracker.untrack(obj);</pre><p><b>What kinds of properties can be tracked?</b></p><p>Pretty much any numeric property of any object can be tracked, including function-based ones. For example, <code>obj.x</code> or <code>obj.rotation</code> or even <code>obj.myCustomProp()</code>. In fact, for getters and setters that start with the word \"get\" or \"set\" (like <code>getCustomProp()</code> and <code>setCustomProp()</code>), it will automatically find the matching counterpart method and use the getter appropriately, so you can track the getter or setter and it'll work. You <b>cannot</b>, however, track custom plugin-related values like \"directionalRotation\" or \"autoAlpha\" or \"physics2D\" because those aren't real properties of the object. You should instead track the real properties that those plugins affect, like \"rotation\" or \"alpha\" or \"x\" or \"y\".</p>"}},"08358b2af1bc5b64":{"meta":{"keywords":["js.VelocityTracker.untrack()"],"title":"untrack()","description":"[static] Stops tracking the velocity of certain properties (or all properties of an object), like ones initiated with the track() method."},"header":{"content":"<p>[static] Stops tracking the velocity of certain properties (or all properties of an object), like ones initiated with the track() method.</p>"},"parameters":[{"name":"target","data_type":"Object","description":"<p>the target object whose properties should stop being tracked</p>\n"},{"name":"props","data_type":"String","description":"<p>(default = <code>null</code>)<code></code> — a comma-delimited list of properties to stop tracking. If <code>null</code>, ALL properties of the <code>target</code> will stop being tracked.</p>\n<p><span style=\"color: #000000; font-family: Tahoma, Verdana, Arial, Helvetica, sans-serif; font-size: 12.727272033691406px; line-height: normal;\"> </span></p>\n"}],"returns":{"type":"","content":""},"details":{"content":"<p>Stops tracking the velocity of certain properties (or all properties of an object), like ones initiated with the <code>track()</code> method.<br /></p><pre class='pre-container prettyprint'>//starts tracking \"x\" and \"y\":<br />var tracker = VelocityTracker.track(obj, \"x,y\");<br /> <br />//stops tracking only the \"x\" property: <br />VelocityTracker.untrack(obj, \"x\");<br /> <br />//stops tracking \"x\" and \"y\":<br />VelocityTracker.untrack(obj, \"x,y\");<br /> <br />//stops tracking all properties of obj:<br />VelocityTracker.untrack(obj);<br />//or you can use the removeProp() method directly on the VelocityTracker instance to remove one at a time:<br />tracker.removeProp(\"x\");</pre>"}},"f7f7759fe81fd22f":{"meta":{"keywords":["js.Elastic","Easing"],"title":"Elastic","description":"Eases with an elastic effect either at the beginning (easeIn), the end (easeOut), or both (easeInOut)."},"header":{"content":"<p>Eases with an elastic effect either at the beginning (easeIn), the end (easeOut), or both (easeInOut). You can optionally configure the amplitude and period of the sine wave using the <code>config()</code> method, like:<br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Elastic.easeOut.config(1.1, 0.4)});</pre><p>Or just use the defaults which work great in most cases:<br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Elastic.easeOut});</pre><p>The first parameter, amplitude, should generally be more than 1 and it basically controls the strength of the effect (how far it overshoots). The second parameter, period, controls how tight the wave is (like how many times it goes back and forth) where the smaller the number, the tighter the wave which results in more cycles. The period parameter is typically a decimal, less than 1 (but it doesn't have to be). </p><div class=\"ease-visualizer\" data-ease=\"Elastic\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p>"}},"37e6c3b703353a69":{"meta":{"keywords":["js.Elastic.easeIn"],"title":"easeIn","description":"[static] Eases using a sine wave that starts slowly and then accelerates over time"},"header":{"content":"<p>[static] Eases using a sine wave that starts slowly and then accelerates over time</p>"},"returns":{"type":"ElasticIn","content":""},"details":{"content":"<p>Eases using a sine wave that starts slowly and then accelerates over time</p>"}},"f5fe26060be2a85b":{"meta":{"keywords":["js.Elastic.easeInOut"],"title":"easeInOut","description":"[static] Eases using a sine wave that starts slowly, then accelerates and then decelerates over time."},"header":{"content":"<p>[static] Eases using a sine wave that starts slowly, then accelerates and then decelerates over time.</p>"},"returns":{"type":"ElasticInOut","content":""},"details":{"content":"<p>Eases using a sine wave that starts slowly, then accelerates and then decelerates over time.</p>"}},"7e3df7d80af0b0bb":{"meta":{"keywords":["js.Elastic.easeOut"],"title":"easeOut","description":"[static] Eases using a sine wave that starts fast and then decelerates over time."},"header":{"content":"<p>[static] Eases using a sine wave that starts fast and then decelerates over time.</p>"},"returns":{"type":"ElasticOut","content":""},"details":{"content":"<p>Eases using a sine wave that starts fast and then decelerates over time.</p>"}},"f8a990bb64a897ea":{"meta":{"keywords":["js.Power3","Easing"],"title":"Power3","description":"Provides an easeIn, easeOut, and easeInOut with a power (or strength) of 3 which is identical to Quart but with a more intuitive name. The more power, the more exaggerated the easing effect. Using a numeric approach like this in the name makes experimenting easier."},"header":{"content":"<p>Provides an <code>easeIn</code>, <code>easeOut</code>, and <code>easeInOut</code> with a power (or strength) of 3 which is identical to <code>Quart</code> but with a more intuitive name. The more power, the more exaggerated the easing effect. Using a numeric approach like this in the name makes experimenting easier.</p><p>This is one of the eases that is natively accelerated in TweenLite and TweenMax. All of the \"Power\" eases and their counterparts (Linear (0), Quad (1), Cubic (2), Quart (3), Quint (4), and Strong (4)) are accelerated.</p><div class=\"ease-visualizer\" data-ease=\"Power3\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p><p><b>Example usage:</b><br /></p><pre class='pre-container prettyprint'>TweenLite.to(obj, 1, {x:100, ease:Power3.easeOut});</pre>"}},"dd5665cbddb9aa0d":{"meta":{"keywords":["js.Power3.easeIn"],"title":"easeIn","description":"[static] Eases in with a power of 3"},"header":{"content":"<p>[static] Eases in with a power of 3</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in with a power of 3</p>"}},"5aff71c5f05c1b9e":{"meta":{"keywords":["js.Power3.easeInOut"],"title":"easeInOut","description":"[static] Eases in and then out with a power of 3"},"header":{"content":"<p>[static] Eases in and then out with a power of 3</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases in and then out with a power of 3</p>"}},"ae081698f5101041":{"meta":{"keywords":["js.Power3.easeOut"],"title":"easeOut","description":"[static] Eases out with a power of 3"},"header":{"content":"<p>[static] Eases out with a power of 3</p>"},"returns":{"type":"Ease","content":""},"details":{"content":"<p>Eases out with a power of 3</p>"}},"fb2d7be451025509":{"meta":{"keywords":"","description":"","imagePath":""},"content":"<div class=\"package-feature\"><h1>Plugins</h1><img style=\"width: 93%;\" src=\"https://greensock.com/wp-content/themes/greensock/images/divider.png\" class=\"fr-fic fr-dii\"><p>Plugins Summary Text</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/ModifiersPlugin\"><span data-link-id=\"82b95bb606c34e2f\"></span></span></h1></div><p>ModifiersPlugin intercepts values that GSAP would normally apply on each update (\"tick\"), passes them to your function which can run custom logic and return a new value (great for snapping, clamping, wrapping, or other dynamic effects).</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/MorphSVGPlugin\"><span data-link-id=\"28124149c0519430\"></span></span></h1></div><p>MorphSVGPlugin provides advanced control over tweens that morph SVG paths.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/DrawSVGPlugin\"><span data-link-id=\"2433928b0e0f6cc4\"></span></span></h1></div><p><code>DrawSVGPlugin</code> allows you to progressively reveal (or hide) the <strong>stroke</strong> of an SVG <code><path></code>, <code><line></code>, <code><polyline></code>, <code><rect></code>, or <code><ellipse></code> and you can even animate outward from the center of the stroke (or any position/segment). It does this by controlling the <code>stroke-dashoffset</code> and <code>stroke-dasharray</code> CSS properties.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/TextPlugin\"><span data-link-id=\"7bc5a8cd3cf25890\"></span></span></h1></div><p><br></p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/ScrollToPlugin\"><span data-link-id=\"13df7c5ab97ce05d\"></span></span></h1></div><p>Animates the scroll position of the window or DOM element.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/ScrambleTextPlugin\"><span data-link-id=\"357645cd3e630097\"></span></span></h1></div><p>Scrambles the text in a DOM element with randomized characters, refreshing new randomized characters at regular intervals while gradually revealing your new text over the course of the tween. Great for decryption effects.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/RoundPropsPlugin\"><span data-link-id=\"bac828fc726d4d82\"></span></span></h1></div><p>Rounds the tweened values to the nearest integer.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/RaphaelPlugin\"><span data-link-id=\"5b09c1a25bf1df7e\"></span></span></h1></div><p><br></p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/PhysicsPropsPlugin\"><span data-link-id=\"447e2b0a637eb56f\"></span></span></h1></div><p><br></p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/Physics2DPlugin\"><span data-link-id=\"7913694fbfa93c13\"></span></span></h1></div><p>Apply physics properties to your animations.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/EaselPlugin\"><span data-link-id=\"4c5618b6dde74bd2\"></span></span></h1></div><p><br></p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/DirectionalRotationPlugin\"><span data-link-id=\"0a6e62faf0a53059\"></span></span></h1></div><p>Tweens any rotation-related property to another value in a particular direction.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/TweenPlugin\"><span data-link-id=\"16d64b5b1b82fde8\"></span></span></h1></div><p><br></p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/ThrowPropsPlugin\"><span data-link-id=\"091b70448f18262e\"></span></span></h1></div><p>ThrowPropsPlugin allows you to smoothly glide any property to a stop, honoring an initial velocity as well as applying optional restrictions on the end value.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/CSSRulePlugin\"><span data-link-id=\"3d0f25beac1906b4\"></span></span></h1></div><p><br></p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/CSSPlugin\"><span data-link-id=\"be137a434f5b4e08\"></span></span></h1></div><p>CSSPlugin enables animation of a DOM element's CSS properties like \"top\", \"left\", \"backgroundColor\", as well as 2D and 3D transforms and many others.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/ColorPropsPlugin\"><span data-link-id=\"23b845c3016f0559\"></span></span></h1></div><p>Allows you to animate any color-related property of any object (for DOM element properties, these capabilities are already built into CSSPlugin, so you only need ColorPropsPlugin if you're animating color properties of non-DOM elements, like canvas library objects or custom objects/properties).</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/BezierPlugin\"><span data-link-id=\"43077a47946db3db\"></span></span></h1></div><p>Animate virtually any property (or properties) along a curved Bezier path which you define as an array of points/values.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Plugins/AttrPlugin\"><span data-link-id=\"27db5e20e8bbb9ae\"></span></span></h1></div><p>Tweens any numeric <strong>attribute of a DOM element, like <code>cx</code> in <code><circle cx=\"100\" cy=\"0\" r=\"50\"/></code></strong></p></div>"},"fe7727d7fa29b16b":{"meta":{"keywords":["js.Expo","Easing"],"title":"Expo","description":"Eases in a strong fashion either at the beginning (easeIn), the end (easeOut), or both (easeInOut)."},"header":{"content":"<p>Eases in a strong fashion either at the beginning (easeIn), the end (easeOut), or both (easeInOut). <code>Expo</code> is a convenience class that congregates the 3 types of Expo eases (ExpoIn, ExpoOut, and ExpoInOut) as static properties so that they can be referenced using the standard synatax, like <code>Expo.easeIn</code>, <code>Expo.easeOut</code>, and <code>Expo.easeInOut</code>.</p><div class=\"ease-visualizer\" data-ease=\"Expo\"></div><p><script src=\"/wp-content/themes/greensock/includes/EaseVisualizer/EaseVisualizer.min.js\"></script></p>"}},"114305ffa6e0ca96":{"meta":{"keywords":["js.Expo.easeIn"],"title":"easeIn","description":"[static] Eases in a strong fashion starting out slowly and then accelerating."},"header":{"content":"<p>[static] Eases in a strong fashion starting out slowly and then accelerating.</p>"},"returns":{"type":"ExpoIn","content":""},"details":{"content":"<p>Eases in a strong fashion starting out slowly and then accelerating. Produces an effect similar to the popular \"Zeno's paradox\" style of scripted easing, where each interval of time decreases the remaining distance by a constant proportion.</p>"}},"55855c7922de0e47":{"meta":{"keywords":["js.Expo.easeInOut"],"title":"easeInOut","description":"[static] Eases out in a strong fashion starting out fast and then decelerating."},"header":{"content":"<p>[static] Eases out in a strong fashion starting out fast and then decelerating.</p>"},"returns":{"type":"ExpoInOut","content":""},"details":{"content":"<p>Eases out in a strong fashion starting out fast and then decelerating. Produces an effect similar to the popular \"Zeno's paradox\" style of scripted easing, where each interval of time decreases the remaining distance by a constant proportion.</p>"}},"884555468e3861f7":{"meta":{"keywords":["js.Expo.easeOut"],"title":"easeOut","description":"[static] Eases out in a strong fashion starting out fast and then decelerating."},"header":{"content":"<p>[static] Eases out in a strong fashion starting out fast and then decelerating.</p>"},"returns":{"type":"ExpoOut","content":""},"details":{"content":"<p>Eases out in a strong fashion starting out fast and then decelerating. Produces an effect similar to the popular \"Zeno's paradox\" style of scripted easing, where each interval of time decreases the remaining distance by a constant proportion.</p>"}},"root":{"meta":{"keywords":["Greensock, Animation, Platform, Javascript"],"title":"Greensock | Docs","description":"Meet the Docs Super Menu The menu to the left gives you access to every class across the entire GreenSock API for HTML5. Take a peak inside GSAP to see the docs for all our animation tools. Looking to add some snazzy text effects? Check out the tools in the Text category. Select a class &hellip;"},"content":"<div class=\"docs-feature\"><div class=\"left\"><h3>Getting started with</h3><h1>DOCS</h1></div><div class=\"right\"><p>Animating with code may seem intimidating at first, but don&rsquo;t worry, our platform was engineered to make it simple and intuitive.</p></div><div class=\"clear\"><br></div></div><div class=\"class-intro-text main-content full html5\" style=\"display: block;\"><h2>Meet the Docs Super Menu</h2><p>The menu to the left gives you access to every class in the GreenSock API for HTML5. Take a peak inside <a href=\"/docs/\">GSAP</a> to see the docs for all our animation tools. Looking to add some snazzy text effects? Check out the tools in the <a href=\"http://greensock.com/docs/search/Text/\">Text</a> category. Select a class to get an overview and list of every method and property. Every method and property has its own detail page too packed with descriptions and examples. Not sure where to look? Try the search feature.</p><h2>Our most popular tools</h2><p>Get the technical details on GreenSock&#39;s most popular tools</p><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenLite\"><span data-link-id=\"52db442320b34fc1\"></span></span></h1></div><p>TweenLite is an extremely fast, lightweight, and flexible animation tool that serves as the foundation of the GreenSock Animation Platform (GSAP). A TweenLite instance handles tweening one or more properties of <strong>any object</strong> (or array of objects) over time.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenMax\"><span data-link-id=\"7eebd4b20adcaecc\"></span></span></h1></div><p>TweenMax extends TweenLite, adding many useful (but non-essential) features like repeat(), repeatDelay(), yoyo(), updateTo(), and more. It also includes many extra plugins by default, making it extremely full-featured. Any of the plugins can work with TweenLite too, but TweenMax saves you the step of loading the common ones like CSSPlugin, RoundPropsPlugin, BezierPlugin, AttrPlugin, DirectionalRotationPlugin as well as EasePack, TimelineLite, and TimelineMax.</p></div><div style=\"border-radius:8px; width:826px; height:288px; overflow:hidden; margin:20px 0;\"><a href=\"https://ihatetomatoes.net/greensock-cheat-sheet/#more-6001\" target=\"_blank\"><img src=\"https://greensock.com/wp-content/uploads/2012/05/cheat-sheet.png\" alt=\"cheat-sheet\" width=\"826\" height=\"288\" class=\"alignleft size-full wp-image-6354 fr-fic fr-dii\"></a></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineLite\"><span data-link-id=\"2b3bb68a78e65fe7\"></span></span></h1></div><p>TimelineLite is a lightweight, intuitive timeline class for building and managing sequences of TweenLite, TweenMax, TimelineLite, and/or TimelineMax instances. You can think of a TimelineLite instance like a container where you place tweens (or other timelines) over the course of time.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineMax\"><span data-link-id=\"32bc2e8f667c28b7\"></span></span></h1></div><p>TimelineMax extends TimelineLite, offering exactly the same functionality plus useful (but non-essential) features like repeat, repeatDelay, yoyo, currentLabel(), tweenTo(), tweenFromTo(), getLabelAfter(), getLabelBefore(), getActive() and more.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Utilities/Draggable\"><span data-link-id=\"27ffcb75af705686\"></span></span></h1></div><p>Draggable provides a surprisingly simple way to make virtually any DOM element draggable, spinnable, tossable, and even flick-scrollable using mouse and/or touch events, plus Draggable integrates beautifully (and optionally) with ThrowPropsPlugin so that the user can flick and have the motion decelerate smoothly based on momentum.</p></div></div>"}},"activeData":{"meta":{"keywords":["Greensock, Animation, Platform, Javascript"],"title":"Greensock | Docs","description":"Meet the Docs Super Menu The menu to the left gives you access to every class across the entire GreenSock API for HTML5. Take a peak inside GSAP to see the docs for all our animation tools. Looking to add some snazzy text effects? Check out the tools in the Text category. Select a class &hellip;"},"content":"<div class=\"docs-feature\"><div class=\"left\"><h3>Getting started with</h3><h1>DOCS</h1></div><div class=\"right\"><p>Animating with code may seem intimidating at first, but don&rsquo;t worry, our platform was engineered to make it simple and intuitive.</p></div><div class=\"clear\"><br></div></div><div class=\"class-intro-text main-content full html5\" style=\"display: block;\"><h2>Meet the Docs Super Menu</h2><p>The menu to the left gives you access to every class in the GreenSock API for HTML5. Take a peak inside <a href=\"/docs/\">GSAP</a> to see the docs for all our animation tools. Looking to add some snazzy text effects? Check out the tools in the <a href=\"http://greensock.com/docs/search/Text/\">Text</a> category. Select a class to get an overview and list of every method and property. Every method and property has its own detail page too packed with descriptions and examples. Not sure where to look? Try the search feature.</p><h2>Our most popular tools</h2><p>Get the technical details on GreenSock&#39;s most popular tools</p><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenLite\"><span data-link-id=\"52db442320b34fc1\"></span></span></h1></div><p>TweenLite is an extremely fast, lightweight, and flexible animation tool that serves as the foundation of the GreenSock Animation Platform (GSAP). A TweenLite instance handles tweening one or more properties of <strong>any object</strong> (or array of objects) over time.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TweenMax\"><span data-link-id=\"7eebd4b20adcaecc\"></span></span></h1></div><p>TweenMax extends TweenLite, adding many useful (but non-essential) features like repeat(), repeatDelay(), yoyo(), updateTo(), and more. It also includes many extra plugins by default, making it extremely full-featured. Any of the plugins can work with TweenLite too, but TweenMax saves you the step of loading the common ones like CSSPlugin, RoundPropsPlugin, BezierPlugin, AttrPlugin, DirectionalRotationPlugin as well as EasePack, TimelineLite, and TimelineMax.</p></div><div style=\"border-radius:8px; width:826px; height:288px; overflow:hidden; margin:20px 0;\"><a href=\"https://ihatetomatoes.net/greensock-cheat-sheet/#more-6001\" target=\"_blank\"><img src=\"https://greensock.com/wp-content/uploads/2012/05/cheat-sheet.png\" alt=\"cheat-sheet\" width=\"826\" height=\"288\" class=\"alignleft size-full wp-image-6354 fr-fic fr-dii\"></a></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineLite\"><span data-link-id=\"2b3bb68a78e65fe7\"></span></span></h1></div><p>TimelineLite is a lightweight, intuitive timeline class for building and managing sequences of TweenLite, TweenMax, TimelineLite, and/or TimelineMax instances. You can think of a TimelineLite instance like a container where you place tweens (or other timelines) over the course of time.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:TimelineMax\"><span data-link-id=\"32bc2e8f667c28b7\"></span></span></h1></div><p>TimelineMax extends TimelineLite, offering exactly the same functionality plus useful (but non-essential) features like repeat, repeatDelay, yoyo, currentLabel(), tweenTo(), tweenFromTo(), getLabelAfter(), getLabelBefore(), getActive() and more.</p></div><div class=\"class-item\"><div class=\"top\"><h1><span class=\"atwho-inserted\" contenteditable=\"false\" data-atwho-at-query=\"@link:Utilities/Draggable\"><span data-link-id=\"27ffcb75af705686\"></span></span></h1></div><p>Draggable provides a surprisingly simple way to make virtually any DOM element draggable, spinnable, tossable, and even flick-scrollable using mouse and/or touch events, plus Draggable integrates beautifully (and optionally) with ThrowPropsPlugin so that the user can flick and have the motion decelerate smoothly based on momentum.</p></div></div>"}},"editState":{"isEditable":false,"user":null,"currentUsers":[],"safeLevel":"unknown"},"searchState":{"dataLoaded":true,"data":{"TweenLite.render()":["a03b81c2162c5416"],"js.TweenLite.render()":["a03b81c2162c5416","a03b81c2162c5416-inherited-7eebd4b20adcaecc"],"Forces render active tweens if, example, set a bunch of from() tweens you force render (even of \"lazy\" tweens) to avoid a delay render tick.":["a03b81c2162c5416","a03b81c2162c5416-inherited-7eebd4b20adcaecc"],"Constructor":["98ebb12d9759df87","8bdf6a2f45035aaf","cbfeda9e3ee6bc0e","bc85ce2321f8a2ba","3b5b7725303db7cc","4254772d898fcd15","26a8027fc1db0737","cba66c4d71fcd0b1","24608d0d543250f4","10948e3702698b9c","940d9a4a8e009e19","dcf4605fe174e7e9","46a65b241e844cdf","e4742fc3d1dac595","1ab5d820e53d55e7","b2b27e1c27b569e3","f8a5c0f959c5c320","50d2c59c532a8f8b","33fd718342e0def4","2cb0c6a759fe7e3e","74c21fb76dec0658","6e66ce0380bb7732","7bc9a119e72d6fdc","3a36e8df86d24075","fcb9333bd0cb5135","00f2f9811f5354cf","161275f38fc78046","a5c3189dc5d058a7","bb945f1b5836a3fa","ff278834bf12f050","adaa77111c49dea7","30e0bb194a03450a","6ef668a9f15ebadd","5022798f02602b73","3ef1899c737d2830","594254e8876faff3","cc4d1686bf20a1c4","0259e6a57bbc19a8","79bc608eee70487f","02183f29ba37301e","eeb28a089980ab64","8e823ba73d922378","2516648f9d1556d8","66b43a250da3ed1b","a6a411741b3de888","52466ef8d6a25e07","f24fb3a2d57f8f6b","52e84092d1d9c501","827c234a7bf0673d","83384ea8feb32555","15e4767347b7b513","14c14e56fe4cfb7f","d7db3bffccebb26f","ed459aa1a80c9521","b6e1b50e6cda70f9","7e6f9f4cc2e01616","ceff32533e6974e3","68f0517fc3271c23","9702ac0b5f53d28f","20b7b61b00d9fd0d","48e094163435511b","9f56088fbb368385"],"TweenMax.startTime()":["e646e51de97ab747-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"js.Animation.startTime()":["e646e51de97ab747-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","e646e51de97ab747","e646e51de97ab747-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","e646e51de97ab747-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","e646e51de97ab747-inherited-211a71fb195b2819","e646e51de97ab747-inherited-52db442320b34fc1"],"Gets sets time the animation begins parent timeline (after delay defined).":["e646e51de97ab747-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","e646e51de97ab747","e646e51de97ab747-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","e646e51de97ab747-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","e646e51de97ab747-inherited-211a71fb195b2819","e646e51de97ab747-inherited-52db442320b34fc1"],"Methods":["d5106dc51b7f5d34","c3d534d675a3afa8","8fed06c936bee4ce","f91ee2882b2e81c3","ce029f1efc85be43","1041a5c1cc29d27e","e41b42f226a99048","b1a85937ab300f11","0f60577286c8917a","cdfe8fba430bec28","c0be05c0eb067258","5194a1bcd5fa85b4","51ce7cb6dea97bce","4b4e849bd128f6ec","9c1a9435be3f8187","8d8ae20b37b00594","1c237c1f074047f3","ed29f159c1c48094","ec6531f0b02f4cf8","899649118b227ef3","0f4d525c21fd9234","d2d91cf2ebadcfaf","9e68556934a64568","b8b47a21012c2526","80b4c322700505f4","24d394c42b9a9197","1933814606d8f731","128681295a195066","25619ea4c3be2ee1","76addd3d1a1f8351","20fbd8766d4c9807","09dc4be9038e030c","8b4360fa3f850f9e","f0dcc0b2d2c8c8e7","3ee5521bddabf8b1","47fb9392ebc1d108","586fe532b56c055a","e6d83093f7f5a207","fd83a6199b3fccbe","a7027e3576dae414","da337dfc2601e110","33128efe61f40353","e2915059f396caf2","e51dec40a03460d5","c30ce9b52ee02ffc","1582ea86afd872d2","118d25e0ad422287","4155593f16330ad4","7a0d343c67932ddb","0aeeb28b67105bbf","5a50595a7582d2ba","2f7f4ddca04c7b79","2969a81cb4dc7123","ed15e87bd352c698"],"Animation.totalDuration()":["8ecf8286d1667a67"],"js.Animation.totalDuration()":["8ecf8286d1667a67","8ecf8286d1667a67-inherited-211a71fb195b2819","8ecf8286d1667a67-inherited-52db442320b34fc1"],"Gets sets animation&#039;s total duration including repeats or repeatDelays (which TweenMax TimelineMax).":["8ecf8286d1667a67","8ecf8286d1667a67-inherited-211a71fb195b2819","8ecf8286d1667a67-inherited-52db442320b34fc1"],"TweenMax.vars":["1d9a881066fb186e-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"js.Animation.vars":["1d9a881066fb186e-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","1d9a881066fb186e","1d9a881066fb186e-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","1d9a881066fb186e-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","1d9a881066fb186e-inherited-211a71fb195b2819","1d9a881066fb186e-inherited-52db442320b34fc1"],"The vars object passed constructor stores configuration variables onComplete, onUpdate, etc.":["1d9a881066fb186e-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","1d9a881066fb186e","1d9a881066fb186e-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","1d9a881066fb186e-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","1d9a881066fb186e-inherited-211a71fb195b2819","1d9a881066fb186e-inherited-52db442320b34fc1"],"Animation.seek()":["b6d7efcbb07722e0"],"js.Animation.seek()":["b6d7efcbb07722e0","b6d7efcbb07722e0-inherited-211a71fb195b2819","b6d7efcbb07722e0-inherited-52db442320b34fc1","b6d7efcbb07722e0-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"Jumps specific time affecting instance paused or reversed.":["b6d7efcbb07722e0","b6d7efcbb07722e0-inherited-211a71fb195b2819","b6d7efcbb07722e0-inherited-52db442320b34fc1","b6d7efcbb07722e0-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"TimelineMax.set()":["fd9dbda283638161-inherited-32bc2e8f667c28b7"],"js.TimelineLite.set()":["fd9dbda283638161-inherited-32bc2e8f667c28b7","fd9dbda283638161"],"Adds zero-duration tween the timeline (or the &quot;position&quot; parameter) sets values immediately (when the virtual playhead reaches that position the timeline) - a convenience method that accomplishes the add( TweenLite.to(target, 0, {...}) ) code.":["fd9dbda283638161-inherited-32bc2e8f667c28b7","fd9dbda283638161"],"TimelineLite.time()":["9c2d24c127d9ebc7-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"js.Animation.time()":["9c2d24c127d9ebc7-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","9c2d24c127d9ebc7-inherited-211a71fb195b2819","9c2d24c127d9ebc7-inherited-52db442320b34fc1","9c2d24c127d9ebc7"],"Gets sets local position the playhead (essentially the current time), seconds (or frames frames-based animations) 0 or greater than the animation&#039;s duration.":["9c2d24c127d9ebc7-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","9c2d24c127d9ebc7-inherited-211a71fb195b2819","9c2d24c127d9ebc7-inherited-52db442320b34fc1","9c2d24c127d9ebc7"],"TimelineMax.seek()":["0fc1a8aeb91b3bc5-inherited-32bc2e8f667c28b7"],"js.TimelineLite.seek()":["0fc1a8aeb91b3bc5-inherited-32bc2e8f667c28b7","0fc1a8aeb91b3bc5"],"[override] Jumps specific time (or label) affecting instance paused or reversed.":["0fc1a8aeb91b3bc5-inherited-32bc2e8f667c28b7","0fc1a8aeb91b3bc5"],"SplitText":["9927ce1237a8b0b1"],"js.SplitText":["9927ce1237a8b0b1"],"Text":["9927ce1237a8b0b1","7bc5a8cd3cf25890","357645cd3e630097"],"Utilities":["9927ce1237a8b0b1","f35957809b52dfd2","f35957809b52dfd2-inherited-211a71fb195b2819","f35957809b52dfd2-inherited-52db442320b34fc1","f35957809b52dfd2-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","f35957809b52dfd2-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","eb1821730d324359","54a27bdcea66a8b2","f35957809b52dfd2-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","27ffcb75af705686"],"SplitText easy break text HTML element character, word, and/or line in <div> making complex animation simple.":["9927ce1237a8b0b1"],"Animation.totalProgress()":["43a03109965e7d4e"],"js.Animation.totalProgress()":["43a03109965e7d4e","43a03109965e7d4e-inherited-211a71fb195b2819","43a03109965e7d4e-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","43a03109965e7d4e-inherited-52db442320b34fc1"],"Gets sets animation&#039;s total progress 0 1 indicating the position the virtual playhead (including repeats) 0 is the beginning, 0.5 is at the halfway point, and 1 is at the (complete).":["43a03109965e7d4e","43a03109965e7d4e-inherited-211a71fb195b2819","43a03109965e7d4e-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","43a03109965e7d4e-inherited-52db442320b34fc1"],"SlowMo.config()":["4e307cf9f4bf2f9f"],"js.SlowMo.config()":["4e307cf9f4bf2f9f"],"Permits customization ease parameters.":["4e307cf9f4bf2f9f","677955a5f3bdfcb4"],"TimelineMax.getLabelAfter()":["05f5280e21743f35"],"js.TimelineMax.getLabelAfter()":["05f5280e21743f35"],"Returns label (if any) occurs the time parameter.":["05f5280e21743f35"],"Draggable.lockedAxis":["fcb1bb985e1f73e9"],"js.Draggable.lockedAxis":["fcb1bb985e1f73e9"],"The axis movement locked drag (either \"x\" \"y\"). For example, lockAxis is true Draggable type:\"x,y\", user starts dragging horizontally, lockedAxis \"y\" vertical movement be allowed during that drag.":["fcb1bb985e1f73e9"],"Linear.ease":["3a1185cd458dbf47"],"js.Linear.ease":["3a1185cd458dbf47"],"[static] The default ease instance reused times tweens in order conserve memory improve performance slightly compared to creating instance time.":["3a1185cd458dbf47","ba16ab89ebee23c0","cca5b92a93c91acc"],"Ease.Ease()":["cbfeda9e3ee6bc0e"],"js.Ease.Ease()":["cbfeda9e3ee6bc0e"],"TimelineLite.getChildren()":["5103496262822a61"],"js.TimelineLite.getChildren()":["5103496262822a61","5103496262822a61-inherited-32bc2e8f667c28b7"],"Returns array tweens and/or timelines nested timeline.":["5103496262822a61","5103496262822a61-inherited-32bc2e8f667c28b7"],"Properties":["e41dc2d824809967","4c4e0dc6ec82e9d2","f53a4f032862ef4b","6c86cb85353bf463","a2c0edbda1b8dd97","68bdad17bf6c2eb6","97f627b1ea0da433","66b2dd5137a72397","3853b8e39e36e027","267ce64e2fbb3f7d","b460b4edfd115a43","0428fae2e18a9613","adf9c7ee62774ba4","bb348eccd434b5a8","6eb509a7be806cdd","7d48300a1a10e0e5","872ed3947dd34d34","324696f621bf52ea","e8ba7a11a42bb184","e3d18ff014ff6095","648945e0ecf65093","ed51b120abaec5c2","4211b5df656e89c0","686dcaac6fb0f74d","5163184326bb1c60","aa580d04616c5c64","2a29c5c28bf45f1a","28c70b19779b65a6","18c206e3bcd758c3","0371668ad22745b9","263a751df9953a1b","6e944f104921175a","ef78fd00a67f41a2","fba2505e727039ff","cfc64cf4860b7a28","a8cedff6562f74c9","ae986dce4fec960c","b0b5d2a90d50df62","51c3b5a2632ca427","7a55f0c80975d390","29a90c573ec07617","b348e04893b18cee","fd4abe80e309c14a","3c9048f80b2538bc","948f84858c0c9111","478e667b4c764f52","f51d07c5ce1f37bf","70aea9848fad7d9f","25b25b3798687d9c","e0fb174b345d95b8","b4b8b312f51dcf31","75a392dd00c75d1c","ca5b23dca997e6d1","6039d897ea7bbf79"],"TimelineLite.addLabel()":["a3d5652d51086bea"],"js.TimelineLite.addLabel()":["a3d5652d51086bea","a3d5652d51086bea-inherited-32bc2e8f667c28b7"],"Adds label timeline, making easy to mark important positions/times.":["a3d5652d51086bea","a3d5652d51086bea-inherited-32bc2e8f667c28b7"],"TweenMax.killAll()":["e191a597bfccb4b6"],"js.TweenMax.killAll()":["e191a597bfccb4b6"],"[static] Kills tweens and/or delayedCalls/callbacks, and/or timelines, optionally forcing completion first.":["e191a597bfccb4b6"],"Expo.easeOut":["884555468e3861f7"],"js.Expo.easeOut":["884555468e3861f7"],"[static] Eases strong fashion starting out fast decelerating.":["884555468e3861f7","55855c7922de0e47"],"Quint":["424d2c8144aca82b"],"js.Quint":["424d2c8144aca82b"],"Easing":["424d2c8144aca82b","d3b047e7bd016acd","059d5eab36bbdd55","c2327a2ee1c89b0c","3eab3f172dae806f","0c466d8095583e88","aa9969ee39687902","f8a990bb64a897ea","1315d24279922963","c5344f5dcfcf49a3","830525841e3dd3cb","cb31e7d72b0e7b00","ced2d2c7aaaa4d5f","723964a4fd3ac4af","fe7727d7fa29b16b","681f9501cd7f99b3","07392828b060a423","19160c04837df0bb","f7f7759fe81fd22f","22c860af2d1dbbcb","91943bd05ded63bb","57d33bbbf0c4c2c2","5190c7bdac5c1b1c","09af4edb7491fd9e","0879a53eb4051ccf","ea91e06b445f4ac7"],"Provides easeIn, easeOut, easeInOut power (or strength) 4 identical Power4 ease. The power, the more exaggerated the easing effect. Using a numeric approach Power4 of Quint experimenting easier and the code reads more intuitively.":["424d2c8144aca82b"],"TimelineMax.endTime()":["ac42870b8c3fb694-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"js.Animation.endTime()":["ac42870b8c3fb694-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","ac42870b8c3fb694-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","ac42870b8c3fb694-inherited-211a71fb195b2819","ac42870b8c3fb694-inherited-52db442320b34fc1","ac42870b8c3fb694-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","ac42870b8c3fb694"],"Returns time the animation finish the parent timeline&#039;s local time. ":["ac42870b8c3fb694-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","ac42870b8c3fb694-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","ac42870b8c3fb694-inherited-211a71fb195b2819","ac42870b8c3fb694-inherited-52db442320b34fc1","ac42870b8c3fb694-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","ac42870b8c3fb694"],"Animation.delay()":["f35957809b52dfd2"],"js.Animation.delay()":["f35957809b52dfd2","f35957809b52dfd2-inherited-211a71fb195b2819","f35957809b52dfd2-inherited-52db442320b34fc1","f35957809b52dfd2-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","f35957809b52dfd2-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","f35957809b52dfd2-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"Delay":["f35957809b52dfd2","f35957809b52dfd2-inherited-211a71fb195b2819","f35957809b52dfd2-inherited-52db442320b34fc1","f35957809b52dfd2-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","f35957809b52dfd2-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","f35957809b52dfd2-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"Gets sets animation&#039;s initial delay the length time seconds (or frames frames-based tweens) the animation begin.":["f35957809b52dfd2","f35957809b52dfd2-inherited-211a71fb195b2819","f35957809b52dfd2-inherited-52db442320b34fc1","f35957809b52dfd2-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","f35957809b52dfd2-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","f35957809b52dfd2-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"TimelineLite.pause()":["96fc1d850d4a51e6-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"js.Animation.pause()":["96fc1d850d4a51e6-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","96fc1d850d4a51e6-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","96fc1d850d4a51e6-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","96fc1d850d4a51e6-inherited-211a71fb195b2819","96fc1d850d4a51e6-inherited-52db442320b34fc1","96fc1d850d4a51e6"],"Pauses instance, optionally jumping specific time.":["96fc1d850d4a51e6-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","96fc1d850d4a51e6-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","96fc1d850d4a51e6-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","96fc1d850d4a51e6-inherited-211a71fb195b2819","96fc1d850d4a51e6-inherited-52db442320b34fc1","96fc1d850d4a51e6"],"Power0":["d3b047e7bd016acd"],"js.Power0":["d3b047e7bd016acd"],"Provides easeIn, easeOut, easeInOut power (or strength) 0 identical Linear with a intuitive name. The more power, more exaggerated the easing effect. So Power0 power all, providing a linear transition.":["d3b047e7bd016acd"],"TimelineMax.yoyo()":["d2c60e4c72147852"],"js.TimelineMax.yoyo()":["d2c60e4c72147852"],"Gets sets timeline&#039;s yoyo state, true the timeline forth, alternating and repeat.":["d2c60e4c72147852"],"SplitText.selector":["490bfb425778129e"],"js.SplitText.selector":["490bfb425778129e"],"[static] When pass string a SplitText (as parameter), feed to selector engine internally to find the element(s), jQuery default it to loaded.":["490bfb425778129e"],"Draggable.minY":["c9a8ad76c3364ab5"],"js.Draggable.minY":["c9a8ad76c3364ab5"],"[read-only] When bounds applied, minY refers minimum &quot;legal&quot; the vertical property (either &quot;y&quot; &quot;top&quot;, depending type the Draggable is).":["c9a8ad76c3364ab5"],"TimelineMax.getTweensOf()":["708b2590f2979899-inherited-32bc2e8f667c28b7"],"js.TimelineLite.getTweensOf()":["708b2590f2979899-inherited-32bc2e8f667c28b7","708b2590f2979899"],"Returns tweens object timeline.":["708b2590f2979899-inherited-32bc2e8f667c28b7","708b2590f2979899"],"TimelineLite.totalTime()":["37d58fccb2afe6a1-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"js.Animation.totalTime()":["37d58fccb2afe6a1-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","37d58fccb2afe6a1-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","37d58fccb2afe6a1-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","37d58fccb2afe6a1-inherited-211a71fb195b2819","37d58fccb2afe6a1-inherited-52db442320b34fc1","37d58fccb2afe6a1"],"Gets sets position the playhead the totalDuration includes repeats repeatDelays (only TweenMax and TimelineMax).":["37d58fccb2afe6a1-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","37d58fccb2afe6a1-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","37d58fccb2afe6a1-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","37d58fccb2afe6a1-inherited-211a71fb195b2819","37d58fccb2afe6a1-inherited-52db442320b34fc1","37d58fccb2afe6a1"],"ColorPropsPlugin":["23b845c3016f0559"],"js.ColorPropsPlugin":["23b845c3016f0559"],"Plugins":["23b845c3016f0559","be137a434f5b4e08","7913694fbfa93c13","bac828fc726d4d82","28124149c0519430","43077a47946db3db","7bc5a8cd3cf25890","82b95bb606c34e2f","16d64b5b1b82fde8","2433928b0e0f6cc4","fb2d7be451025509","3d0f25beac1906b4","357645cd3e630097","0a6e62faf0a53059","4c5618b6dde74bd2","13df7c5ab97ce05d","5b09c1a25bf1df7e","447e2b0a637eb56f","091b70448f18262e","27db5e20e8bbb9ae"],"Allows animate color-related property any object (for DOM element properties, capabilities built CSSPlugin, you ColorPropsPlugin you&#039;re animating color properties of non-DOM elements, canvas library objects custom objects/properties). ":["23b845c3016f0559"],"SlowMo.getRatio()":["7fa11166b5591c60"],"js.SlowMo.getRatio()":["7fa11166b5591c60"],"[override] Translates tween&#039;s progress ratio the ease ratio.":["7fa11166b5591c60","4c00a0ea1a2df967","1299db89651318f1"],"CustomBounce.create()":["08efb16bbc092c14"],"js.CustomBounce.create()":["08efb16bbc092c14"],"Creates CustomBounce ease based parameters provide.":["08efb16bbc092c14"],"Docs Home":["root"],"Greensock, Animation, Platform, Javascript":["root"],"Meet Docs Super Menu The menu the left access to class the entire GreenSock API HTML5. Take peak GSAP to the docs for animation tools. Looking to add snazzy text effects? Check the tools the Text category. Select a class &hellip;":["root"],"VelocityTracker.addProp()":["bbc69448cde56863"],"js.VelocityTracker.addProp()":["bbc69448cde56863"],"Adds property track":["bbc69448cde56863"],"TweenLite.restart()":["db54f293b92ce54b-inherited-52db442320b34fc1"],"js.Animation.restart()":["db54f293b92ce54b-inherited-52db442320b34fc1","db54f293b92ce54b","db54f293b92ce54b-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","db54f293b92ce54b-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","db54f293b92ce54b-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","db54f293b92ce54b-inherited-211a71fb195b2819"],"Restarts begins playing beginning.":["db54f293b92ce54b-inherited-52db442320b34fc1","db54f293b92ce54b","db54f293b92ce54b-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","db54f293b92ce54b-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","db54f293b92ce54b-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","db54f293b92ce54b-inherited-211a71fb195b2819"],"SimpleTimeline.render()":["0891734c6084b33c"],"js.SimpleTimeline.render()":["0891734c6084b33c","0891734c6084b33c-inherited-2b3bb68a78e65fe7","0891734c6084b33c-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"renders":["0891734c6084b33c","0891734c6084b33c-inherited-2b3bb68a78e65fe7","0891734c6084b33c-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"TweenMax.to()":["a52aa2ad91d4ef68"],"js.TweenMax.to()":["a52aa2ad91d4ef68"],"[static] Static method creating TweenMax instance animates destination values (from the current values).":["a52aa2ad91d4ef68"],"TimelineMax.time()":["7b988d27511ca604"],"js.TimelineMax.time()":["7b988d27511ca604"],"[override] Gets sets local position the playhead (essentially the current time), including repeats or repeatDelays.":["7b988d27511ca604","22d710f5e23c3b66"],"Draggable.isThrowing":["37fa5f2f65e863e4"],"js.Draggable.isThrowing":["37fa5f2f65e863e4"],"Reports target Draggable thrown a ThrowPropsPlugin tween.":["37fa5f2f65e863e4"],"TweenMax.kill()":["9b20c27ddbcaa297-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"js.Animation.kill()":["9b20c27ddbcaa297-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","9b20c27ddbcaa297","9b20c27ddbcaa297-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","9b20c27ddbcaa297-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","9b20c27ddbcaa297-inherited-211a71fb195b2819","9b20c27ddbcaa297-inherited-52db442320b34fc1"],"Kills animation part depending the parameters.":["9b20c27ddbcaa297-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","9b20c27ddbcaa297","9b20c27ddbcaa297-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","9b20c27ddbcaa297-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","9b20c27ddbcaa297-inherited-211a71fb195b2819","9b20c27ddbcaa297-inherited-52db442320b34fc1"],"SimpleTimeline.data":["fd0b8307fd5118c6-inherited-211a71fb195b2819"],"js.Animation.data":["fd0b8307fd5118c6-inherited-211a71fb195b2819","fd0b8307fd5118c6-inherited-52db442320b34fc1","fd0b8307fd5118c6","fd0b8307fd5118c6-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","fd0b8307fd5118c6-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","fd0b8307fd5118c6-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"A place store data (initially populated vars.data exists).":["fd0b8307fd5118c6-inherited-211a71fb195b2819","fd0b8307fd5118c6-inherited-52db442320b34fc1","fd0b8307fd5118c6","fd0b8307fd5118c6-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","fd0b8307fd5118c6-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","fd0b8307fd5118c6-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"CustomEase.getSVGData()":["b387c2e659d8f05e"],"js.CustomEase.getSVGData()":["b387c2e659d8f05e","b387c2e659d8f05e-inherited-681f9501cd7f99b3","b387c2e659d8f05e-inherited-19160c04837df0bb"],"Calculates SVG <code>path</code> data string visualizing the supplied ease graphically. ":["b387c2e659d8f05e","b387c2e659d8f05e-inherited-681f9501cd7f99b3","b387c2e659d8f05e-inherited-19160c04837df0bb"],"CustomEase.get()":["24e00423129f1300"],"js.CustomEase.get()":["24e00423129f1300","24e00423129f1300-inherited-681f9501cd7f99b3","24e00423129f1300-inherited-19160c04837df0bb"],"Gets CustomEase instance the ID provided.":["24e00423129f1300","24e00423129f1300-inherited-681f9501cd7f99b3","24e00423129f1300-inherited-19160c04837df0bb"],"TimelineMax.paused()":["15ad1f9068bff51f-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"js.Animation.paused()":["15ad1f9068bff51f-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","15ad1f9068bff51f-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","15ad1f9068bff51f-inherited-211a71fb195b2819","15ad1f9068bff51f-inherited-52db442320b34fc1","15ad1f9068bff51f-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","15ad1f9068bff51f"],"Gets sets animation&#039;s paused state or the animation paused.":["15ad1f9068bff51f-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","15ad1f9068bff51f-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","15ad1f9068bff51f-inherited-211a71fb195b2819","15ad1f9068bff51f-inherited-52db442320b34fc1","15ad1f9068bff51f-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","15ad1f9068bff51f"],"VelocityTracker.track()":["dc81ae0b3f16fa34"],"js.VelocityTracker.track()":["dc81ae0b3f16fa34"],"[static] Allows velocity properties automatically tracked you you access anytime the VelocityTracker&#039;s getVelocity() method, myTracker.getVelocity(&quot;y&quot;).":["dc81ae0b3f16fa34"],"ThrowPropsPlugin.to()":["a159d08fd0e75293"],"js.ThrowPropsPlugin.to()":["a159d08fd0e75293"],"[static] Automatically analyzes throwProps variables (like velocity, max, min, resistance) and creates TweenLite instance duration.":["a159d08fd0e75293"],"SimpleTimeline.play()":["a8b5fe1cfbc57740-inherited-211a71fb195b2819"],"js.Animation.play()":["a8b5fe1cfbc57740-inherited-211a71fb195b2819","a8b5fe1cfbc57740","a8b5fe1cfbc57740-inherited-52db442320b34fc1","a8b5fe1cfbc57740-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","a8b5fe1cfbc57740-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","a8b5fe1cfbc57740-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"Begins playing forward, optionally specific time (by default playback begins from playhead is).":["a8b5fe1cfbc57740-inherited-211a71fb195b2819","a8b5fe1cfbc57740","a8b5fe1cfbc57740-inherited-52db442320b34fc1","a8b5fe1cfbc57740-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","a8b5fe1cfbc57740-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","a8b5fe1cfbc57740-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"Animation.timeline":["4e8b086407f4fb2c"],"js.Animation.timeline":["4e8b086407f4fb2c","4e8b086407f4fb2c-inherited-211a71fb195b2819","4e8b086407f4fb2c-inherited-52db442320b34fc1","4e8b086407f4fb2c-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","4e8b086407f4fb2c-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","4e8b086407f4fb2c-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"[Read-only] Parent timeline.":["4e8b086407f4fb2c","4e8b086407f4fb2c-inherited-211a71fb195b2819","4e8b086407f4fb2c-inherited-52db442320b34fc1","4e8b086407f4fb2c-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","4e8b086407f4fb2c-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","4e8b086407f4fb2c-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"TimelineMax.autoRemoveChildren":["a8583ff10d4f8c14-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"js.SimpleTimeline.autoRemoveChildren":["a8583ff10d4f8c14-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","a8583ff10d4f8c14-inherited-2b3bb68a78e65fe7","a8583ff10d4f8c14"],"If true, child tweens/timelines removed as complete.":["a8583ff10d4f8c14-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","a8583ff10d4f8c14-inherited-2b3bb68a78e65fe7","a8583ff10d4f8c14"],"MorphSVGPlugin.convertToPath()":["b5e39c1c0244c4f9"],"js.MorphSVGPlugin.convertToPath()":["b5e39c1c0244c4f9"],"There's utility function, MorphSVGPlugin.convertToPath() convert primitive shapes <circle>, <rect>, <ellipse>, <polygon>, <polyline>, <line> equivalent <path> that identical the original and swapped into the DOM":["b5e39c1c0244c4f9"],"TweenMax.selector":["00b17703b89cfb4b-inherited-7eebd4b20adcaecc"],"js.TweenLite.selector":["00b17703b89cfb4b-inherited-7eebd4b20adcaecc","00b17703b89cfb4b"],"[static] The selector engine (like jQuery) tween receives a string target, TweenLite.to(&quot;#myID&quot;, 1, {x:&quot;100px&quot;}).":["00b17703b89cfb4b-inherited-7eebd4b20adcaecc","00b17703b89cfb4b"],"TimelineLite.from()":["078881c6d928c5cf"],"js.TimelineLite.from()":["078881c6d928c5cf","078881c6d928c5cf-inherited-32bc2e8f667c28b7"],"Adds TweenLite.from() tween the timeline (or the &quot;position&quot; parameter) - a convenience method accomplishes the add( TweenLite.from(...) ) code.":["078881c6d928c5cf","078881c6d928c5cf-inherited-32bc2e8f667c28b7"],"TimelineLite.reverse()":["652fc9fd0bc84808-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"js.Animation.reverse()":["652fc9fd0bc84808-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","652fc9fd0bc84808-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","652fc9fd0bc84808-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","652fc9fd0bc84808-inherited-211a71fb195b2819","652fc9fd0bc84808-inherited-52db442320b34fc1","652fc9fd0bc84808"],"Reverses playback aspects animation oriented including, example, tween&#039;s ease.":["652fc9fd0bc84808-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","652fc9fd0bc84808-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","652fc9fd0bc84808-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","652fc9fd0bc84808-inherited-211a71fb195b2819","652fc9fd0bc84808-inherited-52db442320b34fc1","652fc9fd0bc84808"],"Draggable.pointerX":["4f8bff36fbe23240"],"js.Draggable.pointerX":["4f8bff36fbe23240"],"[read-only] The (horizontal) position pointer (mouse touch) the Draggable&#039;s event (like event.pageX).":["4f8bff36fbe23240"],"Animation.eventCallback()":["7e0c6f182a9fa2db"],"js.Animation.eventCallback()":["7e0c6f182a9fa2db","7e0c6f182a9fa2db-inherited-211a71fb195b2819","7e0c6f182a9fa2db-inherited-52db442320b34fc1","7e0c6f182a9fa2db-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","7e0c6f182a9fa2db-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","7e0c6f182a9fa2db-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"Gets sets event callback &quot;onComplete&quot;, &quot;onUpdate&quot;, &quot;onStart&quot;, &quot;onReverseComplete&quot; or &quot;onRepeat&quot; (onRepeat applies TweenMax or TimelineMax instances) parameters passed to that callback.":["7e0c6f182a9fa2db","7e0c6f182a9fa2db-inherited-211a71fb195b2819","7e0c6f182a9fa2db-inherited-52db442320b34fc1","7e0c6f182a9fa2db-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7","7e0c6f182a9fa2db-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","7e0c6f182a9fa2db-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"TweenLite.lagSmoothing()":["01cb3301c2555b06"],"js.TweenLite.lagSmoothing()":["01cb3301c2555b06","01cb3301c2555b06-inherited-7eebd4b20adcaecc"],"Permits control time elapses ticks (updates) engine, adjusting the core timing mechanism to compensate avoid &quot;jumps&quot;. ":["01cb3301c2555b06","01cb3301c2555b06-inherited-7eebd4b20adcaecc"],"Animation.progress()":["7bb4870bba9c525d"],"js.Animation.progress()":["7bb4870bba9c525d","7bb4870bba9c525d-inherited-211a71fb195b2819","7bb4870bba9c525d-inherited-52db442320b34fc1","7bb4870bba9c525d-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"Gets sets animations&#039;s progress 0 1 indicating the position the virtual playhead (excluding repeats) 0 is the beginning, 0.5 is at the halfway point, and 1 is at the (complete).":["7bb4870bba9c525d","7bb4870bba9c525d-inherited-211a71fb195b2819","7bb4870bba9c525d-inherited-52db442320b34fc1","7bb4870bba9c525d-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"SimpleTimeline.add()":["f3d0f009919eaed3"],"js.SimpleTimeline.add()":["f3d0f009919eaed3"],"Adds TweenLite, TweenMax, TimelineLite, TimelineMax instance timeline a specific time.":["f3d0f009919eaed3"],"TweenMax.fromTo()":["8ecc7c0172b03069"],"js.TweenMax.fromTo()":["8ecc7c0172b03069"],"[static] Static method creating TweenMax instance define starting values (as opposed to to() and from() tweens based the target&#039;s current values the other).":["8ecc7c0172b03069"],"TimelineLite.to()":["dd5daf294b523c5b"],"js.TimelineLite.to()":["dd5daf294b523c5b","dd5daf294b523c5b-inherited-32bc2e8f667c28b7"],"Adds TweenLite.to() tween the timeline (or the &quot;position&quot; parameter) - a convenience method accomplishes the add( TweenLite.to(...) ) code.":["dd5daf294b523c5b","dd5daf294b523c5b-inherited-32bc2e8f667c28b7"],"TweenMax.repeat()":["1b0dafbb2fcc15bd"],"js.TweenMax.repeat()":["1b0dafbb2fcc15bd"],"Gets sets number times the tween repeat iteration.":["1b0dafbb2fcc15bd"],"TweenMax.pauseAll()":["3d2718e5d3fe06be"],"js.TweenMax.pauseAll()":["3d2718e5d3fe06be"],"[static] [deprecated] Pauses tweens and/or delayedCalls/callbacks and/or timelines.":["3d2718e5d3fe06be"],"Back.easeInOut":["655846b8e15c420b"],"js.Back.easeInOut":["655846b8e15c420b"],"[static] Eases overshoot, initially dipping starting accelerating the end, overshooting and easing out.":["655846b8e15c420b"],"TweenLite.from()":["0f1a0aaf90af74b1"],"js.TweenLite.from()":["0f1a0aaf90af74b1"],"[static] Static method creating TweenLite instance tweens - define BEGINNING values the current values the destination values great for animating objects the screen you set initially the you them the the tween and animate elsewhere.":["0f1a0aaf90af74b1"],"Draggable.target":["78fa71d7884ceae5"],"js.Draggable.target":["78fa71d7884ceae5"],"The object dragged.":["78fa71d7884ceae5"],"RoughEase.RoughEase()":["10948e3702698b9c"],"js.RoughEase.RoughEase()":["10948e3702698b9c"],"Power2":["059d5eab36bbdd55"],"js.Power2":["059d5eab36bbdd55"],"Provides easeIn, easeOut, easeInOut power (or strength) 2 identical Cubic with a intuitive name. The more power, more exaggerated the easing effect. Using a numeric approach the experimenting easier.":["059d5eab36bbdd55"],"TimelineLite.useFrames()":["d3b7ad527e13b7fa"],"js.TimelineLite.useFrames()":["d3b7ad527e13b7fa","d3b7ad527e13b7fa-inherited-32bc2e8f667c28b7"],"[READ-ONLY] If true, timeline&#039;s timing mode frames-based seconds.":["d3b7ad527e13b7fa","d3b7ad527e13b7fa-inherited-32bc2e8f667c28b7"],"BezierPlugin.bezierThrough()":["8226759a93db7a20"],"js.BezierPlugin.bezierThrough()":["8226759a93db7a20"],"[static] Takes array objects (could Points, be generic objects number properties match terms of names of properties [{x:0, y:0, scaleX:0.5}, {x:100, y:-200, scaleX:1.2}, {x:300, y:20, scaleX:0.8}]) plots Bezier segments THROUGH values and returns an array generic object Bezier segment.":["8226759a93db7a20"],"TimelineMax.clear()":["55a9f099bdcda14c-inherited-32bc2e8f667c28b7"],"js.TimelineLite.clear()":["55a9f099bdcda14c-inherited-32bc2e8f667c28b7","55a9f099bdcda14c"],"Empties timeline tweens, timelines, callbacks (and optionally labels too).":["55a9f099bdcda14c-inherited-32bc2e8f667c28b7","55a9f099bdcda14c"],"TweenMax.invalidate()":["14102df5f069df3e"],"js.TweenMax.invalidate()":["14102df5f069df3e"],"[override] Clears initialization data (like starting/ending values tweens) if, example, restart tween reverting to any previously recorded starting values.":["14102df5f069df3e","7ae217fd46c941b8","dd5fed4d3955bfea","0c45afba50900d5a"],"TimelineLite.clear()":["55a9f099bdcda14c"],"TimelineMax.useFrames()":["d3b7ad527e13b7fa-inherited-32bc2e8f667c28b7"],"TimelineLite.autoRemoveChildren":["a8583ff10d4f8c14-inherited-2b3bb68a78e65fe7"],"TimelineMax.reverse()":["652fc9fd0bc84808-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"Draggable.kill()":["f8dba22fcae52796"],"js.Draggable.kill()":["f8dba22fcae52796"],"Disables Draggable instance removes the internal lookup table it eligible garbage collection and it dragged anymore (unless enable() is called).":["f8dba22fcae52796"],"TimelineMax.from()":["078881c6d928c5cf-inherited-32bc2e8f667c28b7"],"Linear.easeInOut":["515e2689add7a2d1"],"js.Linear.easeInOut":["515e2689add7a2d1"],"[static] Linear ease acceleration deceleration":["515e2689add7a2d1","c1554e19d34a341f","e96a5eb3d0ae1709"],"SimpleTimeline.progress()":["7bb4870bba9c525d-inherited-211a71fb195b2819"],"SimpleTimeline.eventCallback()":["7e0c6f182a9fa2db-inherited-211a71fb195b2819"],"Animation.play()":["a8b5fe1cfbc57740"],"Sine.easeInOut":["0569061e32ebf041"],"js.Sine.easeInOut":["0569061e32ebf041"],"[static] Eases slight acceleration/deceleration.":["0569061e32ebf041"],"Power0.easeInOut":["23bff1d0d1d4314b"],"js.Power0.easeInOut":["23bff1d0d1d4314b"],"[static] eases power 0 (linear).":["23bff1d0d1d4314b"],"TweenLite.data":["fd0b8307fd5118c6-inherited-52db442320b34fc1"],"TimelineMax.to()":["dd5daf294b523c5b-inherited-32bc2e8f667c28b7"],"Power1.easeIn":["08c9c08b99f1928d"],"js.Power1.easeIn":["08c9c08b99f1928d"],"[static] Eases power 1":["08c9c08b99f1928d","6206e87e65b57251"],"SimpleTimeline.timeline":["4e8b086407f4fb2c-inherited-211a71fb195b2819"],"TimelineLite.getTweensOf()":["708b2590f2979899"],"TweenLite.play()":["a8b5fe1cfbc57740-inherited-52db442320b34fc1"],"TimelineLite.paused()":["15ad1f9068bff51f-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"TweenLite.defaultOverwrite":["e7f6ebafb382a8cc"],"js.TweenLite.defaultOverwrite":["e7f6ebafb382a8cc","e7f6ebafb382a8cc-inherited-7eebd4b20adcaecc"],"[static] Provides An easy change default overwrite mode.":["e7f6ebafb382a8cc","e7f6ebafb382a8cc-inherited-7eebd4b20adcaecc"],"TweenMax.killDelayedCallsTo()":["0b7f1e0ec646b3a7"],"js.TweenMax.killDelayedCallsTo()":["0b7f1e0ec646b3a7"],"[static] Immediately kills delayedCalls function.":["0b7f1e0ec646b3a7","64346e163a42da5f"],"TimelineMax.invalidate()":["7ae217fd46c941b8"],"js.TimelineMax.invalidate()":["7ae217fd46c941b8"],"Cubic.easeInOut":["a34d8ad8d2f59e97"],"js.Cubic.easeInOut":["a34d8ad8d2f59e97"],"[static] Eases power 2":["a34d8ad8d2f59e97","3abce597eeda187e","b2858d09588f2384","f6d4c1c141e1b351","0cad0bf3209f5092","79c15370e7fe03de"],"TimelineMax.getActive()":["10d088592b8a6983"],"js.TimelineMax.getActive()":["10d088592b8a6983"],"Returns tweens/timelines active the timeline, meaning the timeline&#039;s playhead positioned the child tween/timeline the child isn&#039;t paused.":["10d088592b8a6983"],"Expo.easeInOut":["55855c7922de0e47"],"js.Expo.easeInOut":["55855c7922de0e47"],"CSSPlugin":["be137a434f5b4e08"],"js.CSSPlugin":["be137a434f5b4e08"],"CSSPlugin enables animation DOM element&#039;s CSS properties &quot;top&quot;, &quot;left&quot;, &quot;backgroundColor&quot;, as 2D 3D transforms and others.":["be137a434f5b4e08"],"TimelineMax.totalTime()":["37d58fccb2afe6a1-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"TimelineMax.getLabelsArray()":["22c0e0776a5fa894"],"js.TimelineMax.getLabelsArray()":["22c0e0776a5fa894"],"Returns Array label objects, &quot;time&quot; &quot;name&quot; property, order occur in the timeline.":["22c0e0776a5fa894"],"TimelineLite.invalidate()":["dd5fed4d3955bfea"],"js.TimelineLite.invalidate()":["dd5fed4d3955bfea"],"TweenMax.defaultEase":["4dd34ae7cc4df452-inherited-7eebd4b20adcaecc"],"js.TweenLite.defaultEase":["4dd34ae7cc4df452-inherited-7eebd4b20adcaecc","4dd34ae7cc4df452"],"[static] Provides An easy change default easing equation.":["4dd34ae7cc4df452-inherited-7eebd4b20adcaecc","4dd34ae7cc4df452"],"Draggable.pointerEvent":["83fa31bf259e7bc7"],"js.Draggable.pointerEvent":["83fa31bf259e7bc7"],"[read-only] The pointer event (either mouse event touch event) affected Draggable instance.":["83fa31bf259e7bc7"],"Animation.data":["fd0b8307fd5118c6"],"Physics2DPlugin":["7913694fbfa93c13"],"js.Physics2DPlugin":["7913694fbfa93c13"],"Apply physics properties animations. ":["7913694fbfa93c13"],"TweenMax.reversed()":["d708d783bf75b7f9-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"js.Animation.reversed()":["d708d783bf75b7f9-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","d708d783bf75b7f9-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","d708d783bf75b7f9","d708d783bf75b7f9-inherited-211a71fb195b2819","d708d783bf75b7f9-inherited-52db442320b34fc1","d708d783bf75b7f9-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"Gets sets animation&#039;s reversed state or the animation played backwards.":["d708d783bf75b7f9-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","d708d783bf75b7f9-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","d708d783bf75b7f9","d708d783bf75b7f9-inherited-211a71fb195b2819","d708d783bf75b7f9-inherited-52db442320b34fc1","d708d783bf75b7f9-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"TimelineMax.pause()":["96fc1d850d4a51e6-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"CustomEase.getRatio()":["02cf505adaa3c1db"],"js.CustomEase.getRatio()":["02cf505adaa3c1db","02cf505adaa3c1db-inherited-681f9501cd7f99b3","02cf505adaa3c1db-inherited-19160c04837df0bb"],"Converts linear progress (0-1) eased value.":["02cf505adaa3c1db","02cf505adaa3c1db-inherited-681f9501cd7f99b3","02cf505adaa3c1db-inherited-19160c04837df0bb"],"BezierPlugin.quadraticToCubic()":["da3bf77d4e5fdbda"],"js.BezierPlugin.quadraticToCubic()":["da3bf77d4e5fdbda"],"[static] Returns Cubic equivalent Quadratic Bezier.":["da3bf77d4e5fdbda"],"Draggable.y":["eab7ad5c38079651"],"js.Draggable.y":["eab7ad5c38079651"],"[read-only] The current (vertical) position Draggable instance.":["eab7ad5c38079651"],"TimelineLite.endTime()":["ac42870b8c3fb694-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"TweenMax.isActive()":["cdfc78d10c0d9317-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"js.Animation.isActive()":["cdfc78d10c0d9317-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","cdfc78d10c0d9317-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","cdfc78d10c0d9317","cdfc78d10c0d9317-inherited-211a71fb195b2819","cdfc78d10c0d9317-inherited-52db442320b34fc1","cdfc78d10c0d9317-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"Indicates animation active (meaning the virtual playhead is actively moving instance&#039;s time span is not paused, ancestor timelines).":["cdfc78d10c0d9317-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","cdfc78d10c0d9317-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","cdfc78d10c0d9317","cdfc78d10c0d9317-inherited-211a71fb195b2819","cdfc78d10c0d9317-inherited-52db442320b34fc1","cdfc78d10c0d9317-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"SimpleTimeline.delay()":["f35957809b52dfd2-inherited-211a71fb195b2819"],"Draggable.endY":["6151d8080d89dd43"],"js.Draggable.endY":["6151d8080d89dd43"],"The (vertical) position Draggable instance calculated as the mouse/touch is released drag, meaning predict precisely land after a throwProps flick.":["6151d8080d89dd43"],"Quint.easeIn":["54ae9c54fa1f129c"],"js.Quint.easeIn":["54ae9c54fa1f129c"],"[static] Eases power 4.":["54ae9c54fa1f129c","9f6a01699fc50e73","7e1eddf0750f462e","edeb564de2d4abf1","72e083392b443236","7824c0e53c911bbe"],"TimelineMax.addLabel()":["a3d5652d51086bea-inherited-32bc2e8f667c28b7"],"Strong":["c2327a2ee1c89b0c"],"js.Strong":["c2327a2ee1c89b0c"],"Provides easeIn, easeOut, easeInOut power (or strength) 4 identical Power4 ease. The power, the more exaggerated the easing effect. Using a numeric approach Power4 of Strong experimenting easier and the code reads more intuitively.":["c2327a2ee1c89b0c"],"Draggable.lockAxis":["c6ed6b795d19d3bd"],"js.Draggable.lockAxis":["c6ed6b795d19d3bd"],"If true, dragging 2 pixels direction (horizontally vertically) lock movement axis that element dragged that direction (horizontally or vertically, the initial movement).":["c6ed6b795d19d3bd"],"SimpleTimeline.seek()":["b6d7efcbb07722e0-inherited-211a71fb195b2819"],"TimelineMax.getChildren()":["5103496262822a61-inherited-32bc2e8f667c28b7"],"TweenLite.progress()":["7bb4870bba9c525d-inherited-52db442320b34fc1"],"SimpleTimeline":["211a71fb195b2819"],"js.SimpleTimeline":["211a71fb195b2819"],"":["211a71fb195b2819","11f92408d2609969","7bc5a8cd3cf25890","16d64b5b1b82fde8","fb2d7be451025509","fb2d7be451025509","3d0f25beac1906b4","43cdb51b9b63b1b9","43cdb51b9b63b1b9","8510bec84f8f5ab3","8510bec84f8f5ab3","ced2d2c7aaaa4d5f","eb1821730d324359","4c5618b6dde74bd2","5190c7bdac5c1b1c","5190c7bdac5c1b1c","5b09c1a25bf1df7e","54a27bdcea66a8b2","54a27bdcea66a8b2","447e2b0a637eb56f"],"TweenLite.eventCallback()":["7e0c6f182a9fa2db-inherited-52db442320b34fc1"],"SimpleTimeline.totalDuration()":["8ecf8286d1667a67-inherited-211a71fb195b2819"],"Animation":["11f92408d2609969","32bc2e8f667c28b7","52db442320b34fc1","43077a47946db3db","2433928b0e0f6cc4","2b3bb68a78e65fe7","7eebd4b20adcaecc"],"js.Animation":["11f92408d2609969"],"TimelineLite.seek()":["0fc1a8aeb91b3bc5"],"TimelineLite.set()":["fd9dbda283638161"],"Power4.easeInOut":["83a96a07388dba2e"],"js.Power4.easeInOut":["83a96a07388dba2e"],"[static] Eases power 4":["83a96a07388dba2e","db8d74151be49b20","c059f076d35f6211"],"SimpleTimeline.smoothChildTiming":["180106cf49a52891"],"js.SimpleTimeline.smoothChildTiming":["180106cf49a52891","180106cf49a52891-inherited-2b3bb68a78e65fe7","180106cf49a52891-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"Controls child tweens/timelines repositioned automatically (changing startTime) order maintain smooth playback properties are changed on-the-fly.":["180106cf49a52891","180106cf49a52891-inherited-2b3bb68a78e65fe7","180106cf49a52891-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"SimpleTimeline.totalProgress()":["43a03109965e7d4e-inherited-211a71fb195b2819"],"TweenLite.timeline":["4e8b086407f4fb2c-inherited-52db442320b34fc1"],"Linear.easeNone":["4919ddfb10ad7aa4"],"js.Linear.easeNone":["4919ddfb10ad7aa4"],"[static] Linear ease acceleration deceleration (for compatibility)":["4919ddfb10ad7aa4"],"TimelineMax":["32bc2e8f667c28b7"],"js.TimelineMax":["32bc2e8f667c28b7"],"Sequencing":["32bc2e8f667c28b7","2b3bb68a78e65fe7"],"TimelineMax extends TimelineLite, offering functionality (but non-essential) features repeat, repeatDelay, yoyo, currentLabel(), tweenTo(), tweenFromTo(), getLabelAfter(), getLabelBefore(), getActive() more.":["32bc2e8f667c28b7"],"TimelineLite.duration()":["e949a7537e48535a"],"js.TimelineLite.duration()":["e949a7537e48535a","e949a7537e48535a-inherited-32bc2e8f667c28b7"],"[override] Gets timeline&#039;s duration or, setter, adjusts the timeline&#039;s timeScale fit the duration.":["e949a7537e48535a","e949a7537e48535a-inherited-32bc2e8f667c28b7"],"TweenMax.timeScale()":["7334cca40467aa44-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"js.Animation.timeScale()":["7334cca40467aa44-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","7334cca40467aa44-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","7334cca40467aa44-inherited-211a71fb195b2819","7334cca40467aa44","7334cca40467aa44-inherited-52db442320b34fc1","7334cca40467aa44-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"Factor that&#039;s scale time animation 1 = normal speed (the default), 0.5 = speed, 2 = double speed, etc.":["7334cca40467aa44-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","7334cca40467aa44-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","7334cca40467aa44-inherited-211a71fb195b2819","7334cca40467aa44","7334cca40467aa44-inherited-52db442320b34fc1","7334cca40467aa44-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"TimelineLite.totalProgress()":["43a03109965e7d4e-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"TimelineLite.smoothChildTiming":["180106cf49a52891-inherited-2b3bb68a78e65fe7"],"TweenMax.resume()":["d185bba975b21413-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"js.Animation.resume()":["d185bba975b21413-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","d185bba975b21413-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","d185bba975b21413-inherited-211a71fb195b2819","d185bba975b21413","d185bba975b21413-inherited-52db442320b34fc1","d185bba975b21413-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"Resumes playing altering direction (forward reversed), optionally jumping specific time first.":["d185bba975b21413-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","d185bba975b21413-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7","d185bba975b21413-inherited-211a71fb195b2819","d185bba975b21413","d185bba975b21413-inherited-52db442320b34fc1","d185bba975b21413-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"Animation.restart()":["db54f293b92ce54b"],"TweenMax.target":["d502fa3af383145d-inherited-7eebd4b20adcaecc"],"js.TweenLite.target":["d502fa3af383145d-inherited-7eebd4b20adcaecc","d502fa3af383145d"],"[READ-ONLY] Target object (or array objects) properties tween affects.":["d502fa3af383145d-inherited-7eebd4b20adcaecc","d502fa3af383145d"],"TimelineMax.call()":["d19482f5b1cfd929-inherited-32bc2e8f667c28b7"],"js.TimelineLite.call()":["d19482f5b1cfd929-inherited-32bc2e8f667c28b7","d19482f5b1cfd929"],"Adds callback the timeline (or the &quot;position&quot; parameter) - a convenience method accomplishes the add( TweenLite.delayedCall(...) ) code.":["d19482f5b1cfd929-inherited-32bc2e8f667c28b7","d19482f5b1cfd929"],"Draggable.endX":["d5a05b37afbe9b9a"],"js.Draggable.endX":["d5a05b37afbe9b9a"],"The (horizontal) position Draggable instance calculated as the mouse/touch is released drag, meaning predict precisely land after a throwProps flick.":["d5a05b37afbe9b9a"],"RoundPropsPlugin":["bac828fc726d4d82"],"js.RoundPropsPlugin":["bac828fc726d4d82"],"Rounds tweened values the nearest integer.":["bac828fc726d4d82"],"Linear.Linear()":["f8a5c0f959c5c320"],"js.Linear.Linear()":["f8a5c0f959c5c320"],"SimpleTimeline.endTime()":["ac42870b8c3fb694-inherited-211a71fb195b2819"],"MorphSVGPlugin":["28124149c0519430"],"js.MorphSVGPlugin":["28124149c0519430"],"MorphSVGPlugin advanced control tweens morph SVG paths. ":["28124149c0519430"],"TweenLite.delay()":["f35957809b52dfd2-inherited-52db442320b34fc1"],"Power3.easeIn":["dd5665cbddb9aa0d"],"js.Power3.easeIn":["dd5665cbddb9aa0d"],"[static] Eases power 3":["dd5665cbddb9aa0d","5aff71c5f05c1b9e","ae081698f5101041"],"CustomEase.create()":["cb1da3c33a8e7bb2"],"js.CustomEase.create()":["cb1da3c33a8e7bb2"],"Creates CustomEase instance":["cb1da3c33a8e7bb2"],"TimelineMax.resume()":["d185bba975b21413-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"TimelineLite.delay()":["f35957809b52dfd2-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"TweenLite.invalidate()":["0c45afba50900d5a"],"js.TweenLite.invalidate()":["0c45afba50900d5a"],"TweenLite.delayedCall()":["6cbc76eab73a1780"],"js.TweenLite.delayedCall()":["6cbc76eab73a1780"],"[static] Provides simple call a function a set amount time (or frames).":["6cbc76eab73a1780","6f77f2839c53472f"],"TimelineMax.removePause()":["58e2f543b70f3422"],"js.TimelineMax.removePause()":["58e2f543b70f3422"],"Removes pauses added timeline TimelineMax.addPause(). ":["58e2f543b70f3422"],"Quart":["3eab3f172dae806f"],"js.Quart":["3eab3f172dae806f"],"Provides easeIn, easeOut, easeInOut power (or strength) 3 identical Power2 ease. The power, the more exaggerated the easing effect. Using a numeric approach Power3 of Quart experimenting easier and the code reads more intuitively.":["3eab3f172dae806f"],"Draggable.maxRotation":["b1848b9fa107b520"],"js.Draggable.maxRotation":["b1848b9fa107b520"],"[read-only] [only applies type:&quot;rotation&quot;] When bounds applied, maxRotation refers to maximum &quot;legal&quot; rotation.":["b1848b9fa107b520"],"TimelineMax.timeScale()":["7334cca40467aa44-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"TimelineLite.staggerTo()":["85fd7bd3a68921cd"],"js.TimelineLite.staggerTo()":["85fd7bd3a68921cd","85fd7bd3a68921cd-inherited-32bc2e8f667c28b7"],"Tweens array targets common set of destination values, staggers start times a amount of time, creating an evenly-spaced sequence a surprisingly small amount of code.":["85fd7bd3a68921cd","85fd7bd3a68921cd-inherited-32bc2e8f667c28b7"],"TweenLite.seek()":["b6d7efcbb07722e0-inherited-52db442320b34fc1"],"TweenLite":["52db442320b34fc1"],"js.TweenLite":["52db442320b34fc1"],"TweenLite extremely fast, lightweight, flexible animation tool serves foundation the GreenSock Animation Platform (GSAP). A TweenLite instance handles tweening properties of object (or array of objects) time.":["52db442320b34fc1"],"TweenLite.totalDuration()":["8ecf8286d1667a67-inherited-52db442320b34fc1"],"BezierPlugin":["43077a47946db3db"],"js.BezierPlugin":["43077a47946db3db"],"Animate virtually property (or properties) curved Bezier path define array points/values.":["43077a47946db3db"],"SimpleTimeline.paused()":["15ad1f9068bff51f-inherited-211a71fb195b2819"],"TextPlugin":["7bc5a8cd3cf25890"],"js.TextPlugin":["7bc5a8cd3cf25890"],"Quad.easeIn":["6c323162f3657de1"],"js.Quad.easeIn":["6c323162f3657de1"],"[static] Eases power 1.":["6c323162f3657de1","c9e6d8a4b4e56614","ef46b9dc2d56104b","f878aae254cc6211"],"Draggable.addEventListener()":["e25e10e45b7afcd0"],"js.Draggable.addEventListener()":["e25e10e45b7afcd0"],"Registers function called time a type event occurs, &quot;drag&quot; &quot;dragEnd&quot;. ":["e25e10e45b7afcd0"],"TweenLite.killTweensOf()":["e4776d5c407778cf"],"js.TweenLite.killTweensOf()":["e4776d5c407778cf"],"[static] Kills tweens (or specific tweening properties) object delayedCalls a particular function.":["e4776d5c407778cf"],"TimelineLite.getLabelTime()":["6428cc1a8c9024c6"],"js.TimelineLite.getLabelTime()":["6428cc1a8c9024c6","6428cc1a8c9024c6-inherited-32bc2e8f667c28b7"],"Returns time label.":["6428cc1a8c9024c6","6428cc1a8c9024c6-inherited-32bc2e8f667c28b7"],"TimelineLite.staggerFrom()":["c67479a40fbed683"],"js.TimelineLite.staggerFrom()":["c67479a40fbed683","c67479a40fbed683-inherited-32bc2e8f667c28b7"],"Tweens array targets common set of destination values (using current values the destination), staggers start times a amount of time, creating an evenly-spaced sequence a surprisingly small amount of code.":["c67479a40fbed683","c67479a40fbed683-inherited-32bc2e8f667c28b7"],"TweenLite.totalProgress()":["43a03109965e7d4e-inherited-52db442320b34fc1"],"SplitText.lines":["dadae713b9b4342e"],"js.SplitText.lines":["dadae713b9b4342e"],"An array lines&#039; raw DOM element split apart.":["dadae713b9b4342e"],"SimpleTimeline.duration()":["560295553a39dad1-inherited-211a71fb195b2819"],"js.Animation.duration()":["560295553a39dad1-inherited-211a71fb195b2819","560295553a39dad1-inherited-52db442320b34fc1","560295553a39dad1-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","560295553a39dad1"],"Gets sets animation&#039;s duration, including repeats or repeatDelays (which TweenMax TimelineMax).":["560295553a39dad1-inherited-211a71fb195b2819","560295553a39dad1-inherited-52db442320b34fc1","560295553a39dad1-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc","560295553a39dad1"],"Quart.easeIn":["705ae1ddfe7bf523"],"js.Quart.easeIn":["705ae1ddfe7bf523"],"[static] Eases power 3.":["705ae1ddfe7bf523","4f68c600370ab277","eeeab17448587b02"],"Strong.easeOut":["9f6a01699fc50e73"],"js.Strong.easeOut":["9f6a01699fc50e73"],"Draggable.enable()":["5857a6c52c8e3115"],"js.Draggable.enable()":["5857a6c52c8e3115"],"Enables Draggable instance.":["5857a6c52c8e3115"],"Draggable.minRotation":["efaa84c28aa97dc5"],"js.Draggable.minRotation":["efaa84c28aa97dc5"],"[read-only] [only applies type:&quot;rotation&quot;] When bounds applied, minRotation refers to minimum &quot;legal&quot; rotation.":["efaa84c28aa97dc5"],"Draggable.create()":["c541ba25c5706fee"],"js.Draggable.create()":["c541ba25c5706fee"],"[static] Provides flexible create Draggable instances constructor (new Draggable(...)) the Draggable.create() method accommodate multiple elements (either array elements a jQuery object results) or selector text &quot;.yourClass&quot; fed to TweenLite.selector (defaults to jQuery it&#039;s loaded).":["c541ba25c5706fee"],"Linear":["0c466d8095583e88"],"js.Linear":["0c466d8095583e88"],"Linear ease acceleration deceleration. Linear identical Power0.":["0c466d8095583e88"],"TimelineLite.eventCallback()":["7e0c6f182a9fa2db-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"Power1.easeInOut":["6206e87e65b57251"],"js.Power1.easeInOut":["6206e87e65b57251"],"Quart.easeOut":["4f68c600370ab277"],"js.Quart.easeOut":["4f68c600370ab277"],"TimelineMax.reversed()":["d708d783bf75b7f9-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"TimelineLite.progress()":["7bb4870bba9c525d-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"SimpleTimeline.autoRemoveChildren":["a8583ff10d4f8c14"],"TweenMax.pause()":["96fc1d850d4a51e6-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"TweenMax.staggerFromTo()":["edb1ee784263b5b1"],"js.TweenMax.staggerFromTo()":["edb1ee784263b5b1"],"[static] Tweens array targets common set of destination values a common set of destination values, staggers start times a amount of time, creating an evenly-spaced sequence a surprisingly small amount of code.":["edb1ee784263b5b1"],"Draggable.maxY":["0d7cccc5009c65f7"],"js.Draggable.maxY":["0d7cccc5009c65f7"],"[read-only] When bounds applied, maxY refers maximum &quot;legal&quot; the vertical property (either &quot;y&quot; &quot;top&quot;, depending type the Draggable is).":["0d7cccc5009c65f7"],"Animation.startTime()":["e646e51de97ab747"],"TweenLite.ticker":["823bbb81bdf15585"],"js.TweenLite.ticker":["823bbb81bdf15585"],"[static] The object dispatches &quot;tick&quot; event time engine updates, making easy add listener(s) to run custom logic each update (great for game developers).":["823bbb81bdf15585","0840452593dd9b59"],"TimelineLite.timeline":["4e8b086407f4fb2c-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"Animation.vars":["1d9a881066fb186e"],"TimelineMax.isActive()":["cdfc78d10c0d9317-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"TweenLite.killDelayedCallsTo()":["64346e163a42da5f"],"js.TweenLite.killDelayedCallsTo()":["64346e163a42da5f"],"ModifiersPlugin":["82b95bb606c34e2f"],"js.ModifiersPlugin":["82b95bb606c34e2f"],"ModifiersPlugin intercepts values GSAP apply update (&quot;tick&quot;), passes function run custom logic return (great snapping, clamping, wrapping, dynamic effects).":["82b95bb606c34e2f"],"TweenLite.getTweensOf()":["2732aa6fd1292931"],"js.TweenLite.getTweensOf()":["2732aa6fd1292931"],"[static] Returns array tweens target (or group of targets) released garbage collection typically a seconds the tween completes.":["2732aa6fd1292931","c100119126b4d17b"],"Elastic.easeOut":["7e3df7d80af0b0bb"],"js.Elastic.easeOut":["7e3df7d80af0b0bb"],"[static] Eases sine wave starts fast decelerates time.":["7e3df7d80af0b0bb"],"Power3.easeInOut":["5aff71c5f05c1b9e"],"js.Power3.easeInOut":["5aff71c5f05c1b9e"],"TimelineMax.add()":["fb3630bc7fd65dd2-inherited-32bc2e8f667c28b7"],"js.TimelineLite.add()":["fb3630bc7fd65dd2-inherited-32bc2e8f667c28b7","fb3630bc7fd65dd2"],"[override] Adds tween, timeline, callback, label (or array them) timeline.":["fb3630bc7fd65dd2-inherited-32bc2e8f667c28b7","fb3630bc7fd65dd2"],"TweenMax.time()":["22d710f5e23c3b66"],"js.TweenMax.time()":["22d710f5e23c3b66"],"TweenLite.endTime()":["ac42870b8c3fb694-inherited-52db442320b34fc1"],"TweenMax.onOverwrite":["b030a6a5f8623c77-inherited-7eebd4b20adcaecc"],"js.TweenLite.onOverwrite":["b030a6a5f8623c77-inherited-7eebd4b20adcaecc","b030a6a5f8623c77"],"[static] A function called tween overwritten tween (great debugging). ":["b030a6a5f8623c77-inherited-7eebd4b20adcaecc","b030a6a5f8623c77"],"Ease.getRatio()":["56b233da235302db"],"js.Ease.getRatio()":["56b233da235302db"],"Translates tween&#039;s progress ratio the ease ratio.":["56b233da235302db","0bce3fc5ec3e76b0"],"TimelineMax.addCallback()":["bec60f6cd60ff057"],"js.TimelineMax.addCallback()":["bec60f6cd60ff057"],"Inserts callback a position.":["bec60f6cd60ff057"],"TimelineMax.remove()":["d49e46f2e8270a08-inherited-32bc2e8f667c28b7"],"js.TimelineLite.remove()":["d49e46f2e8270a08-inherited-32bc2e8f667c28b7","d49e46f2e8270a08"],"Removes tween, timeline, callback, label (or array them) timeline.":["d49e46f2e8270a08-inherited-32bc2e8f667c28b7","d49e46f2e8270a08"],"TweenMax.totalTime()":["37d58fccb2afe6a1-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"CustomWiggle.getRatio()":["02cf505adaa3c1db-inherited-681f9501cd7f99b3"],"CustomWiggle.create()":["54ddb48cbc201e21"],"js.CustomWiggle.create()":["54ddb48cbc201e21"],"Create wiggle ease adjusting a parameters.<br />\r\n<br />\r\n":["54ddb48cbc201e21"],"TweenMax.reverse()":["652fc9fd0bc84808-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"TweenLite.paused()":["15ad1f9068bff51f-inherited-52db442320b34fc1"],"TimelineMax.exportRoot()":["3ba39b4db90dc9ba-inherited-32bc2e8f667c28b7"],"js.TimelineLite.exportRoot()":["3ba39b4db90dc9ba-inherited-32bc2e8f667c28b7","3ba39b4db90dc9ba"],"[static] Seamlessly transfers tweens, timelines, [optionally] delayed calls root timeline TimelineLite perform advanced tasks a seemingly global basis affecting tweens/timelines that you create the export.":["3ba39b4db90dc9ba-inherited-32bc2e8f667c28b7","3ba39b4db90dc9ba"],"TweenLite.to()":["6c797b009a65972a"],"js.TweenLite.to()":["6c797b009a65972a"],"[static] Static method creating TweenLite instance animates destination values (from the current values).":["6c797b009a65972a"],"Animation.kill()":["9b20c27ddbcaa297"],"SimpleTimeline.reverse()":["652fc9fd0bc84808-inherited-211a71fb195b2819"],"TweenPlugin":["16d64b5b1b82fde8"],"js.TweenPlugin":["16d64b5b1b82fde8"],"TimelineLite.play()":["a8b5fe1cfbc57740-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"TweenMax.set()":["04a1993cebf0c4d6"],"js.TweenMax.set()":["04a1993cebf0c4d6"],"[static] Immediately sets properties target - essentially zero-duration to() tween a intuitive name.":["04a1993cebf0c4d6","f9978ca8a660abe5"],"TimelineMax.tweenFromTo()":["a5a0e939a1e15082"],"js.TimelineMax.tweenFromTo()":["a5a0e939a1e15082"],"Creates linear tween essentially scrubs playhead a time label time or label stops.":["a5a0e939a1e15082"],"TweenLite.duration()":["560295553a39dad1-inherited-52db442320b34fc1"],"DrawSVGPlugin":["2433928b0e0f6cc4"],"js.DrawSVGPlugin":["2433928b0e0f6cc4"],"DrawSVGPlugin progressively reveal (or hide) stroke SVG <path>, <line>, <polyline>, <polygon>, <rect>, <ellipse> you animate outward the center of the stroke (or position/segment). It controlling the stroke-dashoffset.":["2433928b0e0f6cc4"],"SteppedEase.config()":["c9842efb11f4c87a"],"js.SteppedEase.config()":["c9842efb11f4c87a"],"[static] Permits customization ease (defining number of steps).":["c9842efb11f4c87a"],"CustomBounce.getRatio()":["02cf505adaa3c1db-inherited-19160c04837df0bb"],"Cubic.easeIn":["3abce597eeda187e"],"js.Cubic.easeIn":["3abce597eeda187e"],"TweenMax.ticker":["0840452593dd9b59"],"js.TweenMax.ticker":["0840452593dd9b59"],"TimelineLite.data":["fd0b8307fd5118c6-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"TimelineMax.TimelineMax()":["7d83cb2ee0afc5e8"],"js.TimelineMax.TimelineMax()":["7d83cb2ee0afc5e8"],"Constructor.":["7d83cb2ee0afc5e8"],"Back.easeIn":["18e2a901c1ec4b19"],"js.Back.easeIn":["18e2a901c1ec4b19"],"[static] Eases overshoot, initially dipping starting accelerating the end.":["18e2a901c1ec4b19"],"TimelineLite.render()":["0891734c6084b33c-inherited-2b3bb68a78e65fe7"],"Bounce":["aa9969ee39687902"],"js.Bounce":["aa9969ee39687902"],"Eases, bouncing beginning (easeIn), the (easeOut), (easeInOut).":["aa9969ee39687902"],"CSSRulePlugin":["3d0f25beac1906b4"],"js.CSSRulePlugin":["3d0f25beac1906b4"],"SimpleTimeline.totalTime()":["37d58fccb2afe6a1-inherited-211a71fb195b2819"],"TimelineMax.addPause()":["b15c1fc9e7c9418c-inherited-32bc2e8f667c28b7"],"js.TimelineLite.addPause()":["b15c1fc9e7c9418c-inherited-32bc2e8f667c28b7","b15c1fc9e7c9418c"],"Inserts special callback pauses playback timeline a time label.":["b15c1fc9e7c9418c-inherited-32bc2e8f667c28b7","b15c1fc9e7c9418c"],"Elastic.easeIn":["37e6c3b703353a69"],"js.Elastic.easeIn":["37e6c3b703353a69"],"[static] Eases sine wave starts slowly accelerates time":["37e6c3b703353a69"],"Power3":["f8a990bb64a897ea"],"js.Power3":["f8a990bb64a897ea"],"Provides easeIn, easeOut, easeInOut power (or strength) 3 identical Quart with a intuitive name. The more power, more exaggerated the easing effect. Using a numeric approach the experimenting easier.":["f8a990bb64a897ea"],"SimpleTimeline.pause()":["96fc1d850d4a51e6-inherited-211a71fb195b2819"],"TimelineMax.totalDuration()":["60dac61dd3210643"],"js.TimelineMax.totalDuration()":["60dac61dd3210643"],"[override] Gets sets total duration the timeline seconds (or frames frames-based timelines) including repeats or repeatDelays.":["60dac61dd3210643"],"TweenMax.updateTo()":["149cf67b4ca81773"],"js.TweenMax.updateTo()":["149cf67b4ca81773"],"Updates tweening values fly seamlessly change the tween in-progress.":["149cf67b4ca81773"],"TweenMax.from()":["0d0b160bf173886b"],"js.TweenMax.from()":["0d0b160bf173886b"],"[static] Static method creating TweenMax instance tweens - define BEGINNING values the current values the destination values great for animating objects the screen you set initially the you them the the tween and animate elsewhere.":["0d0b160bf173886b"],"PixiPlugin.parseColor()":["43cdb51b9b63b1b9"],"TimelineMax.currentLabel()":["6265da364503c653"],"js.TimelineMax.currentLabel()":["6265da364503c653"],"Gets closest label the current time, or jumps label (behavior depends or pass a parameter to the method).":["6265da364503c653"],"TimelineLite.recent()":["d4204b8f13ae9009"],"js.TimelineLite.recent()":["d4204b8f13ae9009","d4204b8f13ae9009-inherited-32bc2e8f667c28b7"],"Returns added child tween/timeline/callback position the timeline. ":["d4204b8f13ae9009","d4204b8f13ae9009-inherited-32bc2e8f667c28b7"],"Power2.easeOut":["b2858d09588f2384"],"js.Power2.easeOut":["b2858d09588f2384"],"ScrambleTextPlugin":["357645cd3e630097"],"js.ScrambleTextPlugin":["357645cd3e630097"],"Scrambles text DOM element randomized characters, refreshing randomized characters regular intervals gradually revealing new text the the tween. Great decryption effects.":["357645cd3e630097"],"RoughEase.getRatio()":["4c00a0ea1a2df967"],"js.RoughEase.getRatio()":["4c00a0ea1a2df967"],"Draggable.scrollProxy":["0f6ea912f8ed3cf7"],"js.Draggable.scrollProxy":["0f6ea912f8ed3cf7"],"[read-only] A special object created type:&quot;scroll&quot; (or &quot;scrollTop&quot; &quot;scrollLeft&quot;) Draggables; object manages scrolling behavior, applying the transforms or margins accomplish overscrolling necessary.":["0f6ea912f8ed3cf7"],"Draggable.applyBounds()":["ac73f647a485bd9f"],"js.Draggable.applyBounds()":["ac73f647a485bd9f"],"Immediately updates applies bounds, ensuring target element the bounds (if defined).":["ac73f647a485bd9f"],"Draggable.timeSinceDrag()":["6254d7797a9f3826"],"js.Draggable.timeSinceDrag()":["6254d7797a9f3826"],"Returns time (in seconds) elapsed the drag ended - situations skip actions drag occurred.":["6254d7797a9f3826"],"TweenMax.repeatDelay()":["86085ac31cb14a44"],"js.TweenMax.repeatDelay()":["86085ac31cb14a44"],"Gets sets amount time seconds (or frames frames-based tweens) repeats.":["86085ac31cb14a44"],"TweenMax.paused()":["15ad1f9068bff51f-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"Bounce.easeInOut":["012753da17253cb9"],"js.Bounce.easeInOut":["012753da17253cb9"],"[static] Bounces increasing degree center the ease, eases out, bouncing the (decreasing in degree the end).":["012753da17253cb9"],"TimelineLite":["2b3bb68a78e65fe7"],"js.TimelineLite":["2b3bb68a78e65fe7"],"TimelineLite lightweight, intuitive timeline class building managing sequences TweenLite, TweenMax, TimelineLite, and/or TimelineMax instances. You of a TimelineLite instance a container place tweens (or timelines) of time.":["2b3bb68a78e65fe7"],"Core":["8510bec84f8f5ab3"],"EaseLookup.find()":["ac38f7748fba8a28"],"js.EaseLookup.find()":["ac38f7748fba8a28"],"[static] Finds easing function (String), &quot;easeOutStrong&quot;.":["ac38f7748fba8a28"],"CustomEase":["1315d24279922963"],"js.CustomEase":["1315d24279922963"],"Allows create literally **ANY** ease simply drawing Ease Visualizer by copying/pasting SVG path. Unlimited control points. ":["1315d24279922963"],"SimpleTimeline.time()":["9c2d24c127d9ebc7-inherited-211a71fb195b2819"],"TimelineLite.staggerFromTo()":["f125e9affad597cc"],"js.TimelineLite.staggerFromTo()":["f125e9affad597cc","f125e9affad597cc-inherited-32bc2e8f667c28b7"],"Tweens array targets common set of values, staggers start times a amount of time, creating an evenly-spaced sequence a surprisingly small amount of code.":["f125e9affad597cc","f125e9affad597cc-inherited-32bc2e8f667c28b7"],"TweenMax.duration()":["560295553a39dad1-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"TimelineMax.kill()":["9b20c27ddbcaa297-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"TweenLite.reverse()":["652fc9fd0bc84808-inherited-52db442320b34fc1"],"SlowMo.ease":["ba16ab89ebee23c0"],"js.SlowMo.ease":["ba16ab89ebee23c0"],"Power4":["c5344f5dcfcf49a3"],"js.Power4":["c5344f5dcfcf49a3"],"Provides easeIn, easeOut, easeInOut power (or strength) 4 identical Quint and Strong with a intuitive name. The more power, more exaggerated the easing effect. Using a numeric approach the experimenting easier.":["c5344f5dcfcf49a3"],"TweenMax.endTime()":["ac42870b8c3fb694-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"SplitText.revert()":["ccf8d9233484488a"],"js.SplitText.revert()":["ccf8d9233484488a"],"Reverts original content (the innerHTML the split).":["ccf8d9233484488a"],"TimelineMax.fromTo()":["ab22a377935cb849-inherited-32bc2e8f667c28b7"],"js.TimelineLite.fromTo()":["ab22a377935cb849-inherited-32bc2e8f667c28b7","ab22a377935cb849"],"Adds TweenLite.fromTo() tween the timeline - a convenience method accomplishes the add( TweenLite.fromTo(...) ) code.":["ab22a377935cb849-inherited-32bc2e8f667c28b7","ab22a377935cb849"],"TimelineLite.restart()":["db54f293b92ce54b-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"TweenLite.onOverwrite":["b030a6a5f8623c77"],"SplitText.chars":["0ea9e67b512c6662"],"js.SplitText.chars":["0ea9e67b512c6662"],"An array characters&#039; raw DOM elements split apart.":["0ea9e67b512c6662"],"SlowMo":["830525841e3dd3cb"],"js.SlowMo":["830525841e3dd3cb"],"SlowMo configurable ease produces a slow-motion effect that decelerates initially, moves linearly a portion ease (which choose) then accelerates the end; it&#039;s great for effects zooming text the screen, smoothly moving long for people read it, and then zooming it the screen":["830525841e3dd3cb"],"TweenLite.fromTo()":["ed553a5b6c412a65"],"js.TweenLite.fromTo()":["ed553a5b6c412a65"],"[static] Static method creating TweenLite instance define starting values (as opposed to to() and from() tweens based the target&#039;s current values the other).":["ed553a5b6c412a65"],"Bounce.easeIn":["507a069e7c771a21"],"js.Bounce.easeIn":["507a069e7c771a21"],"[static] Bounces slightly first, greater degree time, accelerating ease progresses.":["507a069e7c771a21"],"Cubic":["cb31e7d72b0e7b00"],"js.Cubic":["cb31e7d72b0e7b00"],"Provides easeIn, easeOut, easeInOut power (or strength) 2 identical Power2 ease. The power, the more exaggerated the easing effect. Using a numeric approach Power2 of Cubic experimenting easier and the code reads more intuitively.":["cb31e7d72b0e7b00"],"Cubic.easeOut":["f6d4c1c141e1b351"],"js.Cubic.easeOut":["f6d4c1c141e1b351"],"SimpleTimeline.invalidate()":["b634b21b470a9e55-inherited-211a71fb195b2819"],"js.Animation.invalidate()":["b634b21b470a9e55-inherited-211a71fb195b2819","b634b21b470a9e55"],"Clears initialization data (like starting/ending values tweens) if, example, restart tween reverting to any previously recorded starting values.":["b634b21b470a9e55-inherited-211a71fb195b2819","b634b21b470a9e55"],"ThrowPropsPlugin.defaultResistance":["d0e776e5281dcb6c"],"js.ThrowPropsPlugin.defaultResistance":["d0e776e5281dcb6c"],"[static] The default resistance calculate long tweening property (or properties) to to rest the static ThrowPropsPlugin.to() ThrowPropsPlugin.calculateTweenDuration() methods.":["d0e776e5281dcb6c"],"TweenLite.totalTime()":["37d58fccb2afe6a1-inherited-52db442320b34fc1"],"Power4.easeIn":["db8d74151be49b20"],"js.Power4.easeIn":["db8d74151be49b20"],"TimelineLite.shiftChildren()":["021452ff672b0275"],"js.TimelineLite.shiftChildren()":["021452ff672b0275","021452ff672b0275-inherited-32bc2e8f667c28b7"],"Shifts startTime the timeline&#039;s children amount optionally adjusts labels too.":["021452ff672b0275","021452ff672b0275-inherited-32bc2e8f667c28b7"],"SimpleTimeline.timeScale()":["7334cca40467aa44-inherited-211a71fb195b2819"],"Draggable.endRotation":["5402bf6985777c02"],"js.Draggable.endRotation":["5402bf6985777c02"],"The rotation Draggable instance calculated as the mouse/touch is released drag, meaning predict precisely land after a throwProps flick.":["5402bf6985777c02"],"TweenLite.pause()":["96fc1d850d4a51e6-inherited-52db442320b34fc1"],"Quad.easeOut":["c9e6d8a4b4e56614"],"js.Quad.easeOut":["c9e6d8a4b4e56614"],"Ease":["ced2d2c7aaaa4d5f"],"js.Ease":["ced2d2c7aaaa4d5f"],"TimelineMax.vars":["1d9a881066fb186e-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"Draggable.hitTest()":["ffe7905a70b61f73","ffc1eae92622a822"],"js.Draggable.hitTest()":["ffe7905a70b61f73","ffc1eae92622a822"],"Provides easy test target element overlaps element (or the mouse position) to threshold [optionally] define.":["ffe7905a70b61f73","ffc1eae92622a822"],"Animation.Animation()":["6ef668a9f15ebadd"],"js.Animation.Animation()":["6ef668a9f15ebadd"],"TimelineMax.removeLabel()":["e124272392141d4f-inherited-32bc2e8f667c28b7"],"js.TimelineLite.removeLabel()":["e124272392141d4f-inherited-32bc2e8f667c28b7","e124272392141d4f"],"Removes label timeline returns the time label.":["e124272392141d4f-inherited-32bc2e8f667c28b7","e124272392141d4f"],"TimelineMax.startTime()":["e646e51de97ab747-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"CustomWiggle.get()":["24e00423129f1300-inherited-681f9501cd7f99b3"],"SteppedEase.getRatio()":["1299db89651318f1"],"js.SteppedEase.getRatio()":["1299db89651318f1"],"TweenLite.set()":["f9978ca8a660abe5"],"js.TweenLite.set()":["f9978ca8a660abe5"],"Animation.reversed()":["d708d783bf75b7f9"],"CustomWiggle.getSVGData()":["b387c2e659d8f05e-inherited-681f9501cd7f99b3"],"VelocityTracker.target":["57b9279b6277c124"],"js.VelocityTracker.target":["57b9279b6277c124"],"Returns target object the VelocityTracker associated.":["57b9279b6277c124"],"SteppedEase.SteppedEase()":["5022798f02602b73"],"js.SteppedEase.SteppedEase()":["5022798f02602b73"],"SimpleTimeline.resume()":["d185bba975b21413-inherited-211a71fb195b2819"],"Draggable.autoScroll":["b64a6a3ccee6d6f8"],"js.Draggable.autoScroll":["b64a6a3ccee6d6f8"],"To enable auto-scrolling Draggable dragged 40px edge of a scrollable container, set autoScroll a non-zero value, 1 is normal speed, 2 is double-speed, etc. (you number). For a intuitive/natural feel, scroll faster mouse/touch closer to the edge. The default is 0 (no auto-scrolling).":["b64a6a3ccee6d6f8"],"Draggable.pointerY":["16158325892ff508"],"js.Draggable.pointerY":["16158325892ff508"],"[read-only] The (vertical) position pointer (mouse touch) the Draggable&#039;s event (like event.pageY).":["16158325892ff508"],"Animation.isActive()":["cdfc78d10c0d9317"],"Circ":["723964a4fd3ac4af"],"js.Circ":["723964a4fd3ac4af"],"Eases abrupt change velocity beginning (easeIn), the (easeOut), (easeInOut).":["723964a4fd3ac4af"],"Back.easeOut":["633ffc00de2e0c33"],"js.Back.easeOut":["633ffc00de2e0c33"],"[static] Eases overshoot.":["633ffc00de2e0c33"],"Expo":["fe7727d7fa29b16b"],"js.Expo":["fe7727d7fa29b16b"],"Eases strong fashion beginning (easeIn), the (easeOut), (easeInOut).":["fe7727d7fa29b16b"],"TweenMax.getTweensOf()":["c100119126b4d17b"],"js.TweenMax.getTweensOf()":["c100119126b4d17b"],"CustomBounce.get()":["24e00423129f1300-inherited-19160c04837df0bb"],"CustomBounce.getSVGData()":["b387c2e659d8f05e-inherited-19160c04837df0bb"],"Power0.easeIn":["1d489de3c6de961d"],"js.Power0.easeIn":["1d489de3c6de961d"],"[static] Eases power 0 (linear).":["1d489de3c6de961d","18fc5255c4712aae"],"TweenMax.totalDuration()":["8b14bde95693efa6"],"js.TweenMax.totalDuration()":["8b14bde95693efa6"],"[override] Gets sets total duration the tween seconds (or frames frames-based tweens) including repeats or repeatDelays.":["8b14bde95693efa6"],"TweenLite.time()":["9c2d24c127d9ebc7-inherited-52db442320b34fc1"],"VelocityTracker.isTracking()":["c573b4d50cc3ef87"],"js.VelocityTracker.isTracking()":["c573b4d50cc3ef87"],"[static] Allows discern velocity target of properties tracked (typically initiated the VelocityTracker.track() method).":["c573b4d50cc3ef87"],"VelocityTracker.isTrackingProp()":["eee6bf3e1eda7652"],"js.VelocityTracker.isTrackingProp()":["eee6bf3e1eda7652"],"Allows discern velocity property tracked.":["eee6bf3e1eda7652"],"TweenMax.seek()":["b6d7efcbb07722e0-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"Power2.easeIn":["0cad0bf3209f5092"],"js.Power2.easeIn":["0cad0bf3209f5092"],"TimelineLite.startTime()":["e646e51de97ab747-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"TimelineLite.removeLabel()":["e124272392141d4f"],"Animation.resume()":["d185bba975b21413"],"TimelineLite.vars":["1d9a881066fb186e-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"CustomWiggle":["681f9501cd7f99b3"],"js.CustomWiggle":["681f9501cd7f99b3"],"Creates highly configurable wiggle eases.":["681f9501cd7f99b3"],"SimpleTimeline.isActive()":["cdfc78d10c0d9317-inherited-211a71fb195b2819"],"Strong.easeIn":["7e1eddf0750f462e"],"js.Strong.easeIn":["7e1eddf0750f462e"],"TweenMax.delay()":["f35957809b52dfd2-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"TweenMax.globalTimeScale()":["9e2dfbcd4b851bdb"],"js.TweenMax.globalTimeScale()":["9e2dfbcd4b851bdb"],"Gets sets global timeScale multiplier affects ALL animations equally. This is a great globally speed or slow animations once.":["9e2dfbcd4b851bdb"],"Draggable.update()":["2c9525d38d4cdb74"],"js.Draggable.update()":["2c9525d38d4cdb74"],"Updates Draggable&#039;s properties reflect the target element&#039;s current position.":["2c9525d38d4cdb74"],"Sine":["07392828b060a423"],"js.Sine":["07392828b060a423"],"Eases power beginning (easeIn), the (easeOut), (easeInOut).":["07392828b060a423"],"RoughEase.config()":["677955a5f3bdfcb4"],"js.RoughEase.config()":["677955a5f3bdfcb4"],"SimpleTimeline.reversed()":["d708d783bf75b7f9-inherited-211a71fb195b2819"],"VelocityTracker":["eb1821730d324359"],"js.VelocityTracker":["eb1821730d324359"],"TimelineMax.getLabelBefore()":["38ba67959f173bc5"],"js.TimelineMax.getLabelBefore()":["38ba67959f173bc5"],"Returns previous label (if any) occurs the time parameter.":["38ba67959f173bc5"],"Animation.timeScale()":["7334cca40467aa44"],"TimelineMax.shiftChildren()":["021452ff672b0275-inherited-32bc2e8f667c28b7"],"TweenLite.timeScale()":["7334cca40467aa44-inherited-52db442320b34fc1"],"Animation.invalidate()":["b634b21b470a9e55"],"Bounce.easeOut":["dec74fd87bb63197"],"js.Bounce.easeOut":["dec74fd87bb63197"],"[static] Eases out, bouncing end.":["dec74fd87bb63197"],"TimelineLite.TimelineLite()":["cc4d1686bf20a1c4"],"js.TimelineLite.TimelineLite()":["cc4d1686bf20a1c4"],"CustomBounce":["19160c04837df0bb"],"js.CustomBounce":["19160c04837df0bb"],"Configure bounce ease squash stretch":["19160c04837df0bb"],"MorphSVGPlugin.pathDataToBezier()":["ce25d7004a81e18d"],"js.MorphSVGPlugin.pathDataToBezier()":["ce25d7004a81e18d"],"Converts SVG &amp;lt;path&amp;gt; data array cubic Bezier points fed into BezierPlugin-based tween.":["ce25d7004a81e18d"],"ThrowPropsPlugin.untrack()":["d938e1f03eee893f"],"js.ThrowPropsPlugin.untrack()":["d938e1f03eee893f"],"[static] Stops tracking velocity properties (or properties of object), initiated the track() method.":["d938e1f03eee893f","08358b2af1bc5b64"],"TimelineLite.fromTo()":["ab22a377935cb849"],"TweenLite.target":["d502fa3af383145d"],"Sine.easeOut":["84e7a26232a0339f"],"js.Sine.easeOut":["84e7a26232a0339f"],"[static] Eases slight deceleration.":["84e7a26232a0339f"],"TimelineMax.repeatDelay()":["99a791cc5bc34c40"],"js.TimelineMax.repeatDelay()":["99a791cc5bc34c40"],"Gets sets amount time seconds (or frames frames-based timelines) repeats.<br />\r\n":["99a791cc5bc34c40"],"TimelineLite.totalDuration()":["e6e77ed616cdbcd0"],"js.TimelineLite.totalDuration()":["e6e77ed616cdbcd0"],"[override] Gets timeline&#039;s total duration or, setter, adjusts the timeline&#039;s timeScale fit the duration.":["e6e77ed616cdbcd0"],"Quint.easeInOut":["edeb564de2d4abf1"],"js.Quint.easeInOut":["edeb564de2d4abf1"],"TweenLite.resume()":["d185bba975b21413-inherited-52db442320b34fc1"],"TweenMax.delayedCall()":["6f77f2839c53472f"],"js.TweenMax.delayedCall()":["6f77f2839c53472f"],"DirectionalRotationPlugin":["0a6e62faf0a53059"],"js.DirectionalRotationPlugin":["0a6e62faf0a53059"],"Tweens rotation-related property direction.":["0a6e62faf0a53059"],"Power4.easeOut":["c059f076d35f6211"],"js.Power4.easeOut":["c059f076d35f6211"],"TimelineMax.restart()":["db54f293b92ce54b-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"Linear.getRatio()":["0bce3fc5ec3e76b0"],"js.Linear.getRatio()":["0bce3fc5ec3e76b0"],"Draggable.disable()":["8f3a18936cc397fe"],"js.Draggable.disable()":["8f3a18936cc397fe"],"Disables Draggable instance dragged anymore (unless enable() called).":["8f3a18936cc397fe"],"TweenMax.eventCallback()":["7e0c6f182a9fa2db-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"ThrowPropsPlugin.track()":["bdf13585fd570814"],"js.ThrowPropsPlugin.track()":["bdf13585fd570814"],"[static] Allows velocity properties automatically tracked you ThrowPropsPlugin tweens access that data internally of manually calculating feeding it tween.":["bdf13585fd570814"],"Animation.time()":["9c2d24c127d9ebc7"],"Draggable.startDrag()":["5184540aa5ce91bc"],"js.Draggable.startDrag()":["5184540aa5ce91bc"],"This rarely used, force Draggable dragging calling startDrag() passing the original mouse touch event initiated - is Draggable inspect that event information pageX, pageY, target, etc.":["5184540aa5ce91bc"],"Circ.easeOut":["81c4e914fdcf1d68"],"js.Circ.easeOut":["81c4e914fdcf1d68"],"[static] Eases abrupt change velocity.":["81c4e914fdcf1d68"],"TweenMax.timeline":["4e8b086407f4fb2c-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"Elastic":["f7f7759fe81fd22f"],"js.Elastic":["f7f7759fe81fd22f"],"Eases elastic effect beginning (easeIn), the (easeOut), (easeInOut).":["f7f7759fe81fd22f"],"TimelineLite.kill()":["9b20c27ddbcaa297-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"SplitText.words":["1a7ff1a6dbe597e1"],"js.SplitText.words":["1a7ff1a6dbe597e1"],"An array words&#039; raw DOM elements split apart.":["1a7ff1a6dbe597e1"],"TimelineMax.staggerFromTo()":["f125e9affad597cc-inherited-32bc2e8f667c28b7"],"VelocityTracker.removeProp()":["daa700409ba890e6"],"js.VelocityTracker.removeProp()":["daa700409ba890e6"],"Stops tracking property":["daa700409ba890e6"],"Draggable.Draggable()":["c75d3c448b8ad479"],"js.Draggable.Draggable()":["c75d3c448b8ad479"],"Contstructor":["c75d3c448b8ad479"],"Draggable.rotation":["b8156aef40ce441e"],"js.Draggable.rotation":["b8156aef40ce441e"],"[read-only] [only applies type:&quot;rotation&quot;] The current rotation (in degrees) Draggable instance.":["b8156aef40ce441e"],"TimelineLite.addPause()":["b15c1fc9e7c9418c"],"Draggable.vars":["f9e5f083d2f0f14a"],"js.Draggable.vars":["f9e5f083d2f0f14a"],"The vars object passed constructor stores configuration variables type, bounds, onPress, onDrag, etc.":["f9e5f083d2f0f14a"],"Animation.pause()":["96fc1d850d4a51e6"],"TweenLite.isActive()":["cdfc78d10c0d9317-inherited-52db442320b34fc1"],"Draggable.getDirection()":["dfba312d84ede771"],"js.Draggable.getDirection()":["dfba312d84ede771"],"Returns direction (right | left | | | left-up | left-down | right-up | right-down) measured the drag started (the default) the moment-by-moment velocity, or proximity element define. ":["dfba312d84ede771"],"TimelineMax.progress()":["e87195ea10d96698"],"js.TimelineMax.progress()":["e87195ea10d96698"],"[override] Gets sets timeline&#039;s progress 0 1 indicating the position the virtual playhead (excluding repeats) 0 is the beginning, 0.5 is halfway complete, and 1 is complete.":["e87195ea10d96698"],"Power1":["22c860af2d1dbbcb"],"js.Power1":["22c860af2d1dbbcb"],"Provides easeIn, easeOut, easeInOut power (or strength) 1 identical Quad with a intuitive name. The more power, more exaggerated the easing effect. Using a numeric approach the experimenting easier.":["22c860af2d1dbbcb"],"TweenLite.reversed()":["d708d783bf75b7f9-inherited-52db442320b34fc1"],"TweenMax.getAllTweens()":["c799d800af33aa6a"],"js.TweenMax.getAllTweens()":["c799d800af33aa6a"],"[static] Returns array tweens (and optionally timelines too, excluding root timelines).":["c799d800af33aa6a"],"SplitText.SplitText()":["17115da28b40d682"],"js.SplitText.SplitText()":["17115da28b40d682"],"Creates SplitText object.":["17115da28b40d682"],"TimelineMax.recent()":["d4204b8f13ae9009-inherited-32bc2e8f667c28b7"],"TweenLite.defaultEase":["4dd34ae7cc4df452"],"Quad":["91943bd05ded63bb"],"js.Quad":["91943bd05ded63bb"],"Provides easeIn, easeOut, easeInOut power (or strength) 1 identical Power1 ease. The power, the more exaggerated the easing effect. Using a numeric approach Power1 of Quad experimenting easier and the code reads more intuitively.":["91943bd05ded63bb"],"TimelineMax.data":["fd0b8307fd5118c6-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"Sine.easeIn":["c87b724c588c3884"],"js.Sine.easeIn":["c87b724c588c3884"],"[static] Eases slight acceleration.":["c87b724c588c3884"],"VelocityTracker.getVelocity()":["6c68e64d09faf182"],"js.VelocityTracker.getVelocity()":["6c68e64d09faf182"],"Returns current velocity the property.":["6c68e64d09faf182"],"TweenMax.staggerTo()":["65d8dcc6c6cabcbd"],"js.TweenMax.staggerTo()":["65d8dcc6c6cabcbd"],"[static] Tweens array targets common set of destination values, staggers start times a amount of time, creating an evenly-spaced sequence a surprisingly small amount of code.":["65d8dcc6c6cabcbd"],"ThrowPropsPlugin.getVelocity()":["b218bb5d19f9b9ab"],"js.ThrowPropsPlugin.getVelocity()":["b218bb5d19f9b9ab"],"[static] Returns current velocity the property target object (only works started tracking the property the ThrowPropsPlugin.track() VelocityTracker.track() method).":["b218bb5d19f9b9ab"],"TweenMax.defaultOverwrite":["e7f6ebafb382a8cc-inherited-7eebd4b20adcaecc"],"Animation.totalTime()":["37d58fccb2afe6a1"],"RoughEase":["57d33bbbf0c4c2c2"],"js.RoughEase":["57d33bbbf0c4c2c2"],"Most easing equations give smooth, gradual transition start values, RoughEase easy a rough, jagged effect instead, get an evenly-spaced back-and-forth movement you prefer.":["57d33bbbf0c4c2c2"],"EaselPlugin":["4c5618b6dde74bd2"],"js.EaselPlugin":["4c5618b6dde74bd2"],"TweenMax.play()":["a8b5fe1cfbc57740-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"Strong.easeInOut":["72e083392b443236"],"js.Strong.easeInOut":["72e083392b443236"],"Power1.easeOut":["ef46b9dc2d56104b"],"js.Power1.easeOut":["ef46b9dc2d56104b"],"ScrollToPlugin":["13df7c5ab97ce05d"],"js.ScrollToPlugin":["13df7c5ab97ce05d"],"Animates scroll position the window DOM element.":["13df7c5ab97ce05d"],"TweenMax.killChildTweensOf()":["109ea284ffe68190"],"js.TweenMax.killChildTweensOf()":["109ea284ffe68190"],"[static] Kills tweens children of DOM element, optionally forcing completion first.":["109ea284ffe68190"],"BezierPlugin.cubicToQuadratic()":["6928377908c249d2"],"js.BezierPlugin.cubicToQuadratic()":["6928377908c249d2"],"[static] Using fixed midpoint approach, return array 4 quadratic Beziers closely approximates the cubic Bezier data provided.":["6928377908c249d2"],"Linear.easeIn":["c1554e19d34a341f"],"js.Linear.easeIn":["c1554e19d34a341f"],"TimelineMax.render()":["0891734c6084b33c-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"RoughEase.ease":["cca5b92a93c91acc"],"js.RoughEase.ease":["cca5b92a93c91acc"],"CSSRulePlugin.getRule()":["53a700a8824a8cfc"],"js.CSSRulePlugin.getRule()":["53a700a8824a8cfc"],"[static] Provides simple find style sheet object a selector &quot;.myClass&quot; &quot;#myID&quot;.":["53a700a8824a8cfc"],"TweenMax.data":["fd0b8307fd5118c6-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"SimpleTimeline.SimpleTimeline()":["52466ef8d6a25e07"],"js.SimpleTimeline.SimpleTimeline()":["52466ef8d6a25e07"],"ThrowPropsPlugin.calculateTweenDuration()":["c33fc0b177a91675"],"js.ThrowPropsPlugin.calculateTweenDuration()":["c33fc0b177a91675"],"[static] Analyzes throwProps variables (like initial velocities, max/min values, resistance) and determines duration.":["c33fc0b177a91675"],"TimelineLite.exportRoot()":["3ba39b4db90dc9ba"],"SimpleTimeline.kill()":["9b20c27ddbcaa297-inherited-211a71fb195b2819"],"Animation.reverse()":["652fc9fd0bc84808"],"VelocityTracker.untrack()":["08358b2af1bc5b64"],"js.VelocityTracker.untrack()":["08358b2af1bc5b64"],"Power3.easeOut":["ae081698f5101041"],"js.Power3.easeOut":["ae081698f5101041"],"TimelineMax.play()":["a8b5fe1cfbc57740-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"TimelineLite.remove()":["d49e46f2e8270a08"],"ThrowPropsPlugin.calculateChange()":["4c659aa2524b1945"],"js.ThrowPropsPlugin.calculateChange()":["4c659aa2524b1945"],"[static] Determines amount change velocity, easing equation, the duration the tween last.":["4c659aa2524b1945"],"ThrowPropsPlugin.calculateDuration()":["c272ebc90f1e65c8"],"js.ThrowPropsPlugin.calculateDuration()":["c272ebc90f1e65c8"],"[static] Calculates duration (in seconds) move start to value the initial velocity, decelerating to a easing equation (like Strong.easeOut).":["c272ebc90f1e65c8"],"TweenMax.resumeAll()":["1989613671fc0074"],"js.TweenMax.resumeAll()":["1989613671fc0074"],"[static] [deprecated] Resumes paused tweens and/or delayedCalls/callbacks and/or timelines.":["1989613671fc0074"],"TimelineMax.removeCallBack()":["ba03755004151a9a"],"js.TimelineMax.removeCallBack()":["ba03755004151a9a"],"Removes callback a position.":["ba03755004151a9a"],"Elastic.easeInOut":["f5fe26060be2a85b"],"js.Elastic.easeInOut":["f5fe26060be2a85b"],"[static] Eases sine wave starts slowly, accelerates then decelerates time.":["f5fe26060be2a85b"],"TimelineLite.add()":["fb3630bc7fd65dd2"],"TweenMax.yoyo()":["2810d7a52bbf48a8"],"js.TweenMax.yoyo()":["2810d7a52bbf48a8"],"Gets sets tween&#039;s yoyo state, true the tween forth, alternating and repeat.":["2810d7a52bbf48a8"],"Circ.easeIn":["f4af2f5c548d7079"],"js.Circ.easeIn":["f4af2f5c548d7079"],"[static] Eases abrupt change in velocity.":["f4af2f5c548d7079","fc5f2508dcf8e967"],"Quad.easeInOut":["f878aae254cc6211"],"js.Quad.easeInOut":["f878aae254cc6211"],"Draggable.tween":["2000fd9279daa4a5"],"js.Draggable.tween":["2000fd9279daa4a5"],"[read-only] The TweenLite instance created as mouse (or touch) released (when throwProps is true) - check duration pause/resume or change its timeScale or you want.":["2000fd9279daa4a5"],"PixiPlugin":["b40bb6a3fc06daa2"],"Pixi, PixiJS, pixi.js, PixiPlugin, plugin, GSAP":["b40bb6a3fc06daa2"],"PixiPlugin easier animate PixiJS, canvas-based rendering library.":["b40bb6a3fc06daa2"],"Quint.easeOut":["7824c0e53c911bbe"],"js.Quint.easeOut":["7824c0e53c911bbe"],"Draggable.get()":["ca2e5cc16169165a"],"js.Draggable.get()":["ca2e5cc16169165a"],"[static] Provides easy Draggable instance that&#039;s DOM element.":["ca2e5cc16169165a"],"TimelineMax.repeat()":["01b34bc2697e9225"],"js.TimelineMax.repeat()":["01b34bc2697e9225"],"Gets sets number times the timeline repeat iteration.":["01b34bc2697e9225"],"TimelineLite.reversed()":["d708d783bf75b7f9-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"TimelineMax.timeline":["4e8b086407f4fb2c-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"Draggable.x":["ec3421d82ab1ddd0"],"js.Draggable.x":["ec3421d82ab1ddd0"],"[read-only] The current (horizontal) position Draggable instance.":["ec3421d82ab1ddd0"],"Quart.easeInOut":["eeeab17448587b02"],"js.Quart.easeInOut":["eeeab17448587b02"],"TweenMax.lagSmoothing()":["01cb3301c2555b06-inherited-7eebd4b20adcaecc"],"SimpleTimeline.vars":["1d9a881066fb186e-inherited-211a71fb195b2819"],"TimelineLite.isActive()":["cdfc78d10c0d9317-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"SimpleTimeline.startTime()":["e646e51de97ab747-inherited-211a71fb195b2819"],"TimelineMax.eventCallback()":["7e0c6f182a9fa2db-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"Power2.easeInOut":["79c15370e7fe03de"],"js.Power2.easeInOut":["79c15370e7fe03de"],"EaseLookup":["09af4edb7491fd9e"],"js.EaseLookup":["09af4edb7491fd9e"],"EaseLookup enables find easing function (String), &quot;strongEaseOut&quot; loading XML data in Strings to be translated to native function references.":["09af4edb7491fd9e"],"SteppedEase":["0879a53eb4051ccf"],"js.SteppedEase":["0879a53eb4051ccf"],"Most easing equations give smooth, gradual transition start values, SteppedEase easy define a specific number steps the transition take.":["0879a53eb4051ccf"],"TweenLite.selector":["00b17703b89cfb4b"],"TweenMax.restart()":["db54f293b92ce54b-inherited-52db442320b34fc1-inherited-7eebd4b20adcaecc"],"Draggable.endDrag()":["b0b2e6f3a9e49b0a"],"js.Draggable.endDrag()":["b0b2e6f3a9e49b0a"],"You force Draggable immediately stop interactively dragging calling endDrag() passing the original mouse touch event initiated the stop - Draggable inspect that event information pageX, pageY, target, etc.":["b0b2e6f3a9e49b0a"],"Back":["ea91e06b445f4ac7"],"js.Back":["ea91e06b445f4ac7"],"Eases overshoot beginning (easeIn), the (easeOut), (easeInOut).":["ea91e06b445f4ac7"],"TimelineMax.staggerTo()":["85fd7bd3a68921cd-inherited-32bc2e8f667c28b7"],"VelocityTracker.getByTarget()":["b179b41393276f8a"],"js.VelocityTracker.getByTarget()":["b179b41393276f8a"],"[static] Returns VelocityTracker object.":["b179b41393276f8a"],"TweenMax.totalProgress()":["3783d0a065069766"],"js.TweenMax.totalProgress()":["3783d0a065069766"],"totalProgress()":["3783d0a065069766"],"Draggable.maxX":["8efb834a28d647b3"],"js.Draggable.maxX":["8efb834a28d647b3"],"[read-only] When bounds applied, maxX refers maximum &quot;legal&quot; the horizontal property (either &quot;x&quot; &quot;left&quot;, depending type the Draggable is).":["8efb834a28d647b3"],"RaphaelPlugin":["5b09c1a25bf1df7e"],"js.RaphaelPlugin":["5b09c1a25bf1df7e"],"Animation.paused()":["15ad1f9068bff51f"],"TweenLite.TweenLite()":["7142cfd298705364"],"js.TweenLite.TweenLite()":["7142cfd298705364"],"TweenLite Constructor creates tween.":["7142cfd298705364"],"TimelineMax.staggerFrom()":["c67479a40fbed683-inherited-32bc2e8f667c28b7"],"TweenLite.kill()":["9b20c27ddbcaa297-inherited-52db442320b34fc1"],"SlowMo.SlowMo()":["ed459aa1a80c9521"],"js.SlowMo.SlowMo()":["ed459aa1a80c9521"],"TimelineMax.getLabelTime()":["6428cc1a8c9024c6-inherited-32bc2e8f667c28b7"],"TweenMax.killTweensOf()":["5520cb7c254b2de6"],"js.TweenMax.killTweensOf()":["5520cb7c254b2de6"],"[static] Kills tweens (or specific tweening properties) object the delayedCalls a particular function.":["5520cb7c254b2de6"],"Draggable.zIndex":["7ed7b01bbcfcd77c"],"js.Draggable.zIndex":["7ed7b01bbcfcd77c"],"[static] The starting zIndex applied default element pressed/touched (for positional types, &quot;x,y&quot;, &quot;top,left&quot;, etc.":["7ed7b01bbcfcd77c"],"PhysicsPropsPlugin":["447e2b0a637eb56f"],"js.PhysicsPropsPlugin":["447e2b0a637eb56f"],"Animation.duration()":["560295553a39dad1"],"Draggable.minX":["066a1985d52b529c"],"js.Draggable.minX":["066a1985d52b529c"],"[read-only] When bounds applied, minX refers minimum &quot;legal&quot; the horizontal property (either &quot;x&quot; &quot;left&quot;, depending type the Draggable is).<br />\r\n":["066a1985d52b529c"],"Animation.endTime()":["ac42870b8c3fb694"],"TimelineLite.timeScale()":["7334cca40467aa44-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"TweenMax.TweenMax()":["0443695353538039"],"js.TweenMax.TweenMax()":["0443695353538039"]," Constructor":["0443695353538039"],"Draggable.enabled()":["688b6ac671dbe69d"],"js.Draggable.enabled()":["688b6ac671dbe69d"],"Gets sets enabled state. ":["688b6ac671dbe69d"],"TimelineLite.resume()":["d185bba975b21413-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7"],"TimelineMax.delay()":["f35957809b52dfd2-inherited-211a71fb195b2819-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"SplitText.split()":["a4be9362b50f3a83"],"js.SplitText.split()":["a4be9362b50f3a83"],"[static] Splits text the target element(s) the config properties.":["a4be9362b50f3a83"],"TimelineMax.totalProgress()":["5f4508325a2e0985"],"js.TimelineMax.totalProgress()":["5f4508325a2e0985"],"[override] Gets sets timeline&#039;s total progress 0 1 indicating the position the virtual playhead (including repeats) 0 is the beginning, 0.5 is at the halfway point, and 1 is at the (complete).":["5f4508325a2e0985"],"TweenMax.isTweening()":["748acc1d9c528534"],"js.TweenMax.isTweening()":["748acc1d9c528534"],"[static] Reports object actively tweening.":["748acc1d9c528534"],"TimelineMax.tweenTo()":["7be1802b524c8f27"],"js.TimelineMax.tweenTo()":["7be1802b524c8f27"],"Creates linear tween essentially scrubs playhead a time label stops.":["7be1802b524c8f27"],"Power0.easeOut":["18fc5255c4712aae"],"js.Power0.easeOut":["18fc5255c4712aae"],"ThrowPropsPlugin":["091b70448f18262e"],"js.ThrowPropsPlugin":["091b70448f18262e"],"ThrowPropsPlugin smoothly glide property to stop, honoring initial velocity as applying optional restrictions value.":["091b70448f18262e"],"Draggable":["27ffcb75af705686"],"js.Draggable":["27ffcb75af705686"],"Drag":["27ffcb75af705686"],"Draggable surprisingly simple virtually DOM element draggable, spinnable, tossable, flick-scrollable mouse and/or touch events, Draggable integrates beautifully (and optionally) withThrowPropsPlugin user flick and the motion decelerate smoothly based momentum.":["27ffcb75af705686"],"TimelineMax.smoothChildTiming":["180106cf49a52891-inherited-2b3bb68a78e65fe7-inherited-32bc2e8f667c28b7"],"AttrPlugin":["27db5e20e8bbb9ae"],"js.AttrPlugin":["27db5e20e8bbb9ae"],"Tweens numeric <code>attribute</code> DOM element, <code>cx</code> <code><circle cx=\"100\" cy=\"0\" r=\"50\"/></code>":["27db5e20e8bbb9ae"],"SimpleTimeline.restart()":["db54f293b92ce54b-inherited-211a71fb195b2819"],"TimelineLite.call()":["d19482f5b1cfd929"],"Expo.easeIn":["114305ffa6e0ca96"],"js.Expo.easeIn":["114305ffa6e0ca96"],"[static] Eases strong fashion starting slowly accelerating.":["114305ffa6e0ca96"],"TimelineMax.duration()":["e949a7537e48535a-inherited-32bc2e8f667c28b7"],"Linear.easeOut":["e96a5eb3d0ae1709"],"js.Linear.easeOut":["e96a5eb3d0ae1709"],"TweenMax":["7eebd4b20adcaecc"],"js.TweenMax":["7eebd4b20adcaecc"],"TweenMax extends TweenLite, adding (but non-essential) features repeat(), repeatDelay(), yoyo(), updateTo(), more. It includes many extra plugins default, making extremely full-featured. Any plugins work TweenLite too, TweenMax saves the step of loading the common like CSSPlugin, RoundPropsPlugin, BezierPlugin, AttrPlugin, DirectionalRotationPlugin as EasePack, TimelineLite, and TimelineMax.":["7eebd4b20adcaecc"],"TweenMax.progress()":["9555ceafd00d82bd"],"js.TweenMax.progress()":["9555ceafd00d82bd"],"[override] Gets sets tween&#039;s progress 0 1 indicating the position the virtual playhead (excluding repeats) 0 is the beginning, 0.5 is halfway complete, and 1 is complete.":["9555ceafd00d82bd"],"TweenLite.vars":["1d9a881066fb186e-inherited-52db442320b34fc1"],"TweenMax.render()":["a03b81c2162c5416-inherited-7eebd4b20adcaecc"],"Circ.easeInOut":["fc5f2508dcf8e967"],"js.Circ.easeInOut":["fc5f2508dcf8e967"],"TweenLite.startTime()":["e646e51de97ab747-inherited-52db442320b34fc1"],"TweenMax.staggerFrom()":["7e006fa58303b1cc"],"js.TweenMax.staggerFrom()":["7e006fa58303b1cc"],"[static] Tweens array targets common set of destination values (using current values the destination), staggers start times a amount of time, creating an evenly-spaced sequence a surprisingly small amount of code.":["7e006fa58303b1cc"],"ThrowPropsPlugin.isTracking()":["56a562fa808f415e"],"js.ThrowPropsPlugin.isTracking()":["56a562fa808f415e"],"[static] Allows discern velocity target of properties tracked (typically initiated the track() method).":["56a562fa808f415e"]}}}